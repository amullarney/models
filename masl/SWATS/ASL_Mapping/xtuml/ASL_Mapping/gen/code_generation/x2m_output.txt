domain,ASL_Mapping,ASL_Mapping,,,,,,
object,Another_Right,,,,,,,
object,,,,,,,,
object,BIG_Object,,,,,,,
object,,,,,,,,
object,Default_Vals,,,,,,,
object,,,,,,,,
object,Left,,,,,,,
object,,,,,,,,
object,LeftRight,,,,,,,
object,,,,,,,,
object,Nested_FOR,,,,,,,
object,,,,,,,,
object,Nested_IF,,,,,,,
object,,,,,,,,
object,Nested_LOOP,,,,,,,
object,,,,,,,,
object,ObjectA,,,,,,,
object,,,,,,,,
object,ObjectB,,,,,,,
object,,,,,,,,
object,Object_FOR,,,,,,,
object,,,,,,,,
object,Object_IF,,,,,,,
object,,,,,,,,
object,Object_LOGIC,,,,,,,
object,,,,,,,,
object,Object_LOOP,,,,,,,
object,,,,,,,,
object,Object_NESTED,,,,,,,
object,,,,,,,,
object,Object_SWITCH,,,,,,,
object,,,,,,,,
object,Processor,,,,,,,
object,,,,,,,,
object,Report_Data,,,,,,,
object,,,,,,,,
object,Right,,,,,,,
object,,,,,,,,
type,Simple_Structure_Type,private,,,,,,
structure,Simple_Structure_Type,,,,,,,
member,Simple_Int,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
member,Simple_Real,,,,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
member,Simple_String,,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
member,Simple_Boolean,,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
member,Simple_Enum,,,,,,,
typeref,Enum,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
structure,,,,,,,,
type,,,,,,,,
type,Enum,private,,,,,,
enumeration,Enum,,,,,,,
enumerator,Richard,,,,,,,
enumerator,,,,,,,,
enumerator,John,,,,,,,
enumerator,,,,,,,,
enumerator,Mark,,,,,,,
enumerator,,,,,,,,
enumerator,Frank,,,,,,,
enumerator,,,,,,,,
enumerator,Goran,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
description, Enumerated attribute containing person's names.%0A,,,,,,,
type,,,,,,,,
type,Processor_Id_Type,public,,,,,,
enumeration,Processor_Id_Type,,,,,,,
enumerator,TCA,,,,,,,
enumerator,,,,,,,,
enumerator,CCA,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
type,,,,,,,,
routine,ASL_Mapping,,private,Perform_ASL_Mapping_Tests,1,,,
codeblock,# ---------------------------------------------------------------------------%0A# Peform IF tests%0A# ---------------------------------------------------------------------------%0A%0A   Start_Test_Value = 1%0A%0A   [Start_Test_Value] = objIF1:do_if_test[Start_Test_Value]%0A%0A# ---------------------------------------------------------------------------%0A# Perform FOR tests%0A# ---------------------------------------------------------------------------%0A%0A   [Start_Test_Value] = objFOR1:do_for_test[Start_Test_Value]%0A%0A# ---------------------------------------------------------------------------%0A# Perform LOOP tests%0A# Create several instance of the Object_LOOP%0A# ---------------------------------------------------------------------------%0A%0A   temp = 1%0A   loop%0A      newLOOP = create Object_LOOP with ReferenceLOOP = temp &\%0A                                        ResultA       = 0 %0A      temp = temp + 1%0A      breakif temp > 5%0A   endloop%0A%0A   # Invoke as an object based synch. serv.%0A%0A   # Start verification%0A   an_instanceLOOP = find-one Object_LOOP%0A%0A   [Start_Test_Value] = objLOOP1:do_loop_tests[an_instanceLOOP%2C Start_Test_Value] %0A%0A# ---------------------------------------------------------------------------%0A# Perform SWITCH tests%0A# ---------------------------------------------------------------------------%0A%0A  temp = 1%0A%0A   # Define ONE instance of Object_SWITCH%0A   newSWITCH = create Object_SWITCH with ReferenceSWITCH = temp &\%0A                                         IntegerAttr     = 1    &\%0A                                         ResultA         = 0%0A%0A   # Define TWO instance of Object_SWITCH with IntegerAttr = 2%0A   loop%0A      newSWITCH = create Object_SWITCH with ReferenceSWITCH = temp &\%0A                                            IntegerAttr    = 2     &\%0A                                            ResultA        = 0%0A      temp = temp + 1%0A      breakif temp = 3%0A   endloop%0A%0A   # Define THREE instance of Object_SWITCH with IntegerAttr = 3%0A   loop%0A      newSWITCH = create Object_SWITCH with ReferenceSWITCH = temp &\%0A                                            IntegerAttr     = 3    &\%0A                                            ResultA         = 0%0A      temp = temp + 1%0A      breakif temp = 6%0A   endloop%0A%0A   # Define FOUR instance of Object_SWITCH with IntegerAttr = 4%0A   # During TEST1 these instances of Object_SWITCH should not be affected.%0A   loop%0A      newSWITCH = create Object_SWITCH with ReferenceSWITCH = temp &\%0A                                            IntegerAttr     = 4    &\%0A                                            ResultA         = 0%0A      temp = temp + 1%0A      breakif temp = 10%0A   endloop%0A%0A   [Start_Test_Value] = objSWITCH1:do_switch[Start_Test_Value]%0A%0A# ---------------------------------------------------------------------------%0A# Perform ARITHMETIC/LOGIC tests%0A# ---------------------------------------------------------------------------%0A%0A   # Define ONE instance of Object_LOGIC%0A%0A   # Date and Time attributes not supported by S/W architecture%0A%0A   #                                    TimeAttr = 14:45:34         &\%0A   #                                    DateAttr = 1996.03.02       &\%0A%0A   an_instanceLOGIC = create Object_LOGIC with ReferenceLOGIC  = 1              &\%0A                                               IntegerAttr     = 0              &\%0A                                               EnumerationAttr = 'Richard'      &\%0A                                               BooleanAttr     = TRUE           &\%0A                                               ResultA         = 0              &\%0A                                               TextAttr        = "Verification" &\%0A                                               RealAttr        = 0.0%0A%0A   [Start_Test_Value] = objLOGIC1:do_arithmetic_and_logic[an_instanceLOGIC%2C Start_Test_Value]%0A%0A# ---------------------------------------------------------------------------%0A# Check that attribute assignment happens correctly in an object service%0A# ---------------------------------------------------------------------------%0A%0A   [Start_Test_Value] = objLOGIC2:Perform_Attribute_Assignment[Start_Test_Value]%0A%0A# ---------------------------------------------------------------------------%0A# As above%2C but for an active object.%0A# ---------------------------------------------------------------------------%0A%0A   [Start_Test_Value] = ASL_Mapping8::Create_Processor [Start_Test_Value%2C'CCA']%0A%0A# ---------------------------------------------------------------------------%0A# As above%2C but for an active object.%0A# ---------------------------------------------------------------------------%0A%0A   [Start_Test_Value] = PROC1:Create_Processor [Start_Test_Value%2C 'TCA']%0A%0A# ---------------------------------------------------------------------------%0A# Perform NESTED tests%0A# ---------------------------------------------------------------------------%0A%0A   # Create several instances of the Object_NESTED%0A   temp = 1%0A   loop%0A      newNESTED = create Object_NESTED  with ReferenceNESTED = temp &\%0A                                             ResultA         = 0    &\%0A                                             ResultB         = 0%0A      temp = temp + 1%0A      # Tests performed on these instances would have pushed%0A      # the final result out of range of defined base_integer_type%0A      # range of +- 2000. So reduce number of instances to 4.%0A      breakif temp > 5%0A%0A   endloop%0A%0A   [Start_Test_Value] = objNESTED1:do_nested_tests[Start_Test_Value]%0A%0A# ---------------------------------------------------------------------------%0A# Perform NESTED IF tests%0A# ---------------------------------------------------------------------------%0A%0A   # Nest IF statements%2C without logical conditions.%0A   an_instanceNESTED_IF = create Nested_IF with ReferenceNstIF = 1 &\%0A                                           ResultA             = 0 %0A%0A   # Start the test%0A   [Start_Test_Value] = NstIF1:do_nested_if[an_instanceNESTED_IF%2C Start_Test_Value]%0A%0A# ---------------------------------------------------------------------------%0A# Perform NESTED FOR tests%0A# ---------------------------------------------------------------------------%0A%0A   # Nest FOR statements.%0A%0A   Count = 1%0A   loop%0A      newNstFOR = create Nested_FOR with ReferenceNstFOR = Count &\%0A                                         ResultA         = 0 %0A      Count = Count + 1%0A      breakif Count = 6%0A   endloop%0A%0A   # Start the test%0A   [Start_Test_Value] = NstFOR1:do_nested_for[Start_Test_Value] %0A%0A# ---------------------------------------------------------------------------%0A# Perform NESTED LOOP tests%0A# ---------------------------------------------------------------------------%0A%0A   # Nest LOOP statements.%0A%0A   an_instanceNESTED_LOOP = create Nested_LOOP with ReferenceNstLOOP = 1 & \%0A                                                    ResultA          = 0%0A%0A   # Start the test%0A   [Start_Test_Value] = NstLOOP1:do_nested_loops[an_instanceNESTED_LOOP%2C Start_Test_Value]%0A%0A# ---------------------------------------------------------------------------%0A# Perform BASIC ASL tests%0A# ---------------------------------------------------------------------------%0A%0A   # basic ASL operations by function call%0A%0A   # Start the test%0A   [Start_Test_Value] = ASL_Mapping1::basic_asl_enumeration[Start_Test_Value]%0A%0A%0A# ---------------------------------------------------------------------------%0A# Divide by zero tests%0A# ---------------------------------------------------------------------------%0A%0A   [Start_Test_Value] = ASL_Mapping2::basic_asl_divide_by_zero[Start_Test_Value]%0A%0A# ---------------------------------------------------------------------------%0A# Overflow underflow tests%0A# ---------------------------------------------------------------------------%0A%0A   [Start_Test_Value] = ASL_Mapping6::Test_Large_Numbers[Start_Test_Value]%0A%0A# ---------------------------------------------------------------------------%0A# Check that attribute assignment happens correctly in a domain service%0A# ---------------------------------------------------------------------------%0A%0A   [Start_Test_Value] = ASL_Mapping7::Perform_Attribute_Assignment[Start_Test_Value]%0A%0A# ---------------------------------------------------------------------------%0A# Peramater order tests%0A# ---------------------------------------------------------------------------%0A%0A   A_Small_Number = 1%0A   [Start_Test_Value] = ASL_Mapping9::Check_Parameters[Start_Test_Value%2CA_Small_Number]%0A%0A# ---------------------------------------------------------------------------%0A# Base types checks%0A# ---------------------------------------------------------------------------%0A%0A   [Start_Test_Value] = ASL_Mapping10::Check_Base_Types[Start_Test_Value]%0A%0A# ---------------------------------------------------------------------------%0A# Default values checks%0A# ---------------------------------------------------------------------------%0A%0A   [Start_Test_Value] = ASL_Mapping11::Check_Defaults[Start_Test_Value]%0A%0A# ---------------------------------------------------------------------------%0A# AND and OR checks%0A# ---------------------------------------------------------------------------%0A%0A   [Start_Test_Value] = ASL_Mapping12::And_Or_Checks[Start_Test_Value]%0A%0A# ---------------------------------------------------------------------------%0A#  Comment checks%0A# ---------------------------------------------------------------------------%0A%0A   [Start_Test_Value] = ASL_Mapping13::Comment_Checks[Start_Test_Value]%0A%0A# ---------------------------------------------------------------------------%0A# Statment continuation checks%0A# ---------------------------------------------------------------------------%0A %0A   [Start_Test_Value] = ASL_Mapping14::Check_Continuation[Start_Test_Value]%0A%0A# ---------------------------------------------------------------------------%0A# Attribute default values checks%0A# ---------------------------------------------------------------------------%0A%0A   [Start_Test_Value] = DV1:Default_Vals_In_Object[Start_Test_Value]%0A%0A# ---------------------------------------------------------------------------%0A# Test identifying and non-identifying attributes%0A# ---------------------------------------------------------------------------%0A%0A   [Start_Test_Value] = ASL_Mapping15::Check_Identifiers[Start_Test_Value]%0A%0A# ---------------------------------------------------------------------------%0A# Test that Native C inserts work correctly%0A# ---------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Start_Test_Value%2C "1103-0000-01-1211"%2C "ASL Mapping"%2C "Native inline code"%2C "C Inline code"]%0A   [] = RPT8:Specify_Requid[Start_Test_Value%2C "1101-0000-01-0109"]%0A%0A   [Host]= WAW1:What_Env[]%0A%0A   Test_Var = 0%0A%0A   $INLINE%0A      Test_Var = 100;%0A   $ENDINLINE   %0A%0A   if Host = "ISIM" then%0A%0A      if Test_Var = 100 then%0A         [] = RPT2:Test_Passed["C Inline code"%2C Start_Test_Value%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["C Inline code"%2C Start_Test_Value%2C Test_Var]%0A      endif%0A%0A   else%0A%0A      if Test_Var = 0 then%0A         [] = RPT2:Test_Passed["C Inline code"%2C Start_Test_Value%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["C Inline code"%2C Start_Test_Value%2C Test_Var]%0A      endif%0A%0A   endif%0A%0A   Start_Test_Value = Start_Test_Value + 1%0A%0A# ---------------------------------------------------------------------------%0A# Test that native Ada code works correctly%0A# ---------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Start_Test_Value%2C "1103-0000-01-1212"%2C "ASL Mapping"%2C "Native inline code"%2C "Ada Inline code"]%0A   [] = RPT8:Specify_Requid[Start_Test_Value%2C "1101-0000-01-0108"]%0A%0A   Test_Var = 0%0A%0A   #$ADA_INLINE%0A   #   Test_Var := 100;%0A   #$END_ADAINLINE%0A%0A    if Host = "ISIM" then%0A%0A      if Test_Var = 0 then%0A         [] = RPT2:Test_Passed["C Inline code"%2C Start_Test_Value%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["C Inline code"%2C Start_Test_Value%2C Test_Var]%0A      endif%0A%0A   else%0A%0A      if Test_Var = 100 then%0A         [] = RPT2:Test_Passed["Ada Inline code"%2C Start_Test_Value%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["Ada Inline code"%2C Start_Test_Value%2C Test_Var]%0A      endif%0A%0A   endif%0A%0A   Start_Test_Value = Start_Test_Value + 1%0A%0A# ---------------------------------------------------------------------------%0A# Check that iteration over sets works correctly%0A# ---------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Start_Test_Value%2C "1241-0000-01-1201"%2C "ASL Mapping"%2C "ASL Support"%2C "Iteration over a set"]%0A%0A   objIf1  = create Object_IF with ReferenceIF = 100%0A   objIf2  = create Object_IF with ReferenceIF = 101%0A   objIf3  = create Object_IF with ReferenceIF = 102%0A   objIf4  = create Object_IF with ReferenceIF = 103%0A   objIf5  = create Object_IF with ReferenceIF = 104%0A   objIf6  = create Object_IF with ReferenceIF = 105%0A   objIf7  = create Object_IF with ReferenceIF = 106%0A   objIf8  = create Object_IF with ReferenceIF = 107%0A   objIf9  = create Object_IF with ReferenceIF = 108%0A   objIf10 = create Object_IF with ReferenceIF = 109%0A%0A   {SetF} = find Object_IF where ReferenceIF >= 100%0A%0A   Total = countof {SetF}%0A   Count = 0%0A%0A   for InstF in {SetF} do%0A      Count = Count + 1%0A   endfor%0A%0A   if Total = Count then%0A      [] = RPT2:Test_Passed["Iteration over set"%2C Start_Test_Value%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Iteration over set"%2C Start_Test_Value%2C Count]%0A   endif      %0A%0A   Start_Test_Value = Start_Test_Value + 1%0A%0A# ---------------------------------------------------------------------------%0A# Create unique - This is proved by inspecting the relevant WACA generated %0A#                 code%0A# ---------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Start_Test_Value%2C "1241-0000-01-1213"%2C "ASL Mapping"%2C "ASL Support"%2C "Create Unique"]%0A   [] = RPT5:Test_Text[Start_Test_Value%2C "Proved by inspection"]%0A   [] = RPT2:Test_Passed["Create_Unique"%2C Start_Test_Value%2C 0]%0A%0A   Start_Test_Value = Start_Test_Value + 1%0A%0A# ---------------------------------------------------------------------------%0A# Perform tests on an unfeasibly large object%0A# ---------------------------------------------------------------------------%0A%0A   [Start_Test_Value] = ASL_Mapping5::Test_Unfeasibly_Large_Object[Start_Test_Value]%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,1,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Perform ASL Mapping Tests%0A,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,private,Start_ASL_Mapping_Tests,2,,,
codeblock,[] = ASL_Mapping3::Create_Report_Data[]%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,2,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Start ASL Mapping Tests%0A,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,private,Finish_ASL_Mapping_Tests,3,,,
codeblock,# [] = ASL_Mapping4::Delete_Report_Data[]%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,3,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Finish ASL Mapping Tests%0A,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,basic_asl_enumeration,1,,,
parameter,Test_Start,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Final_Test,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,# -------------------------------------------------------------------------------------------%0A#%0A# The ASL <switch> statement shall be supported%0A# 1103-0000-01-0411%0A#%0A# The ASL shall support user defined types%0A# 1103-0000-01-0312%0A#%0A# -------------------------------------------------------------------------------------------%0A%0A# -------------------------------------------------------------------------------------------%0A# TEST 1 - Check to ensure that local variables are correctly assigned%0A# -------------------------------------------------------------------------------------------%0A%0A   Test = Test_Start%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0311"%2C "ASL Mapping"%2C "Basic ASL DBSS"%2C  "Local variable assignment"]%0A%0A   Has_Failed = FALSE%0A%0A   an_int = 1%0A   a_real = 2.3%0A%0A   # Check that 32 characters can handled%0A   some_alpha_text   = "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEF"%0A   lower_case_text   = "abcdefghijklmnopqrstuvwxyzabcdef"%0A   some_numeric_text = "12345678901234567890123456789012"%0A%0A   # Check that all characters are permitted.%0A   an_asterisk    = "*"%0A   an_at          = "@"%0A   a_minus        = "-"%0A   an_equals      = "="%0A   a_plus         = "+"%0A   an_underscore  = "_"%0A   a_slash        = "/"%0A   a_question     = "?"%0A   a_fullstop     = "."%0A   a_comma        = "%2C"%0A   an_ampersand   = "&"%0A   left_bracket   = "("%0A   right_bracket  = ")"%0A%0A   a_colon        = ":"%0A   a_tilda        = "~"%0A   a_pipe         = "|"%0A   an_exclamation = "!"%0A   a_single_quote = "'"%0A   a_left_tick    = "`"%0A   a_power_operator       = "^"%0A   a_left_square_bracket  = "["%0A   a_rigt_square_bracket  = "]"%0A   a_left_curly_bracket   = "{"%0A   a_right_curley_bracket = "}"%0A   a_hash = "#"%0A%0A   #{%0A     The following are not permitted : %0A%0A     a_backslash    = "\"%0A     a_percent      = "%25"%0A     a_semi_colon   = ";"%0A%0A   }#%0A%0A   a_bool     = FALSE%0A   other_int  = an_int%0A   other_real = a_real%0A   other_text = some_alpha_text%0A   other_bool = a_bool%0A%0A   if an_int = other_int then%0A %0A      if a_real = other_real then%0A%0A         if a_bool = other_bool then%0A%0A            if some_alpha_text != other_text then%0A               Has_Failed   = TRUE%0A               Failure_Code = -10%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -30%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -40%0A   endif%0A%0A   if Has_Failed then%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C Failure_Code]%0A   else%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A# -------------------------------------------------------------------------------------------%0A# TEST 2 - Check that enumerated types are being used correctly%0A# -------------------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0312"%2C "ASL Mapping"%2C "Basic ASL DBSS"%2C "Enumerated Types"]%0A%0A   Has_Failed = FALSE%0A%0A   an_enum of Enum = 'John'%0A%0A   switch an_enum%0A%0A      case 'John'%0A         Has_Failed = FALSE%0A%0A      case 'Richard'%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A%0A      default%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A%0A   endswitch%0A%0A   if Has_Failed then%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C Failure_Code]%0A   else%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A# -------------------------------------------------------------------------------------------%0A# TEST 3 - Check that enumerated types are being used correctly%0A# -------------------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0312"%2C "ASL Mapping"%2C "Basic ASL DBSS"%2C "Enumerated Types"]%0A%0A   Has_Failed = FALSE%0A%0A   an_enum of Enum = 'Richard'%0A%0A   switch an_enum%0A%0A      case 'John'%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A%0A      case 'Richard'%0A         Has_Failed = FALSE%0A   %0A      default%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A%0A   endswitch%0A%0A   if Has_Failed then%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C Failure_Code]%0A   else%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   endif%0A%0A   Test = Test + 1%0A   %0A# End Test 3%0A%0A# -------------------------------------------------------------------------------------------%0A# TEST 4 enumerated types%0A# -------------------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0312"%2C "ASL Mapping"%2C "Basic ASL DBSS"%2C "Enumerated Types"]%0A%0A   Has_Failed = FALSE%0A%0A   an_enum of Enum = 'Goran'%0A%0A   switch an_enum%0A%0A      case 'John'%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A%0A      case 'Richard'%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A%0A      default%0A         Has_Failed = FALSE%0A%0A   endswitch%0A%0A   if Has_Failed then%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C Failure_Code]%0A   else%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A# -------------------------------------------------------------------------------------------%0A# Test 5 - Simple structure assignment%0A# -------------------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "ASL Mapping"%2C "Basic ASL DBSS"%2C"Simple structure"]%0A%0A   Has_Failed   = FALSE%0A   Failure_Code = -10%0A%0A   {Simple_Structure} is Simple_Structure_Type%0A%0A   Control_Integer      = 10%0A   Control_Real         = 10.0%0A   Control_String       = "Ten"%0A   Control_Boolean      = TRUE%0A   Control_Enum of Enum = 'Richard'%0A%0A   Control_Instance_Handle = find-one Object_IF%0A%0A   append [Control_Integer%2C Control_Real%2C Control_String%2C \ %0A           Control_Boolean%2C Control_Enum] to \%0A           {Simple_Structure}%0A%0A   # Perform a test when unpacking the structure.%0A   # Note that instance handles may not be compared.%0A%0A   for [Local_Integer%2C Local_Real%2C Local_String%2C Local_Boolean%2C Local_Enum] in {Simple_Structure} do%0A%0A      if Local_Integer = Control_Integer then %0A%0A         if Local_Real = Control_Real    then%0A%0A            if Local_String = Control_String  then%0A%0A               if Local_Boolean = Control_Boolean then%0A%0A                  if Local_Enum != Control_Enum    then%0A                     Has_Failed   = TRUE%0A                     Failure_Code = -10%0A                  endif%0A%0A               else%0A                  Has_Failed   = TRUE%0A                  Failure_Code = -20%0A               endif%0A%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = -30%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -40%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -50%0A      endif%0A%0A   endfor%0A   %0A   if not Has_Failed then%0A      [] = RPT2:Test_Passed["Simple structure"%2C Test%2C  0]%0A   else%0A      [] = RPT3:Test_Failed["Simple_Structure"%2C Test%2C Failure_Code]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A#-------------------------------------------------------------------------------%0A%0AFinal_Test = Test%0A,,,,,,,
codeblock,,,,,,,,
description, This function test basic ASL operations on base types and enumerated types.%0A,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,basic_asl_divide_by_zero,2,,,
parameter,Test_Start,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Final_Test,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,# -------------------------------------------------------------------------------------------%0A#%0A# The following operators shall be supported: +%2C -%2C /%2C *%2C ^%2C unary - %0A# 1103-0000-01-0814%0A#%0A# -------------------------------------------------------------------------------------------%0A%0A   Test = Test_Start%0A%0A   [Host] = WAW1:What_Env[]%0A%0A# -------------------------------------------------------------------------------------------%0A# TEST 1 - Integer divide by zero tests%0A# -------------------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0814"%2C "ASL Mapping"%2C "Basic ASL DBSS"%2C "Divide by integer zero"]%0A%0A   int_zero      = 0%0A   an_int_value  = 10%0A   an_int_result = 0%0A%0A   if Host = "WACA" then%0A      Supported = TRUE%0A      an_int_result = (an_int_value / int_zero)%0A   else%0A      Supported = FALSE%0A   endif%0A%0A   # The result of a divide by zero is the result is set to 'last.%0A   # Since this is target dependant%2C a check for non-zero is the easiest option.%0A%0A   if Supported = TRUE then%0A%0A      if an_int_result != int_zero then %0A         [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A      endif%0A%0A   else%0A      [] = RPT4:Test_Unsupported[Test]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A# -------------------------------------------------------------------------------------------%0A# TEST 2 - Integer divide by zero tests%0A# -------------------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0814"%2C "ASL Mapping"%2C "Basic ASL DBSS"%2C "Negative divide by integer zero"]%0A%0A   int_zero      = 0%0A   an_int_value  = -10%0A   an_int_result = 0%0A%0A   if Host = "WACA" then%0A      Supported = TRUE%0A      an_int_result = (an_int_value / int_zero)%0A   else%0A      Supported = FALSE%0A   endif%0A%0A   # The result of a divide by zero is the result is set to 'last.%0A   # Since this is target dependant%2C a check for non-zero is the easiest option.%0A%0A   if Supported = TRUE then%0A%0A      if an_int_result != int_zero then %0A         [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A      endif%0A%0A   else%0A      [] = RPT4:Test_Unsupported[Test]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A# -------------------------------------------------------------------------------------------%0A# TEST 3 - Integer divide by zero tests%0A# -------------------------------------------------------------------------------------------      %0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0814"%2C "ASL Mapping"%2C "Basic ASL DBSS"%2C "Zero divided by integer zero"]%0A%0A   int_zero      = 0%0A   an_int_value  = 0%0A   an_int_result = 0%0A%0A   if Host = "WACA" then%0A      Supported = TRUE%0A      an_int_result = (an_int_value / int_zero)%0A   else%0A      Supported = FALSE%0A   endif%0A%0A   if Supported = TRUE then%0A%0A      if an_int_result = int_zero then %0A         [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A      endif%0A%0A   else%0A      [] = RPT4:Test_Unsupported [Test]%0A   endif  %0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A# -------------------------------------------------------------------------------------------%0A# TEST 4 - Real divide by zero tests%0A# -------------------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0814"%2C "ASL Mapping"%2C "Basic ASL DBSS"%2C "Divide by real zero"]%0A   %0A   real_zero        = 0.0%0A   a_real_value     = 10.0%0A   a_real_result    = 0.0%0A%0A   if Host = "WACA" then%0A      Supported = TRUE%0A      a_real_result = (a_real_value / real_zero)%0A   else%0A      Supported = FALSE%0A   endif%0A%0A   if Supported = TRUE then%0A%0A      if a_real_result != real_zero then %0A         [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A      endif%0A%0A   else%0A      [] = RPT4:Test_Unsupported[Test]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A# -------------------------------------------------------------------------------------------%0A# TEST 5 - Real divide by zero tests%0A# -------------------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0814"%2C "ASL Mapping"%2C "basic asl DBSS"%2C "Negative divide by real zero"]%0A%0A   real_zero        = 0.0%0A   a_real_value     = -10.0%0A   a_real_result    = 0.0%0A%0A   if Host = "WACA" then%0A      Supported = TRUE%0A      a_real_result = (a_real_value / real_zero)%0A   else%0A      Supported = FALSE%0A   endif%0A%0A   if Supported = TRUE then%0A%0A      if a_real_result != real_zero then %0A         [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A      endif%0A%0A   else%0A      [] = RPT4:Test_Unsupported[Test]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A# -------------------------------------------------------------------------------------------%0A# TEST 6 - Real divide by zero tests%0A# -------------------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0814"%2C "ASL Mapping"%2C "Basic ASL DBSS"%2C "Zero divided by real zero"]%0A%0A   real_zero        = 0.0%0A   a_real_value     = 0.0%0A   a_real_result    = 0.0%0A%0A   if Host = "WACA" then%0A      Supported = TRUE%0A      a_real_result = (a_real_value / real_zero)%0A   else%0A      Supported = FALSE%0A   endif%0A%0A   if Supported = TRUE then%0A%0A      if a_real_result = real_zero then %0A         [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A      endif%0A%0A   else%0A      [] = RPT4:Test_Unsupported[Test]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 6%0A%0A# ------------------------------------------------------------------------------%0A%0AFinal_Test = Test%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Create_Report_Data,3,,,
codeblock,# Find out of there already is one of these.%0A# It is not inconceivable that a report object still exists from a previous run.%0A# Report objects are not deleted at the end of a run%2C as certain events may%0A# still be en-queued.%0A%0Aold_report = find-one Report_Data%0A%0Aif old_report != UNDEFINED then%0A   delete old_report%0Aendif%0A%0AMy_Report = create unique Report_Data with Reported_Domain_Number = 0%0A%0A[] = RPT6:Domain_Test_Start["ASL Mapping"]%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Delete_Report_Data,4,,,
codeblock,[] = RPT7:Domain_Test_Finished["ASL Mapping"]%0A%0A# Do not delete the Report_Data object%2C as there may be still events in%0A# the queue.,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Test_Unfeasibly_Large_Object,5,,,
parameter,Start_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Finish_Test_Number,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,# -----------------------------------------------------------------------------------%0A# These series of test are to exmaine what happens when an object is larger than %0A# would reasonably be expected is created. Further test show what happens when %0A# said object is manipulated in various forms.%0A# These tests could be spread into a variety of domains%2C eg. find-and-sets%2C %0A# function-calls and others. But since creating such a big object is a pain%2C all %0A# these tests shall reside here for the big object.%0A# -----------------------------------------------------------------------------------%0A%0A# -----------------------------------------------------------------------------------%0A# Test 1 - Create the unfeasibly large object and see what may be done with it.%0A# -----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Start_Test_Number%2C "1103-0000-01-0511"%2C "ASL Mapping"%2C "BIG Object"%2C "Create big object"]%0A%0A   Unfeasibly_Large_Object = create BIG_Object with One          = Start_Test_Number &\%0A                                                    Two          = Start_Test_Number &\%0A                                                    Three        = Start_Test_Number &\%0A                                                    Four         = Start_Test_Number &\%0A                                                    Five         = Start_Test_Number &\%0A                                                    Six          = Start_Test_Number &\%0A                                                    Seven        = Start_Test_Number &\%0A                                                    Eight        = Start_Test_Number &\%0A                                                    Nine         = Start_Test_Number &\%0A                                                    Ten          = Start_Test_Number &\%0A                                                    Eleven       = Start_Test_Number &\%0A                                                    Twelve       = Start_Test_Number &\%0A                                                    Thirteen     = Start_Test_Number &\%0A                                                    Fourteen     = Start_Test_Number &\%0A                                                    Fifteen      = Start_Test_Number &\%0A                                                    Sixteen      = Start_Test_Number &\%0A                                                    Eighteen     = Start_Test_Number &\%0A                                                    Nineteen     = Start_Test_Number &\%0A                                                    Twenty       = Start_Test_Number &\%0A                                                    Twentyone    = Start_Test_Number &\%0A                                                    Twentytwo    = Start_Test_Number &\%0A                                                    Twentythree  = Start_Test_Number &\%0A                                                    Twentyfour   = Start_Test_Number &\%0A                                                    Twentyfive   = Start_Test_Number &\%0A                                                    Twentysix    = Start_Test_Number &\%0A                                                    Twentyseven  = Start_Test_Number &\%0A                                                    Twentyeight  = Start_Test_Number &\%0A                                                    Twentynine   = Start_Test_Number &\%0A                                                    Thirty       = Start_Test_Number &\%0A                                                    Thirtyone    = Start_Test_Number &\%0A                                                    Thirtytwo    = Start_Test_Number &\%0A                                                    Thirtythree  = Start_Test_Number &\%0A                                                    Thirtyfour   = Start_Test_Number &\%0A                                                    Thirtyfive   = Start_Test_Number &\%0A                                                    Thirtysix    = Start_Test_Number &\%0A                                                    Thirtyseven  = Start_Test_Number &\%0A                                                    Thirtyeight  = Start_Test_Number &\%0A                                                    Thirtynine   = Start_Test_Number &\%0A                                                    Forty        = Start_Test_Number &\%0A                                                    Fortyone     = Start_Test_Number &\%0A                                                    Fortytwo     = Start_Test_Number &\%0A                                                    Fortythree   = Start_Test_Number &\%0A                                                    Fortyfour    = Start_Test_Number &\%0A                                                    Fortyfive    = Start_Test_Number &\%0A                                                    Fortysix     = Start_Test_Number &\%0A                                                    Fortyseven   = Start_Test_Number &\%0A                                                    Fortyeight   = Start_Test_Number &\%0A                                                    Fortynine    = Start_Test_Number &\%0A                                                    Fifty        = Start_Test_Number &\%0A                                                    Fiftyone     = Start_Test_Number &\%0A                                                    Fiftytwo     = Start_Test_Number &\%0A                                                    Fiftythree   = Start_Test_Number &\%0A                                                    Fiftyfour    = Start_Test_Number &\%0A                                                    Fiftyfive    = Start_Test_Number &\%0A                                                    Fiftysix     = Start_Test_Number &\%0A                                                    Fiftyseven   = Start_Test_Number &\%0A                                                    Fiftyeight   = Start_Test_Number &\%0A                                                    Fiftynine    = Start_Test_Number &\%0A                                                    Sixty        = Start_Test_Number &\%0A                                                    Sixtyone     = Start_Test_Number &\%0A                                                    Sixtytwo     = Start_Test_Number &\%0A                                                    Sixtythree   = Start_Test_Number &\%0A                                                    Sixtyfour    = Start_Test_Number &\%0A                                                    Sixtyfive    = Start_Test_Number &\%0A                                                    Sixtysix     = Start_Test_Number &\%0A                                                    Sixtyseven   = Start_Test_Number &\%0A                                                    Sixtyeight   = Start_Test_Number &\%0A                                                    Sixtynine    = Start_Test_Number &\%0A                                                    Seventy      = Start_Test_Number &\%0A                                                    Seventyone   = Start_Test_Number &\%0A                                                    Seventytwo   = Start_Test_Number &\%0A                                                    Seventythree = Start_Test_Number &\%0A                                                    Seventyfour  = Start_Test_Number &\%0A                                                    Seventyfive  = Start_Test_Number &\%0A                                                    Seventysix   = Start_Test_Number &\%0A                                                    Seventyseven = Start_Test_Number &\%0A                                                    Seventyeight = Start_Test_Number &\%0A                                                    Seventynine  = Start_Test_Number &\%0A                                                    Eighty       = Start_Test_Number &\%0A                                                    Eightyone    = Start_Test_Number &\%0A                                                    Eightytwo    = Start_Test_Number &\%0A                                                    Eightythree  = Start_Test_Number &\%0A                                                    Eightyfour   = Start_Test_Number &\%0A                                                    Current_State = 'Idle_State'%0A%0A   if Unfeasibly_Large_Object != UNDEFINED then%0A      [] = RPT2:Test_Passed["Create Big Object"%2C Start_Test_Number%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Create Big Object"%2C Start_Test_Number%2C -10]%0A   endif%0A%0A   This_Test_Number = Start_Test_Number + 1%0A%0A# End Test 1%0A%0A# -----------------------------------------------------------------------------------%0A# Test 2 - Check to see that the attributes can be read from%0A# -----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "1103-0000-01-0522"%2C "ASL Mapping"%2C "BIG Object"%2C "Examine big object"]%0A%0A   if Unfeasibly_Large_Object != UNDEFINED then%0A%0A      if Unfeasibly_Large_Object.One        = Start_Test_Number &\%0A         Unfeasibly_Large_Object.Fortytwo   = Start_Test_Number &\%0A         Unfeasibly_Large_Object.Eightyfour = Start_Test_Number then%0A%0A         [] = RPT2:Test_Passed["Examine Big Object"%2C This_Test_Number%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["Examine Big Object"%2C This_Test_Number%2C -20]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Examine Big Object"%2C This_Test_Number%2C -10]%0A   endif%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 2%0A%0A# -----------------------------------------------------------------------------------%0A# Test 3 - Perform find-one on large object%0A# -----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "1103-0000-01-0544"%2C "ASL Mapping"%2C "BIG Object"%2C "Find-one big object"]%0A%0A   found_one_large_object = find-one BIG_Object%0A%0A   if found_one_large_object != UNDEFINED then%0A      [] = RPT2:Test_Passed["Find-One Big Object"%2C This_Test_Number%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Find-One Big Object"%2C This_Test_Number%2C -10]%0A   endif%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 3%0A%0A# -----------------------------------------------------------------------------------%0A# Test 4 - Check to see that the attributes can be read from%0A# -----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "1103-0000-01-0522"%2C "ASL Mapping"%2C "BIG Object"%2C "Examine found-one object"]%0A%0A   if found_one_large_object != UNDEFINED then%0A%0A      if found_one_large_object.One        = Start_Test_Number &\%0A         found_one_large_object.Fortytwo   = Start_Test_Number &\%0A         found_one_large_object.Eightyfour = Start_Test_Number then%0A%0A         [] = RPT2:Test_Passed["Examine Big Object"%2C This_Test_Number%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["Examine Big Object"%2C This_Test_Number%2C -20]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Examine Big Object"%2C This_Test_Number%2C -10]%0A   endif%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 4%0A%0A# -----------------------------------------------------------------------------------%0A# Test 5 - Perform find-one <object> where <boolean condition> on large object%0A# -----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "1103-0000-01-0545"%2C "ASL Mapping"%2C "BIG Object"%2C "Find-one where fully specifying big object"]%0A%0A   found_one_where_large_object = find-one BIG_Object where One          = Start_Test_Number &\%0A                                                            Two          = Start_Test_Number &\%0A                                                            Three        = Start_Test_Number &\%0A                                                            Four         = Start_Test_Number &\%0A                                                            Five         = Start_Test_Number &\%0A                                                            Six          = Start_Test_Number &\%0A                                                            Seven        = Start_Test_Number &\%0A                                                            Eight        = Start_Test_Number &\%0A                                                            Nine         = Start_Test_Number &\%0A                                                            Ten          = Start_Test_Number &\%0A                                                            Eleven       = Start_Test_Number &\%0A                                                            Twelve       = Start_Test_Number &\%0A                                                            Thirteen     = Start_Test_Number &\%0A                                                            Fourteen     = Start_Test_Number &\%0A                                                            Fifteen      = Start_Test_Number &\%0A                                                            Sixteen      = Start_Test_Number &\%0A                                                            Eighteen     = Start_Test_Number &\%0A                                                            Nineteen     = Start_Test_Number &\%0A                                                            Twenty       = Start_Test_Number &\%0A                                                            Twentyone    = Start_Test_Number &\%0A                                                            Twentytwo    = Start_Test_Number &\%0A                                                            Twentythree  = Start_Test_Number &\%0A                                                            Twentyfour   = Start_Test_Number &\%0A                                                            Twentyfive   = Start_Test_Number &\%0A                                                            Twentysix    = Start_Test_Number &\%0A                                                            Twentyseven  = Start_Test_Number &\%0A                                                            Twentyeight  = Start_Test_Number &\%0A                                                            Twentynine   = Start_Test_Number &\%0A                                                            Thirty       = Start_Test_Number &\%0A                                                            Thirtyone    = Start_Test_Number &\%0A                                                            Thirtytwo    = Start_Test_Number &\%0A                                                            Thirtythree  = Start_Test_Number &\%0A                                                            Thirtyfour   = Start_Test_Number &\%0A                                                            Thirtyfive   = Start_Test_Number &\%0A                                                            Thirtysix    = Start_Test_Number &\%0A                                                            Thirtyseven  = Start_Test_Number &\%0A                                                            Thirtyeight  = Start_Test_Number &\%0A                                                            Thirtynine   = Start_Test_Number &\%0A                                                            Forty        = Start_Test_Number %0A    %0A                                                            #Fortyone     = Start_Test_Number &\%0A                                                            #Fortytwo     = Start_Test_Number &\%0A                                                            #Fortythree   = Start_Test_Number &\%0A                                                            #Fortyfour    = Start_Test_Number &\%0A                                                            #Fortyfive    = Start_Test_Number &\%0A                                                            #Fortysix     = Start_Test_Number &\%0A                                                            #Fortyseven   = Start_Test_Number &\%0A                                                            #Fortyeight   = Start_Test_Number &\%0A                                                            #Fortynine    = Start_Test_Number &\%0A                                                            #Fifty        = Start_Test_Number &\ %0A                                                            #Fiftyone     = Start_Test_Number &\%0A                                                            #Fiftytwo     = Start_Test_Number &\%0A                                                            #Fiftythree   = Start_Test_Number &\%0A                                                            #Fiftyfour    = Start_Test_Number &\%0A                                                            #Fiftyfive    = Start_Test_Number &\%0A                                                            #Fiftysix     = Start_Test_Number &\%0A                                                            #Fiftyseven   = Start_Test_Number &\%0A                                                            #Fiftyeight   = Start_Test_Number &\%0A                                                            #Fiftynine    = Start_Test_Number &\%0A                                                            #Sixty        = Start_Test_Number &\%0A                                                            #Sixtyone     = Start_Test_Number &\%0A                                                            #Sixtytwo     = Start_Test_Number &\%0A                                                            #Sixtythree   = Start_Test_Number &\%0A                                                            #Sixtyfour    = Start_Test_Number &\%0A                                                            #Sixtyfive    = Start_Test_Number &\%0A                                                            #Sixtysix     = Start_Test_Number &\%0A                                                            #Sixtyseven   = Start_Test_Number &\%0A                                                            #Sixtyeight   = Start_Test_Number &\%0A                                                            #Sixtynine    = Start_Test_Number &\%0A                                                            #Seventy      = Start_Test_Number &\%0A                                                            #Seventyone   = Start_Test_Number &\%0A                                                            #Seventytwo   = Start_Test_Number &\%0A                                                            #Seventythree = Start_Test_Number &\%0A                                                            #Seventyfour  = Start_Test_Number &\%0A                                                            #Seventyfive  = Start_Test_Number &\ %0A                                                            #Seventysix   = Start_Test_Number &\%0A                                                            #Seventyseven = Start_Test_Number &\%0A                                                            #Seventyeight = Start_Test_Number &\%0A                                                            #Seventynine  = Start_Test_Number &\%0A                                                            #Eighty       = Start_Test_Number &\%0A                                                            #Eightyone    = Start_Test_Number &\%0A                                                            #Eightytwo    = Start_Test_Number &\%0A                                                            #Eightythree  = Start_Test_Number &\%0A                                                            #Eightyfour   = Start_Test_Number%0A   %0A   if found_one_where_large_object != UNDEFINED then%0A      [] = RPT2:Test_Passed["Find One Where Object"%2C This_Test_Number%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Find One Where Object"%2C This_Test_Number%2C -10]%0A  endif%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 5%0A%0A# -----------------------------------------------------------------------------------%0A# Test 6 - Check to see that the attributes can be read from%0A# -----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "1103-0000-01-0522"%2C "ASL Mapping"%2C "BIG Object"%2C "Examine found-one where object"]%0A%0A   if found_one_where_large_object != UNDEFINED then%0A%0A      if found_one_where_large_object.One        = Start_Test_Number &\%0A         found_one_where_large_object.Fortytwo   = Start_Test_Number &\%0A         found_one_where_large_object.Eightyfour = Start_Test_Number then%0A%0A         [] = RPT2:Test_Passed["Examine Found One Where Object"%2C This_Test_Number%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["Examine found one where object"%2C This_Test_Number%2C -20]%0A      endif%0A %0A   else%0A      [] = RPT3:Test_Failed["Examine found one where object"%2C This_Test_Number%2C -10]%0A   endif%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 6%0A%0A# -----------------------------------------------------------------------------------%0A# Test 7 - Perform find-only on large object%0A# -----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "1103-0000-01-0545"%2C "ASL Mapping"%2C "BIG object"%2C "Find-only big object"]%0A%0A   found_only_large_object = find-only BIG_Object%0A%0A   if found_only_large_object != UNDEFINED then%0A      [] = RPT2:Test_Passed["find-only big object"%2C This_Test_Number%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["find-only big object"%2C This_Test_Number%2C -1]%0A   endif%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 7%0A%0A# -----------------------------------------------------------------------------------%0A# Test 8 - Check to see that the attributes can be read from%0A# -----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "1103-0000-01-0522"%2C "ASL Mapping"%2C "BIG Object"%2C "Examine found-only object"]%0A%0A   if found_only_large_object != UNDEFINED then%0A%0A      if found_only_large_object.One        = Start_Test_Number &\%0A         found_only_large_object.Fortytwo   = Start_Test_Number &\%0A         found_only_large_object.Eightyfour = Start_Test_Number then%0A%0A         [] = RPT2:Test_Passed["Examine Find-Only Object"%2C This_Test_Number%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["Examine Find-Only Object"%2C This_Test_Number%2C -20]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Examine Find-Only Object"%2C This_Test_Number%2C -10]%0A   endif%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 8%0A%0A# -----------------------------------------------------------------------------------%0A# Test 9 - Perform find-only <object> where <boolean condition> on large object%0A# -----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "1103-0000-01-0547"%2C "ASL Mapping"%2C "BIG object"%2C "Find-only where fully specifying big object"]%0A%0A   #One = Start_Test_Number &\%0A   #Two = Start_Test_Number &\%0A   #Three = Start_Test_Number &\%0A   #Four = Start_Test_Number &\%0A   #Five = Start_Test_Number &\%0A   #Six = Start_Test_Number &\%0A   #Seven = Start_Test_Number &\%0A   #Eight = Start_Test_Number &\%0A   #Nine = Start_Test_Number &\%0A   #Ten = Start_Test_Number &\%0A   #Eleven = Start_Test_Number &\%0A   #Twelve = Start_Test_Number &\%0A   #Thirteen = Start_Test_Number &\%0A   #Fourteen = Start_Test_Number &\%0A   #Fifteen = Start_Test_Number &\%0A   #Sixteen = Start_Test_Number &\%0A   #Eighteen = Start_Test_Number &\%0A   #Nineteen = Start_Test_Number &\%0A   #Twenty = Start_Test_Number &\%0A   #Twentyone = Start_Test_Number &\%0A   #Twentytwo = Start_Test_Number &\%0A   #Twentythree = Start_Test_Number &\%0A   #Twentyfour = Start_Test_Number &\%0A   #Twentyfive = Start_Test_Number &\%0A   #Twentysix = Start_Test_Number &\%0A   #Twentyseven = Start_Test_Number &\%0A   #Twentyeight = Start_Test_Number &\%0A   #Twentynine = Start_Test_Number &\%0A   #Thirty = Start_Test_Number &\%0A   #Thirtyone = Start_Test_Number &\%0A   #Thirtytwo = Start_Test_Number &\%0A   #Thirtythree = Start_Test_Number &\%0A   #Thirtyfour = Start_Test_Number &\%0A   #Thirtyfive = Start_Test_Number &\%0A   #Thirtysix = Start_Test_Number &\%0A   #Thirtyseven = Start_Test_Number &\%0A   #Thirtyeight = Start_Test_Number &\%0A   #Thirtynine = Start_Test_Number &\%0A%0A   found_only_where_large_object = find-only BIG_Object where Forty        = Start_Test_Number &\%0A                                                              Fortyone     = Start_Test_Number &\%0A                                                              Fortytwo     = Start_Test_Number &\%0A                                                              Fortythree   = Start_Test_Number &\%0A                                                              Fortyfour    = Start_Test_Number &\%0A                                                              Fortyfive    = Start_Test_Number &\%0A                                                              Fortysix     = Start_Test_Number &\%0A                                                              Fortyseven   = Start_Test_Number &\ %0A                                                              Fortyeight   = Start_Test_Number &\%0A                                                              Fortynine    = Start_Test_Number &\%0A                                                              Fifty        = Start_Test_Number &\%0A                                                              Fiftyone     = Start_Test_Number &\%0A                                                              Fiftytwo     = Start_Test_Number &\%0A                                                              Fiftythree   = Start_Test_Number &\%0A                                                              Fiftyfour    = Start_Test_Number &\%0A                                                              Fiftyfive    = Start_Test_Number &\%0A                                                              Fiftysix     = Start_Test_Number &\%0A                                                              Fiftyseven   = Start_Test_Number &\%0A                                                              Fiftyeight   = Start_Test_Number &\%0A                                                              Fiftynine    = Start_Test_Number &\ %0A                                                              Sixty        = Start_Test_Number &\ %0A                                                              Sixtyone     = Start_Test_Number &\%0A                                                              Sixtytwo     = Start_Test_Number &\ %0A                                                              Sixtythree   = Start_Test_Number &\%0A                                                              Sixtyfour    = Start_Test_Number &\%0A                                                              Sixtyfive    = Start_Test_Number &\%0A                                                              Sixtysix     = Start_Test_Number &\%0A                                                              Sixtyseven   = Start_Test_Number &\%0A                                                              Sixtyeight   = Start_Test_Number &\%0A                                                              Sixtynine    = Start_Test_Number &\%0A                                                              Seventy      = Start_Test_Number &\%0A                                                              Seventyone   = Start_Test_Number &\%0A                                                              Seventytwo   = Start_Test_Number &\%0A                                                              Seventythree = Start_Test_Number &\%0A                                                              Seventyfour  = Start_Test_Number &\%0A                                                              Seventyfive  = Start_Test_Number &\%0A                                                              Seventysix   = Start_Test_Number &\%0A                                                              Seventyseven = Start_Test_Number &\%0A                                                              Seventyeight = Start_Test_Number &\%0A                                                              Seventynine  = Start_Test_Number &\%0A                                                              Eighty       = Start_Test_Number &\  %0A                                                              Eightyone    = Start_Test_Number &\%0A                                                              Eightytwo    = Start_Test_Number &\%0A                                                              Eightythree  = Start_Test_Number &\%0A                                                              Eightyfour   = Start_Test_Number%0A  %0A   if found_only_where_large_object != UNDEFINED then%0A      [] = RPT2:Test_Passed["Find Only Where Object"%2C This_Test_Number%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Find Only Where Object"%2C This_Test_Number%2C -10]%0A   endif%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A#  End Test 9%0A%0A# -----------------------------------------------------------------------------------%0A# Test 10 - Check to see that the attributes can be read from%0A# -----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "1103-0000-01-0522"%2C "ASL Mapping"%2C "BIG Object"%2C "Examine found-only where object"]%0A%0A   if found_only_where_large_object != UNDEFINED then%0A%0A      if found_only_where_large_object.One        = Start_Test_Number &\%0A         found_only_where_large_object.Fortytwo   = Start_Test_Number &\%0A         found_only_where_large_object.Eightyfour = Start_Test_Number then%0A%0A         [] = RPT2:Test_Passed["Examine Found Only Where Object"%2C This_Test_Number%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["Examine found only where object"%2C This_Test_Number%2C -20]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Examine found only where object"%2C This_Test_Number%2C -10]%0A   endif%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 10%0A%0A# -----------------------------------------------------------------------------------%0A# Test 11 - {set} = find <object> where <boolean condition>%0A# -----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "1103-0000-01-0541"%2C "ASL Mapping"%2C "BIG Object"%2C "Find set where object"]%0A%0A   {big_set} = find BIG_Object where One          = Start_Test_Number &\%0A                                     Two          = Start_Test_Number &\%0A                                     Three        = Start_Test_Number &\%0A                                     Four         = Start_Test_Number &\%0A                                     Five         = Start_Test_Number &\%0A                                     Six          = Start_Test_Number &\%0A                                     Seven        = Start_Test_Number &\%0A                                     Eight        = Start_Test_Number &\%0A                                     Nine         = Start_Test_Number &\%0A                                     Ten          = Start_Test_Number &\%0A                                     Eleven       = Start_Test_Number &\%0A                                     Twelve       = Start_Test_Number &\%0A                                     Thirteen     = Start_Test_Number &\%0A                                     Fourteen     = Start_Test_Number &\ %0A                                     Fifteen      = Start_Test_Number &\%0A                                     Sixteen      = Start_Test_Number &\%0A                                     Eighteen     = Start_Test_Number &\%0A                                     Nineteen     = Start_Test_Number &\%0A                                     Twenty       = Start_Test_Number &\%0A                                     Forty        = Start_Test_Number &\%0A                                     Fortyone     = Start_Test_Number &\%0A                                     Fortytwo     = Start_Test_Number &\%0A                                     Fortythree   = Start_Test_Number &\%0A                                     Fortyfour    = Start_Test_Number &\%0A                                     Fortyfive    = Start_Test_Number &\%0A                                     Fortysix     = Start_Test_Number &\%0A                                     Fortyseven   = Start_Test_Number &\%0A                                     Fortyeight   = Start_Test_Number &\%0A                                     Fortynine    = Start_Test_Number &\%0A                                     Fifty        = Start_Test_Number &\%0A                                     Fiftyone     = Start_Test_Number &\%0A                                     Fiftytwo     = Start_Test_Number &\%0A                                     Fiftythree   = Start_Test_Number &\%0A                                     Fiftyfour    = Start_Test_Number &\%0A                                     Fiftyfive    = Start_Test_Number &\%0A                                     Fiftysix     = Start_Test_Number &\%0A                                     Fiftyseven   = Start_Test_Number &\%0A                                     Fiftyeight   = Start_Test_Number &\%0A                                     Fiftynine    = Start_Test_Number &\ %0A                                     Eighty       = Start_Test_Number &\%0A                                     Eightyone    = Start_Test_Number &\%0A                                     Eightytwo    = Start_Test_Number &\%0A                                     Eightythree  = Start_Test_Number &\%0A                                     Eightyfour   = Start_Test_Number%0A  %0A                                     #Twentyone    = Start_Test_Number &\%0A                                     #Twentytwo    = Start_Test_Number &\%0A                                     #Twentythree  = Start_Test_Number &\%0A                                     #Twentyfour   = Start_Test_Number &\%0A                                     #Twentyfive   = Start_Test_Number &\%0A                                     #Twentysix    = Start_Test_Number &\%0A                                     #Twentyseven  = Start_Test_Number &\%0A                                     #Twentyeight  = Start_Test_Number &\%0A                                     #Twentynine   = Start_Test_Number &\%0A                                     #Thirty       = Start_Test_Number &\%0A                                     #Thirtyone    = Start_Test_Number &\%0A                                     #Thirtytwo    = Start_Test_Number &\%0A                                     #Thirtythree  = Start_Test_Number &\%0A                                     #Thirtyfour   = Start_Test_Number &\%0A                                     #Thirtyfive   = Start_Test_Number &\%0A                                     #Thirtysix    = Start_Test_Number &\%0A                                     #Thirtyseven  = Start_Test_Number &\%0A                                     #Thirtyeight  = Start_Test_Number &\%0A                                     #Thirtynine   = Start_Test_Number &\%0A%0A                                     #Sixty        = Start_Test_Number &\%0A                                     #Sixtyone     = Start_Test_Number &\%0A                                     #Sixtytwo     = Start_Test_Number &\%0A                                     #Sixtythree   = Start_Test_Number &\%0A                                     #Sixtyfour    = Start_Test_Number &\%0A                                     #Sixtyfive    = Start_Test_Number &\%0A                                     #Sixtysix     = Start_Test_Number &\%0A                                     #Sixtyseven   = Start_Test_Number &\%0A                                     #Sixtyeight   = Start_Test_Number &\%0A                                     #Sixtynine    = Start_Test_Number &\%0A                                     #Seventy      = Start_Test_Number &\%0A                                     #Seventyone   = Start_Test_Number &\%0A                                     #Seventytwo   = Start_Test_Number &\%0A                                     #Seventythree = Start_Test_Number &\%0A                                     #Seventyfour  = Start_Test_Number &\%0A                                     #Seventyfive  = Start_Test_Number &\%0A                                     #Seventysix   = Start_Test_Number &\%0A                                     #Seventyseven = Start_Test_Number &\%0A                                     #Seventyeight = Start_Test_Number &\%0A                                     #Seventynine  = Start_Test_Number &\%0A %0A   if countof {big_set} = 1 then%0A      [] = RPT2:Test_Passed["Find Set Of Big Object"%2C This_Test_Number%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Find Set Of Big Object"%2C This_Test_Number%2C -10]%0A   endif%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 11%0A%0A# -----------------------------------------------------------------------------------%0A# Test 12 - Check to see that the attributes can be read from each in the set%0A# -----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "1103-0000-01-0522"%2C "ASL Mapping"%2C "BIG Object"%2C "Examine found-only where object"]%0A%0A   for found_only_where_set_large_object in {big_set} do%0A%0A      if found_only_where_set_large_object != UNDEFINED then%0A%0A         if found_only_where_set_large_object.One        = Start_Test_Number &\%0A            found_only_where_set_large_object.Fortytwo   = Start_Test_Number &\%0A            found_only_where_set_large_object.Eightyfour = Start_Test_Number then%0A%0A            [] = RPT2:Test_Passed["Examine Found Only Where Object"%2C This_Test_Number%2C 0]%0A         else%0A            [] = RPT3:Test_Failed["Examine Found Only Where Object"%2C This_Test_Number%2C -20]%0A         endif%0A%0A      else%0A         [] = RPT3:Test_Failed["Examine Found Only Where Object"%2C This_Test_Number%2C -10]%0A      endif%0A %0A   endfor%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 12%0A%0A# -----------------------------------------------------------------------------------%0A# Test 13 - find-all <object>%0A# -----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "1103-0000-01-0543"%2C "ASL Mapping"%2C "BIG Object"%2C "Find-all set where object"]%0A%0A   {all_big_set} = find-all BIG_Object %0A%0A   if countof {all_big_set} = 1 then%0A      [] = RPT2:Test_Passed["Find-All Set Of Big Object"%2C This_Test_Number%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Find-All Set Of Big Object"%2C This_Test_Number%2C -10]%0A   endif%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 13%0A%0A# -----------------------------------------------------------------------------------%0A# Test 14 - Check to see that the attributes can be read from each in the set%0A# -----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "1103-0000-01-0522"%2C "ASL Mapping"%2C "BIG Object"%2C "Examine found-all object"]%0A%0A   for found_all_set_large_object in {all_big_set} do%0A%0A      if found_all_set_large_object != UNDEFINED then%0A%0A         if found_all_set_large_object.One        = Start_Test_Number &\%0A            found_all_set_large_object.Fortytwo   = Start_Test_Number &\%0A            found_all_set_large_object.Eightyfour = Start_Test_Number then%0A%0A            [] = RPT2:Test_Passed["Examine Found All Object"%2C This_Test_Number%2C 0]%0A         else%0A            [] = RPT3:Test_Failed["Examine Found All Object"%2C This_Test_Number%2C -20]%0A         endif%0A%0A      else%0A         [] = RPT3:Test_Failed["Examine Found All Object"%2C This_Test_Number%2C -10]%0A      endif%0A %0A    endfor%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 14%0A%0A# -----------------------------------------------------------------------------------%0A# Test 15 - Check to see that the large object may be passed as a parameter into a %0A#           domain based synch service%0A# -----------------------------------------------------------------------------------%0A%0A   [] = objBIG1:Receive_Unfeasonableness[Unfeasibly_Large_Object%2C This_Test_Number%2C Start_Test_Number]%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 15%0A%0A# -----------------------------------------------------------------------------------%0A# Test 16 - Create the unfeasibly large object and see what may be done with it%0A# -----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "1103-0000-01-0511"%2C "ASL Mapping"%2C "BIG Object"%2C "Create big active object"]%0A%0A   # Stash this number for later use when this object is decoded.%0A   Expected_Number = This_Test_Number%0A%0A   Active_Unfeasibly_Large_Object = create BIG_Object with One          = This_Test_Number &\%0A                                                           Two          = This_Test_Number &\%0A                                                           Three        = This_Test_Number &\%0A                                                           Four         = This_Test_Number &\%0A                                                           Five         = This_Test_Number &\%0A                                                           Six          = This_Test_Number &\%0A                                                           Seven        = This_Test_Number &\ %0A                                                           Eight        = This_Test_Number &\%0A                                                           Nine         = This_Test_Number &\%0A                                                           Ten          = This_Test_Number &\ %0A                                                           Eleven       = This_Test_Number &\%0A                                                           Twelve       = This_Test_Number &\%0A                                                           Thirteen     = This_Test_Number &\%0A                                                           Fourteen     = This_Test_Number &\%0A                                                           Fifteen      = This_Test_Number &\%0A                                                           Sixteen      = This_Test_Number &\%0A                                                           Eighteen     = This_Test_Number &\%0A                                                           Nineteen     = This_Test_Number &\%0A                                                           Twenty       = This_Test_Number &\%0A                                                           Twentyone    = This_Test_Number &\%0A                                                           Twentytwo    = This_Test_Number &\%0A                                                           Twentythree  = This_Test_Number &\%0A                                                           Twentyfour   = This_Test_Number &\%0A                                                           Twentyfive   = This_Test_Number &\%0A                                                           Twentysix    = This_Test_Number &\ %0A                                                           Twentyseven  = This_Test_Number &\%0A                                                           Twentyeight  = This_Test_Number &\%0A                                                           Twentynine   = This_Test_Number &\%0A                                                           Thirty       = This_Test_Number &\%0A                                                           Thirtyone    = This_Test_Number &\%0A                                                           Thirtytwo    = This_Test_Number &\%0A                                                           Thirtythree  = This_Test_Number &\%0A                                                           Thirtyfour   = This_Test_Number &\%0A                                                           Thirtyfive   = This_Test_Number &\%0A                                                           Thirtysix    = This_Test_Number &\%0A                                                           Thirtyseven  = This_Test_Number &\%0A                                                           Thirtyeight  = This_Test_Number &\%0A                                                           Thirtynine   = This_Test_Number &\%0A                                                           Forty        = This_Test_Number &\%0A                                                           Fortyone     = This_Test_Number &\%0A                                                           Fortytwo     = This_Test_Number &\%0A                                                           Fortythree   = This_Test_Number &\%0A                                                           Fortyfour    = This_Test_Number &\%0A                                                           Fortyfive    = This_Test_Number &\%0A                                                           Fortysix     = This_Test_Number &\%0A                                                           Fortyseven   = This_Test_Number &\%0A                                                           Fortyeight   = This_Test_Number &\%0A                                                           Fortynine    = This_Test_Number &\%0A                                                           Fifty        = This_Test_Number &\%0A                                                           Fiftyone     = This_Test_Number &\%0A                                                           Fiftytwo     = This_Test_Number &\%0A                                                           Fiftythree   = This_Test_Number &\%0A                                                           Fiftyfour    = This_Test_Number &\%0A                                                           Fiftyfive    = This_Test_Number &\%0A                                                           Fiftysix     = This_Test_Number &\%0A                                                           Fiftyseven   = This_Test_Number &\%0A                                                           Fiftyeight   = This_Test_Number &\%0A                                                           Fiftynine    = This_Test_Number &\%0A                                                           Sixty        = This_Test_Number &\%0A                                                           Sixtyone     = This_Test_Number &\%0A                                                           Sixtytwo     = This_Test_Number &\%0A                                                           Sixtythree   = This_Test_Number &\%0A                                                           Sixtyfour    = This_Test_Number &\%0A                                                           Sixtyfive    = This_Test_Number &\%0A                                                           Sixtysix     = This_Test_Number &\%0A                                                           Sixtyseven   = This_Test_Number &\%0A                                                           Sixtyeight   = This_Test_Number &\%0A                                                           Sixtynine    = This_Test_Number &\%0A                                                           Seventy      = This_Test_Number &\%0A                                                           Seventyone   = This_Test_Number &\%0A                                                           Seventytwo   = This_Test_Number &\%0A                                                           Seventythree = This_Test_Number &\%0A                                                           Seventyfour  = This_Test_Number &\%0A                                                           Seventyfive  = This_Test_Number &\%0A                                                           Seventysix   = This_Test_Number &\%0A                                                           Seventyseven = This_Test_Number &\%0A                                                           Seventyeight = This_Test_Number &\%0A                                                           Seventynine  = This_Test_Number &\%0A                                                           Eighty       = This_Test_Number &\%0A                                                           Eightyone    = This_Test_Number &\%0A                                                           Eightytwo    = This_Test_Number &\%0A                                                           Eightythree  = This_Test_Number &\%0A                                                           Eightyfour   = This_Test_Number &\%0A                                                           Current_State = 'Idle_State'%0A%0A   if Active_Unfeasibly_Large_Object != UNDEFINED then%0A      [] = RPT2:Test_Passed["create Big Active Object"%2C This_Test_Number%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["create Big Active Object"%2C This_Test_Number%2C -10]%0A   endif%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 16%0A%0A# -----------------------------------------------------------------------------------%0A# Test 17 - There are two separate tests performed by that last generate statement%2C %0A#           so increment the counter accordingly%0A# -----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "1103-0000-01-0511"%2C "ASL Mapping"%2C "BIG object"%2C "Delete big active object"]%0A   [] = RPT8:Specify_Requid[This_Test_Number%2C "1103-0000-01-0531"]%0A%0A   Doomed_Unfeasibly_Large_Object = create BIG_Object with One          = This_Test_Number &\%0A                                                           Two          = This_Test_Number &\%0A                                                           Three        = This_Test_Number &\%0A                                                           Four         = This_Test_Number &\%0A                                                           Five         = This_Test_Number &\%0A                                                           Six          = This_Test_Number &\%0A                                                           Seven        = This_Test_Number &\%0A                                                           Eight        = This_Test_Number &\%0A                                                           Nine         = This_Test_Number &\%0A                                                           Ten          = This_Test_Number &\%0A                                                           Eleven       = This_Test_Number &\%0A                                                           Twelve       = This_Test_Number &\%0A                                                           Thirteen     = This_Test_Number &\%0A                                                           Fourteen     = This_Test_Number &\%0A                                                           Fifteen      = This_Test_Number &\%0A                                                           Sixteen      = This_Test_Number &\%0A                                                           Eighteen     = This_Test_Number &\%0A                                                           Nineteen     = This_Test_Number &\%0A                                                           Twenty       = This_Test_Number &\%0A                                                           Twentyone    = This_Test_Number &\%0A                                                           Twentytwo    = This_Test_Number &\%0A                                                           Twentythree  = This_Test_Number &\%0A                                                           Twentyfour   = This_Test_Number &\%0A                                                           Twentyfive   = This_Test_Number &\%0A                                                           Twentysix    = This_Test_Number &\%0A                                                           Twentyseven  = This_Test_Number &\%0A                                                           Twentyeight  = This_Test_Number &\%0A                                                           Twentynine   = This_Test_Number &\%0A                                                           Thirty       = This_Test_Number &\%0A                                                           Thirtyone    = This_Test_Number &\%0A                                                           Thirtytwo    = This_Test_Number &\%0A                                                           Thirtythree  = This_Test_Number &\%0A                                                           Thirtyfour   = This_Test_Number &\%0A                                                           Thirtyfive   = This_Test_Number &\%0A                                                           Thirtysix    = This_Test_Number &\%0A                                                           Thirtyseven  = This_Test_Number &\%0A                                                           Thirtyeight  = This_Test_Number &\%0A                                                           Thirtynine   = This_Test_Number &\%0A                                                           Forty        = This_Test_Number &\%0A                                                           Fortyone     = This_Test_Number &\%0A                                                           Fortytwo     = This_Test_Number &\%0A                                                           Fortythree   = This_Test_Number &\%0A                                                           Fortyfour    = This_Test_Number &\%0A                                                           Fortyfive    = This_Test_Number &\%0A                                                           Fortysix     = This_Test_Number &\%0A                                                           Fortyseven   = This_Test_Number &\%0A                                                           Fortyeight   = This_Test_Number &\%0A                                                           Fortynine    = This_Test_Number &\%0A                                                           Fifty        = This_Test_Number &\%0A                                                           Fiftyone     = This_Test_Number &\%0A                                                           Fiftytwo     = This_Test_Number &\%0A                                                           Fiftythree   = This_Test_Number &\%0A                                                           Fiftyfour    = This_Test_Number &\%0A                                                           Fiftyfive    = This_Test_Number &\%0A                                                           Fiftysix     = This_Test_Number &\%0A                                                           Fiftyseven   = This_Test_Number &\%0A                                                           Fiftyeight   = This_Test_Number &\%0A                                                           Fiftynine    = This_Test_Number &\%0A                                                           Sixty        = This_Test_Number &\%0A                                                           Sixtyone     = This_Test_Number &\%0A                                                           Sixtytwo     = This_Test_Number &\%0A                                                           Sixtythree   = This_Test_Number &\%0A                                                           Sixtyfour    = This_Test_Number &\%0A                                                           Sixtyfive    = This_Test_Number &\%0A                                                           Sixtysix     = This_Test_Number &\%0A                                                           Sixtyseven   = This_Test_Number &\%0A                                                           Sixtyeight   = This_Test_Number &\%0A                                                           Sixtynine    = This_Test_Number &\%0A                                                           Seventy      = This_Test_Number &\%0A                                                           Seventyone   = This_Test_Number &\%0A                                                           Seventytwo   = This_Test_Number &\%0A                                                           Seventythree = This_Test_Number &\%0A                                                           Seventyfour  = This_Test_Number &\%0A                                                           Seventyfive  = This_Test_Number &\%0A                                                           Seventysix   = This_Test_Number &\%0A                                                           Seventyseven = This_Test_Number &\%0A                                                           Seventyeight = This_Test_Number &\%0A                                                           Seventynine  = This_Test_Number &\%0A                                                           Eighty       = This_Test_Number &\%0A                                                           Eightyone    = This_Test_Number &\%0A                                                           Eightytwo    = This_Test_Number &\%0A                                                           Eightythree  = This_Test_Number &\%0A                                                           Eightyfour   = This_Test_Number &\%0A                                                           Current_State = 'Idle_State'%0A  %0A   delete Doomed_Unfeasibly_Large_Object%0A%0A   if Doomed_Unfeasibly_Large_Object = UNDEFINED then%0A      [] = RPT2:Test_Passed["Delete Big Active Object"%2C This_Test_Number%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Delete Big Active Object"%2C This_Test_Number%2C -10]%0A   endif%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 17%0A%0A# -----------------------------------------------------------------------------------%0A# Test 18 - %0A# -----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "Null Requid"%2C "ASL Mapping"%2C "BIG object"%2C "NULL"]%0A   [] = RPT2:Test_Passed["NULL"%2C This_Test_Number%2C 0]%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 18%0A%0A# -----------------------------------------------------------------------------------%0A# Test 19 - %0A# -----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "Null Requid"%2C "ASL Mapping"%2C "BIG object"%2C "NULL2"]%0A   [] = RPT2:Test_Passed["NULL2"%2C This_Test_Number  %2C 0]%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 19%0A%0A# -----------------------------------------------------------------------------------%0A# Test 20 -%0A# -----------------------------------------------------------------------------------%0A%0A   generate objBIG1:Have_A_Biggie (Unfeasibly_Large_Object%2C This_Test_Number%2C Expected_Number) to Active_Unfeasibly_Large_Object%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 20%0A%0A# -----------------------------------------------------------------------------------%0A# Test 21 -%0A# -----------------------------------------------------------------------------------%0A%0A   # generate to send the object into termination state.%0A   # This will only work if the events generated following the transition out of 'IDLE_STATE' have been processed first.%0A%0A   # generate objBIG2:To_Complete() to Active_Unfeasibly_Large_Object%0A%0A# -----------------------------------------------------------------------------------%0A%0AFinish_Test_Number = This_Test_Number%0A%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Test_Large_Numbers,6,,,
parameter,Start_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Finish_Test_Number,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,This_Test_Number = Start_Test_Number%0A%0A[Host] = WAW1:What_Env[]%0Aif Host = "WACA" then%0A   WACA = TRUE%0Aelse%0A   WACA = FALSE%0Aendif%0A%0A# Commented out code indicates that these ASL instructions will cause the WACA not to generate this file%2C%0A# as an assingment of an out of range value will result in a Fatal Error during code generation.%0A%0A# It is conceivable that WACA could be required to actually limit the maximum and minimum values%0A# to be within the correct range. This does NOT happen currently. If this changes%2C and WACA is%0A# required to limit any range%2C the commented out code should be re-instated.%0A%0A# Maximum permissable value%0ASystem_Maximum = 2147483647%0A%0A# Minimum permissable value%0ASystem_Minimum = -2147483648%0A%0A#Illegal maximum value%0A#Overflow_System_Maximum = 2147483648%0AOverflow_System_Maximum = System_Maximum%0A%0A# Illegal minimum value%0A#Underflow_System_Minimum = -2147483649%0AUnderflow_System_Minimum = System_Minimum%0A%0A%0A# ------------------------------------------------------------------------------------------------------------%0A# Test 1 - Integer Overflow Underflow%0A# ------------------------------------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "Null Requid"%2C "ASL Mapping"%2C "Integer Overflow Underflow"%2C "Test max"]%0A%0A   if System_Maximum = 2147483647 then%0A      [] = RPT2:Test_Passed["Integer max"%2C This_Test_Number%2C System_Maximum]%0A   else%0A      [] = RPT3:Test_Failed["Integer max"%2C This_Test_Number%2C System_Maximum]%0A   endif%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 1%0A%0A# ------------------------------------------------------------------------------------------------------------%0A# Test 2 - Integer Overflow Underflow%0A# ------------------------------------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "Null Requid"%2C "ASL Mapping"%2C "Integer Overflow Underflow"%2C "Test min"]%0A%0A   if System_Minimum = -2147483648 then%0A      [] = RPT2:Test_Passed["Integer max"%2C This_Test_Number%2C System_Minimum]%0A   else%0A      [] = RPT3:Test_Failed["Integer max"%2C This_Test_Number%2C System_Minimum]%0A   endif%0A %0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 2%0A%0A# ------------------------------------------------------------------------------------------------------------%0A# Test 3 - Integer Overflow Underflow%0A# ------------------------------------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "Null Requid"%2C "ASL Mapping"%2C "Integer Overflow Underflow"%2C "Test constrained to max"]%0A%0A   # WACA should limit the Overflow_System_Maximum value to the system defined max%2C %0A   # since this value is outside of the defined integer range.%0A%0A   # Compare it to the unmodified maximum legal value System_Maximum%0A%0A   # if WACA then%0A%0A   if Overflow_System_Maximum = System_Maximum then%0A      [] = RPT2:Test_Passed["Integer constrained to max"%2C This_Test_Number%2C Overflow_System_Maximum]%0A   else%0A      [] = RPT3:Test_Failed["Integer constrained to max"%2C This_Test_Number%2C Overflow_System_Maximum]%0A   endif%0A%0A   # else%0A      # ISIM does no limiting%2C and allows a bigger range anyway.%0A      # If this bit ever got tested by WACA (and it shouldn't)%2C this test would pass as both the%0A      # operands would have been modified by WACA during code generation. This will be proved later.%0A   #   if Overflow_System_Maximum = 2147483648 then%0A   #      [] = RPT2:Test_Passed["Integer constrained to max"%2C This_Test_Number%2C Overflow_System_Maximum]%0A   #   else%0A   #      [] = RPT3:Test_Failed["Integer constrained to max"%2C This_Test_Number%2C Overflow_System_Maximum]%0A   #   endif%0A%0A   #endif%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 3%0A%0A# ------------------------------------------------------------------------------------------------------------%0A# Test 4 - Integer Overflow Underflow%0A# ------------------------------------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "Null Requid"%2C "ASL Mapping"%2C "Integer Overflow Underflow"%2C "Test constrained to min"]%0A%0A   # WACA should limit this value to the system defined min%2C since this value is outside of the defined integer range.%0A%0A   # if WACA then%0A      if Underflow_System_Minimum = System_Minimum then%0A         [] = RPT2:Test_Passed["Integer constrained to min"%2C This_Test_Number%2C Underflow_System_Minimum]%0A      else%0A         [] = RPT3:Test_Failed["Integer constrained to min"%2C This_Test_Number%2C Underflow_System_Minimum]%0A      endif%0A%0A   # else%0A      # ISIM does no limiting%2C and allows a bigger range anyway.%0A   #   if Underflow_System_Minimum = -2147483649 then%0A   #      [] = RPT2:Test_Passed["Integer constrained to min"%2C This_Test_Number%2C Underflow_System_Minimum]%0A   #   else%0A   #      [] = RPT3:Test_Failed["Integer constrained to min"%2C This_Test_Number%2C Underflow_System_Minimum]%0A   #   endif%0A%0A   #endif%0A%0A   This_Test_Number = This_Test_Number + 1%0A%0A# End Test 4%0A%0A# ------------------------------------------------------------------------------------------------------------%0A%0AFinish_Test_Number = This_Test_Number%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Perform_Attribute_Assignment,7,,,
parameter,Test_Start,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Final_Test,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#-----------------------------------------------------------------------%0A# The ASL <create ... with> statment to create an instance of an object%0A# with attributes shall be supported%0A# 1103-0000-0511%0A#%0A# Writing to object attributes shall be supported%0A# 1103-0000-01-0521%0A#%0A# Reading object attribute values shall be supported%0A# 1103-0000-01-0522%0A#-----------------------------------------------------------------------%0A%0AThis_Test = Test_Start%0A%0A[] = RPT1:Start_Test[This_Test%2C "1103-0000-01-0511"%2C "ASL_Mapping"%2C "Passive Domain Service Perform Attribute assignment"%2C "Assign all attributes"]%0A[] = RPT8:Specify_Requid[This_Test%2C "1103-0000-01-0521"]%0A[] = RPT8:Specify_Requid[This_Test%2C "1103-0000-01-0522"]%0A%0Amy_object = create Object_LOGIC with IntegerAttr = This_Test &\%0A    TextAttr = "Hello" &\%0A    BooleanAttr = FALSE &\%0A    EnumerationAttr = 'Frank' &\%0A    ReferenceLOGIC = This_Test %0A%0Amy_object = find-one Object_LOGIC where ReferenceLOGIC = This_Test%0A%0AFailure_Code = 1%0A%0Aif my_object != UNDEFINED then%0A%0A   if my_object.TextAttr = "Hello" then%0A%0A      if my_object.BooleanAttr = FALSE then%0A%0A         if my_object.EnumerationAttr = 'Frank' then%0A%0A            Failure_Code = 0%0A   %0A         else%0A%0A            Failure_Code = -40%0A%0A         endif%0A%0A      else%0A%0A         Failure_Code = -30%0A%0A      endif%0A%0A   else%0A%0A      Failure_Code = -20%0A%0A   endif%0A%0A   delete my_object%0A%0Aelse%0A%0A   Failure_Code = -10%0A%0Aendif%0A%0Aif Failure_Code = 0 then%0A   [] = RPT2:Test_Passed["Attribute read"%2C This_Test%2C Failure_Code]%0Aelse%0A   [] = RPT3:Test_Failed["Attribute read"%2C This_Test%2C Failure_Code]%0Aendif%0A%0AThis_Test = This_Test + 1%0A%0AFinal_Test = This_Test%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Create_Processor,8,,,
parameter,Test_Start,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Processor_Id_Local,in,,,,,,
typeref,Processor_Id_Type,,,,,,,
typeref,,,,,,,,
parameter,Final_Test,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#-----------------------------------------------------------------------%0A# The ASL timer function <Create_Timer> shall be supported%0A# 1103-0000-01-1111%0A#%0A# The ASL <create ... with> statment to create an instance of an object%0A# with attributes shall be supported%0A# 1103-0000-0511%0A#%0A# Writing to object attributes shall be supported%0A# 1103-0000-01-0521%0A#%0A# Reading object attribute values shall be supported%0A# 1103-0000-01-0522%0A#-----------------------------------------------------------------------%0A%0AThis_Test = Test_Start%0A%0A[] = RPT1:Start_Test[This_Test%2C "1103-0000-01-0511"%2C "ASL_Mapping"%2C "Active Domain Service Perform Attribute assignment"%2C "Assign all attributes"]%0A[] = RPT8:Specify_Requid[This_Test%2C "1103-0000-01-1111"]%0A[] = RPT8:Specify_Requid[This_Test%2C "1103-0000-01-0521"]%0A[] = RPT8:Specify_Requid[This_Test%2C "1103-0000-01-0522"]%0A%0A[my_timer_id_local] = Create_Timer[]%0A%0Amy_processor = create Processor with Processor_Id = Processor_Id_Local &\%0A   Background_Processing_Timer_Id = my_timer_id_local &\%0A   Communications_Enabled = FALSE %0A%0Amy_object = find-one Processor where Processor_Id = Processor_Id_Local%0A%0AFailure_Code = 1%0A%0Aif my_object != UNDEFINED then%0A%0A   if my_object.Background_Processing_Timer_Id = my_timer_id_local then%0A%0A      if my_object.Communications_Enabled = FALSE then%0A%0A         Failure_Code = 0%0A%0A      else%0A%0A         Failure_Code = -30%0A%0A      endif%0A%0A   else%0A%0A      Failure_Code = -20%0A%0A   endif%0A%0A   delete my_object%0A%0Aelse%0A%0A   Failure_Code = -10%0A%0Aendif%0A%0Aif Failure_Code = 0 then%0A   [] = RPT2:Test_Passed["Attribute read"%2C This_Test%2C Failure_Code]%0Aelse%0A   [] = RPT3:Test_Failed["Attribute read"%2C This_Test%2C Failure_Code]%0Aendif%0A%0AThis_Test = This_Test + 1%0A%0AFinal_Test = This_Test,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Check_Parameters,9,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,The_Subtract_Param,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Returning_No,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#--------------------------------------------------%0A# Check parameter ordering%0A#--------------------------------------------------       %0A%0A   The_Result = 0%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "ASL Mapping"%2C "Basic ASL DBSS"%2C"Check parameter ordering"]%0A%0A   The_Result = Test - The_Subtract_Param%0A%0A   if The_Result >= 0 then%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   endif%0A%0AReturning_No = Test + 1,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Check_Base_Types,10,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Returning_No,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------%0A# The architecture should be able to support Real%2C Integer%2C Boolean%0A# and Text base types. This test assigns appropriates values to %0A# variables and then reads them back to make sure that these values%0A# have been correctly assigned%0A#------------------------------------------------------------------%0A%0A   Local_Test = Test%0A%0A   The_Real_Type    = 23.12345%0A   The_Integer_Type = 12345%0A   The_String_Type  = "The Cat Sat On The Mat"%0A   The_Boolean_Type = TRUE%0A%0A   objDV = create Default_Vals with The_Integer     = 0     &\%0A                                    The_Real        = 0.0   &\%0A                                    The_Text        = " "    &\%0A                                    The_Boolean     = FALSE%0A%0A   objDV.The_Real    = The_Real_Type%0A   objDV.The_Integer = The_Integer_Type%0A   objDV.The_Text    = The_String_Type%0A   objDV.The_Boolean = The_Boolean_Type%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1241-0000-01-0105"%2C "ASL Mapping"%2C "Check Base types"%2C "Check that base types are correct"]%0A   [] = RPT8:Specify_Requid[Local_Test%2C "1241-0000-01-0106"]%0A   [] = RPT8:Specify_Requid[Local_Test%2C "1241-0000-01-0107"]%0A   [] = RPT8:Specify_Requid[Local_Test%2C "1241-0000-01-0110"]%0A%0A   if objDV.The_Real = 23.12345 then%0A%0A      if objDV.The_Integer = 12345 then%0A%0A         if objDV.The_Text = "The Cat Sat On The Mat" then%0A%0A            if objDV.The_Boolean then%0A               [] = RPT2:Test_Passed["Basic ASL"%2C Local_Test%2C 0]%0A            else%0A               [] = RPT3:Test_Failed["Basic ASL"%2C Local_Test%2C -10]%0A            endif%0A%0A         else%0A            [] = RPT3:Test_Failed["Basic ASL"%2C Local_Test%2C -30]%0A         endif%0A%0A      else%0A         [] = RPT3:Test_Failed["Basic ASL"%2C Local_Test%2C -40]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Local_Test%2C -50]%0A   endif%0A%0A   Local_Test = Local_Test + 1%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------%0A# Test 2 - Test the Time Of Day attribute%0A#------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1241-0000-01-0108"%2C "ASL Mapping"%2C "Check Base types"%2C "Check Time Of Day Attribute"]%0A   [] = RPT5:Test_Text [Local_Test%2C "Time Of Day attribute is"]%0A   [] = RPT5:Test_Text [Local_Test%2C "unsupported by the WACA"]%0A%0A   [] = RPT4:Test_Unsupported[Local_Test]%0A%0A   Local_Test = Local_Test + 1%0A%0A#------------------------------------------------------------------%0A# Test 3 - %0A#------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "Null Requid"%2C "ASL Mapping"%2C "Check Base types"%2C "Check Attribute comparison"]%0A%0A   instA = create ObjectA with The_Int1 = 1 & The_Int2 = 2%0A   instB = create ObjectB with The_IntB1 = 1 & The_IntB2 = 2%0A%0A   if instA.The_Int1 = instB.The_IntB1 then%0A      [] = RPT2:Test_Passed["Comp"%2C Local_Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Comp"%2C Local_Test%2C -10]%0A   endif%0A%0A   Local_Test = Local_Test + 1%0A%0A#------------------------------------------------------------------%0A# Test 4 - %0A#------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "Null Requid"%2C "ASL Mapping"%2C "Check Base types"%2C "Check Attribute comparison"]%0A%0A   if instA.The_Int1 != instA.The_Int2 then%0A      [] = RPT2:Test_Passed["Comp"%2C Local_Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Comp"%2C Local_Test%2C -10]%0A   endif%0A%0A   Local_Test = Local_Test + 1%0A%0A#------------------------------------------------------------------%0A# Test 4 - %0A#------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "Null Requid"%2C "ASL Mapping"%2C "Check Base types"%2C "Check Attribute comparison"]%0A%0A   if instA.The_Int1 != instA.The_Int2 then%0A      [] = RPT2:Test_Passed["Comp"%2C Local_Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Comp"%2C Local_Test%2C -10]%0A   endif%0A%0A   Local_Test = Local_Test + 1%0A%0A#------------------------------------------------------------------%0A# Test 5 - %0A#------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "Null Requid"%2C "ASL Mapping"%2C "Check Base types"%2C "Check Attribute comparison"]%0A%0A   if instA.The_Int2 = instB.The_IntB2 then%0A      [] = RPT2:Test_Passed["Comp"%2C Local_Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Comp"%2C Local_Test%2C -10]%0A   endif%0A%0A   Local_Test = Local_Test + 1%0A%0A# End Test 2%0A%0AReturning_No = Local_Test,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Check_Defaults,11,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Returning_No,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#----------------------------------------------------------------------------------%0A# Check that variables are set default values on initialisation%0A#----------------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0311"%2C "ASL Mapping"%2C "Check Default Values"%2C"Check default values"]%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   [Host] = WAW1:What_Env[]%0A   if Host = "ISIM" then%0A      Supported = FALSE%0A   else%0A      Supported = TRUE%0A   endif%0A%0A   Set_Vals = FALSE%0A%0A   if Set_Vals then%0A%0A      if Supported then%0A         The_Real_Default = 1.0%0A         The_Integer_Default = 1%0A         The_Text_Default = "Goodbye"%0A         The_Boolean_Default = TRUE%0A      else%0A         The_Real_Default = 0.0%0A         The_Integer_Default = 0%0A         The_Text_Default = "Goodbye"%0A         The_Boolean_Default = TRUE%0A      endif%0A%0A   endif%0A%0A   if The_Real_Default = 1.0 then%0A %0A      if The_Integer_Default = 1 then%0A%0A         if The_Text_Default = "                                " then%0A%0A            if not The_Boolean_Default then%0A              [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A            else%0A              [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A            endif%0A%0A         else%0A            [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -20]%0A         endif%0A%0A      else%0A         [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -30]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -40]%0A   endif%0A%0AReturning_No = Test + 1,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,And_Or_Checks,12,,,
parameter,Test_No,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Returning_No,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Logical operators AND and OR within if statements%0A#%0A#%0A#%0A#%0A#%0A#%0A#%0A#%0A#%0A#%0A#%0A#%0A#%0A#-------------------------------------------------------------------#%0A%0ATest = Test_No%0A%0A#-------------------------------------------------------------------#%0A# Test 1 - Check if AND then with boolean values%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "Check AND and ORs in if statements"%2C "Check if AND then"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0911"]%0A%0A   Bool1 = TRUE%0A   Bool2 = TRUE%0A%0A   if Bool1 and Bool2 then%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#-------------------------------------------------------------------#%0A# Test 2 - Check if AND then with integer values%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "Check AND and ORs in if statements"%2C "Check if AND then"]%0A%0A   Val1 = 10%0A   Val2 = 20%0A%0A   if Val1 = 10 and Val2 = 20 then%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#-------------------------------------------------------------------#%0A# Test 3 - Check if AND then with boolean values%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "Check AND and ORs in if statements"%2C "Check if AND then"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0911"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0912"]%0A%0A   Bool1 = TRUE%0A   Bool2 = FALSE%0A%0A   if Bool1 and not Bool2 then%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#-------------------------------------------------------------------#%0A# Test 4 - Check if AND then else with integer values%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "Check AND and ORs in if statements"%2C "Check if AND then"]%0A%0A   Val1 = 10%0A   Val2 = 20%0A%0A   if Val1 = 10 and Val2 = 10 then%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   else%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A#-------------------------------------------------------------------#%0A# Test 5 - Check if OR then with boolean values%0A#-------------------------------------------------------------------#%0A%0A    [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "Check AND and ORs in if statements"%2C "Check if OR then"]%0A    [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0911"]%0A%0A    Bool1 = TRUE%0A    Bool2 = FALSE%0A%0A    if Bool1 or Bool2 then%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A%0A#-------------------------------------------------------------------#%0A# Test 6 - Check if OR then with boolean values%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "Check AND and ORs in if statements"%2C "Check if OR then"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0911"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0912"]%0A%0A%0A   Bool1 = TRUE%0A   Bool2 = TRUE%0A%0A   if Bool1 or Bool2 then%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 6%0A%0A%0A#-------------------------------------------------------------------#%0A# Test 7 - Check if OR then with integer values%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "Check AND and ORs in if statements"%2C "Check if OR then"]%0A%0A   Val1 = 10%0A   Val2 = 20%0A%0A   if Val1 = 10 or Val2 = 10 then%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 7%0A%0A#-------------------------------------------------------------------#%0A# Test 8 - Check if OR then with integer values%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "Check AND and ORs in if statements"%2C "Check if OR then"]%0A%0A   Val1 = 10%0A   Val2 = 20%0A%0A   if Val1 = 20 or Val2 = 20 then%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 8%0A%0A%0A#-------------------------------------------------------------------#%0A# Test 9 - Check if OR then else with boolean values%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "Check AND and ORs in if statements"%2C "Check if OR then"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0911"]%0A%0A   Bool1 = FALSE%0A   Bool2 = FALSE%0A%0A   if Bool1 or Bool2 then%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   else%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 9%0A%0A#-------------------------------------------------------------------#%0A# Test 10 - Check if & then with integer values%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "Check AND and ORs in if statements"%2C "Check if logical AND then"]%0A%0A   Val1 = 10%0A   Val2 = 20%0A%0A   if Val1 = 10 & Val2 = 20 then%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 10%0A%0A%0A#-------------------------------------------------------------------#%0A# Test 11 - Check if & then with boolean values%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "Check AND and ORs in if statements"%2C "Check if logical AND then"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0911"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0912"]%0A%0A   Bool1 = TRUE%0A   Bool2 = FALSE%0A%0A   if Bool1 & not Bool2 then%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 11%0A%0A#-------------------------------------------------------------------#%0A# Test 12 - Check if & then else with boolean values%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "Check AND and ORs in if statements"%2C "Check if logical AND then"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0911"]%0A%0A   Bool1 = FALSE%0A   Bool2 = FALSE%0A%0A   if Bool1 & Bool2 then%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   else%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 12%0A%0A#-------------------------------------------------------------------#%0A# Test 13 - Check if | then with integer values%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "Check AND and ORs in if statements"%2C "Check if logical OR then"]%0A%0A   Val1 = 10%0A   Val2 = 20%0A%0A   if Val1 = 10 | Val2 = 10 then%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 13%0A%0A#-------------------------------------------------------------------#%0A# Test 14 - Check if & then else with boolean values%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "Check AND and ORs in if statements"%2C "Check if logical AND then"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0911"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0912"]%0A%0A   Bool1 = TRUE%0A   Bool2 = FALSE%0A%0A   if not Bool1 & Bool2 then%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]     %0A   else%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 14%0A%0A#-------------------------------------------------------------------#%0A# Test 15 - Check if | then else with boolean values%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "Check AND and ORs in if statements"%2C "Check if logical OR then"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0911"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0912"]%0A%0A   Bool1 = TRUE%0A   Bool2 = FALSE%0A%0A   if not Bool1 | Bool2 then%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]     %0A   else%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 15%0A%0A#-------------------------------------------------------------------#%0A%0AReturning_No = Test%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Comment_Checks,13,,,
parameter,Test_No,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Returning_No,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Comment line checks%0A#%0A# Single and multiple line comments shall be supported%0A# 1103-0000-01-1511%0A#%0A#-------------------------------------------------------------------#%0A%0A   Test = Test_No%0A%0A#-------------------------------------------------------------------#%0A# Test 1 - Check that a single line of commented out ASL code is %0A#          not translated%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-1511"%2C "ASL Mapping"%2C "Comment Checks"%2C "Check single line comment"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0110"]%0A%0A   Val1 = 10%0A   Val2 = 20%0A   %0A   # Val1 = Val2%0A%0A   if Val1 = 10 then%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#-------------------------------------------------------------------#%0A# Test 2 - Check that multiple lines of commented out ASL code are %0A#          not translated%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-1511"%2C "ASL Mapping"%2C "Comment Checks"%2C "Check multi line comments"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0110"]%0A   Val1 = 10%0A   Val2 = 20%0A%0A   #{%0A      Val1 = 30%0A      Val2 = 40%0A%0A      Val1 = Val2%0A%0A   }#%0A%0A   if Val1 = 10 then%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A   %0A# End Test 2%0A%0A#-------------------------------------------------------------------#%0A# Test 3 - This test ensures that if a hash on its own does not %0A#           comment out the line following it%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objE"%2C "Check single hash does not comment following line"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0110"]%0A%0A   Count = 0%0A%0A   #%0A   Count = Count + 1%0A      %0A   if Count = 1 then%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A   %0A# End Test 3%0A%0A#-------------------------------------------------------------------#%0A# Test 4 - Check long comments%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objE"%2C "Check long comments"]%0A%0A   # This comment lins was long (DNS)%0A      %0A   [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A%0A   Test = Test + 1%0A   %0A# End Test 4%0A%0AReturning_No = Test%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Check_Continuation,14,,,
parameter,Test_No,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Returning_No,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Line Continuation character check%0A#%0A# The use of the line continuation '\' character placed at the end%0A# of a line to indicate that a following line is to be included as%0A# part of the same ASL statement shall be supported%0A# 1103-0000-01-0313%0A#%0A#-------------------------------------------------------------------#%0A%0A   Test = Test_No%0A%0A#-------------------------------------------------------------------#%0A# Test 1 - Check multi line statments%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0313"%2C "ASL Mapping"%2C "Comment Checks"%2C "Check multi line statement"]%0A%0A   Val1 = 10%0A   Val2 = 20%0A   %0A   Val1 = Val1 + \%0A          Val2%0A%0A   if Val1 = 30 then%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#-------------------------------------------------------------------#%0A# Test 2 - Check multi line statments%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0313"%2C "ASL Mapping"%2C "Comment Checks"%2C "Check multi line statement"]%0A%0A   Val1 = 10%0A   Val2 = 20%0A   Val3 = 30%0A%0A   Val1 = \%0A          Val1 +\ %0A          Val2 + \%0A          Val3%0A%0A   if Val1 = 60 then%0A      [] = RPT2:Test_Passed["Basic ASL"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Basic ASL"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A   %0A# End Test 2%0A%0AReturning_No = Test%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Check_Identifiers,15,,,
parameter,Test_No,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Returning_No,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,   Test = Test_No%0A%0A#-------------------------------------------------------------------#%0A# Test 1 - Check that identifying attributes are picked up%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0131"%2C "ASL Mapping"%2C "Check identifiers"%2C "Check identifying attributes"]%0A%0A   LeftObject  = create Left          with idL  = 1%0A   RightObject = create Right         with idR  = 1%0A   ARObject    = create Another_Right with idAR = 1%0A   LRObject    = create LeftRight     with idL  = 1 &\%0A                                           idR  = 1%0A   %0A   if LRObject.idL = 1 then%0A%0A      if LRObject.idR = 1 then   %0A         [] = RPT2:Test_Passed["Identifying Attribute"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["Identifying Attribute"%2C Test%2C -20]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Identifying Attribute"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A# Test 2 - Check that non-identifying attributes are ignored%0A#          N.B. This test can only be confirmed by inspection%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0131"%2C "ASL Mapping"%2C "Check identifiers"%2C "Check identifying attributes"]%0A   [] = RPT5:Test_Text [Test%2C "Confirmed on inspection"]%0A   [] = RPT2:Test_Passed["Non-Identifying Attribute"%2C Test%2C 0]%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0AReturning_No = Test,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,Report_Result,RPT,,,,,,
routine,ASL_Mapping,,public,Start_Test,1,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Requid,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Purpose,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Test_Passed,2,,,
parameter,Test_Object_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Test_Failed,3,,,
parameter,Failed_Domain_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Failed_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Failed_Test_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Test_Unsupported,4,,,
parameter,Unsupported_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Test_Text,5,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Free_Text,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Domain_Test_Start,6,,,
parameter,This_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Domain_Test_Finished,7,,,
parameter,This_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,ASL_Mapping,,public,Specify_Requid,8,,,
parameter,Requid_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,The_Requid_Itself,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
description, Terminator stub for report domain%0A,,,,,,,
terminator,,,,,,,,
terminator,Where_Are_We,WAW,,,,,,
routine,ASL_Mapping,,public,What_Env,1,,,
parameter,Env_Text,out,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
associative,R1,ASL_Mapping,LeftRight,,,,,
participation,ASL_Mapping,Left,is_next_to,unconditionally,many,ASL_Mapping,Right,
participation,ASL_Mapping,Right,is_next_to,unconditionally,one,ASL_Mapping,Left,
participation,,,,,,,,
associative,R1,ASL_Mapping,LeftRight,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Right",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Left",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
associative,,,,,,,,
regularrel,R2,,,,,,,
participation,ASL_Mapping,Another_Right,is_next_to,unconditionally,one,ASL_Mapping,LeftRight,
participation,ASL_Mapping,LeftRight,is_next_to,unconditionally,one,ASL_Mapping,Another_Right,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Another_Right",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"LeftRight",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
object,Another_Right,objAR,20,,,,,
attribute,idAR,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,BIG_Object,objBIG,12,,,,,
attribute,One,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Two,,,One,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Three,,,Two,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Four,,,Three,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Five,,,Four,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Six,,,Five,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Seven,,,Six,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Eight,,,Seven,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Nine,,,Eight,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Ten,,,Nine,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Eleven,,,Ten,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Twelve,,,Eleven,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Thirteen,,,Twelve,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fourteen,,,Thirteen,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fifteen,,,Fourteen,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Sixteen,,,Fifteen,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Eighteen,,,Sixteen,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Nineteen,,,Eighteen,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Twenty,,,Nineteen,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Twentyone,,,Twenty,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Twentytwo,,,Twentyone,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Twentythree,,,Twentytwo,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Twentyfour,,,Twentythree,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Twentyfive,,,Twentyfour,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Twentysix,,,Twentyfive,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Twentyseven,,,Twentysix,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Twentyeight,,,Twentyseven,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Twentynine,,,Twentyeight,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Thirty,,,Twentynine,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Thirtyone,,,Thirty,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Thirtytwo,,,Thirtyone,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Thirtythree,,,Thirtytwo,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Thirtyfour,,,Thirtythree,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Thirtyfive,,,Thirtyfour,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Thirtysix,,,Thirtyfive,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Thirtyseven,,,Thirtysix,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Thirtyeight,,,Thirtyseven,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Thirtynine,,,Thirtyeight,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Forty,,,Thirtynine,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fortyone,,,Forty,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fortytwo,,,Fortyone,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fortythree,,,Fortytwo,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fortyfour,,,Fortythree,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fortyfive,,,Fortyfour,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fortysix,,,Fortyfive,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fortyseven,,,Fortysix,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fortyeight,,,Fortyseven,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fortynine,,,Fortyeight,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fifty,,,Fortynine,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fiftyone,,,Fifty,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fiftytwo,,,Fiftyone,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fiftythree,,,Fiftytwo,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fiftyfour,,,Fiftythree,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fiftyfive,,,Fiftyfour,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fiftysix,,,Fiftyfive,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fiftyseven,,,Fiftysix,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fiftyeight,,,Fiftyseven,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Fiftynine,,,Fiftyeight,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Sixty,,,Fiftynine,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Sixtyone,,,Sixty,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Sixtytwo,,,Sixtyone,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Sixtythree,,,Sixtytwo,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Sixtyfour,,,Sixtythree,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Sixtyfive,,,Sixtyfour,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Sixtysix,,,Sixtyfive,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Sixtyseven,,,Sixtysix,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Sixtyeight,,,Sixtyseven,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Sixtynine,,,Sixtyeight,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Seventy,,,Sixtynine,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Seventyone,,,Seventy,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Seventytwo,,,Seventyone,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Seventythree,,,Seventytwo,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Seventyfour,,,Seventythree,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Seventyfive,,,Seventyfour,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Seventysix,,,Seventyfive,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Seventyseven,,,Seventysix,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Seventyeight,,,Seventyseven,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Seventynine,,,Seventyeight,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Eighty,,,Seventynine,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Eightyone,,,Eighty,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Eightytwo,,,Eightyone,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Eightythree,,,Eightytwo,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Eightyfour,,,Eightythree,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,ASL_Mapping,BIG_Object,public,Receive_Unfeasonableness,,,1,
parameter,A_Big_Object,in,,,,,,
typeref,instance of BIG_Object,,,,,,,
typeref,,,,,,,,
parameter,Current_Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Expected_Attribute,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,[] = RPT1:Start_Test [Current_Test%2C "1103-0000-01-0522"%2C "ASL_Mapping"%2C"Big Object"%2C "Receive big IH"]%0A%0Aif A_Big_Object != UNDEFINED then%0A%0A   if A_Big_Object.One = Expected_Attribute and \%0A      A_Big_Object.Forty = Expected_Attribute and  \%0A      A_Big_Object.Eightyfour = Expected_Attribute then%0A%0A      [] = RPT2:Test_Passed ["Valid big IH"%2C Current_Test%2C Expected_Attribute]%0A   else%0A       [] = RPT3:Test_Failed["Mismatching big attributes"%2C Current_Test%2C A_Big_Object.One]%0A   endif%0A%0Aelse%0A   [] = RPT3:Test_Failed["Invalid big IH"%2C Current_Test%2C -1]%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
state,,BIG_Object,Idle_State,,1,,,
codeblock,# If we gete here%2C there is serious grief.%0A%0A[] = RPT5:Test_Text[0%2C"Major Error"]%0A%0A#$ADA_INLINE%0A%0A#   with Application_Types;%0A%0A#   raise Application_Types.Stop_Application;%0A%0A#$END_ADAINLINE,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,BIG_Object,How_Big,,2,,,
parameter,Big_IH,in,,,,,,
typeref,instance of BIG_Object,,,,,,,
typeref,,,,,,,,
parameter,Current_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Expected_Result_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,[] = RPT1:Start_Test[Current_Test_Number%2C "Null Requid"%2C "ASL Mapping"%2C "Big Object"%2C "generate to big object"]%0A%0ALocal_Test_Number = Current_Test_Number%0A%0A# Compare the attributes of this to the control data%0A%0Aif this.One = Expected_Result_Number and \%0A   this.Forty = Expected_Result_Number and \%0A   this.Eightyfour = Expected_Result_Number then%0A%0A   [] = RPT2:Test_Passed["this and control data match"%2C Local_Test_Number%2C 0]%0A%0Aelse%0A%0A   [] = RPT3:Test_Failed["this and control data do not match"%2C Local_Test_Number%2C 0]%0A%0Aendif%0A%0ALocal_Test_Number = Local_Test_Number + 1%0A%0A# Update the test number so that the result of the next generation%0A# has it's own test number%2C and pass through the instance handle of the big object%0A# that has so far been woefully ignored.%0A%0Agenerate objBIG4:To_Next_Stage (Big_IH%2C Local_Test_Number) to this%0A,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,BIG_Object,Complete,,3,,,
codeblock,[] = RPT5:Test_Text[this.One%2C "Generating into termination state now"]%0A%0A%0A[] = ASL_Mapping4::Delete_Report_Data[]%0A%0Adelete this%0A,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,BIG_Object,Next_Stage,,4,,,
parameter,Big_IH,in,,,,,,
typeref,instance of BIG_Object,,,,,,,
typeref,,,,,,,,
parameter,Next_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,%0A# ###########################################################################%0A%0A[] = RPT1:Start_Test[Next_Test_Number%2C "Null Requid"%2C "ASL Mapping"%2C "Big Object"%2C "Compare control IH and this"]%0A%0A# Compare the attributes of this to the control IH%0A%0Aif this.One !=  Big_IH.One and \%0A   this.Forty != Big_IH.Forty and \%0A   this.Eightyfour != Big_IH.Eightyfour then%0A%0A   [] = RPT2:Test_Passed["this & control IH do not match"%2C Next_Test_Number%2C 0]%0A%0Aelse%0A%0A   [] = RPT3:Test_Failed["this & control IH match"%2C Next_Test_Number%2C this.Eightyfour]%0A%0Aendif%0A%0Agenerate objBIG2:To_Complete() to this,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
event,Have_A_Biggie,,1,,,,,
parameter,Big_IH,in,,,,,,
typeref,instance of BIG_Object,,,,,,,
typeref,,,,,,,,
parameter,Current_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Expected_Result_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,To_Complete,,2,,,,,
event,,,,,,,,
event,This_Wont_Happen,,3,,,,,
event,,,,,,,,
event,To_Next_Stage,,4,,,,,
parameter,Big_IH,in,,,,,,
typeref,instance of BIG_Object,,,,,,,
typeref,,,,,,,,
parameter,Next_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,Have_A_Biggie,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,To_Complete,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,This_Wont_Happen,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,To_Next_Stage,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle_State,,,Have_A_Biggie,How_Big,,,
transition,,,,,,,,
transition,Idle_State,,,To_Complete,Ignore,,,
transition,,,,,,,,
transition,Idle_State,,,This_Wont_Happen,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle_State,,,To_Next_Stage,Ignore,,,
transition,,,,,,,,
transition,How_Big,,,Have_A_Biggie,Ignore,,,
transition,,,,,,,,
transition,How_Big,,,To_Complete,Cannot_Happen,,,
transition,,,,,,,,
transition,How_Big,,,This_Wont_Happen,Idle_State,,,
transition,,,,,,,,
transition,How_Big,,,To_Next_Stage,Next_Stage,,,
transition,,,,,,,,
transition,Complete,,,Have_A_Biggie,Cannot_Happen,,,
transition,,,,,,,,
transition,Complete,,,To_Complete,Cannot_Happen,,,
transition,,,,,,,,
transition,Complete,,,This_Wont_Happen,Cannot_Happen,,,
transition,,,,,,,,
transition,Complete,,,To_Next_Stage,Cannot_Happen,,,
transition,,,,,,,,
transition,Next_Stage,,,Have_A_Biggie,Ignore,,,
transition,,,,,,,,
transition,Next_Stage,,,To_Complete,Complete,,,
transition,,,,,,,,
transition,Next_Stage,,,This_Wont_Happen,Cannot_Happen,,,
transition,,,,,,,,
transition,Next_Stage,,,To_Next_Stage,Ignore,,,
transition,,,,,,,,
transitiontable,,,,,,,,
description, This object shall contain 80+  attributes%2C just to see what happens.%0A This as a result of DEFECT 718.%0A,,,,,,,
object,,,,,,,,
object,Default_Vals,DV,14,,,,,
attribute,The_Integer,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,The_Real,,,The_Integer,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,The_Text,,,The_Real,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,The_Boolean,,,The_Text,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,ASL_Mapping,Default_Vals,public,Default_Vals_In_Object,,,1,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Returning_No,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,[] = RPT1:Start_Test[Test%2C "1241-0000-01-0115"%2C "ASL Mapping"%2C "Check defaults vals in object"%2C "Check defaults vals in object"]%0A[] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0114"]%0A%0ASet_Vals   = FALSE%0AHas_Failed = FALSE%0A%0A[Host] = WAW1:What_Env[]%0A%0AInstDV = create Default_Vals%0A%0Aif Set_Vals then%0A   InstDV.The_Integer = 10%0A   InstDV.The_Real    = 10.0%0A   InstDV.The_Text    = "Value Set"%0A   InstDV.The_Boolean = TRUE%0Aendif%0A%0A   if not Set_Vals then%0A%0A      if InstDV.The_Integer = 0 then%0A%0A         if InstDV.The_Real = 0.0 then%0A%0A            if not InstDV.The_Boolean then%0A%0A               if Host = "WACA" then %0A%0A                  if InstDV.The_Text != "                                " then%0A                     Has_Failed   = TRUE%0A                     Failure_Code = -10%0A                  endif%0A%0A               else%0A%0A                   if InstDV.The_Text != "" then%0A                     Has_Failed   = TRUE%0A                     Failure_Code = -10%0A                  endif                 %0A%0A               endif%0A%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = -20%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -30%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -40%0A      endif%0A%0A   endif%0A%0A#-------------------------------------------------------------------#%0A%0A   if not Has_Failed then%0A      [] = RPT2:Test_Passed["DV"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["DV"%2C Test%2C Failure_Code]%0A   endif%0A%0AReturning_No = Test + 1,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
object,,,,,,,,
object,Left,objLeft,17,,,,,
attribute,idL,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,attrL,,,idL,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,LeftRight,objLR,19,,,,,
attribute,idL,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R1,,is_next_to,Left,idL,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idR,preferred,,idL,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R1,,is_next_to,Right,idR,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idAR,,,idR,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R2,,is_next_to,Another_Right,idAR,,,
referential,,,,,,,,
attribute,,,,,,,,
identifier,symbolic,,,,,,,
attribute,idL,,,,,,,
attribute,,,,,,,,
identifier,,,,,,,,
object,,,,,,,,
object,Nested_FOR,NstFOR,9,,,,,
attribute,ReferenceNstFOR,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,ReferenceNstFOR,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicate that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
operation,ASL_Mapping,Nested_FOR,public,do_nested_for,,,1,
parameter,Test_Start,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Final_Test,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# Nested FOR statements%0A#------------------------------------------------------------------------#%0A%0A   Test = Test_Start%0A%0A#------------------------------------------------------------------------#%0A# Test 1 - Nested FOR statements%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0431"%2C "ASL Mapping"%2C "objNESTEDFOR"%2C "Nested FOR statements"]%0A%0A   Has_Failed = FALSE%0A%0A   # Create a set of instances to loop over%0A   {all_instances} = find-all Nested_FOR%0A   {all_instancesA} = find-all Nested_FOR%0A   {all_instancesB} = find-all Nested_FOR%0A   {all_instancesC} = find-all Nested_FOR%0A   {all_instancesD} = find-all Nested_FOR%0A   {all_instancesE} = find-all Nested_FOR%0A   {all_instancesF} = find-all Nested_FOR%0A%0A   passA = 0%0A   passB = 0%0A   passC = 0%0A   passD = 0%0A   passE = 0%0A   passF = 0%0A  %0A   # Perform the test%0A   for each_instanceA in {all_instancesA} do%0A      passA = passA + 1%0A %0A      for each_instanceB in {all_instancesB} do%0A         passB = passB + 1%0A%0A         for each_instanceC in {all_instancesC} do%0A            passC = passC + 1%0A%0A            for each_instanceD in {all_instancesD} do%0A               passD = passD + 1%0A%0A               for each_instanceE in {all_instancesE} do%0A                  passE = passE + 1%0A%0A                  for each_instanceF in {all_instancesF} do%0A                     tempF = each_instanceF.ResultA + 1%0A                     each_instanceF.ResultA = tempF%0A                     passF = passF + 1%0A                  endfor%0A%0A               endfor%0A%0A            endfor%0A%0A         endfor%0A   %0A      endfor%0A%0A   endfor%0A%0A%0A   # Check that the attribute 'ResultA' contains the correct value%0A   for each_instance in {all_instances} do%0A%0A      if each_instance.ResultA != 3125 then%0A         [] = RPT3:Test_Failed["objNESTEDFOR"%2C Test%2C-1]%0A         Has_Failed = TRUE%0A      endif%0A%0A   endfor%0A%0A   # Check that the loop variables are still valid%0A   if (each_instanceA = UNDEFINED)|(each_instanceB = UNDEFINED)|\%0A      (each_instanceC = UNDEFINED)|(each_instanceD = UNDEFINED)|\%0A      (each_instanceE = UNDEFINED)|(each_instanceF = UNDEFINED) then%0A%0A      [] = RPT3:Test_Failed["objNESTEDFOR"%2C Test%2C-2]%0A      Has_Failed = TRUE%0A   endif%0A%0A   # Test complete%0A   if !Has_Failed then%0A      [] = RPT2:Test_Passed["objNESTEDFOR"%2C Test%2C0]%0A   endif%0A%0A   Test = Test + 1%0A%0A   Final_Test = Test,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
event,Fault,,1,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
event,,,,,,,,
event,StartA,,3,,,,,
event,,,,,,,,
description, This object verifies nested 'FOR' statements.%0A,,,,,,,
object,,,,,,,,
object,Nested_IF,NstIF,8,,,,,
attribute,ReferenceNstIF,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,ReferenceNstIF,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute if manipulated to indicated that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
operation,ASL_Mapping,Nested_IF,public,do_nested_if,,,1,
parameter,an_instanceNESTED_IF,in,,,,,,
typeref,instance of Nested_IF,,,,,,,
typeref,,,,,,,,
parameter,Test_Start,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Final_Test,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A#%0A# Nested IF statements%2C WITHOUT LOGICAL CONDITIONS%0A#%0A# The ASL <if ... else> statement shall be supported%0A# 1103-0000-01-0422%0A#%0A# Logical conditions returning a Boolean data type of true or false shall%0A# be supported%0A# 1103-0000-01-0911%0A#%0A#------------------------------------------------------------------------#%0A%0A   Test = Test_Start%0A%0A#------------------------------------------------------------------------#%0A# Test 1 - Nested IFs that don't contain logic.%0A#------------------------------------------------------------------------#%0A%0A  [] = RPT1:Start_Test[Test%2C "1103-0000-01-0422"%2C "ASL Mapping"%2C"objNESTEDIF"%2C "Do not contain logic"]%0A%0A   Has_Failed = FALSE%0A%0A   # Initialise temporary variables%0A   tempA = 1%0A   tempB = 2%0A   tempC = 3%0A   tempD = 4%0A   tempE = 5%0A%0A   # Perform the test%2C 12 Nested IF statements%0A   if tempA = 1 then %0A%0A      if tempB > 1 then %0A%0A         if tempC < 4 then %0A%0A            if tempD <= 4 then %0A%0A               if tempE >= 5 then %0A%0A                  if tempA != 2 then %0A%0A                     if tempB <= 3 then %0A%0A                        if tempC >= 2 then %0A %0A                           if tempD != 3 then %0A%0A                              if tempE < 6 then %0A%0A                                 if tempA > 0 then %0A%0A                                    if tempB = 2 then %0A                                       an_instanceNESTED_IF.ResultA = 10%0A                                    else%0A                                       [] = RPT3:Test_Failed["objNESTEDIF"%2C Test%2C-10]%0A                                       Has_Failed = TRUE%0A                                    endif%0A                                 else%0A                                    [] = RPT3:Test_Failed["objNESTEDIF"%2C Test%2C-20]%0A                                    Has_Failed = TRUE%0A                                 endif%0A                              else%0A                                 [] = RPT3:Test_Failed["objNESTEDIF"%2C Test%2C-30]%0A                                 Has_Failed = TRUE%0A                              endif%0A                           else%0A                              [] = RPT3:Test_Failed["objNESTEDIF"%2C Test%2C-40]%0A                              Has_Failed = TRUE%0A                           endif%0A                        else%0A                           [] = RPT3:Test_Failed["objNESTEDIF"%2C Test%2C-50]%0A                           Has_Failed = TRUE%0A                        endif%0A                     else%0A                        [] = RPT3:Test_Failed["objNESTEDIF"%2C Test%2C-60]%0A                        Has_Failed = TRUE%0A                     endif%0A                  else%0A                     [] = RPT3:Test_Failed["objNESTEDIF"%2C Test%2C-70]%0A                     Has_Failed = TRUE%0A                  endif%0A               else%0A                  [] = RPT3:Test_Failed["objNESTEDIF"%2C Test%2C-80]%0A                  Has_Failed = TRUE%0A               endif%0A            else%0A               [] = RPT3:Test_Failed["objNESTEDIF"%2C Test%2C-90]%0A               Has_Failed = TRUE%0A            endif%0A         else%0A            [] = RPT3:Test_Failed["objNESTEDIF"%2C Test%2C-100]%0A            Has_Failed = TRUE%0A         endif%0A      else%0A         [] = RPT3:Test_Failed["objNESTEDIF"%2C Test%2C-110]%0A         Has_Failed = TRUE%0A      endif%0A   else%0A      [] = RPT3:Test_Failed["objNESTEDIF"%2C Test%2C-120]%0A      Has_Failed = TRUE%0A   endif%0A%0A   # Test complete%0A   if !Has_Failed then%0A      [] = RPT2:Test_Passed["objNESTEDIF"%2C Test%2C0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A# Test 2 - Nested IF statements%2C WITH LOGICAL CONDITIONS%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0422"%2C "ASL Mapping"%2C"objNESTEDIF"%2C "Contain logical and"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0911"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0913"]%0A%0A   Has_Failed = FALSE%0A%0A   # Initialise temporary variables%0A   tempA = 1%0A   tempB = 2%0A   tempC = 3%0A   tempD = 4%0A   tempE = 5%0A%0A   # Perform the test%0A   if ((tempA = 1) & (tempB != 1) & (tempC < 4) & (tempD > 3) & \%0A      (tempE <= 5) & (tempA >= 1) & (tempB <= 3) & (tempC >= 1)) then %0A%0A      if ((tempA = 1) & (tempB != 1) & (tempC < 4) & (tempD > 3) & \%0A          (tempE <= 5) & (tempA >= 1) & (tempB <= 3) & (tempC >= 1)) then %0A      %0A         an_instanceNESTED_IF.ResultA = 20%0A      else%0A         Has_Failed = TRUE%0A         [] = RPT3:Test_Failed["objNESTEDIF"%2C Test%2C -10]%0A      endif%0A%0A   else%0A      Has_Failed = TRUE%0A      [] = RPT3:Test_Failed["objNESTEDIF"%2C Test%2C -20]%0A   endif%0A%0A   if !Has_Failed then%0A      [] = RPT2:Test_Passed["objNESTEDIF"%2C Test%2C 0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#------------------------------------------------------------------------#%0A# Test 3 - Nested IFs that contain logic%2C using |%0A#------------------------------------------------------------------------#%0A  %0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0422"%2C "ASL Mapping"%2C"objNESTEDIF"%2C "Contain logical or"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0911"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0913"]%0A%0A   Has_Failed = FALSE%0A%0A   # Perform the test%2C 12 Nested IF statements%0A   if ((tempA = 2) | (tempB != 2) | (tempC < 12) | (tempD > 3) | \%0A      (tempE <= 5) | (tempA >= 7) | (tempB <= 1) | (tempC >= 2)) then %0A%0A      if ((tempA = 1) | (tempB != 1) | (tempC < 4) | (tempD > 4) | \%0A         (tempE <= 5) | (tempA >= 1) | (tempB <= 1) | (tempC >= 2)) then %0A%0A         an_instanceNESTED_IF.ResultA = 30%0A      else%0A         [] = RPT3:Test_Failed["objNESTEDIF"%2C Test%2C-10]%0A         Has_Failed = TRUE%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["objNESTEDIF"%2C Test%2C-20]%0A      Has_Failed = TRUE%0A   endif%0A%0A   if !Has_Failed then%0A      [] = RPT2:Test_Passed["objNESTEDIF"%2C Test%2C0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#------------------------------------------------------------------------#%0A# Test 4 - Nested IFs that contain logic%2C mixed%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0422"%2C "ASL Mapping"%2C"objNESTEDIF"%2C "Contain logical mixed"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0911"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0913"]%0A%0A   Has_Failed = FALSE%0A%0A   # Perform the test%2C 12 Nested IF statements%0A   if (((tempA = 1) & (tempB != 1)) | (tempC < 4) | (tempD > 3) | \%0A      (tempE <= 5) | (tempA >= 1) | (tempB <= 1) | (tempC >= 2)) then %0A%0A      if ((tempA = 1) | (((tempB != 1) & (tempC < 4)) | (tempD > 3)) | \%0A         (tempE <= 5) | ((tempA >= 1) & (tempB <= 1) & (tempC >= 2))) then %0A%0A         an_instanceNESTED_IF.ResultA = 40%0A      else%0A         [] = RPT3:Test_Failed["objNESTEDIF"%2C Test%2C-10]%0A         Has_Failed = TRUE%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["objNESTEDIF"%2C Test%2C-20]%0A      Has_Failed = TRUE%0A   endif%0A%0A   if !Has_Failed then%0A      [] = RPT2:Test_Passed["objNESTEDIF"%2C Test%2C0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A#------------------------------------------------------------------------#%0A%0AFinal_Test = Test%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
event,Fault,,1,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
event,,,,,,,,
event,StartA,,3,,,,,
event,,,,,,,,
event,StartB,,4,,,,,
event,,,,,,,,
description, This object verifies nested 'IF' statements and multiple conditions that the statement must verify.%0A,,,,,,,
object,,,,,,,,
object,Nested_LOOP,NstLOOP,10,,,,,
attribute,ReferenceNstLOOP,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,ReferenceNstLOOP,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicate that th required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
operation,ASL_Mapping,Nested_LOOP,public,do_nested_loops,,,1,
parameter,an_instanceNESTED_LOOP,in,,,,,,
typeref,instance of Nested_LOOP,,,,,,,
typeref,,,,,,,,
parameter,Test_Start,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Final_Test,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# Nested LOOP statements%0A#------------------------------------------------------------------------#%0A%0A   Test = Test_Start%0A%0A#------------------------------------------------------------------------#%0A# Test 1 - Nest Loop statements%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0441"%2C "ASL Mapping"%2C "objNESTEDLOOP"%2C"Nest Loop statements"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0452"]%0A%0A   Has_Failed = FALSE%0A%0A   # Ensure the attribute 'ResultA' is set to zero%0A   if an_instanceNESTED_LOOP.ResultA != 0 then%0A      an_instanceNESTED_LOOP.ResultA = 0%0A   endif%0A%0A   # Perform the test%0A   countA = 0%0A   loop%0A      countB = 0%0A%0A      loop%0A         countC = 0%0A%0A         loop%0A            countD = 0%0A%0A            loop%0A               countE = 0%0A      %0A               loop%0A                  countF = 0%0A  %0A                  loop%0A                     temp = an_instanceNESTED_LOOP.ResultA + 1%0A                     an_instanceNESTED_LOOP.ResultA = temp%0A                     countF = countF + 1%0A                     breakif countF = 5%0A                  endloop%0A      %0A                  temp = an_instanceNESTED_LOOP.ResultA + 1%0A                  an_instanceNESTED_LOOP.ResultA = temp%0A                  countE = countE + 1%0A                  breakif countE = 5%0A               endloop%0A   %0A               temp = an_instanceNESTED_LOOP.ResultA + 1%0A               an_instanceNESTED_LOOP.ResultA = temp%0A               countD = countD + 1%0A               breakif countD = 5%0A            endloop%0A   %0A            temp = an_instanceNESTED_LOOP.ResultA + 1%0A            an_instanceNESTED_LOOP.ResultA = temp%0A            countC = countC + 1%0A            breakif countC = 5%0A         endloop%0A%0A         temp = an_instanceNESTED_LOOP.ResultA + 1%0A         an_instanceNESTED_LOOP.ResultA = temp%0A         countB = countB + 1%0A         breakif countB = 5%0A      endloop%0A   %0A      temp = an_instanceNESTED_LOOP.ResultA + 1%0A      an_instanceNESTED_LOOP.ResultA = temp%0A      countA = countA + 1%0A      breakif countA = 5%0A   endloop%0A%0A   # Check that the value of attribute 'ResultA' is correct.%0A   if an_instanceNESTED_LOOP.ResultA != 19530 then%0A      [] = RPT3:Test_Failed["objNESTEDFOR"%2CTest%2C an_instanceNESTED_LOOP.ResultA]%0A      Has_Failed = TRUE%0A   endif%0A%0A   if !Has_Failed then%0A      [] = RPT2:Test_Passed["objNESTEDFOR"%2CTest%2C an_instanceNESTED_LOOP.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A   Final_Test = Test%0A%0A#------------------------------------------------------------------------#,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
event,Fault,,1,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
event,,,,,,,,
event,StartA,,3,,,,,
event,,,,,,,,
description, This object verifies nested 'LOOP' statements.%0A,,,,,,,
object,,,,,,,,
object,ObjectA,objA,15,,,,,
attribute,The_Int1,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,The_Int2,,,The_Int1,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,ObjectB,objB,16,,,,,
attribute,The_IntB1,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,The_IntB2,,,The_IntB1,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Object_FOR,objFOR,3,,,,,
attribute,ReferenceFOR,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,ReferenceFOR,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicated that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
operation,ASL_Mapping,Object_FOR,public,do_for_test,,,1,
parameter,Test_Start,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Final_Test,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A#%0A# FOR Tests%0A#%0A# The ASL <for> loop statement shall be supported%0A# 1103-0000-01-0431%0A#%0A# Break from and ASL <for> loop statement shall be supported%0A# 1103-0000-01-0432%0A#%0A#------------------------------------------------------------------------#%0A%0A#------------------------------------------------------------------------#%0A#Create several instances of the Object_FOR%0A#------------------------------------------------------------------------#%0A%0A   Count = 1%0A   Has_Failed = FALSE%0A%0A   loop%0A      newFOR = create unique Object_FOR with ResultA = 0%0A      Count = Count + 1%0A      breakif Count > 5%0A   endloop%0A%0A   Test = Test_Start%0A%0A#------------------------------------------------------------------------#%0A# Test 1 - FOR instance count%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0431"%2C "ASL Mapping"%2C "objFOR"%2C "FOR instance count"]%0A%0A   Count = 0%0A%0A   {all_instances_of_FOR} = find-all Object_FOR%0A%0A   for each_instance in {all_instances_of_FOR} do%0A      each_instance.ResultA = 10%0A      Count = Count + 1%0A   endfor%0A%0A   # Verify that the total number of instance affect was FIVE.%0A   if  Count != 5 then%0A      [] = RPT3:Test_Failed["objFOR"%2C Test%2C Count]%0A      Has_Failed = TRUE%0A   else%0A      [] = RPT2:Test_Passed["objFOR"%2C Test%2C Count]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A# Test 2 - FOR with BREAKIF%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0431"%2C "ASL Mapping"%2C "objFOR"%2C "FOR with BREAKIF"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0432"]%0A%0A   Count = 0%0A%0A   for each_instance in {all_instances_of_FOR} do%0A      each_instance.ResultA = 20%0A      Count = Count + 1%0A      breakif Count = 2%0A   endfor%0A%0A   # Verify that the total number of instance affect was TWO.%0A   if  Count != 2 then%0A      [] = RPT3:Test_Failed["objFOR"%2C Test%2C Count]%0A      Has_Failed = TRUE%0A   else%0A      [] = RPT2:Test_Passed["objFOR"%2C Test%2C Count]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#------------------------------------------------------------------------#%0A# Test 3 - FOR with BREAK%2C break after affecting one instance%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0431"%2C "ASL Mapping"%2C "objFOR"%2C "Break after once instance"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0432"]%0A%0A   Count = 0%0A%0A   for each_instance in {all_instances_of_FOR} do%0A      each_instance.ResultA = 30%0A      Count = Count + 1%0A      break%0A   endfor%0A%0A   # Verify that the total number of instance affect was ONE.%0A   if  Count != 1 then%0A      [] = RPT3:Test_Failed["objFOR"%2C Test%2C Count]%0A      Has_Failed = TRUE%0A   else%0A      [] = RPT2:Test_Passed["objFOR"%2C Test%2C Count]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#------------------------------------------------------------------------#%0A# Test 4 - FOR with BREAK%2C break before affecting any instance%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0431"%2C "ASL Mapping"%2C "objFOR"%2C "FOR test break before affecting any instance"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0432"]%0A%0A   Count = 0%0A%0A   for each_instance in {all_instances_of_FOR} do%0A      break%0A      each_instance.ResultA = 40%0A      Count = Count + 1%0A   endfor%0A%0A   # Verify that the total number of instance affect was ZERO.%0A   if  Count != 0 then%0A      [] = RPT3:Test_Failed["objFOR"%2C Test%2C Count]%0A      Has_Failed = TRUE%0A   else%0A      [] = RPT2:Test_Passed["objFOR"%2C Test%2C Count]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A#------------------------------------------------------------------------#%0A# Verify FOR with BREAK%2C break before affecting any instance%0A# Test 4.1%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0431"%2C "ASL Mapping"%2C "objFOR"%2C "FOR test verify test"]%0A%0A   # Verify that the attribute Result1 does not equal 40.%0A%0A   Has_Failed = FALSE%0A   last_failed_result = 0%0A%0A   for each_instance in {all_instances_of_FOR} do%0A%0A      if each_instance.ResultA = 40 then%0A         Has_Failed = TRUE%0A         last_failed_result = each_instance.ResultA%0A      endif%0A%0A   endfor%0A%0A   if not Has_Failed then%0A      [] = RPT2:Test_Passed["objFOR"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objFOR"%2C Test%2C last_failed_result]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A#------------------------------------------------------------------------#%0A# Test 6 - FOR with BREAKIF inside another logical statement%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0431"%2C "ASL Mapping"%2C "objFOR"%2C "BREAKIF inside a logical statement"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0432"]%0A%0A   Count = 0 %0A%0A   for each_instance in {all_instances_of_FOR} do%0A%0A      if Count != 3 then%0A         breakif Count > 2%0A      endif%0A%0A      each_instance.ResultA = 50%0A      Count = Count + 1%0A%0A   endfor%0A%0A   # Verify that the total number of instance affect was FOUR.%0A   if  Count != 4 then%0A      [] = RPT3:Test_Failed["objFOR"%2C Test%2C Count]%0A      Has_Failed = TRUE%0A   else%0A      [] = RPT2:Test_Passed["ObjFOR"%2C Test%2C Count]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 6%0A%0A#------------------------------------------------------------------------#%0A# Test 7 - FOR with BREAK inside another logical statement%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0431"%2C "ASL Mapping"%2C "objFOR"%2C "BREAKIF inside another logical statement"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0432"]%0A%0A   Count = 0%0A%0A   for each_instance in {all_instances_of_FOR} do%0A%0A      if Count = 3 then%0A         break%0A      endif%0A%0A      each_instance.ResultA = 60%0A      Count = Count + 1%0A%0A   endfor%0A%0A   # Verify that the total number of instance affect was THREE.%0A   if  Count != 3 then%0A      [] = RPT3:Test_Failed["objFOR"%2C Test%2C Count]%0A      Has_Failed = TRUE%0A   else%0A      [] = RPT2:Test_Passed["objFOR"%2C Test%2C Count]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 7%0A%0A#------------------------------------------------------------------------#%0A# Test 8 - After a FOR loop check that the loop variable is still valid%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "ASL Mapping"%2C "objFOR"%2C "FOR loop check variable is still valid"]%0A%0A   # Check that the previously used loop variable is still valid%0A   if each_instance = UNDEFINED then%0A      [] = RPT3:Test_Failed["objFOR"%2C Test%2C -1]%0A      Has_Failed = TRUE%0A   else%0A      each_instance.ResultA = 70%0A      [] = RPT2:Test_Passed["objFOR"%2C Test%2C each_instance.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 8%0A%0A#------------------------------------------------------------------------#%0A%0AFinal_Test = Test,,,,,,,
codeblock,,,,,,,,
description, Function to do the FOR tests.%0A,,,,,,,
operation,,,,,,,,
description, This object verifies the FOR statement.%0A,,,,,,,
object,,,,,,,,
object,Object_IF,objIF,2,,,,,
attribute,ReferenceIF,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,ReferenceIF,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicated that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
operation,ASL_Mapping,Object_IF,public,do_if_test,,,1,
parameter,Test_Start,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Final_Test,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# IF statement%0A# The ASL <if> statement shall be supported%0A# 1103-0000-01-0421%0A#%0A# The ASL <if ... else> statement shall be supported%0A# 1101-0000-01-0422%0A#------------------------------------------------------------------------#%0A%0A# create an instance to remember to test results%0AnewIF = create unique Object_IF with ResultA = 0 %0A%0ATest = Test_Start%0A%0A#------------------------------------------------------------------------#%0A# Test 1 - Enter IF THEN stage of condition with an integer value%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0422"%2C "ASL Mapping"%2C "objIF"%2C "IF test enter THEN stage"]%0A   [] = RPT5:Test_Text [Test%2C "The_First_Comment"]%0A   [] = RPT5:Test_Text [Test%2C "The_Second_Comment"]%0A   # Initialise temporary variable%0A   Temp = 1%0A%0A   # Perform the test%0A   if Temp = 1 then%0A      newIF.ResultA = 10%0A      [] = RPT2:Test_Passed["objIF"%2C Test%2C newIF.ResultA]%0A   else%0A      [] = RPT3:Test_Failed["objIF"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A# Test 2 - Enter ELSE stage of condition%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0422"%2C "ASL Mapping"%2C "objIF"%2C "IF test enter ELSE stage"]%0A%0A   # Initialise temporary variable%0A   Temp = 1%0A%0A   # Perform the test%0A   if Temp = 2 then%0A      [] = RPT3:Test_Failed["objIF"%2C Test%2C -10]%0A   else%0A      newIF.ResultA = 20%0A%0A      [] = RPT2:Test_Passed["objIF"%2C Test%2C newIF.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#------------------------------------------------------------------------#%0A# Test 3 - IF-THEN%2C enter THEN part%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0421"%2C "ASL Mapping"%2C "objIF"%2C "IF test enter THEN part"]%0A%0A   Temp = 2%0A%0A   # Check temporary variables values%0A   if Temp != 2 then%0A      [] = RPT3:Test_Failed["objIF"%2C Test%2C -10]%0A   endif%0A%0A   # Perform the test%0A   if Temp = 2 then%0A      newIF.ResultA = 30%0A      [] = RPT2:Test_Passed["objIF"%2C Test%2C newIF.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#------------------------------------------------------------------------#%0A# Test 4 - IF-THEN statement where condition is unfulfilled%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0421"%2C "ASL Mapping"%2C"objIF"%2C "If test condition unfulfilled"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0422"]%0A%0A   Temp = 2%0A%0A   # Perform the test%0A   if Temp = 3 then%0A      Temp = 4              %0A      # This statement should not be entered%0A   endif%0A%0A   # Check the results%0A   if Temp  = 4 then%0A      [] = RPT3:Test_Failed["objIF"%2C Test%2C -10]%0A   else%0A      newIF.ResultA = 40%0A      [] = RPT2:Test_Passed["objIF"%2C Test%2C newIF.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A#------------------------------------------------------------------------#%0A# Test 5 - Boolean test should enter IF THEN condition%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0422"%2C "ASL Mapping"%2C"objIF"%2C "Boolean tests TRUE 1"]%0A%0A   A = TRUE%0A   B = TRUE%0A%0A   if A = B then%0A      newIF.ResultA = 50%0A      [] = RPT2:Test_Passed["Boolean A = B TRUE"%2C Test%2C newIF.ResultA]%0A   else%0A      [] = RPT3:Test_Failed["Boolean A = B TRUE"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A#------------------------------------------------------------------------#%0A# Test 6 - Boolean test should enter IF THEN condition%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0422"%2C "ASL Mapping"%2C"objIF"%2C "Boolean tests TRUE 2"]%0A%0A   A = TRUE%0A%0A   if A then%0A      newIF.ResultA = 60%0A      [] = RPT2:Test_Passed["Boolean A TRUE"%2C Test%2C newIF.ResultA]%0A   else%0A      [] = RPT3:Test_Failed["Boolean A TRUE"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 6%0A%0A#------------------------------------------------------------------------#%0A# Test 7 - Boolen test should enter IF THEN condition%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0422"%2C "ASL Mapping"%2C"objIF"%2C "Boolean tests FALSE 1"]%0A%0A   A = TRUE%0A   B = FALSE%0A%0A   if A != B then%0A      newIF.ResultA = 70%0A      [] = RPT2:Test_Passed["Boolean A != B FALSE"%2C Test%2C newIF.ResultA]%0A   else%0A      [] = RPT3:Test_Failed["Boolean A != B FALSE"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 7%0A%0A#------------------------------------------------------------------------#%0A# Test 8 - Should enter IF THEN Condition%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0422"%2C "ASL Mapping"%2C"objIF"%2C "Boolean tests FALSE 2"]%0A%0A   A = TRUE%0A   B = FALSE%0A%0A   if !B then%0A      newIF.ResultA = 80%0A      [] = RPT2:Test_Passed["Boolean !B FALSE"%2C Test%2C newIF.ResultA]%0A   else%0A      [] = RPT3:Test_Failed["Boolean !B FALSE"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# Test 8%0A%0A#------------------------------------------------------------------------#%0A# Test 9 - Boolean test should enter ELSE part of condition%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0422"%2C "ASL Mapping"%2C"objIF"%2C "Boolean tests FALSE 3"]%0A%0A   A = TRUE%0A   B = FALSE%0A%0A   if !A then%0A      [] = RPT3:Test_Failed["Boolean !A TRUE"%2C Test%2C -10]%0A   else%0A      newIF.ResultA = 90%0A      [] = RPT2:Test_Passed["Boolean !A TRUE"%2C Test%2C newIF.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 9%0A%0A#------------------------------------------------------------------------#%0A%0AFinal_Test = Test,,,,,,,
codeblock,,,,,,,,
description, Object based function for performing 'if' tests. Tests simple logical expressions on Integer local variables and requires instance creation%2C attribute assignment.%0A,,,,,,,
operation,,,,,,,,
description, This object verifies the 'IF' statement.%0A,,,,,,,
object,,,,,,,,
object,Object_LOGIC,objLOGIC,7,,,,,
attribute,IntegerAttr,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, An integer%0A,,,,,,,
attribute,,,,,,,,
attribute,TextAttr,,,IntegerAttr,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,EnumerationAttr,,,TextAttr,,,,
typeref,Enum,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,BooleanAttr,,,EnumerationAttr,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,BooleanAttr,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicate that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
attribute,ReferenceLOGIC,preferred,,ResultA,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,RealAttr,,,ReferenceLOGIC,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,ASL_Mapping,Object_LOGIC,public,do_arithmetic_and_logic,,,1,
parameter,an_instanceLOGIC,in,,,,,,
typeref,instance of Object_LOGIC,,,,,,,
typeref,,,,,,,,
parameter,Test_Start,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Final_Test,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# Arithmetical calculations%0A#%0A# Assigning arithmetic calculations to a variable shall be supported%0A# 1103-0000-01-0811%0A#%0A# Assigning arithmetic calculations to an attribute shall be supported%0A# 1103-0000-01-0812%0A#%0A# Arithmetic operations shall be limited to the numeric base type Integer%0A# and Real only%0A# 1103-0000-01-0813%0A#%0A# The following operators shall be supported: +%2C -%2C /%2C *%2C ^%2C unary -%0A# 1103-0000-01-0814%0A#%0A# The rules of precedence shall be defined by the Ada language and should%0A# be clarified with brackets where necessary%0A# 1103-0000-01-0815%0A#%0A#------------------------------------------------------------------------#%0A%0A   [Host] = WAW1:What_Env[]%0A   Test = Test_Start%0A%0A#------------------------------------------------------------------------#%0A# Test 1 - Arithmetical operation +%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0811"%2C "ASL Mapping"%2C "objLOGIC"%2C "Arithmetical ADD operation"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0814"]%0A%0A   Temp = 1 + 2 + 3%0A   an_instanceLOGIC.ResultA = Temp%0A%0A   if Temp != 6 then%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   else%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A# Test 2 - Arithmetical operation -%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C"1103-0000-01-0811"%2C "ASL Mapping"%2C "objLOGIC"%2C "Arithmetical SUBTRACT operation"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0814"]%0A%0A   Temp = 10 - 3 - 4 - 1%0A   an_instanceLOGIC.ResultA = Temp%0A%0A   if Temp != 2 then%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   else%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#------------------------------------------------------------------------#%0A# Test 3 - Arithmetical DIVIDE operation%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0811"%2C "ASL Mapping"%2C "objLOGIC"%2C "Arithmetical DIVIDE operation"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0814"]%0A%0A   Has_Failed = FALSE%0A%0A   Temp = 10 / 2%0A   an_instanceLOGIC.ResultA = Temp%0A%0A   if Temp != 5 then%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A      Has_Failed = TRUE%0A   endif%0A%0A   Temp = 16 / 4 / 2%0A   an_instanceLOGIC.ResultA = Temp%0A%0A   if Temp != 2 then%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -20]%0A      Has_Failed = TRUE%0A   endif%0A%0A   if !Has_Failed then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#------------------------------------------------------------------------#%0A# Test 4 - Arithmetical operation *%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0811"%2C "ASL Mapping"%2C "objLOGIC"%2C "Arithmetical MULTIPLY operation "]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0814"]%0A%0A   Has_Failed = FALSE%0A%0A   Temp = 10 * 2%0A   an_instanceLOGIC.ResultA = Temp%0A%0A   if Temp != 20 then%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A      Has_Failed = TRUE%0A   endif%0A%0A   Temp = 10 * 2 * 5%0A   an_instanceLOGIC.ResultA = Temp%0A%0A   if Temp != 100 then%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -20]%0A      Has_Failed = TRUE%0A   endif%0A%0A   if !Has_Failed then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A#------------------------------------------------------------------------#%0A# Test 5 - Arithmetical operation ^%0A#          The following is not supported by ISIM%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0814"%2C "ASL Mapping"%2C "objLOGIC"%2C "Arithmetical POWER operation 1"]%0A%0A   if Host = "ISIM" then%0A      Supported = FALSE%0A      Temp = 1%0A   else%0A      Supported = TRUE%0A%0A      #$ADA_INLINE%0A      #   Temp := 2**10;%0A      #$END_ADAINLINE%0A   endif%0A%0A   an_instanceLOGIC.ResultA = Temp%0A%0A   if Supported = TRUE then%0A%0A      if Temp != 1024 then%0A         [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A      else%0A         [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A      endif%0A%0A   else%0A      [] = RPT4:Test_Unsupported[Test]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A# ------------------------------------------------------------------------#%0A# Test 6 - Arithmetical POWER operation 2%0A#          The following is not supported by ISIM%0A# ------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0814"%2C "ASL Mapping"%2C "objLOGIC"%2C "Arithmetical POWER operation 2"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0815"]%0A%0A   if Host = "ISIM" then%0A      Supported = FALSE%0A      Temp = 1%0A   else%0A      Supported = TRUE%0A%0A      #$ADA_INLINE%0A      #   Temp := (2**2)**2;%0A      #$END_ADAINLINE%0A   endif%0A%0A   if Supported = TRUE then%0A      an_instanceLOGIC.ResultA = Temp%0A     %0A      if Temp != 16 then%0A         [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A      else%0A         [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A      endif%0A%0A   else   %0A      [] = RPT4:Test_Unsupported[Test]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 6%0A%0A#------------------------------------------------------------------------#%0A# Test 7 - Complex arithmetic operations 1%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0814"%2C "ASL Mapping"%2C "objLOGIC"%2C "Complex arithmetic operations 1"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0815"]%0A%0A   Has_Failed = FALSE%0A%0A   # Complex logical operations%0A%0A   if Host = "ISIM" then%0A      Supported = FALSE%0A      Temp = 1%0A   else%0A      Supported = TRUE%0A%0A      #$ADA_INLINE%0A      #   Temp := Application_Types.Base_Integer_Type((3 * 4) + 13)**2;%0A      #$END_ADAINLINE%0A%0A   endif%0A%0A   if Supported = TRUE then%0A      an_instanceLOGIC.ResultA = Temp%0A   %0A      if Temp != 625 then%0A         [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A      else%0A         [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A      endif%0A%0A   else   %0A      [] = RPT4:Test_Unsupported[Test]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 7%0A%0A#------------------------------------------------------------------------#%0A# Test 8 -Complex arithmetic operations 2%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0814"%2C "ASL Mapping"%2C "objLOGIC"%2C "Complex arithmetic operations 2"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0815"]%0A%0A   if Host = "ISIM" then%0A      Supported = FALSE%0A      Temp = 1%0A   else%0A      Supported = TRUE%0A%0A      #$ADA_INLINE%0A      #   Temp := 100 - Application_Types.Base_Integer_Type((50 - 46)/2) + 2**(2 + 3);%0A      #$END_ADAINLINE%0A%0A   endif%0A%0A   if Supported = TRUE then%0A      an_instanceLOGIC.ResultA = Temp%0A%0A      if Temp != 130 then%0A         [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A      else%0A         [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A      endif%0A%0A   else   %0A      [] = RPT4:Test_Unsupported[Test]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 8%0A%0A#------------------------------------------------------------------------#%0A# Test 9 - Evaluation order%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0814"%2C "ASL Mapping"%2C "objLOGIC"%2C "Evaluation order"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0815"]%0A%0A   Has_Failed = FALSE%0A%0A   # Parenthical expressions%0A   Temp = 3 * 3 * 3 + 4 + 13 - 2%0A   an_instanceLOGIC.ResultA = Temp%0A%0A   if Temp != 42 then%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   else%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 9%0A%0A#------------------------------------------------------------------------#%0A# Test 10 - Evaluation order 1%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0814"%2C "ASL Mapping"%2C "objLOGIC"%2C "Evaluation order 1"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0815"]%0A%0A   Temp = 3 - 2 * 3 * 3 + 4 + 13 - 2%0A   an_instanceLOGIC.ResultA = Temp%0A%0A   if Temp != 0 then%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   else%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 10%0A%0A#------------------------------------------------------------------------#%0A# Test 11 - Evaluation order 2%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0814"%2C "ASL Mapping"%2C "objLOGIC"%2C "Evaluation order 2"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0815"]%0A%0A   Temp = (3 - 2) * 3 * 3 + 4 + 13 - 2%0A   an_instanceLOGIC.ResultA = Temp%0A%0A   if Temp != 24 then%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   else%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 11%0A%0A#------------------------------------------------------------------------#%0A# Test 12 - Evaluation order 3%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0814"%2C "ASL Mapping"%2C "objLOGIC"%2C "Evaluation order 3"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0815"]%0A%0A   Temp = ((3 - 2) + 3 - (4 - 2)) * 3%0A   an_instanceLOGIC.ResultA = Temp%0A %0A   if Temp != 6 then%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   else%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 12%0A%0A#------------------------------------------------------------------------#%0A# Test 13 - Arithmetic operations on an attrubute. %0A#           Arithmetic PLUS operation%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0812"%2C "ASL Mapping"%2C "objLOGIC"%2C "Add operation on attribute"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0814"]%0A%0A   if Host = "WACA" then%0A      #$ADA_INLINE%0A      #%0A      #   Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr := 1 + 2 + 3;%0A      #   Temp := Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr;%0A      #$END_ADAINLINE%0A   else%0A      Temp = 6%0A   endif%0A%0A   #an_instanceLOGIC.IntegerAttr = 1 + 2 + 3%0A%0A   if Temp = 6 then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 13%0A    %0A%0A#------------------------------------------------------------------------#%0A# Test 14 - Arithmetic operations on an attribute.%0A#           Arithmetic - operation%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0812"%2C "ASL Mapping"%2C "objLOGIC"%2C "Subtract operation on attribute"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0814"]%0A%0A   if Host = "WACA" then%0A      #$ADA_INLINE%0A      #%0A      #   Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr := 10 - 3 - 2 - 1;%0A      #   Temp := Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr;%0A      #$END_ADAINLINE%0A   else%0A      Temp = 4%0A   endif%0A%0A   if Temp = 4 then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C Temp]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C Temp]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 14%0A%0A#------------------------------------------------------------------------#%0A# Test 15 - Arithmetic operations on an attribute.%0A#           Arithmetic DEVIDE operation%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0812"%2C "ASL Mapping"%2C "objLOGIC"%2C "DIVIDE operation on attribute"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0814"]%0A%0A   Has_Failed = FALSE%0A%0A   if Host = "WACA" then%0A      #$ADA_INLINE%0A      #%0A      #   Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).RealAttr := 10.0 / 2.0;%0A      #   Real_Temp := Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).RealAttr;%0A      #$END_ADAINLINE%0A   else%0A      Real_Temp = 5.0%0A   endif%0A%0A   if Real_Temp != 5.0 then%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   else%0A%0A      if Host = "WACA" then%0A         #$ADA_INLINE%0A         #%0A         #   Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).RealAttr := 10.0 / 4.0;%0A         #   Real_Temp := Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).RealAttr;%0A         #$END_ADAINLINE%0A      else%0A         Real_Temp = 2.5%0A      endif%0A%0A      if Real_Temp != 2.5 then%0A         [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -20]%0A      else%0A         [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A      endif%0A%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 15%0A%0A#------------------------------------------------------------------------#%0A# Test 16 - Arithmetic operations on an attribute.%0A#           Arithmetic MULTIPLY operation%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0812"%2C "ASL Mapping"%2C "objLOGIC"%2C "MULTIPLY operation on attribute "]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0814"]%0A%0A   if Host = "WACA" then%0A      #$ADA_INLINE%0A      #%0A      #   Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr := 10 * 2;%0A      #   Temp := Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr;%0A      #$END_ADAINLINE%0A   else%0A      Temp = 20%0A   endif%0A%0A   if Temp != 20 then%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   else%0A%0A      if Host = "WACA" then%0A         #$ADA_INLINE%0A         #%0A         #   Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr := 10 * 2 * 5;%0A         #   Temp := Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr;%0A         #$END_ADAINLINE%0A      else%0A         Temp = 100%0A      endif%0A %0A      if Temp != 100 then%0A         [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -20]%0A      else%0A         [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A      endif%0A%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 16%0A%0A#------------------------------------------------------------------------#%0A# Test 17 - Arithmetic operations on an attribute.%0A#           Arithmetic POWER operation%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "ASL Mapping"%2C "objLOGIC"%2C "POWER operation on attribute"]%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   Test = Test + 1%0A%0A# End Test 17%0A%0A#------------------------------------------------------------------------#%0A# Test 18 - Arithmetic operations on an attribute.%0A#           Arithmetic UNARY - operation%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0812"%2C "ASL Mapping"%2C "objLOGIC"%2C "UNARY operation on attribute"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0814"]%0A%0A   if Host = "WACA" then%0A      #$ADA_INLINE%0A      #%0A      #   Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr := -10 - 5 + 3;%0A      #   Temp := Root_Object.ASL_Mapping.objLOGIC.ASL_Mapping_objLOGIC_type(an_instanceLOGIC.all).IntegerAttr;%0A      #$END_ADAINLINE%0A%0A      if Temp != -12 then%0A         [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A      else%0A         [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A      endif%0A%0A   else%0A      [] = RPT4:Test_Unsupported[Test]%0A   endif%0A%0A#   an_instanceLOGIC.IntegerAttr = -10 - 5 + 3%0A%0A   Test = Test + 1%0A%0A# End Test 18%0A%0A#------------------------------------------------------------------------#%0A# Logical conditions%2C Boolean and Integers%0A#------------------------------------------------------------------------#%0A%0A#------------------------------------------------------------------------#%0A# Test 19 - Boolean operators%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0911"%2C "ASL Mapping"%2C "objLOGIC"%2C "Boolean operators"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0913"]%0A%0A   Has_Failed = FALSE%0A%0A   # Boolean operator !%0A   # Other logical conditions =%2C !=%0A%0A   btemp = an_instanceLOGIC.BooleanAttr%0A   %0A   if btemp = TRUE then        %0A%0A      # Initial Boolean expression is TRUE%0A      btempA = FALSE        %0A%0A      # Negate the Boolean expression%2C FALSE%0A%0A      an_instanceLOGIC.BooleanAttr = btempA%0A%0A      if btempA != FALSE then   %0A         # Boolean expression should now be FALSE%0A         [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -15]%0A         Has_Failed = TRUE%0A      else%0A         an_instanceLOGIC.ResultA = 10%0A         [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -16]%0A      Has_Failed = TRUE%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 19%0A%0A#------------------------------------------------------------------------#%0A# Test 20 - Logical expressions 1%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0911"%2C "ASL Mapping"%2C "objLOGIC"%2C "Logical expressions 1"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0913"]%0A%0A   # Initial data%0A   tempA = 10%0A   tempB = 3%0A   tempC = 5%0A%0A   Has_Failed = FALSE%0A%0A   # Perform test%0A   if ((tempA = 10) | (tempB = 77)) & (tempC != 112) then%0A      an_instanceLOGIC.ResultA = 20%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -17]%0A      Has_Failed = TRUE%0A   endif%0A%0A   Test = Test +  1%0A%0A# End Test 20%0A%0A#------------------------------------------------------------------------#%0A# Test 21 - Logical expressions 2%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0911"%2C "ASL Mapping"%2C "objLOGIC"%2C "Logical expressions 2"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0913"]%0A%0A   Has_Failed = FALSE%0A%0A   # Perform test%0A   if (tempA >= 10) & (tempB < 77) & (tempA >= tempC) then%0A      an_instanceLOGIC.ResultA = 30%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -18]%0A      Has_Failed = TRUE%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 21%0A%0A#------------------------------------------------------------------------#%0A# Test 22 - Logical expressions 3%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0911"%2C "ASL Mapping"%2C "objLOGIC"%2C "Logical expressions 3"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0913"]%0A%0A   Has_Failed = FALSE%0A%0A   # Perform test%0A   if (tempA > tempB) & (tempB <= 3) & (tempC <= 6) then%0A      an_instanceLOGIC.ResultA = 40%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -19]%0A      Has_Failed = TRUE%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 22%0A%0A#------------------------------------------------------------------------#%0A# Test 23 - REVERSE Logical expressions%0A#           THE FOLLOWING CAUSES AN ASL COMPILER ERROR%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0911"%2C "ASL Mapping"%2C "objLOGIC"%2C "REVERSE Logical expressions"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0913"]%0A%0A   Has_Failed = FALSE%0A%0A   # Perform test%0A   Local_Boolean_Result = FALSE%0A%0A   if Host = "WACA" then%0A      #$ADA_INLINE%0A      #%0A      #   Local_Boolean_Result := Boolean (99 > tempB);%0A      #%0A      #$END_ADAINLINE%0A%0A      if Local_Boolean_Result = TRUE then%0A         an_instanceLOGIC.ResultA = 50%0A         [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A      else%0A         [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -20]%0A      endif%0A%0A   else%0A%0A      if (tempB < 99) then%0A         an_instanceLOGIC.ResultA = 50%0A         [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A      else%0A         [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -20]%0A      endif%0A%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 23%0A%0A#------------------------------------------------------------------------#%0A#%0A# These tests verify the logical conditions for the following data types:%0A#%0A#        Date%0A#        Time%0A#%0A# The following operators are valid for both data types:%0A#%0A#        =%2C =>%2C <=%2C <%2C >%0A#%0A# Test 1 and 2%2C are built of nested IF statements%2C the final value written%0A# into the attribute 'ResultA' is 70.%0A#%0A# If the final value is not 70 then an error would have occured during%0A# verification%2C the value of which indicating where the error occured.%0A#------------------------------------------------------------------------#%0A%0A#------------------------------------------------------------------------#%0A# Test 24%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "ASL Mapping"%2C "objLOGIC"%2C"Date and Time operations"]%0A%0A   Has_Failed = FALSE%0A%0A%0A   # Date attribute not supported in S/W architecture. So don't test.%0A%0A   #Date%0A   #if an_instanceLOGIC.DateAttr = 1996.03.02 then%0A   #   an_instanceLOGIC.ResultA = 10%0A   #   if an_instanceLOGIC.DateAttr >= 1996.03.02 then%0A   #      an_instanceLOGIC.ResultA = 20%0A   #      if an_instanceLOGIC.DateAttr >= 1996.03.01 then%0A   #         an_instanceLOGIC.ResultA = 30%0A   #         if an_instanceLOGIC.DateAttr <= 1996.03.02 then%0A   #            an_instanceLOGIC.ResultA = 40%0A   #            if an_instanceLOGIC.DateAttr <= 1996.03.03 then%0A   #               an_instanceLOGIC.ResultA = 50%0A   #               if an_instanceLOGIC.DateAttr < 1997.03.02 then%0A   #                  an_instanceLOGIC.ResultA = 60%0A   #                  if an_instanceLOGIC.DateAttr > 1996.01.03 then%0A   #                     an_instanceLOGIC.ResultA = 70%0A   #                  else%0A   #   [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -21]%0A   #   has_failed = TRUE%0A   #                  endif%0A   #               else%0A   #   [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -22]%0A   #   has_failed = TRUE%0A   #               endif%0A   #            else%0A   #   [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -23]%0A   #   has_failed = TRUE%0A   #            endif%0A   #         else%0A   #   [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -24]%0A   #   has_failed = TRUE%0A   #         endif%0A   #      else%0A   #   [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -25]%0A   #   has_failed = TRUE%0A   #      endif%0A   #   else%0A   #   [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -26]%0A   #   has_failed = TRUE%0A   #   endif%0A   #else%0A   #   [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -27]%0A   #   has_failed = TRUE%0A   #endif%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   Test = Test + 1%0A%0A# End Test 24%0A%0A#------------------------------------------------------------------------#%0A# Test 25%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "ASL Mapping"%2C "objLOGIC"%2C"Date and Time operations"]%0A%0A   Has_Failed = FALSE%0A%0A   # Time operations not supported by S/W architecture.%0A%0A   #Time%0A   #if an_instanceLOGIC.TimeAttr = 14:45:34 then%0A   #   an_instanceLOGIC.ResultA = 10%0A   #   if an_instanceLOGIC.TimeAttr >= 14:45:34 then%0A   #      an_instanceLOGIC.ResultA = 20%0A   #      if an_instanceLOGIC.TimeAttr >= 14:45:33 then%0A   #         an_instanceLOGIC.ResultA = 30%0A   #         if an_instanceLOGIC.TimeAttr <= 14:45:34 then%0A   #            an_instanceLOGIC.ResultA = 40%0A   #            if an_instanceLOGIC.TimeAttr <= 14:45:35 then%0A   #               an_instanceLOGIC.ResultA = 50%0A   #               if an_instanceLOGIC.TimeAttr < 14:46:34 then%0A   #                  an_instanceLOGIC.ResultA = 60%0A   #                  if an_instanceLOGIC.TimeAttr > 13:45:34 then%0A   #                     an_instanceLOGIC.ResultA = 70%0A   #                  else%0A   #   [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -28]%0A   #   has_failed = TRUE%0A   #                  endif%0A   #               else%0A   #   [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -29]%0A   #   has_failed = TRUE%0A   #               endif%0A   #            else%0A   #   [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -30]%0A   #   has_failed = TRUE%0A   #            endif%0A   #         else%0A   #   [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -31]%0A   #   has_failed = TRUE%0A   #         endif%0A   #      else%0A   #   [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -32]%0A   #   has_failed = TRUE%0A   #      endif%0A   #   else%0A   #   [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -33]%0A   #   has_failed = TRUE%0A   #   endif%0A   #else%0A   #   [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -34]%0A   #   has_failed = TRUE%0A   #endif%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   Test = Test + 1%0A%0A# End Test 25%0A%0A#------------------------------------------------------------------------#%0A# These tests verify logical conditions for the following data types:%0A#%0A#        Text%0A#        Enumeration%0A#%0A# The following operators are valid for the above data types:%0A#%0A#        =       Equality%0A#        !=      Inequality%0A#%0A#------------------------------------------------------------------------#%0A%0A#------------------------------------------------------------------------#%0A#Logical conditions%2C TEXT and ENUMERATION%0A#------------------------------------------------------------------------#%0A%0A#------------------------------------------------------------------------#%0A# Test 26 - Logical ops on Text%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "ASL Mapping"%2C "objLOGIC"%2C"Logical ops on Text"]%0A%0A   Has_Failed = FALSE%0A%0A   # Perform the test%0A   if an_instanceLOGIC.TextAttr = "Verification" then%0A      an_instanceLOGIC.ResultA = 10%0A %0A      if an_instanceLOGIC.TextAttr != "Richard" then%0A         an_instanceLOGIC.ResultA = 20%0A      else%0A         [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -35]%0A         Has_Failed = TRUE%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -36]%0A      Has_Failed = TRUE%0A   endif%0A%0A   if !Has_Failed then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 26%0A%0A#------------------------------------------------------------------------#%0A# Test 27 - Logical ops on Enums%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "ASL Mapping"%2C "objLOGIC"%2C"Logical ops on Enums"]%0A%0A   Has_Failed = FALSE%0A%0A   # Enumeration Perform the test%0A   if an_instanceLOGIC.EnumerationAttr = 'Richard' then%0A      an_instanceLOGIC.ResultA = 30%0A%0A      if an_instanceLOGIC.EnumerationAttr != 'Goran' then%0A         an_instanceLOGIC.ResultA = 40%0A      else%0A         [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -37]%0A         Has_Failed = TRUE%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -38]%0A      Has_Failed = TRUE%0A   endif%0A%0A   if !Has_Failed then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C an_instanceLOGIC.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 27%0A%0A#------------------------------------------------------------------------#%0A# Test 28 - Test logical operator !%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "objLOGIC"%2C"Test NOT in symbol form"]%0A%0A   BoolVal1 = FALSE%0A  %0A   if !BoolVal1 then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 28%0A%0A#------------------------------------------------------------------------#%0A# Test 29 - Test logical operator NOT%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "objLOGIC"%2C"Test NOT in keyword form"]%0A%0A   BoolVal1 = FALSE%0A  %0A   if not BoolVal1 then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 29%0A%0A#------------------------------------------------------------------------#%0A# Test 30 - Test logical operator =%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "objLOGIC"%2C"Test EQUALS in symbol form"]%0A%0A   BoolVal1 = FALSE%0A   BoolVal2 = FALSE  %0A%0A   if BoolVal1 = BoolVal1 then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 30%0A%0A#------------------------------------------------------------------------#%0A# Test 31 - Test logical operator EQUALS%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "objLOGIC"%2C"Test EQUALS in keyword form"]%0A%0A   BoolVal1 = FALSE%0A   BoolVal2 = FALSE  %0A%0A   if BoolVal1 equals BoolVal2 then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 31%0A%0A%0A#------------------------------------------------------------------------#%0A# Test 32 - Test logical operator !=%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "objLOGIC"%2C"Test NOT EQUALS in symbol form"]%0A%0A   BoolVal1 = FALSE%0A   BoolVal2 = TRUE  %0A%0A   if BoolVal1 != BoolVal2 then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 32%0A%0A#------------------------------------------------------------------------#%0A# Test 33 - Test logical operator NOT-EQUALS%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "objLOGIC"%2C"Test NOT-EQUALS in keyword form"]%0A%0A   BoolVal1 = FALSE%0A   BoolVal2 = TRUE  %0A%0A   if BoolVal1 not-equals BoolVal2 then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 33%0A%0A#------------------------------------------------------------------------#%0A# Test 34 - Test logical operator <%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "objLOGIC"%2C"Test LESS THAN in symbol form"]%0A%0A   Val1 = 10%0A   Val2 = 20  %0A%0A   if Val1 < Val2 then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 34%0A%0A#------------------------------------------------------------------------#%0A# Test 35 - Test logical operator LESS-THAN%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "objLOGIC"%2C"Test LESS-THAN in keyword form"]%0A%0A   Val1 = 10%0A   Val2 = 20  %0A%0A   if Val1 less-than Val2 then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 35%0A%0A#------------------------------------------------------------------------#%0A# Test 36 - Test logical operator >%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "objLOGIC"%2C"Test GREATER THAN in symbol form"]%0A%0A   Val1 = 10%0A   Val2 = 20  %0A%0A   if Val2 > Val1 then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 36%0A%0A#------------------------------------------------------------------------#%0A# Test 37 - Test logical operator GREATER-THAN%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "objLOGIC"%2C"Test GREATER-THAN in keyword form"]%0A%0A   Val1 = 10%0A   Val2 = 20  %0A%0A   if Val2 greater-than Val1 then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 37%0A%0A#------------------------------------------------------------------------#%0A# Test 38 - Test logical operator <=%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "objLOGIC"%2C"Test LESS THAN OR EQUAL TO in symbol form"]%0A%0A   Val1 = 10%0A   Val2 = 10%0A   Val3 = 20%0A%0A   if Val1 <= Val2 then%0A%0A      if Val1 <= Val3 then%0A         [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A      endif%0A  %0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -20]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 38%0A%0A#------------------------------------------------------------------------#%0A# Test 39 - Test logical operator LESS-THAN-OR-EQUAL-TO%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "objLOGIC"%2C"Test LESS-THAN-OR-EQUAL-TO in keyword form"]%0A%0A   Val1 = 10%0A   Val2 = 10%0A   Val3 = 20%0A%0A   if Val1 less-than-or-equal-to Val2 then%0A%0A      if Val1 less-than-or-equal-to Val3 then%0A         [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A      endif%0A  %0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -20]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 39%0A%0A#------------------------------------------------------------------------#%0A# Test 40 - Test logical operator >=%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "objLOGIC"%2C"Test GREATER THAN OR EQUAL TO in symbol form"]%0A%0A   Val1 = 10%0A   Val2 = 10%0A   Val3 = 20%0A%0A   if Val2 >= Val1 then%0A%0A      if Val3 >= Val1 then%0A         [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A      endif%0A  %0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -20]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 40%0A%0A#------------------------------------------------------------------------#%0A# Test 41 - Test logical operator GREATER-THAN-OR-EQUAL-TO%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "objLOGIC"%2C"Test GREATER-THAN-OR-EQUAL-TO in keyword form"]%0A%0A   Val1 = 10%0A   Val2 = 10%0A   Val3 = 20%0A%0A   if Val2 greater-than-or-equal-to Val1 then%0A%0A      if Val3 greater-than-or-equal-to Val1 then%0A         [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A      endif%0A  %0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -20]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 41%0A%0A#------------------------------------------------------------------------#%0A# Test 42 - Test logical operator &%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "objLOGIC"%2C"Test AND in symbol form"]%0A%0A   BoolVal1 = TRUE%0A   BoolVal2 = TRUE  %0A%0A   if BoolVal1 & BoolVal2 then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 42%0A%0A#------------------------------------------------------------------------#%0A# Test 43 - Test logical operator AND%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "objLOGIC"%2C"Test AND in keyword form"]%0A%0A   BoolVal1 = TRUE%0A   BoolVal2 = TRUE  %0A%0A   if BoolVal1 and BoolVal2 then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 43%0A%0A#------------------------------------------------------------------------#%0A# Test 44 - Test logical operator |%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "objLOGIC"%2C"Test OR in symbol form"]%0A%0A   BoolVal1 = TRUE%0A   BoolVal2 = FALSE  %0A%0A   if BoolVal1 | BoolVal2 then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 44%0A%0A#------------------------------------------------------------------------#%0A# Test 45 - Test logical operator OR%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0913"%2C "ASL Mapping"%2C "objLOGIC"%2C"Test OR in keyword form"]%0A%0A   BoolVal1 = TRUE%0A   BoolVal2 = FALSE  %0A%0A   if BoolVal1 or BoolVal2 then%0A      [] = RPT2:Test_Passed["objLOGIC"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objLOGIC"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 45%0A%0A#------------------------------------------------------------------------#%0A%0AFinal_Test = Test,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,ASL_Mapping,Object_LOGIC,public,Perform_Attribute_Assignment,,,2,
parameter,Test_Start,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Final_Test,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,This_Test = Test_Start%0A%0A[] = RPT1:Start_Test[This_Test%2C "1103-0000-01-0511"%2C "ASL_Mapping"%2C "Passive Object Service Perform Attribute assignment"%2C "Assign all attributes"]%0A[] = RPT8:Specify_Requid[This_Test%2C "1103-0000-01-0522"]%0A%0Amy_object = create Object_LOGIC with IntegerAttr = This_Test &\%0A    TextAttr = "Hello" &\%0A    BooleanAttr = FALSE &\%0A    EnumerationAttr = 'Frank' &\%0A    ReferenceLOGIC = This_Test %0A%0Amy_object = find-one Object_LOGIC where ReferenceLOGIC = This_Test%0A%0AFailure_Code = 1%0A%0Aif my_object != UNDEFINED then%0A%0A   if my_object.TextAttr = "Hello" then%0A%0A      if my_object.BooleanAttr = FALSE then%0A%0A         if my_object.EnumerationAttr = 'Frank' then%0A%0A            Failure_Code = 0%0A   %0A         else%0A%0A            Failure_Code = -40%0A%0A         endif%0A%0A      else%0A%0A         Failure_Code = -30%0A%0A      endif%0A%0A   else%0A%0A      Failure_Code = -20%0A%0A   endif%0A%0A   delete my_object%0A%0Aelse%0A%0A   Failure_Code = -10%0A%0Aendif%0A%0Aif Failure_Code = 0 then%0A   [] = RPT2:Test_Passed["Attribute read"%2C This_Test%2C Failure_Code]%0Aelse%0A   [] = RPT3:Test_Failed["Attribute read"%2C This_Test%2C Failure_Code]%0Aendif%0A%0AThis_Test = This_Test + 1%0A%0AFinal_Test = This_Test,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
event,StartA,,1,,,,,
event,,,,,,,,
event,StartB,,2,,,,,
event,,,,,,,,
event,Finished,,3,,,,,
event,,,,,,,,
event,Fault,,4,,,,,
event,,,,,,,,
event,StartC,,5,,,,,
event,,,,,,,,
event,StartD,,6,,,,,
event,,,,,,,,
description, This object verifies arithemetical and logical operations.%0A,,,,,,,
object,,,,,,,,
object,Object_LOOP,objLOOP,4,,,,,
attribute,ReferenceLOOP,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,ReferenceLOOP,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicated that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
operation,ASL_Mapping,Object_LOOP,public,do_loop_tests,,,1,
parameter,an_instanceLOOP,in,,,,,,
typeref,instance of Object_LOOP,,,,,,,
typeref,,,,,,,,
parameter,Test_Start,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Final_Test,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A#%0A# LOOP statement%0A#%0A# The ASL <loop> statement shall be supported%0A# 1103-0000-01-0441%0A#%0A# The ASL <break> statement shall be supported%0A# 1103-0000-01-0451%0A#%0A# The ASL <break ... if> statement shall be supported%0A# 1103-0000-01-0452%0A#%0A#------------------------------------------------------------------------#%0A%0A   Test = Test_Start%0A%0A#------------------------------------------------------------------------#%0A#Test 1 - LOOP with BREAKIF%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0441"%2C "ASL Mapping"%2C "objLOOP"%2C "Loop with BREAKIF"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0452"]%0A%0A   # Increment the attribute ResultA for an instance of Object_LOOP 5 times%0A   Count = 0%0A%0A   loop%0A      Count = Count + 1%0A      an_instanceLOOP.ResultA = Count%0A      breakif Count = 5%0A   endloop%0A%0A   # Check the results%0A   if Count != 5 then%0A      [] = RPT3:Test_Failed["objLOOP"%2C Test%2C Count]%0A   else%0A      an_instanceLOOP.ResultA = 10%0A      [] = RPT2:Test_Passed["objLOOP"%2C Test%2C an_instanceLOOP.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A# Test 2 - LOOP with BREAK%2C break after other ASL statements%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0441"%2C "ASL Mapping"%2C "objLOOP"%2C "BREAK after other statement"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0451"]%0A%0A   # Increment the attribute ResultA for an instance of Object_LOOP once%0A   Count = 0%0A   %0A   loop%0A      Count = Count + 1%0A      an_instanceLOOP.ResultA = Count%0A      break%0A   endloop%0A%0A   # Check the results%0A   if Count != 1 then%0A      [] = RPT3:Test_Failed["objLOOP"%2C Test%2C Count]%0A   else%0A      an_instanceLOOP.ResultA = 20%0A      [] = RPT2:Test_Passed["objLOOP"%2C Test%2C an_instanceLOOP.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#------------------------------------------------------------------------#%0A# Test 3 - LOOP with BREAK%2C break before other ASL statements%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0441"%2C "ASL Mapping"%2C "objLOOP"%2C "BREAK before other statements"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0451"]%0A%0A   # Attribute ResultA is NOT AFFECTED%0A   Count = 0%0A%0A   loop%0A      break%0A      Count = Count + 1%0A      an_instanceLOOP.ResultA = Count%0A   endloop%0A%0A   # Until this point value written into ResultA should be 20%0A   if (Count != 0 | an_instanceLOOP.ResultA != 20) then%0A      [] = RPT3:Test_Failed["objLOOP"%2C Test%2C Count]%0A   else%0A      an_instanceLOOP.ResultA = 30%0A      [] = RPT2:Test_Passed["objLOOP"%2C Test%2C an_instanceLOOP.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#------------------------------------------------------------------------#%0A# Test 4 - LOOP with BREAKIF inside another ASL statement%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0441"%2C "ASL Mapping"%2C "objLOOP"%2C "BREAK inside statement"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0452"]%0A%0A   # Increment the attribute ResultA for an instance of Object_LOOP 4 times%0A   Count = 0%0A%0A   loop%0A      Count = Count + 1%0A      an_instanceLOOP.ResultA = Count  %0A%0A      if Count != 3 then%0A         breakif Count > 2%0A      endif%0A%0A   endloop%0A%0A   # Check the results%0A   if Count != 4 then%0A      [] = RPT3:Test_Failed["objLOOP"%2C Test%2C Count]%0A   else%0A      an_instanceLOOP.ResultA = 40%0A      [] = RPT2:Test_Passed["objLOOP"%2C Test%2C an_instanceLOOP.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A#------------------------------------------------------------------------#%0A# Test 5 - LOOP with BREAK inside another ASL statement%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0441"%2C "ASL Mapping"%2C "objLOOP"%2C "Inside ASL statement"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0451"]%0A %0A   # Increment the attribute ResultA for an instance of Object_LOOP 3 times%0A   Count = 0%0A%0A   loop%0A      Count = Count + 1%0A      an_instanceLOOP.ResultA = Count%0A%0A      if Count = 3 then%0A         break%0A      endif%0A%0A   endloop%0A%0A   # Check the results%0A   if Count != 3 then%0A      [] = RPT3:Test_Failed["objLOOP"%2C Test%2C Count]%0A   else%0A      an_instanceLOOP.ResultA = 50%0A      [] = RPT2:Test_Passed["objLOOP"%2C Test%2C an_instanceLOOP.ResultA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A#------------------------------------------------------------------------#%0A# Test complete%0A#------------------------------------------------------------------------#%0A%0AFinal_Test = Test,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
event,Start,,1,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
event,,,,,,,,
event,Fault,,3,,,,,
event,,,,,,,,
description, This object verifies the 'LOOP' statement.%0A,,,,,,,
object,,,,,,,,
object,Object_NESTED,objNESTED,5,,,,,
attribute,ReferenceNESTED,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,ReferenceNESTED,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to inducate that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultB,,,ResultA,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicate that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
operation,ASL_Mapping,Object_NESTED,public,do_nested_tests,,,1,
parameter,Test_Start,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Final_Test,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# Test 1 - This test verifies the mapping of nested ASL statements into %0A#          the application langauge.%0A#%0A#          The nature of the nested statements means that the LOOP %0A#          statement is encountered 5 times. The following paragraphs %0A#          indicate what data is written into attribute 'ResultB' each %0A#          time the LOOP statement is encountered.%0A#%0A#          The instances affected the first time the LOOP statement is %0A#          encountered are 5%2C 4%2C and 3%2C hence the atttribute 'ResultB' has %0A#          the value 1%2C 2 and 3 written into it.%0A#%0A#          The instances affected the second time the LOOP statement is %0A#          encountered are 2 and 1%2C hence the atttribute 'ResultB' has the %0A#          value 1 and 2 written into it.%0A#%0A#          Thereafter the attribute 'ResultB' is unaffected.%0A#------------------------------------------------------------------------#%0A%0A   Test = Test_Start%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0441"%2C "ASL Mapping"%2C "objNESTED"%2C "Nested logic"]%0A   Has_Failed = FALSE%0A%0A   #---------------------------------------------------------------------#%0A   # Ensure that each instance of the attributes ResultA and ResultB are %0A   # set to zero%0A   #---------------------------------------------------------------------#%0A%0A   {all_instances_of_NESTED} = find-all Object_NESTED%0A   for each_instance in {all_instances_of_NESTED} do%0A      each_instance.ResultA = 0%0A      each_instance.ResultB = 0%0A   endfor%0A%0A   #---------------------------------------------------------------------#%0A   # FOR%2C IF%2C LOOP with BREAKIF affecting the LOOP statement.%0A   #%0A   # The FOR statement will cause the attribute ResultA for all instances %0A   # to be set to the value of countA.%0A   #%0A   # The LOOP statement will cause the attribute ResulB to be set to the %0A   # value of countB.%0A   #---------------------------------------------------------------------#%0A%0A   countA = 0%0A%0A   for each_instance in {all_instances_of_NESTED} do%0A%0A      if each_instance.ResultA = 0 then%0A         each_instance.ResultA = countA%0A         countB = 1%0A%0A         loop%0A            an_instance_of_NESTED = find-one Object_NESTED where ResultB = 0%0A%0A            if an_instance_of_NESTED != UNDEFINED then%0A               an_instance_of_NESTED.ResultB = countB%0A            endif%0A%0A            countB = countB + 1%0A            breakif countB = 4%0A%0A         endloop%0A%0A         # Verify the BREAKIF statement.%0A         if countB != 4 then%0A            Has_Failed = TRUE%0A         endif%0A%0A      endif%0A%0A      countA = countA + 1%0A%0A   endfor%0A%0A   # Verify that all instances in Object_NESTED where affected%0A   if countA = 5 then%0A%0A      if not Has_Failed then%0A         [] = RPT2:Test_Passed["objNESTED"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["objNESTED"%2C Test%2C -10]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["objNESTED"%2C Test%2C -20]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A# Test 2 - This test verifies the mapping of nested ASL statements into %0A#          the application language.%0A#          The nature of the nested statements means that the LOOP %0A#          statement is encountered 5 times%2C Each time a value is written %0A#          into attribute 'ResultA'.%0A#%0A#          A value is written into a different instance of attribute %0A#          'ResultB' until the BREAK statement is encountered within the %0A#          LOOP statement%2C i.e. the LOOP will break after one pass.%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0441"%2C "ASL Mapping"%2C "objNESTED"%2C "Loop breaks after one pass"]%0A   Has_Failed = FALSE%0A%0A%0A   #---------------------------------------------------------------------#%0A   # Ensure that each instance of attributes ResultA and ResultB are set %0A   # to zero.%0A   #---------------------------------------------------------------------#%0A%0A   {all_instances_of_NESTED} = find-all Object_NESTED%0A   for each_instance in {all_instances_of_NESTED} do%0A      each_instance.ResultA = 0%0A      each_instance.ResultB = 0%0A   endfor%0A%0A   #---------------------------------------------------------------------#%0A   # FOR%2C IF%2C LOOP with BREAK affecting the LOOP statement%0A   #%0A   # The FOR statement will cause attribute ResultA for each instance to %0A   # be set to the value of countA.%0A   #%0A   # The LOOP statement will cause the attribute ResultB to be set to the%0A   # value of countB.%0A   # The BREAK statement ensures that only one instances is affected at%0A   # one time.%0A   #---------------------------------------------------------------------#%0A%0A   countA = 0%0A   countC = 0%0A   for each_instance in {all_instances_of_NESTED} do%0A%0A      if each_instance.ResultA = 0 then%0A         each_instance.ResultA = countA%0A         countB = 0%0A%0A         loop%0A            an_instance_of_NESTED = find-one Object_NESTED where ResultB = 0%0A%0A            if an_instance_of_NESTED != UNDEFINED then%0A               an_instance_of_NESTED.ResultB = countC%0A            endif%0A%0A            countC = countC + 1%0A            countB = countB + 1%0A            break%0A%0A         endloop%0A%0A         if (countB != 1) then%0A            Has_Failed = TRUE%0A         endif%0A%0A      endif%0A%0A      countA = countA + 1%0A%0A   endfor%0A%0A   if countA = 5 then%0A%0A      if not Has_Failed then%0A         [] = RPT2:Test_Passed["objNESTED"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["objNESTED"%2C Test%2C -10]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["objNESTED"%2C Test%2C -20]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#------------------------------------------------------------------------#%0A# Test 3 - These tests verify the mapping of nested ASL statements into %0A#          the application language.%0A#%0A#          During test 2 the attribute 'ResultB' is incremented in steps %0A#          of 100 until it reaches its final value of 400.%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0431"%2C "ASL Mapping"%2C "objNESTED"%2C "Nested Logic"]%0A%0A   # Ensure that the attributes ResultA and ResultB are set to zero%0A   {all_instance_of_NESTED} = find-all Object_NESTED%0A   for each_instance in {all_instance_of_NESTED} do%0A      each_instance.ResultA = 0%0A      each_instance.ResultB = 0%0A   endfor%0A%0A   # Check the number of instances in the set 'all_instance_of_NESTED'%0A   countA = countof {all_instance_of_NESTED}%0A   if countA != 5 then%0A      [] = RPT3:Test_Failed["objNESTED"%2C Test%2C -10]%0A   else%0A      [] = RPT2:Test_Passed["objNESTED"%2C Test%2C 0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#------------------------------------------------------------------------#%0A# Test 4%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0431"%2C "ASL Mapping"%2C "objNESTED"%2C "Nested Logic"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0432"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0441"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0451"]%0A%0A   # Affect only one instance%0A   loop%0A%0A      for each_instance in {all_instance_of_NESTED} do%0A         each_instance.ResultA = 100%0A         break       %0A         # This BREAK will cause the FOR to complete%0A      endfor%0A%0A      countA = countA - 1%0A      break          %0A      # This BREAK will cause the LOOP to complete%0A%0A   endloop%0A%0A    if countA != 4 then%0A      [] = RPT3:Test_Failed["objNESTED"%2C Test%2C -10]%0A   else%0A      [] = RPT2:Test_Passed["objNESTED"%2C Test%2C 0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A#------------------------------------------------------------------------#%0A# Test 5%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0431"%2C "ASL Mapping"%2C "objNESTED"%2C "Nested Logic"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0432"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0441"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0452"]%0A%0A   Has_Failed = FALSE%0A%0A   # Increment the attribute ResultB four times%2C for two instances of%0A   # Object_NESTED.%0A   countA = 1%0A %0A   for each_instance in {all_instance_of_NESTED} do%0A      each_instance.ResultA = countA%0A      countB = 0%0A%0A      loop%0A         temp = each_instance.ResultB + 100%0A         each_instance.ResultB = temp%0A         countB = countB + 1%0A         breakif countB = 4%0A      endloop%0A%0A      # Check the value written to the attribute Test%0A      if each_instance.ResultB != 400 then%0A         [] = RPT3:Test_Failed["objNESTED"%2C Test%2C -10]%0A         Has_Failed = TRUE%0A      endif%0A%0A      # Check that the attribute ResultB has only been incremented four times%0A      if countB != 4 then%0A         [] = RPT3:Test_Failed["objNESTED"%2C Test%2C -20]%0A         Has_Failed = TRUE%0A      endif%0A%0A      countA = countA + 1%0A      breakif countA = 3   %0A      # Only affect 2 instances of Object_NESTED%0A   endfor%0A  %0A   # Check that only two instances have been altered%0A   if countA != 3 then%0A      [] = RPT3:Test_Failed["objNESTED"%2C Test%2C -30]%0A      Has_Failed = TRUE%0A   endif%0A%0A   if !Has_Failed then%0A      [] = RPT2:Test_Passed["objNESTED"%2C Test%2C 0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A#------------------------------------------------------------------------#%0A%0AFinal_Test = Test,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
event,StartA,,1,,,,,
event,,,,,,,,
event,Finsihed,,2,,,,,
event,,,,,,,,
event,Fault,,3,,,,,
event,,,,,,,,
event,StartB,,4,,,,,
event,,,,,,,,
event,StartC,,5,,,,,
event,,,,,,,,
description, This object verifies various nested statements.%0A,,,,,,,
object,,,,,,,,
object,Object_SWITCH,objSWITCH,6,,,,,
attribute,ReferenceSWITCH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,ReferenceSWITCH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicate that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
attribute,IntegerAttr,,,ResultA,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Determines which case statement to execute.%0A,,,,,,,
attribute,,,,,,,,
operation,ASL_Mapping,Object_SWITCH,public,do_switch,,,1,
parameter,Test_Start,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Final_Test,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A#%0A# SWITCH Statement%0A#%0A# The ASL <switch> statement shall be supported%0A# 1103-0000-01-0411%0A#%0A#------------------------------------------------------------------------#%0A%0A   Test = Test_Start%0A%0A#------------------------------------------------------------------------#%0A# Test 1 - SWITCH statement without the default option%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "ASL Mapping"%2C "objSWITCH"%2C "SWITCH without default option"]%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A# Test 2 - SWITCH statement with the DEFAULT option%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0411"%2C "ASL Mapping"%2C "objSWITCH"%2C "SWITCH with default option"]%0A%0A   {all_instance_of_SWITCH} = find-all Object_SWITCH%0A   countA = 0%0A   countB = 0%0A   countC = 0%0A   countD = 0%0A   countE = 0%0A%0A   for each_instance in {all_instance_of_SWITCH} do%0A%0A      switch each_instance.IntegerAttr%0A%0A         case 1%0A            temp = each_instance.ResultA + 10%0A            each_instance.ResultA = temp%0A            countA = countA + 1%0A %0A         case 2%0A            temp = each_instance.ResultA + 11%0A            each_instance.ResultA = temp%0A            countB = countB + 1%0A%0A         case 3%0A            temp = each_instance.ResultA + 12%0A            each_instance.ResultA = temp%0A            countC = countC + 1%0A%0A         default%0A            temp = each_instance.ResultA + 9%0A            each_instance.ResultA = temp%0A            countD = countD + 1%0A%0A      endswitch%0A%0A      countE = countE + 1%0A%0A   endfor%0A%0A   # Verify count values%0A   if (countA != 1)|(countB != 2)|(countC != 3)|(countD != 4)|\%0A      (countE != 10) then%0A%0A      [] = RPT3:Test_Failed["objSWITCH"%2C Test%2C -10]%0A   else%0A      [] = RPT2:Test_Passed["objSWITCH"%2C Test%2C 0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#------------------------------------------------------------------------#%0A%0AFinal_Test = Test%0A%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
event,StartA,,1,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
event,,,,,,,,
event,StartB,,3,,,,,
event,,,,,,,,
event,Fault,,4,,,,,
event,,,,,,,,
description, This object verifies the 'SWITCH' statement.%0A,,,,,,,
object,,,,,,,,
object,Processor,PROC,13,,,,,
attribute,Processor_Id,preferred,,,,,,
typeref,Processor_Id_Type,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Background_Processing_Timer_Id,,,Processor_Id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Communications_Enabled,,,Background_Processing_Timer_Id,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,ASL_Mapping,Processor,public,Create_Processor,,,1,
parameter,Test_Start,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Processor_Id_Local,in,,,,,,
typeref,Processor_Id_Type,,,,,,,
typeref,,,,,,,,
parameter,Final_Test,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,This_Test = Test_Start%0A%0A[my_timer_id_local] = Create_Timer[]%0A%0Amy_processor = create Processor with Processor_Id = Processor_Id_Local &\%0A   Background_Processing_Timer_Id = my_timer_id_local &\%0A   Communications_Enabled = FALSE %0A%0A[] = RPT1:Start_Test[This_Test%2C "Null Requid"%2C "ASL_Mapping"%2C "Active Object Service Perform Attribute assignment"%2C "Assign all attributes"]%0A%0Amy_object = find-one Processor where Processor_Id = Processor_Id_Local%0A%0AFailure_Code = 1%0A%0Aif my_object != UNDEFINED then%0A%0A   if my_object.Background_Processing_Timer_Id = my_timer_id_local then%0A%0A      if my_object.Communications_Enabled = FALSE then%0A%0A         Failure_Code = 0%0A%0A      else%0A%0A         Failure_Code = -3%0A%0A      endif%0A%0A   else%0A%0A      Failure_Code = -2%0A%0A   endif%0A%0A   delete my_object%0A%0Aelse%0A%0A   Failure_Code = -1%0A%0Aendif%0A%0Aif Failure_Code = 0 then%0A   [] = RPT2:Test_Passed["Attribute read"%2C This_Test%2C Failure_Code]%0A%0Aelse%0A   [] = RPT3:Test_Failed["Attribute read"%2C This_Test%2C Failure_Code]%0Aendif%0A%0AThis_Test = This_Test + 1%0A%0AFinal_Test = This_Test,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
object,,,,,,,,
object,Report_Data,RD,11,,,,,
attribute,Report_Data_Unique_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Reported_Domain_Number,,,Report_Data_Unique_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Right,objRight,18,,,,,
attribute,idR,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
pragma,version,,,,,,,
pragmaitem,19,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, This domain deals with the basic ASL process modelling. It does not require the creation of instances%2C relationships or event mechanisms. It does require and use domain & object based functions.%0A,,,,,,,
domain,,,,,,,,
