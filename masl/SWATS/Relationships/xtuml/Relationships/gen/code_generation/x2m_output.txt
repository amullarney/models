domain,Relationships,Relationships,,,,,,
object,Bottom_Many,,,,,,,
object,,,,,,,,
object,Far_Left,,,,,,,
object,,,,,,,,
object,Left_Many,,,,,,,
object,,,,,,,,
object,Left_Object,,,,,,,
object,,,,,,,,
object,LMRM_Assoc,,,,,,,
object,,,,,,,,
object,Many_Above,,,,,,,
object,,,,,,,,
object,Many_Far_Right,,,,,,,
object,,,,,,,,
object,Many_Right,,,,,,,
object,,,,,,,,
object,Many_Right_Assoc,,,,,,,
object,,,,,,,,
object,Middle,,,,,,,
object,,,,,,,,
object,Middle_Object,,,,,,,
object,,,,,,,,
object,MR_Assoc,,,,,,,
object,,,,,,,,
object,Object_A,,,,,,,
object,,,,,,,,
object,Object_B,,,,,,,
object,,,,,,,,
object,Object_C,,,,,,,
object,,,,,,,,
object,Object_D,,,,,,,
object,,,,,,,,
object,Object_DO,,,,,,,
object,,,,,,,,
object,Object_E,,,,,,,
object,,,,,,,,
object,Object_EF,,,,,,,
object,,,,,,,,
object,Object_F,,,,,,,
object,,,,,,,,
object,Object_G,,,,,,,
object,,,,,,,,
object,Object_H,,,,,,,
object,,,,,,,,
object,Object_I,,,,,,,
object,,,,,,,,
object,Object_K,,,,,,,
object,,,,,,,,
object,Object_L,,,,,,,
object,,,,,,,,
object,Object_M,,,,,,,
object,,,,,,,,
object,Object_O,,,,,,,
object,,,,,,,,
object,Object_P,,,,,,,
object,,,,,,,,
object,Object_Q,,,,,,,
object,,,,,,,,
object,Object_R,,,,,,,
object,,,,,,,,
object,Ref_Att_ObjA,,,,,,,
object,,,,,,,,
object,Report_Data,,,,,,,
object,,,,,,,,
object,Right_Many,,,,,,,
object,,,,,,,,
object,Right_Object,,,,,,,
object,,,,,,,,
object,Sub_L1,,,,,,,
object,,,,,,,,
object,Sub_L2,,,,,,,
object,,,,,,,,
object,Sub_L3,,,,,,,
object,,,,,,,,
object,Sub_Sub_L1,,,,,,,
object,,,,,,,,
object,Sub_Sub_L10,,,,,,,
object,,,,,,,,
object,Sub_Sub_L11,,,,,,,
object,,,,,,,,
object,Sub_Sub_L2,,,,,,,
object,,,,,,,,
object,Sub_Sub_L3,,,,,,,
object,,,,,,,,
object,Sub_Sub_L4,,,,,,,
object,,,,,,,,
object,Sub_Sub_L5,,,,,,,
object,,,,,,,,
object,Sub_Sub_L6,,,,,,,
object,,,,,,,,
object,Sub_Sub_L7,,,,,,,
object,,,,,,,,
object,Sub_Sub_L8,,,,,,,
object,,,,,,,,
object,Sub_Sub_L9,,,,,,,
object,,,,,,,,
object,Sub_Sub_Sub_L1,,,,,,,
object,,,,,,,,
object,Sub_Sub_Sub_L2,,,,,,,
object,,,,,,,,
object,Test_Data,,,,,,,
object,,,,,,,,
type,fred,private,real,,,,,
type,,,,,,,,
type,Colour,private,,,,,,
enumeration,Colour,,,,,,,
enumerator,Red,,,,,,,
enumerator,,,,,,,,
enumerator,Green,,,,,,,
enumerator,,,,,,,,
enumerator,Black,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
description, Colour is a user defined type%2C for the purpose of verifing enumeration.%0A,,,,,,,
type,,,,,,,,
routine,Relationships,,private,Start_Relationhip_Tests,2,,,
codeblock,[] = Relationships1::Create_Report_Data[]%0Anew_test = create Test_Data with The_Test_Number = 1,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,2,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Start_Relationhip_Tests%0A,,,,,,,
routine,,,,,,,,
routine,Relationships,,private,Finish_Relationship_Tests,3,,,
codeblock,%0A[] = Relationships2::Delete_Report_Data[]%0A%0Amy_test = find-one Test_Data%0A%0Aif my_test != UNDEFINED then%0A   delete my_test%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,3,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Finish_Relationship_Tests%0A,,,,,,,
routine,,,,,,,,
routine,Relationships,,private,Perform_Nav_to_Set,5,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Perform navigation from a single instance to a set of instances via %0A# another single set.%0A# %0A# The architecture shall support the creation of new object instances%0A# at application start and during execution%0A# 1241-0000-01-0101%0A#%0A# The mapping shall be provided for the ASL create statment%2C %0A# including the extension which allows some or all atributes to be %0A# specified%0A# 1241-0000-01-0102%0A#%0A# The architecture shall support the specification of initial %0A# relationship instance populations in scenario files%0A# 1241-0000-01-0620%0A#%0A#-------------------------------------------------------------------#%0A%0A   my_test = find-one Test_Data%0A   Test = my_test.The_Test_Number%0A%0A   Has_Failed = FALSE%0A%0A#-------------------------------------------------------------------#%0A%0A   One_Left    = create Far_Left with Left_Identifier = 1 &\ %0A                                      Left_Data       = 0%0A%0A   One_Middle  = create Middle with Middle_Identifier = 1 &\%0A                                    Middle_Data       = 0%0A%0A   One_Right   = create Many_Right with Right_Identifier = 1 &\%0A                                        Right_Data       = 0%0A%0A   Two_Right   = create Many_Right with Right_Identifier  = 2 &\%0A                                        Right_Data        = 0%0A%0A   Three_Right = create Many_Right with Right_Identifier  = 3 &\%0A                                        Right_Data        = 0%0A%0A   One_MRA  = create Many_Right_Assoc with MRA_Identifier = 1 &\%0A                                           MRA_Data       = 0%0A%0A   Two_MRA  = create Many_Right_Assoc with MRA_Identifier = 2 &\%0A                                           MRA_Data = 0%0A%0A   One_MFR = create Many_Far_Right with MFR_Identifier = 1 &\%0A                                        MFR_Data       = 0%0A%0A   Two_MFR = create Many_Far_Right with MFR_Identifier = 2 &\%0A                                        MFR_Data       = 0%0A%0A#-------------------------------------------------------------------#%0A# Test that the object instances have been correctly created%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0101"%2C "Relationships"%2C "Middle"%2C "Object Instance Creation"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0102"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0620"]%0A%0A   {SetL}   = find-all Far_Left%0A   {SetM}   = find-all Middle%0A   {SetR}   = find-all Many_Right%0A   {SetMRA} = find-all Many_Right_Assoc%0A   {SetMFR} = find-all Many_Far_Right%0A%0A   if countof {SetL} = 1 then%0A%0A      if countof {SetM} = 1 then%0A%0A         if countof {SetR} = 3 then%0A%0A            if countof {SetMRA} = 2 then%0A%0A               if countof {SetMFR} != 2 then%0A                  Has_Failed   = TRUE%0A                  Failure_Code = countof {SetMRA}%0A               endif%0A%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = -20%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -30%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -40%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -50%0A   endif%0A%0A   if Has_Failed = FALSE then%0A      [] = RPT2:Test_Passed["Middle"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Middle"%2C Test%2C Failure_Code]%0A   endif%0A%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A# Create the relationships%0A#-------------------------------------------------------------------#%0A%0A   [] = M1:Create_Relationships[Test]%0A   Test=Test + 1%0A%0A#-------------------------------------------------------------------#%0A# Perform the navigation tests%0A#-------------------------------------------------------------------#%0A   %0A   Count = 1%0A  %0A   loop%0A      [] = M2:Middle_Navigation[Count%2C Test]%0A      Test = Test + 1 %0A      Count = Count + 1%0A      breakif Count = 15%0A   endloop%0A%0A#-------------------------------------------------------------------#%0A# Delete the relationships%0A#-------------------------------------------------------------------#%0A%0A   [] = M3:Delete_Relationships[Test]%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A%0A   my_test.The_Test_Number = Test,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,5,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Perform Nav to Set%0A,,,,,,,
routine,,,,,,,,
routine,Relationships,,private,Middle_Object_Relationship_Tests,4,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Perform tests via scenario for the Middle_Object relationships%0A# %0A# The architecture shall support the creation of new object instances%0A# at application start and during execution%0A# 1241-0000-01-0101%0A#%0A# The mapping shall be provided for the ASL create statment%2C %0A# including the extension which allows some or all atributes to be %0A# specified%0A# 1241-0000-01-0102%0A#%0A# The architecture shall support the specification of initial %0A# relationship instance populations in scenario files%0A# 1241-0000-01-0620%0A#%0A#-------------------------------------------------------------------#%0A%0A   my_test = find-one Test_Data%0A   Test    = my_test.The_Test_Number%0A%0A   Has_Failed = FALSE%0A%0A#-------------------------------------------------------------------#%0A# Create the instances%0A#-------------------------------------------------------------------#%0A%0A   # Create Left_Object Instances%0A   newLeft = create Left_Object with idLO = 1%0A   newLeft = create Left_Object with idLO = 2%0A   newLeft = create Left_Object with idLO = 3%0A%0A   # Create Middle_Object Instances%0A   newMiddle = create Middle_Object with idMO    = 1 &\%0A                                         ResultA = 0%0A%0A   newMiddle = create Middle_Object with idMO    = 3 &\%0A                                         ResultA = 0 %0A%0A   newMiddle = create Middle_Object with idMO    = 4 &\%0A                                         ResultA = 0 %0A%0A   newMiddle = create Middle_Object with idMO    = 5 &\%0A                                         ResultA = 0 %0A%0A   # Create Right_Object Instances%0A   newRight = create Right_Object with idRO = 2%0A   newRight = create Right_Object with idRO = 4%0A   newRight = create Right_Object with idRO = 5%0A%0A%0A   # MR_Assoc%0A   newMR = create MR_Assoc with idMR = 1%0A   newMR = create MR_Assoc with idMR = 2%0A   newMR = create MR_Assoc with idMR = 3%0A   newMR = create MR_Assoc with idMR = 5%0A%0A#-------------------------------------------------------------------#%0A# Test that the object instances have been correctly created%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0101"%2C "Relationships"%2C "MO"%2C "Object Instance Creation"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0102"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0620"]%0A%0A   {SetL}   = find-all Left_Object%0A   {SetM}   = find-all Middle_Object%0A   {SetR}   = find-all Right_Object%0A   {SetMRA} = find-all MR_Assoc%0A%0A   if countof {SetL} = 3 then%0A%0A      if countof {SetM} = 4 then%0A%0A         if countof {SetR} = 3 then%0A%0A            if countof {SetMRA} != 4 then%0A               Has_Failed   = TRUE%0A               Failure_Code = -10%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -30%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -40%0A   endif%0A%0A   if Has_Failed = FALSE then%0A      [] = RPT2:Test_Passed["MO"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["MO"%2C Test%2C Failure_Code]%0A   endif%0A%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A# Create the relationships%0A#-------------------------------------------------------------------#%0A%0A # Initiate the test%0A [] = MO1:Create_Relationships[Test]%0A Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A# Perform the navigation tests%0A#-------------------------------------------------------------------#%0A%0A   Count  = 1%0A%0A   loop%0A%0A      # Initiate the test%0A      [] = MO2:Middle_Object_Navigation[Count%2C Test]%0A%0A      Test  = Test  + 1%0A      Count = Count + 1%0A      breakif Count = 19%0A%0A   endloop%0A%0A#-------------------------------------------------------------------#%0A# Delete the relationships%0A#-------------------------------------------------------------------#%0A%0A   # Initiate the test%0A   [] = MO3:Delete_Relationships[Test]%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A%0Amy_test.The_Test_Number = Test,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,4,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Middle Object Relationship Tests%0A,,,,,,,
routine,,,,,,,,
routine,Relationships,,private,Test_Relationships_For_Left_Many,6,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Perform tests via scenario for the Left_Many relationships%0A# %0A# The architecture shall support the creation of new object instances%0A# at application start and during execution%0A# 1241-0000-01-0101%0A#%0A# The mapping shall be provided for the ASL create statment%2C %0A# including the extension which allows some or all atributes to be %0A# specified%0A# 1241-0000-01-0102%0A#%0A# The architecture shall support the specification of initial %0A# relationship instance populations in scenario files%0A# 1241-0000-01-0620%0A#%0A#-------------------------------------------------------------------#%0A%0A   my_test = find-one Test_Data%0A   Test    = my_test.The_Test_Number%0A%0A   Has_Failed = FALSE%0A%0A#-------------------------------------------------------------------#%0A# Create the instances%0A#-------------------------------------------------------------------#%0A%0A   # Create Left_Many Instances%0A   newLeftMany = create Left_Many with idLM    = 1 &\  %0A                                       ResultA = 0 %0A%0A   newLeftMany = create Left_Many with idLM    = 2 &\ %0A                                       ResultA = 0 %0A%0A   newLeftMany = create Left_Many with idLM    = 3 &\%0A                                       ResultA = 0%0A%0A   newLeftMany = create Left_Many with idLM    = 10 &\  %0A                                       ResultA = 0 %0A%0A   newLeftMany = create Left_Many with idLM    = 11 &\ %0A                                       ResultA = 0 %0A%0A   newLeftMany = create Left_Many with idLM    = 12 &\%0A                                       ResultA = 0%0A%0A   # Create Right_Many Instances%0A   newRightMany = create Right_Many with idRM = 1%0A   newRightMany = create Right_Many with idRM = 2%0A   newRightMany = create Right_Many with idRM = 3%0A   newRightMany = create Right_Many with idRM = 10%0A   newRightMany = create Right_Many with idRM = 11%0A   newRightMany = create Right_Many with idRM = 12%0A%0A   # Create Associative Instances%0A   newLMRM = create LMRM_Assoc with idLMRM = 2%0A   newLMRM = create LMRM_Assoc with idLMRM = 3%0A   newLMRM = create LMRM_Assoc with idLMRM = 4%0A   newLMRM = create LMRM_Assoc with idLMRM = 5%0A   newLMRM = create LMRM_Assoc with idLMRM = 8%0A   newLMRM = create LMRM_Assoc with idLMRM = 9%0A   newLMRM = create LMRM_Assoc with idLMRM = 10%0A   newLMRM = create LMRM_Assoc with idLMRM = 11%0A   newLMRM = create LMRM_Assoc with idLMRM = 12%0A%0A%0A   # Create Bottom_Many Instance%0A   newBottomMany = create Bottom_Many with idBM = 1%0A   newBottomMany = create Bottom_Many with idBM = 3%0A   newBottomMany = create Bottom_Many with idBM = 4%0A   newBottomMany = create Bottom_Many with idBM = 5%0A   newBottomMany = create Bottom_Many with idBM = 10%0A%0A#-------------------------------------------------------------------#%0A# Test that the instances have been correctly created%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0101"%2C "Relationships"%2C "objLM"%2C "Object Instance Creation"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0102"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0620"]%0A%0A   {SetLM}   = find-all Left_Many%0A   {SetRM}   = find-all Right_Many%0A   {SetLMRM} = find-all LMRM_Assoc%0A   {SetBM}   = find-all Bottom_Many%0A%0A   if countof {SetLM} = 6 then%0A%0A      if countof {SetRM} = 6 then%0A%0A         if countof {SetLMRM} = 9 then%0A%0A            if countof {SetBM} != 5 then%0A               Has_Failed   = TRUE%0A               Failure_Code = -10%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -30%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -40%0A   endif%0A%0A   if Has_Failed = FALSE then%0A      [] = RPT2:Test_Passed["objLM"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objLM"%2C Test%2C Failure_Code]%0A   endif%0A%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A# Create the relationships%0A#-------------------------------------------------------------------#%0A%0A   # Initiate the test%0A   [] = objLM1:Create_Relationships[Test]%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A# Perform the navigation tests%0A#-------------------------------------------------------------------#%0A%0A   Count = 1%0A%0A   loop%0A%0A      # Initiate the test%0A      [] = objLM2:Left_Many_Navigation[Count%2C Test]%0A  %0A      Test  = Test  + 1 %0A      Count = Count + 1%0A      breakif Count = 11%0A%0A   endloop%0A%0A#-------------------------------------------------------------------#%0A# Delete the relationships%0A#-------------------------------------------------------------------#%0A%0A   # Initiate the test%0A   [] = objLM3:Delete_Relationships[Test]%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A%0Amy_test.The_Test_Number = Test,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,6,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Test Relationships For Left Many%0A,,,,,,,
routine,,,,,,,,
routine,Relationships,,private,One_to_One_Tests,8,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Perform relationships tests for 1c:1c navigation%0A# %0A# The architecture shall support the creation of new object instances%0A# at application start and during execution%0A# 1241-0000-01-0101%0A#%0A# The mapping shall be provided for the ASL create statment%2C %0A# including the extension which allows some or all atributes to be %0A# specified%0A# 1241-0000-01-0102%0A#%0A# The architecture shall support the specification of initial %0A# relationship instance populations in scenario files%0A# 1241-0000-01-0620%0A#%0A#-------------------------------------------------------------------#%0A%0A   my_test = find-one Test_Data%0A   Test = my_test.The_Test_Number%0A%0A   Has_Failed = FALSE%0A%0A#-------------------------------------------------------------------#%0A# Create a few instances of Objects A%2C B and M%0A#-------------------------------------------------------------------#%0A%0A   Count = 5%0A%0A   loop%0A%0A      # Object_A%0A      newA  = create Object_A  with idA = Count%0A%0A      # Object_B%0A      newB  = create Object_B  with idB     = Count &\%0A                                    ResultA = 0%0A%0A      # Object_M%0A      newM  = create Object_M  with idM = Count%0A%0A      Count = Count - 1%0A      breakif Count = 0%0A%0A   endloop%0A%0A#-------------------------------------------------------------------#%0A# Test that the objects have been correctly created%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0101"%2C "Relationships"%2C "objB"%2C "Object Instance Creation"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0102"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0620"]%0A%0A   {SetA} = find-all Object_A%0A   {SetB} = find-all Object_B%0A   {SetM} = find-all Object_M%0A%0A   if countof {SetA} = 5 then%0A%0A      if countof {SetB} = 5 then%0A%0A         if countof {SetM} != 5 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -10%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -30%0A   endif%0A%0A   if Has_Failed = FALSE then%0A      [] = RPT2:Test_Passed["objB"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objB"%2C Test%2C Failure_Code]%0A   endif%0A%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A# Create the relationships%0A#-------------------------------------------------------------------#%0A%0A   # Initiate the test%0A   [] = objB1:Create_Relationships[Test]%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A# Perform the navigation tests%0A#-------------------------------------------------------------------#%0A%0A   Count = 1%0A%0A   loop%0A%0A      # Initiate the test%0A      [] = objB2:ObjB_Navigation[Count%2C Test]%0A%0A      Count = Count + 1%0A      Test  = Test  + 1%0A%0A      breakif Count = 15%0A%0A   endloop%0A%0A#-------------------------------------------------------------------#%0A# Delete the relationship tests%0A#-------------------------------------------------------------------#%0A%0A   # Initiate the test%0A   [] = objB3:Delete_Relationships[Test]%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A%0Amy_test.The_Test_Number = Test,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,8,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, One to One Tests%0A,,,,,,,
routine,,,,,,,,
routine,Relationships,,private,One_to_Many_Assoc_Tests,9,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Perform relationships tests for 1c:Mc navigation%0A# %0A# The architecture shall support the creation of new object instances%0A# at application start and during execution%0A# 1241-0000-01-0101%0A#%0A# The mapping shall be provided for the ASL create statment%2C %0A# including the extension which allows some or all atributes to be %0A# specified%0A# 1241-0000-01-0102%0A#%0A# The architecture shall support the specification of initial %0A# relationship instance populations in scenario files%0A# 1241-0000-01-0620%0A#%0A#-------------------------------------------------------------------#%0A%0A   my_test = find-one Test_Data%0A   Test = my_test.The_Test_Number%0A%0A   Has_Failed = FALSE%0A%0A#-------------------------------------------------------------------#%0A# Create a few instances of Objects C%2C D%2C DO and O%0A#-------------------------------------------------------------------#%0A%0A   Count = 5%0A%0A   loop%0A%0A      # Object_C%0A      newC  = create Object_C  with idC = Count%0A%0A      # Object_D%0A      newD  = create Object_D  with idD         = Count &\%0A                                    ResultA     = 0     &\%0A                                    Colour_Of_D = 'Red'%0A%0A      # Object_O%0A      newO  = create Object_O  with idO = Count%0A%0A      # Object_DO%0A      newDO = create Object_DO with idDO = Count%0A%0A      Count = Count - 1%0A %0A      breakif Count = 0%0A%0A   endloop%0A%0A#-------------------------------------------------------------------#%0A# Create an object or two that already exist.%0A#-------------------------------------------------------------------#%0A%0A   newD  = create Object_D  with idD         = 5       &\%0A                                 ResultA     = 0       &\%0A                                 Colour_Of_D = 'Black'%0A%0A   newD  = create Object_D  with idD         = 5     &\%0A                                 ResultA     = 0     &\%0A                                 Colour_Of_D = 'Red'%0A%0A#-------------------------------------------------------------------#%0A# Test that all the objects have be correctly created%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0101"%2C "Relationships"%2C "objD"%2C "Object Instance Creation"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0102"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0620"]%0A%0A   {SetC}  = find-all Object_C%0A   {SetD}  = find-all Object_D%0A   {SetDO} = find-all Object_DO%0A   {SetO}  = find-all Object_O%0A%0A   if countof {SetC} = 5 then%0A%0A      if countof {SetD} = 7 then%0A%0A         if countof {SetDO} = 5 then%0A%0A            if countof {SetO} != 5 then%0A               Has_Failed   = TRUE%0A               Failure_Code = -10%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -30%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -40%0A   endif%0A%0A   if Has_Failed = FALSE then%0A      [] = RPT2:Test_Passed["objD"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objD"%2C Test%2C Failure_Code]%0A   endif%0A%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A# Create the relationships%0A#-------------------------------------------------------------------#%0A%0A   # Initiate the test%0A   [] = objD1:Create_Relationships[Test]%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A# Perform the navigation tests%0A#-------------------------------------------------------------------#%0A%0A   Count  = 1%0A%0A   loop%0A%0A      # Initiate the test%0A      [] = objD2:ObjD_Navigation[Count%2C Test]%0A%0A      Test   = Test   + 1%0A      Count  = Count  + 1%0A      breakif Count = 30%0A%0A   endloop%0A%0A#-------------------------------------------------------------------#%0A# Delete the relationships%0A#-------------------------------------------------------------------#%0A%0A   # Initiate the test%0A   [] = objD3:Delete_Relationships[Test]%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A# Delete the unlinked instances%0A#-------------------------------------------------------------------#%0A%0A   # Initiate the test%0A   [] = objD4:Delete_Instances[Test]%0A   Test = Test + 1%0A%0A%0A#-------------------------------------------------------------------#%0A%0Amy_test.The_Test_Number = Test,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,9,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, One to Many Assoc Tests%0A,,,,,,,
routine,,,,,,,,
routine,Relationships,,private,Many_to_Many_Assoc_Tests,10,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Perform relationships tests for Mc:Mc navigation%0A# %0A# The architecture shall support the creation of new object instances%0A# at application start and during execution%0A# 1241-0000-01-0101%0A#%0A# The mapping shall be provided for the ASL create statment%2C %0A# including the extension which allows some or all atributes to be %0A# specified%0A# 1241-0000-01-0102%0A#%0A# The architecture shall support the specification of initial %0A# relationship instance populations in scenario files%0A# 1241-0000-01-0620%0A#%0A#-------------------------------------------------------------------#%0A%0A   my_test = find-one Test_Data%0A   Test = my_test.The_Test_Number%0A%0A   Has_Failed = FALSE%0A%0A#-------------------------------------------------------------------#%0A# Create a few instance of Objects E%2C F and EF%0A#-------------------------------------------------------------------#%0A%0A   Count = 5%0A%0A   loop%0A      # Object_E%0A      newE  = create Object_E  with idE      = Count &\%0A                                    ResultA  = 0%0A%0A      # Object_F%0A      newF  = create Object_F  with idF = Count%0A%0A      # Object_EF%0A      newEF = create Object_EF with idEF = Count%0A%0A      Count = Count - 1%0A%0A      breakif Count = 0%0A%0A   endloop%0A%0A#-------------------------------------------------------------------#%0A# Test that all the objects have be correctly created%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0101"%2C "Relationships"%2C "objE"%2C "Object Instance Creation"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0102"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0620"]%0A%0A   {SetE}  = find-all Object_E%0A   {SetF}  = find-all Object_F%0A   {SetEF} = find-all Object_EF%0A%0A   if countof {SetE} = 5 then%0A%0A      if countof {SetF} = 5 then%0A%0A         if countof {SetEF} != 5 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -10%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -30%0A   endif%0A%0A   if Has_Failed = FALSE then%0A      [] = RPT2:Test_Passed["objE"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objE"%2C Test%2C Failure_Code]%0A   endif%0A%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A# Create the relationships%0A#-------------------------------------------------------------------#%0A%0A   # Initiate the test%0A   [] = objE1:Create_Relationships[Test]%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A# Perform the navigation tests%0A#-------------------------------------------------------------------#%0A%0A   Count  = 1%0A%0A   loop%0A%0A      # Initiate the test%0A      [] = objE2:ObjE_Navigation[Count%2CTest]%0A%0A      Test   = Test   + 1%0A      Count  = Count  + 1%0A      breakif Count = 23%0A%0A   endloop%0A%0A#-------------------------------------------------------------------#%0A# Delete the relationships%0A#-------------------------------------------------------------------#%0A%0A   # Initiate the test%0A   [] = objE3:Delete_Relationships[Test]%0A   Test   = Test   + 1%0A%0A#-------------------------------------------------------------------#%0A%0Amy_test.The_Test_Number = Test%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,10,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Many to Many Assoc Tests%0A,,,,,,,
routine,,,,,,,,
routine,Relationships,,private,Super_Sub_Tests,11,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Perform relationship tests via scenario for Super/sub type %0A# relationships%0A# %0A# The architecture shall support the creation of new object instances%0A# at application start and during execution%0A# 1241-0000-01-0101%0A#%0A# The mapping shall be provided for the ASL create statment%2C %0A# including the extension which allows some or all atributes to be %0A# specified%0A# 1241-0000-01-0102%0A#%0A# The architecture shall support the specification of initial %0A# relationship instance populations in scenario files%0A# 1241-0000-01-0620%0A#%0A#-------------------------------------------------------------------#%0A%0A   my_test      = find-one Test_Data%0A   Test         = my_test.The_Test_Number%0A   Has_Failed   = FALSE%0A   Failure_Code = 0%0A#-------------------------------------------------------------------#%0A# Create instances of objects%0A#-------------------------------------------------------------------#%0A%0A   Count = 5%0A%0A   loop%0A%0A      # Object_H%0A      newH  = create Object_H  with idH      = Count &\%0A                                    ResultA  = 0%0A%0A      # Object_L%0A      newL  = create Object_L  with idL = Count%0A%0A      # Object_I%0A      newI  = create Object_I with IDI = Count%0A%0A      # Object_K%0A      newK  = create Object_K with idK = Count%0A%0A      # Sub_L1%0A      newSL1 = create Sub_L1 with idSL1 = Count%0A%0A      # Sub_L2%0A      newSL2 = create Sub_L2 with idSL2 = Count%0A%0A      # Sub_L3%0A      newSL4 = create Sub_L3 with idSL3 = Count%0A%0A      # Sub_Sub_L1%0A      newSSL1 = create Sub_Sub_L1 with idSSL1 = Count%0A%0A      # Sub_Sub_L2%0A      newSSL2 = create Sub_Sub_L2 with idSSL2 = Count%0A%0A      # Sub_Sub_L3%0A      newSSL3 = create Sub_Sub_L3 with idSSL3 = Count%0A%0A      # Sub_Sub_L4%0A      newSSL4 = create Sub_Sub_L4 with idSSL4 = Count%0A%0A      # Sub_Sub_L5%0A      newSSL5 = create Sub_Sub_L5 with idSSL5 = Count%0A%0A      # Sub_Sub_L6%0A      newSSL6 = create Sub_Sub_L6 with idSSL6 = Count%0A%0A      # Sub_Sub_L7%0A      newSSL7 = create Sub_Sub_L7 with idSSL7 = Count%0A%0A      # Sub_Sub_L8%0A      newSSL8 = create Sub_Sub_L8 with idSSL8 = Count%0A%0A      # Sub_Sub_L9%0A      newSSL9 = create Sub_Sub_L9 with idSSL9 = Count%0A%0A      # Sub_Sub_L10%0A      newSSL10 = create Sub_Sub_L10 with idSSL10 = Count%0A%0A      # Sub_Sub_L11%0A      newSSL11 = create Sub_Sub_L11 with idSSL11 = Count%0A%0A      # Sub_Sub_Sub_L1%0A      newSSSL1 = create Sub_Sub_Sub_L1 with idSSSL1 = Count%0A%0A      # Sub_Sub_Sub_L2%0A      newSSSL2 = create Sub_Sub_Sub_L2 with idSSSL2 = Count%0A%0A      Count = Count - 1%0A      breakif Count = 0%0A%0A   endloop%0A%0A#-------------------------------------------------------------------#%0A# Test that the object instances have been correctly created%0A# Because there are so many objects test just a few%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0101"%2C "Relationships"%2C "objH"%2C "Object Instance Creation"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0102"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0620"]%0A%0A   {SetH} = find-all Object_H%0A   {SetL} = find-all Object_L%0A   {SetI} = find-all Object_I%0A   {SetK} = find-all Object_K%0A%0A   if countof {SetH} = 5 then%0A%0A      if countof {SetL} = 5 then%0A%0A         if countof {SetI} = 5 then%0A%0A            if countof {SetK} != 5 then%0A               Has_Failed   = TRUE%0A               Failure_Code = -10%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -30%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -40%0A   endif%0A%0A   if Has_Failed = FALSE then%0A      [] = RPT2:Test_Passed["objH"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objH"%2C Test%2C Failure_Code]%0A   endif%0A%0A   Test = Test + 1%0A%0A%0A#-------------------------------------------------------------------#%0A# Perform the Super/Sub type relationships%0A#-------------------------------------------------------------------#%0A%0A   Count = 1%0A%0A   loop%0A%0A      [] = objH1:Super_Sub_Relationships[Count%2C Test]%0A%0A      Count  = Count + 1%0A      Test   = Test  + 1%0A      breakif Count = 14%0A%0A   endloop%0A%0A#-------------------------------------------------------------------#%0A%0Amy_test.The_Test_Number = Test%0A%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,11,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Super Sub Tests%0A,,,,,,,
routine,,,,,,,,
routine,Relationships,,private,Reflexive_Tests,12,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Perform Reflexive 1c:1c and Reflexive 1c:Mc tests%0A# %0A# The architecture shall support the creation of new object instances%0A# at application start and during execution%0A# 1241-0000-01-0101%0A#%0A# The mapping shall be provided for the ASL create statment%2C %0A# including the extension which allows some or all atributes to be %0A# specified%0A# 1241-0000-01-0102%0A#%0A# The architecture shall support the specification of initial %0A# relationship instance populations in scenario files%0A# 1241-0000-01-0620%0A#%0A#-------------------------------------------------------------------#%0A%0A   my_test = find-one Test_Data%0A   Test = my_test.The_Test_Number%0A%0A#-------------------------------------------------------------------#%0A# Create the object instances%0A#-------------------------------------------------------------------#%0A%0A   Count = 10%0A%0A   loop%0A%0A      # Object_G%0A      newG  = create Object_G  with idG     = Count &\%0A                                    ResultA = 0%0A%0A      Count = Count - 1%0A      breakif Count = 0%0A%0A   endloop%0A%0A#-------------------------------------------------------------------#%0A# Test that all the objects have be correctly created%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0101"%2C "Relationships"%2C "objG"%2C "Object Instance Creation"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0102"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0620"]%0A%0A   {SetG}  = find-all Object_G%0A%0A   if countof {SetG} = 10 then%0A      [] = RPT2:Test_Passed["objG"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objG"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A# Reflexive 1c:1c tests%0A#-------------------------------------------------------------------#%0A%0A   Count  = 1%0A%0A   loop%0A%0A      # Initiate the test%0A      [] = objG2:One_To_One_Reflexive[Count%2C Test]%0A%0A      Count = Count + 1%0A      Test  = Test  + 1%0A      breakif Count = 23 %0A%0A   endloop%0A%0A#-------------------------------------------------------------------#%0A# Reflexive 1c:Mc tests%0A#-------------------------------------------------------------------#%0A%0A   Count  = 1%0A%0A   loop%0A  %0A      # Initiate the test%0A      [] = objG3:One_To_Many_Reflexive[Count%2C Test]%0A%0A      Count = Count + 1 %0A      Test  = Test  + 1%0A%0A      breakif Count = 16%0A%0A   endloop%0A%0A#-------------------------------------------------------------------#%0A# Mc:Mc reflexive navigation%0A#%0A# Not currently supported by the WACA%0A#-------------------------------------------------------------------#%0A%0A   # Initiate the test%0A   [] = objG4:Many_To_Many_Reflexive[Test]%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A%0Amy_test.The_Test_Number = Test,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,12,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Reflexive Tests%0A,,,,,,,
routine,,,,,,,,
routine,Relationships,,private,Composed_Relationships_Tests,1,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Composed relationships tests%0A# %0A# The architecture shall support the creation of new object instances%0A# at application start and during execution%0A# 1241-0000-01-0101%0A#%0A# The mapping shall be provided for the ASL create statment%2C %0A# including the extension which allows some or all atributes to be %0A# specified%0A# 1241-0000-01-0102%0A#%0A# The architecture shall support the specification of initial %0A# relationship instance populations in scenario files%0A# 1241-0000-01-0620%0A#%0A#-------------------------------------------------------------------#%0A%0A   my_test = find-one Test_Data%0A   Test    = my_test.The_Test_Number%0A%0A   Has_Failed = FALSE%0A%0A#-------------------------------------------------------------------#%0A# Create the object instances for Objects P%2C Q and R%0A#-------------------------------------------------------------------#%0A%0A   Count = 0%0A%0A   loop%0A%0A      Count = Count + 1%0A%0A      #Object_P%0A      newP  = create Object_P  with idP     = Count &\%0A                                    ResultA = 0 %0A%0A      #Object_Q%0A      newQ  = create Object_Q  with idQ = Count%0A%0A      #Object_R%0A      newR  = create Object_R  with idR = Count%0A%0A      breakif Count = 5%0A%0A   endloop%0A%0A#-------------------------------------------------------------------#%0A# Test that the objects have been correctly created%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0620"%2C "Relationships"%2C "objP"%2C "Object Instance Creation"]%0A%0A   {SetP} = find-all Object_P%0A   {SetQ} = find-all Object_Q%0A   {SetR} = find-all Object_R%0A%0A   if countof {SetP} = 5 then%0A%0A      if countof {SetQ} = 5 then%0A%0A         if countof {SetR} != 5 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -10%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -30%0A   endif%0A%0A   if Has_Failed = FALSE then%0A      [] = RPT2:Test_Passed["objP"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objP"%2C Test%2C Failure_Code]%0A   endif%0A%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#   %0A# Perform the navigations%0A#-------------------------------------------------------------------#%0A%0A   Count = 1%0A%0A   loop%0A%0A      [] = objP1:ObjP_Navigation[Test]%0A      Count = Count + 1%0A      Test = Test + 1%0A%0A      breakif Count = 3%0A%0A   endloop%0A%0A#-------------------------------------------------------------------#%0A%0Amy_test.The_Test_Number = Test,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,1,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Composed Relationships Tests%0A,,,,,,,
routine,,,,,,,,
routine,Relationships,,private,Nav_From_Sets,7,,,
codeblock,   my_test = find-one Test_Data%0A   Test = my_test.The_Test_Number%0A%0A   Has_Failed = FALSE%0A%0A#-------------------------------------------------------------------#%0A# Create a few instances%0A#-------------------------------------------------------------------#%0A%0A   firstL  = create Far_Left with Left_Identifier = 1 & Left_Data = 1%0A   secondL = create Far_Left with Left_Identifier = 2 & Left_Data = 2%0A   thirdL  = create Far_Left with Left_Identifier = 3 & Left_Data = 3%0A   fourthL = create Far_Left with Left_Identifier = 4 & Left_Data = 4%0A   fifthL  = create Far_Left with Left_Identifier = 5 & Left_Data = 5%0A%0A   firstM  = create Middle with Middle_Identifier = 1 & Middle_Data = 1%0A   secondM = create Middle with Middle_Identifier = 2 & Middle_Data = 2%0A   thirdM  = create Middle with Middle_Identifier = 3 & Middle_Data = 3%0A   fourthM = create Middle with Middle_Identifier = 4 & Middle_Data = 4%0A   fifthM  = create Middle with Middle_Identifier = 5 & Middle_Data = 5%0A%0A   firstMR  = create Many_Right with Right_Identifier = 1 & Right_Data = 1%0A   secondMR = create Many_Right with Right_Identifier = 2 & Right_Data = 2%0A   thirdMR  = create Many_Right with Right_Identifier = 3 & Right_Data = 3%0A   fourthMR = create Many_Right with Right_Identifier = 4 & Right_Data = 4%0A   fifthMR  = create Many_Right with Right_Identifier = 5 & Right_Data = 5%0A%0A   firstMA  = create Many_Above with Above_Data = 1%0A   secondMA = create Many_Above with Above_Data = 2%0A   thirdMA  = create Many_Above with Above_Data = 3%0A   fourthMA = create Many_Above with Above_Data = 4%0A   fifthMA  = create Many_Above with Above_Data = 5%0A%0A   firstMFR  = create Many_Far_Right with MFR_Identifier = 1 and MFR_Data = 1%0A   secondMFR = create Many_Far_Right with MFR_Identifier = 2 and MFR_Data = 2%0A   thirdMFR  = create Many_Far_Right with MFR_Identifier = 3 and MFR_Data = 3%0A   fourthMFR = create Many_Far_Right with MFR_Identifier = 4 and MFR_Data = 4%0A   fifthMFR  = create Many_Far_Right with MFR_Identifier = 5 and MFR_Data = 5%0A%0A   firstMRA  = create Many_Right_Assoc with MRA_Data = 1 and MRA_Identifier = 1%0A   secondMRA = create Many_Right_Assoc with MRA_Data = 2 and MRA_Identifier = 2%0A   thirdMRA  = create Many_Right_Assoc with MRA_Data = 3 and MRA_Identifier = 3%0A   fourthMRA = create Many_Right_Assoc with MRA_Data = 4 and MRA_Identifier = 4%0A   fifthMRA  = create Many_Right_Assoc with MRA_Data = 5 and MRA_Identifier = 5%0A%0A#-------------------------------------------------------------------#%0A# Link%0A#-------------------------------------------------------------------#%0A%0A   link firstL  R6 firstM%0A   link secondL R6 thirdM%0A%0A   link firstM  R7 firstMR%0A   link firstM  R7 thirdMR%0A   link thirdM  R7 fourthMR %0A%0A   link firstMR  R8 firstMFR using firstMRA%0A   link thirdMR  R8 firstMFR using secondMRA%0A   link thirdMR  R8 thirdMFR using thirdMRA%0A   link fourthMR R8 fourthMFR using fourthMRA%0A%0A   link firstMR R10 firstMA%0A   link thirdMR R10 fourthMA%0A   link thirdMR R10 fifthMA%0A   link fourthMR R10 secondMA%0A#-------------------------------------------------------------------#%0A# Perform the navigation tests%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0101"%2C "Relationships"%2C "objE"%2C "Chained nav from set"]%0A%0A   temp = 0%0A   Total = 0%0A%0A   {SetMFR} = find-all Many_Far_Right%0A%0A   {SetMR} = {SetMFR} -> R8.Many_Right%0A%0A   {SetM} = {SetMFR} -> R8.Many_Right -> R7.Middle%0A%0A   if countof {SetMR} = 4 then%0A%0A      if countof {SetM} = 4 then%0A%0A         for InstM in {SetM} do%0A            temp = InstM.Middle_Identifier%0A            Total = Total + temp %0A         endfor%0A%0A         if Total = 6 then%0A            [] = RPT2:Test_Passed["Chained nav from set"%2C Test%2C 0]%0A         else%0A            [] = RPT3:Test_Failed["Chained nav from set"%2C Test%2C Total]%0A         endif%0A%0A      else%0A            [] = RPT3:Test_Failed["Chained nav from set"%2C Test%2C -20]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Chained nav from set"%2C Test%2C -30]%0A   endif%0A%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0101"%2C "Relationships"%2C "objE"%2C "Chained nav from set"]%0A%0A   temp = 0%0A   Total = 0%0A%0A   {SetMR} = firstM -> R7.Many_Right%0A%0A   {SetMFR} = firstM -> R7.Many_Right -> R8.Many_Far_Right%0A%0A   if countof {SetMR} = 2 then%0A%0A      if countof {SetMFR} = 3 then%0A%0A         for InstMFR in {SetMFR} do%0A            temp = InstMFR.MFR_Identifier%0A            Total = Total + temp %0A         endfor%0A%0A         if Total = 5 then%0A            [] = RPT2:Test_Passed["Chained nav from set"%2C Test%2C 0]%0A         else%0A            [] = RPT3:Test_Failed["Chained nav from set"%2C Test%2C Total]%0A         endif%0A%0A      else%0A            [] = RPT3:Test_Failed["Chained nav from set"%2C Test%2C -20]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Chained nav from set"%2C Test%2C -30]%0A   endif%0A%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0101"%2C "Relationships"%2C "objE"%2C "Chained nav from set"]%0A%0A   temp = 0%0A   Total = 0%0A%0A   {SetMR} = firstM -> R7.Many_Right%0A%0A   {SetMA} = firstM -> R7.Many_Right -> R10.Many_Above%0A%0A   if countof {SetMR} = 2 then%0A%0A      if countof {SetMA} = 3 then%0A%0A         for InstMA in {SetMA} do%0A            temp = InstMA.Above_Data%0A            Total = Total + temp%0A         endfor%0A%0A         if Total = 10 then%0A            [] = RPT2:Test_Passed["Chained nav from set"%2C Test%2C 0]%0A         else%0A            [] = RPT3:Test_Failed["Chained nav from set"%2C Test%2C Total]%0A         endif%0A%0A      else%0A         [] = RPT3:Test_Failed["Chained nav from set"%2C Test%2C -20]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Chained nav from set"%2C Test%2C -30]%0A   endif%0A%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0101"%2C "Relationships"%2C "objE"%2C "Chained nav from set"]%0A%0A   temp = 0%0A   Total = 0%0A%0A   {SetM} = find Middle where Middle_Identifier = 1 or Middle_Identifier = 3%0A%0A   {SetMR} = {SetM} -> R7.Many_Right%0A%0A   {SetMA} = {SetM} -> R7.Many_Right -> R10.Many_Above%0A%0A   if countof {SetMR} = 3 then%0A%0A      if countof {SetMA} = 4 then%0A%0A         for InstMA in {SetMA} do%0A            temp = InstMA.Above_Data%0A            Total = Total + temp%0A         endfor%0A%0A         if Total = 12 then%0A            [] = RPT2:Test_Passed["Chained nav from set"%2C Test%2C 0]%0A         else%0A            [] = RPT3:Test_Failed["Chained nav from set"%2C Test%2C Total]%0A         endif%0A%0A      else%0A         [] = RPT3:Test_Failed["Chained nav from set"%2C Test%2C -20]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Chained nav from set"%2C Test%2C -30]%0A   endif%0A%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0101"%2C "Relationships"%2C "objE"%2C "Chained nav from set"]%0A%0A   temp = 0%0A   Total = 0%0A%0A   {SetMA} = find-all Many_Above%0A  %0A   {SetMR} = {SetMA} -> R10.Many_Right%0A%0A   {SetM} = {SetMA} -> R10.Many_Right -> R7.Middle%0A%0A   if countof {SetMR} = 4 then%0A%0A      if countof {SetM} = 4 then%0A%0A         for InstM in {SetM} do%0A            temp = InstM.Middle_Identifier%0A            Total = Total + temp%0A         endfor%0A%0A         if Total = 6 then%0A            [] = RPT2:Test_Passed["Chained nav from set"%2C Test%2C 0]%0A         else%0A            [] = RPT3:Test_Failed["Chained nav from set"%2C Test%2C Total]%0A         endif%0A%0A      else%0A         [] = RPT3:Test_Failed["Chained nav from set"%2C Test%2C -20]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Chained nav from set"%2C Test%2C -30]%0A   endif%0A%0A   Test = Test + 1%0A%0A   unassociate firstMR  R8 firstMFR  from firstMRA%0A   unassociate thirdMR  R8 firstMFR  from secondMRA%0A   unassociate thirdMR  R8 thirdMFR  from thirdMRA%0A   unassociate fourthMR R8 fourthMFR from fourthMRA%0A%0A   unlink firstL  R6 firstM%0A   unlink secondL R6 thirdM%0A%0A   unlink firstM  R7 firstMR%0A   unlink firstM  R7 thirdMR%0A   unlink thirdM  R7 fourthMR%0A%0A   unlink firstMR  R8 firstMFR%0A   unlink thirdMR  R8 firstMFR%0A   unlink thirdMR  R8 thirdMFR%0A   unlink fourthMR R8 fourthMFR%0A%0A   unlink firstMR  R10 firstMA%0A   unlink thirdMR  R10 fourthMA%0A   unlink thirdMR  R10 fifthMA%0A   unlink fourthMR R10 secondMA%0A%0A   delete firstL %0A   delete secondL%0A   delete thirdL %0A   delete fourthL%0A   delete fifthL %0A%0A   delete firstM %0A   delete secondM%0A   delete thirdM %0A   delete fourthM%0A   delete fifthM %0A%0A   delete firstMR  %0A   delete secondMR %0A   delete thirdMR  %0A   delete fourthMR %0A   delete fifthMR  %0A%0A   delete firstMA  %0A   delete secondMA %0A   delete thirdMA  %0A   delete fourthMA %0A   delete fifthMA  %0A%0A   delete firstMFR  %0A   delete secondMFR %0A   delete thirdMFR  %0A   delete fourthMFR %0A   delete fifthMFR  %0A%0Amy_test.The_Test_Number = Test%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,7,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Nav From Sets%0A,,,,,,,
routine,,,,,,,,
routine,Relationships,,public,Create_Report_Data,1,,,
codeblock,# Find out of there already is one of these.%0A# It is not inconceivable that a report object still exists from a previous run.%0A# Report objects are not deleted at the end of a run%2C as certain events may%0A# still be en-queued.%0A%0Aold_report = find-one Report_Data%0A%0Aif old_report != UNDEFINED then%0A   delete old_report%0Aendif%0A%0AMy_Report = create unique Report_Data with Reported_Domain_Number = 0%0A%0A[] = RPT6:Domain_Test_Start["Relationships"]%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Relationships,,public,Delete_Report_Data,2,,,
codeblock,[] = RPT7:Domain_Test_Finished["Relationships"]%0A%0A# Do not delete the Report_Data object%2C as there may be still events in%0A# the queue.%0A%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Relationships,,public,Memory_Leak_Test_One_To_Many,3,,,
codeblock,{Set_Of_Middle} = find-all Middle%0A%0Afor Individual_Middle in {Set_Of_Middle} do%0A%0A   {Set_Of_Right} = Individual_Middle ->R7.Many_Right%0A%0A   for Individual_Right in {Set_Of_Right} do%0A%0A      #Go from a right instance back through the middle to the left instance%0A      Single_Left = Individual_Right -> R7.Middle -> R6.Far_Left%0A%0A      # Return back up the trail%2C from the left instance to the set of right%0A      {Some_Right} = Single_Left ->R6.Middle ->R7.Many_Right%0A%0A      Right_Updater = countof {Some_Right}%0A%0A      Individual_Right.Right_Data = Right_Updater%0A%0A      Updater = Single_Left.Left_Data%0A%0A      Updater = Updater + 1%0A%0A      Single_Left.Left_Data = Updater%0A%0A   endfor%0A%0Aendfor%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Relationships,,public,Memory_Leak_Test_Many_To_Many,4,,,
codeblock,{Set_Of_Far_Right} = find-all Many_Far_Right%0A%0Afor Individual_Far_Right in {Set_Of_Far_Right} do%0A%0A   {Set_Of_Right} = Individual_Far_Right ->R8.Many_Right%0A%0A   for Individual_Right in {Set_Of_Right} do%0A%0A      # Go back over the link to the far right side%0A      {Other_Side} = Individual_Right -> R8.Many_Far_Right%0A%0A      temp_value = countof {Other_Side}%0A%0A      # Update the right data with how many of the far right it is linked to%0A      Individual_Right.Right_Data = temp_value%0A%0A   endfor%0A%0A   # Update the far right data with how many right it is linked to%0A   temp_value = countof {Set_Of_Right}%0A   Individual_Far_Right.MFR_Data = temp_value%0A%0A%0A   # Navigate to assocative object for this far right object%0A%0A   {Set_Of_Assoc} = Individual_Far_Right -> R8.Many_Right_Assoc%0A%0A   for The_Assoc in {Set_Of_Assoc} do%0A%0A      # Navigate from the associated object through to the far left.%0A      A_Left = The_Assoc -> R8.Many_Right -> R7.Middle -> R6.Far_Left%0A      temp_value = A_Left.Left_Data%0A      temp_value = temp_value + 1%0A      A_Left.Left_Data = temp_value%0A%0A   endfor%0A%0Aendfor%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Relationships,,public,Get_Instance_State,5,,,
parameter,Input_Instance_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Input_Expected_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Free_Text,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,the_instance_value = Input_Instance_Value%0Aexpected_value = Input_Expected_Value%0Ainstance_name = Free_Text%0A%0Aif the_instance_value != expected_value then%0A%0A   $INLINE%0A   fprintf(stderr%2C " \n");%0A   fprintf(stderr%2C "UNEXPECTED INSTANCE VALUE FOR INSTANCE %25s\n"%2Cinstance_name);%0A   fprintf(stderr%2C "Expected Value  %25d  Actual Value  %25d\n"%2C expected_value%2C the_instance_value);%0A   fprintf(stderr%2C " \n");%0A   $ENDINLINE%0A%0A   #$ADA_INLINE%0A   # with Ada.Text_IO;%0A   #%0A   # Ada.Text_IO.New_Line(1);%0A   # Ada.Text_IO.Put_Line("UNEXPECTED VALUE FOR INSTANCE " & instance_name);%0A   # Ada.Text_IO.Put_Line("Expected " & integer'image(integer(expected_value)) & "Actual " & integer'image(integer(the_instance_value)));   %0A   # Ada.Text_IO.New_Line(1);%0A   #%0A   #$END_ADAINLINE%0Aendif,,,,,,,
codeblock,,,,,,,,
description, Returns a message if the instance state is not as expected%0A,,,,,,,
routine,,,,,,,,
terminator,Report,RPT,,,,,,
routine,Relationships,,public,Start_Test,1,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Requid,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Purpose,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Relationships,,public,Test_Passed,2,,,
parameter,Test_Object_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Relationships,,public,Test_Failed,3,,,
parameter,Failed_Domain_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Failed_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Failed_Test_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Relationships,,public,Test_Unsupported,4,,,
parameter,Unsupported_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Relationships,,public,Test_Text,5,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Free_Text,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Relationships,,public,Domain_Test_Start,6,,,
parameter,This_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Relationships,,public,Domain_Test_Finished,7,,,
parameter,This_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Relationships,,public,Specify_Requid,8,,,
parameter,Requid_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,The_Requid_Itself,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
terminator,Where_Are_We,WAW,,,,,,
routine,Relationships,,public,What_Env,1,,,
parameter,Env_Text,out,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
regularrel,R1,,,,,,,
participation,Relationships,Object_A,Has_a,conditionally,one,Relationships,Object_B,
participation,Relationships,Object_B,May_have_a,conditionally,one,Relationships,Object_A,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Object_B",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Object_A",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R3,,,,,,,
participation,Relationships,Object_D,Has_many,conditionally,many,Relationships,Object_C,
participation,Relationships,Object_C,Has_a,conditionally,one,Relationships,Object_D,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Object_D",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Object_C",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
associative,R5,Relationships,Object_EF,,,,,
participation,Relationships,Object_F,Has_lots,conditionally,many,Relationships,Object_E,
participation,Relationships,Object_E,Has_many,conditionally,many,Relationships,Object_F,
participation,,,,,,,,
associative,R5,Relationships,Object_EF,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Object_E",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Object_F",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
associative,,,,,,,,
regularrel,R11,,,,,,,
participation,Relationships,Object_G,May_have,conditionally,one,Relationships,Object_G,
participation,Relationships,Object_G,Has_a,conditionally,one,Relationships,Object_G,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Object_G",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Object_G",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R13,,,,,,,
participation,Relationships,Object_G,Has_many,conditionally,many,Relationships,Object_G,
participation,Relationships,Object_G,Has_a,conditionally,one,Relationships,Object_G,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Object_G",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Object_G",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R18,,,,,,,
participation,Relationships,Object_M,Has_one,conditionally,one,Relationships,Object_B,
participation,Relationships,Object_B,Has_a,conditionally,one,Relationships,Object_M,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Object_M",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Object_B",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
associative,R19,Relationships,Object_DO,,,,,
participation,Relationships,Object_D,Has_Many,conditionally,many,Relationships,Object_O,
participation,Relationships,Object_O,Has_a,conditionally,one,Relationships,Object_D,
participation,,,,,,,,
associative,R19,Relationships,Object_DO,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Object_O",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Object_D",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
associative,,,,,,,,
regularrel,R20,,,,,,,
participation,Relationships,Object_P,Has_many,conditionally,many,Relationships,Object_Q,
participation,Relationships,Object_Q,Has_a,conditionally,one,Relationships,Object_P,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Object_Q",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Object_P",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R21,,,,,,,
participation,Relationships,Object_R,Has_many,conditionally,many,Relationships,Object_Q,
participation,Relationships,Object_Q,Has_a,conditionally,one,Relationships,Object_R,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Object_R",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Object_Q",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R22,,,,,,,
participation,Relationships,Object_P,Has_many,conditionally,many,Relationships,Object_R,
participation,Relationships,Object_R,Has_a,conditionally,one,Relationships,Object_P,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Object_R",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Object_P",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R2,,,,,,,
participation,Relationships,Object_G,qwertyuiopasdfghjklzxcvbnmqwerty,conditionally,one,Relationships,Object_G,
participation,Relationships,Object_G,A_Large_relationship_role,conditionally,one,Relationships,Object_G,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Object_G",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Object_G",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R4,,,,,,,
participation,Relationships,Object_G,Has_many,conditionally,many,Relationships,Object_G,
participation,Relationships,Object_G,Has_a,conditionally,one,Relationships,Object_G,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Object_G",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Object_G",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R6,,,,,,,
participation,Relationships,Middle,has,unconditionally,one,Relationships,Far_Left,
participation,Relationships,Far_Left,has,unconditionally,one,Relationships,Middle,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Middle",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Far_Left",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R7,,,,,,,
participation,Relationships,Middle,has,unconditionally,many,Relationships,Many_Right,
participation,Relationships,Many_Right,has,unconditionally,one,Relationships,Middle,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Many_Right",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Middle",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
associative,R8,Relationships,Many_Right_Assoc,,,,,
participation,Relationships,Many_Right,has,unconditionally,many,Relationships,Many_Far_Right,
participation,Relationships,Many_Far_Right,has,unconditionally,many,Relationships,Many_Right,
participation,,,,,,,,
associative,R8,Relationships,Many_Right_Assoc,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Many_Far_Right",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Many_Right",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
associative,,,,,,,,
regularrel,R10,,,,,,,
participation,Relationships,Many_Right,has,unconditionally,many,Relationships,Many_Above,
participation,Relationships,Many_Above,has,unconditionally,one,Relationships,Many_Right,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Many_Above",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Many_Right",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R12,,,,,,,
participation,Relationships,Left_Object,has,unconditionally,many,Relationships,Middle_Object,
participation,Relationships,Middle_Object,has,unconditionally,one,Relationships,Left_Object,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Middle_Object",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Left_Object",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
associative,R14,Relationships,MR_Assoc,,,,,
participation,Relationships,Middle_Object,has,unconditionally,one,Relationships,Right_Object,
participation,Relationships,Right_Object,has,unconditionally,many,Relationships,Middle_Object,
participation,,,,,,,,
associative,R14,Relationships,MR_Assoc,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Right_Object",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Middle_Object",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
associative,,,,,,,,
associative,R15,Relationships,LMRM_Assoc,,,,,
participation,Relationships,Left_Many,has,unconditionally,many,Relationships,Right_Many,
participation,Relationships,Right_Many,has,unconditionally,many,Relationships,Left_Many,
participation,,,,,,,,
associative,R15,Relationships,LMRM_Assoc,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Right_Many",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Left_Many",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
associative,,,,,,,,
regularrel,R16,,,,,,,
participation,Relationships,LMRM_Assoc,has,unconditionally,many,Relationships,Bottom_Many,
participation,Relationships,Bottom_Many,has,unconditionally,one,Relationships,LMRM_Assoc,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Bottom_Many",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"LMRM_Assoc",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R17,,,,,,,
participation,Relationships,Ref_Att_ObjA,has,unconditionally,one,Relationships,Ref_Att_ObjA,
participation,Relationships,Ref_Att_ObjA,has,unconditionally,one,Relationships,Ref_Att_ObjA,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Ref_Att_ObjA",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Ref_Att_ObjA",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R23,,,,,,,
participation,Relationships,Ref_Att_ObjA,has,unconditionally,one,Relationships,Ref_Att_ObjA,
participation,Relationships,Ref_Att_ObjA,has,unconditionally,one,Relationships,Ref_Att_ObjA,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Ref_Att_ObjA",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Ref_Att_ObjA",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R32,,,,,,,
participation,Relationships,Sub_Sub_L6,has,unconditionally,many,Relationships,Object_K,
participation,Relationships,Object_K,has,unconditionally,one,Relationships,Sub_Sub_L6,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Sub_Sub_L6",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Object_K",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
subsuper,R9,,,,,,,
participation,,Object_H,,,,,,
participation,,Object_L,,,,,Object_H,
participation,,Object_I,,,,,Object_H,
participation,,,,,,,,
subsuper,,,,,,,,
subsuper,R26,,,,,,,
participation,,Object_L,,,,,,
participation,,Sub_L1,,,,,Object_L,
participation,,Sub_L2,,,,,Object_L,
participation,,Sub_L3,,,,,Object_L,
participation,,,,,,,,
subsuper,,,,,,,,
subsuper,R27,,,,,,,
participation,,Sub_L3,,,,,,
participation,,Sub_Sub_L2,,,,,Sub_L3,
participation,,Sub_Sub_L3,,,,,Sub_L3,
participation,,Sub_Sub_L1,,,,,Sub_L3,
participation,,Sub_Sub_L4,,,,,Sub_L3,
participation,,,,,,,,
subsuper,,,,,,,,
subsuper,R29,,,,,,,
participation,,Sub_L3,,,,,,
participation,,Sub_Sub_L6,,,,,Sub_L3,
participation,,Sub_Sub_L7,,,,,Sub_L3,
participation,,Sub_Sub_L5,,,,,Sub_L3,
participation,,,,,,,,
subsuper,,,,,,,,
subsuper,R30,,,,,,,
participation,,Sub_L3,,,,,,
participation,,Sub_Sub_L9,,,,,Sub_L3,
participation,,Sub_Sub_L8,,,,,Sub_L3,
participation,,,,,,,,
subsuper,,,,,,,,
subsuper,R31,,,,,,,
participation,,Sub_L3,,,,,,
participation,,Sub_Sub_L10,,,,,Sub_L3,
participation,,Sub_Sub_L11,,,,,Sub_L3,
participation,,,,,,,,
subsuper,,,,,,,,
subsuper,R28,,,,,,,
participation,,Sub_Sub_L2,,,,,,
participation,,Sub_Sub_Sub_L1,,,,,Sub_Sub_L2,
participation,,Sub_Sub_Sub_L2,,,,,Sub_Sub_L2,
participation,,,,,,,,
subsuper,,,,,,,,
object,Bottom_Many,objBM,34,,,,,
attribute,idLM,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R16,,has,LMRM_Assoc,idLM,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idRM,,,idLM,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R16,,has,LMRM_Assoc,idRM,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idBM,preferred,,idRM,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Far_Left,FL,10,,,,,
attribute,Left_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Middle_Identifier,,,Left_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R6,,has,Middle,Middle_Identifier,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Left_Data,,,Middle_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Left_Many,objLM,24,,,,,
attribute,idLM,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,idLM,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,Relationships,Left_Many,public,Create_Relationships,,,1,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Create relationships%0A#%0A# The architecture shall support the creation of a new object %0A# instance at application start or and during execution%0A# 1241-0000-01-0101%0A#%0A# A mapping shall be provided for the ASL create statment%2C including %0A# the extension which allows some or all atributes to be specified%0A# 1241-0000-01-0102%0A#%0A# The architecture shall provide a mechanism to allow creation of a %0A# simple relationship link between two object instances%0A# 1241-0000-01-0603%0A#%0A# The architectureshall support a translation of the ASL link %0A# statement to map to the mechanism that allows creation of a %0A# relationship link between two object instances%0A# 1241-0000-01-1202%0A#%0A# The architecture shall support a translation of the ASL navigate%0A# statment to map to the mechanism that allows the traversal of%0A# relationship links%0A# 1241-0000-01-1205%0A#%0A#-------------------------------------------------------------------#%0A%0A[] = RPT1:Start_Test[Test%2C "1241-0000-01-0603"%2C "Relationships"%2C "objLM"%2C "Create relationships"]%0A[] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1202"]%0A[] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A[] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0612"]%0A%0AHas_Failed = TRUE%0A%0A# Find the desired instances for Left Many Object%0AfirstLM    = find-one Left_Many where idLM = 1%0AsecondLM   = find-one Left_Many where idLM = 2%0AthirdLM    = find-one Left_Many where idLM = 3%0AtenthLM    = find-one Left_Many where idLM = 10%0AeleventhLM = find-one Left_Many where idLM = 11%0AtwelthLM   = find-one Left_Many where idLM = 12%0A%0A# Find the desired instances for Right Many Object%0AfirstRM    = find-one Right_Many where idRM = 1%0AsecondRM   = find-one Right_Many where idRM = 2%0AthirdRM    = find-one Right_Many where idRM = 3%0AtenthRM    = find-one Right_Many where idRM = 10%0AeleventhRM = find-one Right_Many where idRM = 11%0AtwelthRM   = find-one Right_Many where idRM = 12%0A%0A# Find the desired instances for Associative Object%0AsecondAssoc   = find-one LMRM_Assoc where idLMRM = 2%0AthirdAssoc    = find-one LMRM_Assoc where idLMRM = 3%0AfourthAssoc   = find-one LMRM_Assoc where idLMRM = 4%0AfifthAssoc    = find-one LMRM_Assoc where idLMRM = 5%0AeighthAssoc   = find-one LMRM_Assoc where idLMRM = 8%0AninthAssoc    = find-one LMRM_Assoc where idLMRM = 9%0AtenthAssoc    = find-one LMRM_Assoc where idLMRM = 10%0AeleventhAssoc = find-one LMRM_Assoc where idLMRM = 11%0AtwelthAssoc   = find-one LMRM_Assoc where idLMRM = 12%0A%0A# Find the desired instances for Bottom Many Object%0AfirstBM  = find-one Bottom_Many where idBM = 1%0AthirdBM  = find-one Bottom_Many where idBM = 3%0AfourthBM = find-one Bottom_Many where idBM = 4%0AfifthBM  = find-one Bottom_Many where idBM = 5%0AtenthBM  = find-one Bottom_Many where idBM = 10%0A%0A# Create associative Mc:Mc relationships%0Alink firstLM  R15 firstRM  using secondAssoc%0Alink firstLM  R15 thirdRM  using thirdAssoc%0Alink secondLM R15 secondRM using fifthAssoc%0Alink thirdLM  R15 firstRM  using fourthAssoc%0A%0Alink tenthLM    R15 tenthRM    using tenthAssoc%0Alink tenthLM    R15 eleventhRM using eleventhAssoc%0Alink tenthLM    R15 twelthRM   using twelthAssoc%0Alink eleventhLM R15 eleventhRM using eighthAssoc%0Alink twelthLM   R15 eleventhRM using ninthAssoc%0A%0A# Create normal 1:Mc relationships%0Alink secondAssoc R16 firstBM%0Alink thirdAssoc  R16 firstBM%0Alink thirdAssoc  R16 fifthBM%0Alink fourthAssoc R16 firstBM%0Alink fourthAssoc R16 thirdBM%0Alink fifthAssoc  R16 fourthBM%0Alink tenthAssoc  R16 tenthBM%0A%0A# Create a couple of instances to prove the relationships%0A# For coding purposes%2C it is necessary to overspecify%0A# the relationship.%0A%0A{A_RM_Set} = firstLM -> R15.Right_Many%0A%0A{A_BM_Set} = fourthAssoc -> R16.Bottom_Many%0A%0A{A_Assoc_Instance}  = thirdLM -> R15.LMRM_Assoc%0A%0ANo_In_BM_Set = countof {A_BM_Set}%0ANo_In_Set    = countof {A_RM_Set}%0ANo_In_Assoc  = countof {A_Assoc_Instance}%0A%0A# Now check that the navigations can be performed%0Aif No_In_Set    != 0 & \ %0A   No_In_BM_Set != 0 & \   %0A   No_In_Assoc  != 0   \%0Athen%0A   Has_Failed = FALSE%0Aendif%0A%0A#-------------------------------------------------------------------#%0A# Test complete%0A#-------------------------------------------------------------------#%0A%0Aif Has_Failed then%0A   [] = RPT3:Test_Failed["objLM"%2C Test%2C -1]%0Aelse%0A   [] = RPT2:Test_Passed["objLM"%2C Test%2C 0]%0Aendif%0A%0A#-------------------------------------------------------------------#,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Relationships,Left_Many,public,Left_Many_Navigation,,,2,
parameter,Iteration,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Normal navigation%0A#%0A# The architecture shall implement  simple 1:M relationships%0A# 1241-0000-01-0602%0A#%0A# The architecture shall implement associative 1-M:M relationships%0A# 1241-0000-01-0610%0A# %0A# The architecture shall provide operations which%2C given a starting  %0A# instance handle and a relationship specification%2C return single%0A# handle of the related instance%0A# 1241-0000-01-0701%0A#%0A# The architecture shall provide operations which%2C given a starting  %0A# instance handle and a relationship specification%2C return a set of%0A# handles of the related instance%0A# 1241-0000-01-0702%0A#%0A# The architecture shall support chains of navigations expressed in %0A# ASL %0A# 1241-0000-01-0704%0A# %0A# The architecture shall support navigations to associative objects%0A# expressed in ASL%0A# 1241-0000-01-0706%0A#%0A# The architecture shall support navigations from singly associative%0A# objects expressed in ASL%0A# 1241-0000-01-0707%0A#%0A# The architecture shall support a translation of the ASL navigate%0A# statment to map to the mechanism that allows the traversal of%0A# relationship links%0A# 1241-0000-01-1205%0A#%0A#-------------------------------------------------------------------#%0A%0A# Initialise the variables%0AHas_Failed   = FALSE%0AFailure_Code = 0%0ASupported    = TRUE%0A%0A#-------------------------------------------------------------------#%0A%0A# Find the desired instances for Left ManyObject%0AfirstLM    = find-one Left_Many where idLM = 1%0AsecondLM   = find-one Left_Many where idLM = 2%0AthirdLM    = find-one Left_Many where idLM = 3%0AtenthLM    = find-one Left_Many where idLM = 10%0AeleventhLM = find-one Left_Many where idLM = 11%0AtwelthLM   = find-one Left_Many where idLM = 12%0A%0A# Find the desired instances for Right Many Object%0AfirstRM     = find-one Right_Many where idRM = 1%0AsecondRM    = find-one Right_Many where idRM = 2%0AthirdRM     = find-one Right_Many where idRM = 3%0AtenthRM     = find-one Right_Many where idRM = 10%0AeleventhRM  = find-one Right_Many where idRM = 11%0AtwelthRM    = find-one Right_Many where idRM = 12%0A%0A# Find the desired instances for Associative Object%0AsecondAssoc   = find-one LMRM_Assoc where idLMRM = 2%0AthirdAssoc    = find-one LMRM_Assoc where idLMRM = 3%0AfourthAssoc   = find-one LMRM_Assoc where idLMRM = 4%0AfifthAssoc    = find-one LMRM_Assoc where idLMRM = 5%0AeighthAssoc   = find-one LMRM_Assoc where idLMRM = 8%0AninthAssoc    = find-one LMRM_Assoc where idLMRM = 9%0AtenthAssoc    = find-one LMRM_Assoc where idLMRM = 10%0AeleventhAssoc = find-one LMRM_Assoc where idLMRM = 11%0AtwelthAssoc   = find-one LMRM_Assoc where idLMRM = 12%0A%0A# Find the desired instances for Bottom Object%0AfirstBM  = find-one Bottom_Many where idBM = 1%0AthirdBM  = find-one Bottom_Many where idBM = 3%0AfourthBM = find-one Bottom_Many where idBM = 4%0AfifthBM  = find-one Bottom_Many where idBM = 5%0AtenthBM  = find-one Bottom_Many where idBM = 10%0A%0A#-------------------------------------------------------------------#%0A# Test 1 - Navigate from left many to associative object%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 1 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0706"%2C "Relationships"%2C "objLM"%2C "Nav from Left Many to Assoc"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0702"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      {SetAssoc} = secondLM -> R15.LMRM_Assoc%0A%0A      if countof {SetAssoc} = 0 then%0A         Has_Failed = TRUE%0A      else%0A%0A         for InstAssoc in {SetAssoc} do%0A%0A            if InstAssoc.idLMRM != 5 then%0A               Has_Failed = TRUE%0A               Failure_Code = -10%0A            endif%0A%0A         endfor%0A%0A      endif%0A%0A   endif%0A%0A# End Test 1%0A%0A#-------------------------------------------------------------------#%0A# Test 2 - Navigate from the associative object to the bottom object%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 2 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0707"%2C "Relationships"%2C "objLM"%2C "Assoc object to Bottom Object"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0702"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      {SetBM} = thirdAssoc -> R16.Bottom_Many%0A%0A      if countof {SetBM} != 2 then%0A         Has_Failed = TRUE%0A      else%0A  %0A         Val1 = -10%0A         Val2 = -20%0A%0A         for InstBM in {SetBM} do%0A %0A            if InstBM.idBM = 1 then%0A               Val1 = InstBM.idBM   %0A            endif%0A%0A            if InstBM.idBM = 5 then%0A               Val2 = InstBM.idBM%0A            endif%0A%0A         endfor%0A%0A         if Val1 = 1 then%0A%0A            if Val2 != 5 then%0A               Has_Failed   = TRUE%0A               Failure_Code = Val2%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Val1%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 2%0A%0A#-------------------------------------------------------------------#%0A# Test 3 - Chained navigation from object BM to associative obejct %0A#          then to object RM%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 3 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "objLM"%2C "ObjBM to Assoc to ObjRM"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0702"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0707"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      InstRM = firstBM -> R16.LMRM_Assoc -> R15.Right_Many%0A%0A      if InstRM.idRM != 1 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A   endif%0A%0A# End Test 3%0A%0A#-------------------------------------------------------------------#%0A# Test 4 - Chained navigation from object BM to associative object %0A#          to object LM%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 4 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "objLM"%2C "ObjBM to Assoc to ObjLM"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0702"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0707"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      InstLM = firstBM -> R16.LMRM_Assoc -> R15.Left_Many%0A%0A      if InstLM.idLM != 3 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A   endif%0A%0A# End Test 4%0A%0A#-------------------------------------------------------------------#%0A# Test 5 - Full navigation%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 5 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "objLM"%2C "Full navigation"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0702"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0706"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0707"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      {SetRM} = secondLM -> R15.LMRM_Assoc -> R16.Bottom_Many -> R16.LMRM_Assoc -> R15.Right_Many%0A%0A      if countof {SetRM} != 1 then%0A         Has_Failed   = TRUE%0A         Failure_Code = countof {SetRM}%0A      endif%0A%0A   endif%0A%0A# End Test 5%0A%0A#-------------------------------------------------------------------#%0A# Test 6 - Correlated associative navigation%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 6 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0706"%2C "Relationships"%2C "objLM"%2C "Correlated Assoc"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0701"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      {Assoc1} = firstLM -> R15.LMRM_Assoc%0A      {Assoc2} = firstRM -> R15.LMRM_Assoc%0A      {SetRM}  = firstLM -> R15.Right_Many%0A%0A      FirstInstFound  = FALSE%0A      SecondInstFound = FALSE%0A      ThirdInstFound  = FALSE%0A%0A      for RMInst in {SetRM} do%0A%0A         if RMInst.idRM = 1 then%0A            FirstInstFound = TRUE%0A%0A            for InstAssoc1 in {Assoc1} do%0A%0A               if InstAssoc1.idLMRM = 2 then%0A                  SecondInstFound = TRUE%0A  %0A                  for InstAssoc2 in {Assoc2} do      %0A%0A                     if InstAssoc2.idLMRM = 2 then%0A                        ThirdInstFound = TRUE%0A                        InstAssoc = firstLM and firstRM -> R15.LMRM_Assoc%0A                     endif%0A%0A                  endfor%0A%0A               endif%0A%0A            endfor%0A%0A         endif%0A%0A      endfor%0A%0A      if FirstInstFound then%0A%0A         if SecondInstFound then%0A%0A            if ThirdInstFound then%0A            %0A               if InstAssoc != UNDEFINED then%0A%0A                  if InstAssoc.idLMRM != 2 then%0A                     Has_Failed = TRUE%0A                     Failure_Code = InstAssoc.idLMRM%0A                  endif%0A%0A               else%0A                  Has_Failed = TRUE%0A                  Failure_Code = -20%0A               endif%0A%0A            else%0A               Has_Failed = TRUE%0A               Failure_Code  = -30%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -40%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -50%0A      endif%0A%0A   endif%0A%0A# End Test 6%0A%0A#-------------------------------------------------------------------#%0A# Test 7 - Navigate from the first instance of the right object to %0A#          the associative object to return a set%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 7 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0706"%2C "Relationships"%2C "objLM"%2C "ObjRM to Assoc to ObjBM"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0702"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      {SetAssoc} = firstRM -> R15.LMRM_Assoc%0A            %0A      if countof{SetAssoc} = 2 then%0A%0A         Val1 = -10%0A         Val2 = -20%0A%0A         for InstAssoc in {SetAssoc} do%0A   %0A            if InstAssoc.idLMRM = 2 then%0A               Val1 = InstAssoc.idLMRM%0A            endif%0A%0A            if InstAssoc.idLMRM = 4 then%0A               Val2 = InstAssoc.idLMRM%0A            endif%0A%0A         endfor%0A%0A         if Val1 = 2 then%0A%0A            if Val2 !=  4 then%0A               Has_Failed   = TRUE%0A               Failure_Code = Val2%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Val1%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -30%0A      endif     %0A%0A   endif%0A%0A# End Test 7%0A%0A#-------------------------------------------------------------------#%0A# Test 8 - Correlated associative navigation from first instance of %0A#          the left many object and the first instance of the right%0A#          many object to the associative object and then to the%0A#          bottom many object%0A#%0A#          N.B. Correlated associative navigation cannot form part of%0A#          chained navigation%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 8 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0706"%2C "Relationships"%2C "objLM"%2C "ObjRM and Obj LM to Assoc to ObjBM"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0702"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0707"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0704"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      {Assoc1} = tenthLM -> R15.LMRM_Assoc%0A      {Assoc2} = tenthRM -> R15.LMRM_Assoc%0A%0A      FirstInstFound = FALSE%0A      SecondInstFound = FALSE%0A%0A      for AssocInst1 in {Assoc1} do%0A%0A         if AssocInst1.idLMRM = 10 then%0A            FirstInstFound = TRUE%0A%0A            for AssocInst2 in {Assoc2} do%0A%0A               if AssocInst2.idLMRM = 10 then%0A                  SecondInstFound = TRUE      %0A                  InstAssoc = tenthLM and tenthRM -> R15.LMRM_Assoc       %0A               endif%0A%0A            endfor%0A%0A         endif%0A%0A      endfor%0A%0A      if FirstInstFound then%0A%0A         if SecondInstFound then%0A%0A            if InstAssoc != UNDEFINED then%0A%0A               {SetBM} = InstAssoc -> R16.Bottom_Many%0A                  %0A               if countof{SetBM} != 1 then%0A                  Has_Failed = TRUE%0A                  Failure_Code = -10%0A               else%0A%0A                  for InstBM in {SetBM} do%0A%0A                     if InstBM.idBM != 10 then%0A                        Has_Failed   = TRUE%0A                        Failure_Code = InstBM.idBM%0A                     endif%0A%0A                  endfor%0A           %0A               endif%0A%0A            else%0A               Has_Failed = TRUE%0A               Failure_Code = -10%0A            endif%0A%0A         else%0A            Has_Failed = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -30%0A      endif%0A%0A   endif%0A%0A# End Test 8%0A%0A#-------------------------------------------------------------------#%0A# Test 9 - Perform correlated associative navigation from the 11th%0A#          instance of the Left Many object and the 11th instance of%0A#          the Right Many object to the 8th instance of the %0A#          Associative object%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 9 then%0A      %0A      Failure_Code = 0%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objLM"%2C "Correlated"]%0A%0A      InstAssoc = eleventhLM and eleventhRM -> R15.LMRM_Assoc%0A%0A      if InstAssoc != UNDEFINED then%0A%0A         if InstAssoc.idLMRM != 8 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -10%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 9%0A%0A#-------------------------------------------------------------------#%0A# Test 10 - Perform correlated associative navigation from the 10th%0A#           instance of the Left Many object and the 11th instance of%0A#           Right MAny object to the 11th instance of the Associative%0A#           object%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 10 then%0A      %0A      Failure_Code = 0%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objLM"%2C "Correlated"]%0A%0A      InstAssoc = tenthLM and eleventhRM -> R15.LMRM_Assoc%0A%0A      if InstAssoc != UNDEFINED then%0A%0A         if InstAssoc.idLMRM != 11 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -10%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 10%0A%0A#-------------------------------------------------------------------#%0A# Report start of the test%0A#-------------------------------------------------------------------#%0A%0Aif Supported = TRUE then%0A%0A   if Has_Failed = FALSE then%0A      [] = RPT2:Test_Passed["objLM"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objLM"%2C Test%2C Failure_Code]%0A   endif%0A%0Aelse%0A   [] = RPT4:Test_Unsupported[Test]%0Aendif%0A%0A#-------------------------------------------------------------------#%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Relationships,Left_Many,public,Delete_Relationships,,,3,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Delete all relationships%0A#%0A# The architecture shall provide a mapping from the ASL delete%0A# instance statement to the deletion mechanism%0A# 1241-0000-01-0121%0A#%0A# The architecture shall provide a mechanism to allow deletion of a %0A# simple relational link between two object instances%0A# 1241-0000-01-0604%0A#%0A# The architecture shall provide a mechanism to allow the deletion of%0A# an associative object and the link between two objects%0A# 1241-0000-01-0612%0A#%0A# The architecture shall provide a mechanism to allow the deletion of%0A# a link between two objects in an associative relationship%0A# 1241-0000-01-0613%0A#%0A# The architecture shall support a translation of the ASL unassociate%0A# statment to map to the mechanism that allows the deletion of an %0A# associative link between an associative object and the link between%0A# two objects%0A# 1241-0000-01-1203%0A#%0A# The architecture shall support a translation of the ASL unlink%0A# statement to map to the mechanism that allow the deletion of a %0A# link between two objects in a relationship%0A# 1241-0000-01-1204%0A#%0A# The architecture shall support a translation of the ASL navigate%0A# statment to map to the mechanism that allows the traversal of%0A# relationship links%0A# 1241-0000-01-1205%0A#%0A#-------------------------------------------------------------------#%0A%0A# Initialise the variables%0AHas_Failed   = FALSE%0AFailure_Code = 0%0A%0A[] = RPT1:Start_Test[Test%2C "1241-0000-01-0604"%2C "Relationships"%2C "objLM"%2C "Delete all relationships"]%0A%0A[] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0612"]%0A[] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0613"]%0A[] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1203"]%0A[] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1204"]%0A[] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A[] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0622"]%0A%0A# Find the desired instances for Left Many Object%0AfirstLM    = find-one Left_Many where idLM = 1%0AsecondLM   = find-one Left_Many where idLM = 2%0AthirdLM    = find-one Left_Many where idLM = 3%0AtenthLM    = find-one Left_Many where idLM = 10%0AeleventhLM = find-one Left_Many where idLM = 11%0AtwelthLM   = find-one Left_Many where idLM = 12%0A%0A# Find the desired instances for Right Many Object%0AfirstRM     = find-one Right_Many where idRM = 1%0AsecondRM    = find-one Right_Many where idRM = 2%0AthirdRM     = find-one Right_Many where idRM = 3%0AtenthRM     = find-one Right_Many where idRM = 10%0AeleventhRM  = find-one Right_Many where idRM = 11%0AtwelthRM    = find-one Right_Many where idRM = 12%0A%0A# Find the desired instances for Bottom Many Object%0AfirstBM  = find-one Bottom_Many where idBM = 1%0AthirdBM  = find-one Bottom_Many where idBM = 3%0AfourthBM = find-one Bottom_Many where idBM = 4%0AfifthBM  = find-one Bottom_Many where idBM = 5%0AtenthBM  = find-one Bottom_Many where idBM = 10%0A%0A# Find the desired instances for Associative Object%0AsecondAssoc   = find-one LMRM_Assoc where idLMRM = 2%0AthirdAssoc    = find-one LMRM_Assoc where idLMRM = 3%0AfourthAssoc   = find-one LMRM_Assoc where idLMRM = 4%0AfifthAssoc    = find-one LMRM_Assoc where idLMRM = 5%0AeighthAssoc   = find-one LMRM_Assoc where idLMRM = 8%0AninthAssoc    = find-one LMRM_Assoc where idLMRM = 9%0AtenthAssoc    = find-one LMRM_Assoc where idLMRM = 10%0AeleventhAssoc = find-one LMRM_Assoc where idLMRM = 11%0AtwelthAssoc   = find-one LMRM_Assoc where idLMRM = 12%0A%0A# Delete all relationships%0Aunassociate firstLM  R15 firstRM  from secondAssoc%0Aunassociate firstLM  R15 thirdRM  from thirdAssoc%0Aunassociate secondLM R15 secondRM from fifthAssoc%0Aunassociate thirdLM  R15 firstRM  from fourthAssoc%0A%0Aunassociate tenthLM    R15 tenthRM    from tenthAssoc%0Aunassociate tenthLM    R15 eleventhRM from eleventhAssoc%0Aunassociate tenthLM    R15 twelthRM   from twelthAssoc%0Aunassociate eleventhLM R15 eleventhRM from eighthAssoc%0Aunassociate twelthLM   R15 eleventhRM from ninthAssoc%0A%0Aunlink tenthAssoc R16 tenthBM%0A%0Aunlink secondAssoc R16 firstBM%0Aunlink thirdAssoc  R16 firstBM%0Aunlink thirdAssoc  R16 fifthBM%0Aunlink fourthAssoc R16 firstBM%0Aunlink fourthAssoc R16 thirdBM%0Aunlink fifthAssoc  R16 fourthBM%0A%0Aunlink firstLM    R15 firstRM%0Aunlink firstLM    R15 thirdRM%0Aunlink secondLM   R15 secondRM%0Aunlink thirdLM    R15 firstRM%0Aunlink tenthLM    R15 tenthRM    %0Aunlink tenthLM    R15 eleventhRM %0Aunlink tenthLM    R15 twelthRM%0Aunlink eleventhLM R15 eleventhRM %0Aunlink twelthLM   R15 eleventhRM %0A# Test that the unlinking has been performed%0A%0A{SetAssoc} = firstLM -> R15.LMRM_Assoc%0A{SetBM}    = thirdAssoc -> R16.Bottom_Many%0AInstRM     = fifthAssoc -> R15.Right_Many%0A%0Aif countof {SetAssoc} = 0 then%0A   %0A   if countof {SetBM} = 0 then%0A%0A      if InstRM != UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -20%0A   endif%0A%0Aelse%0A   Has_Failed = TRUE%0A   Failure_Code = -30%0Aendif%0A%0Aif not Has_Failed then%0A%0A   {SetLM}    = find-all Left_Many%0A   {SetRM}    = find-all Right_Many%0A   {SetAssoc} = find-all LMRM_Assoc%0A   {SetBM}    = find-all Bottom_Many%0A%0A   for InstLM in {SetLM} do%0A      delete InstLM%0A   endfor%0A%0A   for InstRM in {SetRM} do%0A      delete InstRM%0A   endfor%0A%0A   for InstAssoc in {SetAssoc} do%0A      delete InstAssoc%0A   endfor%0A%0A   for InstBM in {SetBM} do%0A      delete InstBM%0A   endfor%0A%0A   {SetLM}    = find-all Left_Many%0A   {SetRM}    = find-all Right_Many%0A   {SetAssoc} = find-all LMRM_Assoc%0A   {SetBM}    = find-all Bottom_Many%0A%0A   if countof {SetLM} = 0 then%0A%0A      if countof {SetRM} = 0 then%0A%0A         if countof {SetAssoc} = 0 then%0A%0A            if countof {SetBM} != 0 then%0A               Has_Failed   = TRUE%0A               Failure_Code = -40%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -50%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -60%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -70%0A   endif%0A%0Aendif%0A%0A#-------------------------------------------------------------------#%0A# Test complete%0A#-------------------------------------------------------------------#%0A%0Aif Has_Failed then%0A   [] = RPT3:Test_Failed["objLM"%2C Test%2C Failure_Code]%0Aelse%0A   [] = RPT2:Test_Passed["objLM"%2C Test%2C 0]%0Aendif%0A%0A#-------------------------------------------------------------------#,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
event,Start_Create,,1,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
event,,,,,,,,
event,Start_Navigation,,3,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Iteration,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,Start_Delete,,4,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
object,,,,,,,,
object,Left_Object,LO,20,,,,,
attribute,idLO,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,LMRM_Assoc,objLMRM,33,,,,,
attribute,idLM,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R15,,has,Left_Many,idLM,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idRM,preferred,,idLM,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R15,,has,Right_Many,idRM,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idLMRM,,,idRM,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Many_Above,MA,19,,,,,
attribute,Right_Identifier,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R10,,has,Many_Right,Right_Identifier,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Above_Data,,,Right_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Many_Far_Right,MFR,16,,,,,
attribute,MFR_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,MFR_Data,,,MFR_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Many_Right,MR,14,,,,,
attribute,Right_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Right_Data,,,Right_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Middle_Identifier,,,Right_Data,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R7,,has,Middle,Middle_Identifier,,,
referential,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Many_Right_Assoc,MRA,17,,,,,
attribute,Right_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R8,,has,Many_Right,Right_Identifier,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,MFR_Identifier,preferred,,Right_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R8,,has,Many_Far_Right,MFR_Identifier,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,MRA_Data,,,MFR_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,MRA_Identifier,,,MRA_Data,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Middle,M,11,,,,,
attribute,Middle_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Middle_Data,,,Middle_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,Relationships,Middle,public,Create_Relationships,,,1,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,#--------------------------------------------------------------------------------------------#%0A#%0A# Create the relationships%0A#%0A# The architectureshall support a translation of the ASL link %0A# statement to map to the mechanism that allows creation of a %0A# relationship link between two object instances%0A# 1241-0000-01-1202%0A#%0A#--------------------------------------------------------------------------------------------#%0A%0AHas_Failed = FALSE%0A%0AOne_Left    = find-one Far_Left   where Left_Identifier   = 1%0AOne_Middle  = find-one Middle     where Middle_Identifier = 1%0AOne_Right   = find-one Many_Right where Right_Identifier  = 1%0ATwo_Right   = find-one Many_Right where Right_Identifier  = 2%0AThree_Right = find-one Many_Right where Right_Identifier  = 3%0A%0AOne_MRA = find-one Many_Right_Assoc where MRA_Identifier  = 1%0ATwo_MRA = find-one Many_Right_Assoc where MRA_Identifier  = 2%0A%0AOne_MFR = find-one Many_Far_Right where MFR_Identifier = 1%0ATwo_MFR = find-one Many_Far_Right where MFR_Identifier = 2%0A%0Alink One_Left   R6 One_Middle%0Alink One_Middle R7 One_Right%0Alink One_Middle R7 Two_Right%0Alink One_Middle R7 Three_Right%0A%0Alink One_Right R8 One_MFR using One_MRA%0Alink One_Right R8 Two_MFR using Two_MRA%0Alink Two_Right R8 Two_MFR using Two_MRA%0A%0A#--------------------------------------------------------------------------------------------#%0A# Check that the relationships have been correctly established%0A#--------------------------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0602"%2C "Relationships"%2C "Set Navigation"%2C "Create objects and relationships"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0603"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1202"] %0A   [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A   [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0612"]%0A%0A   {SetMR} = One_Middle -> R7.Many_Right%0A%0A   if countof {SetMR} != 3 then%0A      Has_Failed = TRUE%0A      Failure_Code = -10%0A   else%0A   %0A      for InstMR in {SetMR} do%0A%0A         if InstMR.Right_Identifier = 1 then%0A            Val1 = 1%0A         endif%0A%0A         if InstMR.Right_Identifier = 2 then%0A            Val2 = 2%0A         endif%0A%0A         if InstMR.Right_Identifier = 3 then%0A            Val3 = 3%0A         endif%0A%0A      endfor%0A%0A      if Val1 = 1 then%0A%0A         if Val2 = 2 then%0A%0A            if Val3 != 3 then%0A               Has_Failed   = TRUE%0A               Failure_Code = Val3%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Val2%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = Val1%0A      endif%0A%0A   endif%0A%0A   if not Has_Failed then%0A      [] = RPT2:Test_Passed ["Objects created and linked"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed ["Error in creation of objects or linking"%2C Test%2C Failure_Code]%0A   endif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Relationships,Middle,public,Middle_Navigation,,,2,
parameter,Iteration,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Normal navigation%0A#%0A# The architecture shall implement simple 1:M relationships%0A# 1241-0000-01-0602%0A#%0A# The architecture shall implement associative 1-M:M relationships%0A# 1241-0000-01-0610%0A#%0A# The architecture shall provide a mechanism to allow the creation of%0A# associative relationship link between two object instances and an%0A# associative instance%0A# 1241-0000-01-0611%0A#%0A# The architecture shall provide a mechanism to allow the deletion of%0A# an associative link between an associative object and the link %0A# between two objects%0A# 1241-0000-01-0612%0A#%0A# The architecture shall provide a mechanism to allow the deletion of%0A# a link between two objects in an associative relationship%0A# 1241-0000-01-0613%0A#%0A# The architecture shall provide operations which%2C given a starting %0A# instance handle and a relationshipspecification%2C return a single %0A# handle of the related instance%0A# 1241-0000-01-0701%0A#%0A# The architecture shall provide operations which%2C given a starting %0A# instance handle and a relationship specification %2C return a set of%0A# handles of the related instances%0A# 1241-0000-01-0702%0A#%0A# The architecture shall provide operations which%2C given a starting %0A# instance handle and a relationship specification%2C return a set of %0A# handles of the related instances%0A# 1241-0000-01-0703 **** NOT SUPPORTED BY WACA ****%0A#%0A# The architecture shall support chains of navigations expressed in %0A# ASL%0A# 1241-0000-01-0704%0A#%0A# The architecture shall support navigations to associative objects%0A# expressed in ASL%0A# 1241-0000-01-0706%0A#%0A# The architecture shall support navigations from singly associative%0A# objects expressed in ASL%0A# 1241-0000-01-0707%0A#%0A# The architecture shall support a translation of the ASL link %0A# statment to map to the mechanism that allows creation of a %0A# relationship link between two object instances%0A# 1241-0000-01-1202%0A#%0A# The architecture shall support a translation of the ASL unassociate%0A# statment to map to the mechanism that allows the deletion of an %0A# associative link between an associative object and the link between%0A# two objects%0A# 1241-0000-01-1203%0A#%0A# The architecture shall support a translation of the ASL unlink%0A# statement to map to the mechanism that allow the deletion of a %0A# link between two objects in a relationship%0A# 1241-0000-01-1204%0A#%0A# The architecture shall support a translation of the ASL navigate%0A# statment to map to the mechanism that allows the traversal of%0A# relationship links%0A# 1241-0000-01-1205%0A#%0A#-------------------------------------------------------------------#%0A%0A%0AOne_Left    = find-one Far_Left   where Left_Identifier   = 1%0AOne_Middle  = find-one Middle     where Middle_Identifier = 1%0AOne_Right   = find-one Many_Right where Right_Identifier  = 1%0ATwo_Right   = find-one Many_Right where Right_Identifier  = 2%0AThree_Right = find-one Many_Right where Right_Identifier  = 3%0A%0AOne_MRA = find-one Many_Right_Assoc where MRA_Identifier  = 1%0ATwo_MRA = find-one Many_Right_Assoc where MRA_Identifier  = 2%0A%0AOne_MFR = find-one Many_Far_Right where MFR_Identifier = 1%0ATwo_MFR = find-one Many_Far_Right where MFR_Identifier = 2%0A%0A%0AHas_Failed = FALSE%0A%0A#--------------------------------------------------------------------------------------------#%0A# Test 1 - Call a routine in a tight loop that will perform a navigation from an instance in %0A#          a set to a set.%0A#          Repeat this call many times to monitor the release of memory when the local  %0A#          objects go out of scope.%0A#--------------------------------------------------------------------------------------------#%0A%0A   if Iteration = 1 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0621"%2C "Relationships"%2C "Set Navigation"%2C "Navigate in many to many loop"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0611"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1203"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      How_Many_Far_Right_To_Make = 3%0A      Loop_Counter = 0%0A%0A      {Set_Right} = find-all Many_Right%0A%0A      for InstRight in {Set_Right} do%0A%0A         Counter = 0%0A   %0A         loop%0A%0A            The_ID = Counter + 10%0A            FarRight = create Many_Far_Right with MFR_Identifier = The_ID & MFR_Data = 0%0A%0A            The_Assoc = create Many_Right_Assoc with MRA_Data = The_ID%0A%0A            link InstRight R8 FarRight using The_Assoc%0A%0A            Counter = Counter + 1%0A            breakif Counter = How_Many_Far_Right_To_Make%0A%0A         endloop%0A%0A      endfor%0A%0A      break_condition = 501%0A%0A      Loop_Index = 1%0A%0A      loop%0A         # Call the memory leak test many times. Monitor the memory useage in NT Task Manager%0A         [] = Relationships4::Memory_Leak_Test_Many_To_Many[]%0A  %0A         Loop_Index = Loop_Index + 1%0A         breakif Loop_Index = break_condition%0A      endloop%0A%0A      # Now the test is completed unlink and delete the instances  %0A %0A      for InstRight in {Set_Right} do%0A%0A         {SetAssoc} = InstRight -> R8.Many_Right_Assoc%0A%0A         for InstAssoc in {SetAssoc} do%0A   %0A            InstMFR   = InstAssoc -> R8.Many_Far_Right%0A%0A            if InstMFR.MFR_Identifier > 9 then      %0A               unassociate InstRight R8 InstMFR from InstAssoc%0A               unlink InstRight R8 InstMFR%0A            endif%0A%0A         endfor%0A%0A      endfor%0A%0A      {SetMFR} = find-all Many_Far_Right%0A%0A      The_ID = 10%0A%0A      loop%0A %0A         for InstMFR in {SetMFR} do%0A%0A            if InstMFR.MFR_Identifier = The_ID then%0A               delete InstMFR%0A            endif%0A%0A         endfor%0A%0A         The_ID = The_ID + 1%0A         breakif The_ID = 14%0A%0A      endloop%0A%0A      {SetMRA} = find-all Many_Right_Assoc%0A      The_ID = 10%0A%0A      loop%0A %0A         for InstMRA in {SetMRA} do%0A%0A            if InstMRA.MRA_Data = The_ID then%0A               delete InstMRA%0A             endif%0A%0A         endfor%0A%0A         The_ID = The_ID + 1%0A         breakif The_ID = 14%0A%0A      endloop  %0A%0A      {SetMFR} = find Many_Far_Right where MFR_Identifier > 9%0A      {SetMRA} = find Many_Right_Assoc where MRA_Data > 9%0A%0A      if countof{SetMFR} != 0 then%0A         [] = RPT5:Test_Text[Test%2C "MFR Not Empty"]%0A      endif%0A%0A      if countof{SetMRA} != 0 then%0A         [] = RPT5:Test_Text[Test%2C "MRA Not Empty"]%0A      endif%0A   %0A      [] = RPT5:Test_Text[Test%2C "M  M Memory leak test complete"]%0A%0A      {Set_Right} = find-all Many_Far_Right %0A%0A      Final_Right_Value = 0%0A%0A      for This_Local_Right in {Set_Right} do%0A         Final_Right_Value = Final_Right_Value + This_Local_Right.MFR_Data%0A      endfor%0A%0A      if Final_Right_Value != 0 then%0A         [] = RPT2:Test_Passed ["Navigate in MM loop"%2C Test%2C Final_Right_Value]%0A      else%0A         [] = RPT3:Test_Failed ["Navigate in MM loop"%2C Test%2C Final_Right_Value]%0A      endif%0A%0A   endif%0A%0A# End Test 1%0A%0A#-------------------------------------------------------------------------------------#%0A# Test 2 -  Navigate from far left to many to right%0A#-------------------------------------------------------------------------------------#%0A   %0A   if Iteration = 2 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0601"%2C "Relationships"%2C "Set Navigation"%2C "Navigate to a set via a chain"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0702"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0704"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      {SetRight} = One_Left -> R6.Middle -> R7.Many_Right%0A%0A      if countof{SetRight} != 3 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A%0A         Val1 = -20%0A         Val2 = -30%0A         Val3 = -40%0A%0A         for InstRight in {SetRight} do%0A      %0A            if InstRight.Right_Identifier = 1 then%0A               Val1 = InstRight.Right_Identifier%0A            endif%0A%0A            if InstRight.Right_Identifier = 2 then%0A               Val2 = InstRight.Right_Identifier%0A            endif%0A%0A            if InstRight.Right_Identifier = 3 then%0A               Val3 = InstRight.Right_Identifier%0A            endif%0A%0A         endfor%0A%0A         if Val1 = 1 then%0A%0A            if Val2 = 2 then%0A%0A               if Val3 !=3 then%0A                  Has_Failed = TRUE%0A                  Failure_Code = Val3%0A               endif%0A%0A            else%0A               Has_Failed = TRUE%0A               Failure_Code = Val2%0A            endif%0A%0A         else%0A            Has_Failed = TRUE%0A            Failure_Code = Val1%0A         endif%0A%0A      endif%0A%0A      if Has_Failed then%0A         [] = RPT3:Test_Failed["Set navigation"%2C Test%2C Failure_Code]%0A      else%0A         [] = RPT2:Test_Passed["Set navigation"%2C Test%2C 0]%0A      endif%0A%0A   endif%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------------------------#%0A# Test 3 - Call a routine in a tight loop that will perform a navigation from a single %0A#          instance to a set.%0A#          Repeat this call many times to monitor the release of memory when the local %0A#          objects go out of scope.%0A#--------------------------------------------------------------------------------------------#%0A%0A   if Iteration = 3 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0621"%2C "Relationships"%2C "Set Navigation"%2C "Navigate one to many in loop"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0603"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1203"]%0A%0A      # Create many objects for this navigation test.%0A%0A      break_condition = 10%0A      outer_loop_counter = 0%0A%0A      loop%0A%0A         The_ID = outer_loop_counter + 10%0A         New_Left    = create Far_Left   with Left_Identifier   = The_ID & Left_Data = 0%0A         New_Middle  = create Middle     with Middle_Identifier = The_ID & Middle_Data = 0%0A%0A         link New_Left R6 New_Middle%0A%0A         inner_break_condition = 10%0A         inner_loop_counter = 0%0A%0A         loop%0A            The_Inner_ID = inner_loop_counter + 10%0A            New_Right   = create Many_Right with Right_Identifier  = The_Inner_ID & Right_Data = 0 %0A            link New_Middle R7 New_Right%0A%0A            inner_loop_counter = inner_loop_counter + 1%0A            breakif inner_loop_counter = inner_break_condition%0A         endloop%0A%0A         outer_loop_counter = outer_loop_counter + 1%0A         breakif outer_loop_counter = break_condition%0A%0A      endloop%0A%0A      break_condition = 501%0A%0A      Loop_Index = 1%0A%0A      loop%0A%0A         # Call the memory leak test many times. Monitor the memory useage in NT Task Manager%0A         [] = Relationships3::Memory_Leak_Test_One_To_Many[]%0A%0A         Local_Left_Data = 0%0A%0A         Loop_Index = Loop_Index + 1%0A%0A         {Set_Of_Left} = find-all Far_Left%0A         for Local_Left in {Set_Of_Left} do%0A            Local_Left_Data = Local_Left_Data + Local_Left.Left_Data%0A         endfor%0A%0A         breakif Loop_Index = break_condition%0A%0A      endloop%0A%0A      # Delete all of the instances created in this test%0A      {SetM} = find Middle where Middle_Identifier > 9%0A%0A      for InstM in {SetM} do%0A%0A         InstL = InstM -> R6.Far_Left%0A         unlink InstL R6 InstM%0A         delete InstL%0A%0A         {SetMR} = InstM -> R7.Many_Right%0A%0A         for InstMR in {SetMR} do%0A            unlink InstMR R7 InstM%0A            delete InstMR%0A         endfor%0A      %0A         delete InstM%0A%0A      endfor%0A%0A%0A      {SetMR} = find Many_Right where Right_Identifier > 9%0A      {SetM}  = find Middle where Middle_Identifier > 9%0A      {SetFL} = find Far_Left where Left_Identifier > 9%0A%0A      if countof {SetMR} != 0 then%0A         [] = RPT5:Test_Text[Test%2C "MR Not Empty"]%0A      endif%0A%0A      if countof {SetM} != 0 then%0A         [] = RPT5:Test_Text[Test%2C "M Not Empty"]%0A      endif%0A%0A      if countof {SetFL} != 0 then%0A         [] = RPT5:Test_Text[Test%2C "FL Not Empty"]%0A      endif%0A%0A      [] = RPT5:Test_Text[Test%2C "1 M Memory leak test complete"]%0A%0A      {Set_Of_Left} = find-all Far_Left%0A%0A      Final_Left_Value = 0%0A%0A      for Local_Left in {Set_Of_Left} do%0A         Final_Left_Value = Final_Left_Value + Local_Left.Left_Data%0A      endfor%0A%0A      if Final_Left_Value != 0 then%0A         [] = RPT2:Test_Passed ["Navigate in loop"%2C Test%2C Final_Left_Value]%0A      else%0A         [] = RPT3:Test_Failed ["Navigate in loop"%2C Test%2C Final_Left_Value]%0A      endif%0A%0A   endif%0A%0A# End Test 3%0A%0A#--------------------------------------------------------------------------------------------#%0A# Test 4 - Navigate from a single instance in the Middle Object to a set in the Many%0A#          Right object then navigate from the Many Right Object to the Many Above object%0A#--------------------------------------------------------------------------------------------#%0A%0A   if Iteration = 4 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "Set Navigation"%2C "Single Instance to Single Instance M to MR to MA"]%0A%0A      [] = RPT4:Test_Unsupported [Test]%0A%0A      One_Above      =   create Many_Above with Above_Data = 1%0A      link One_Above R10 One_Right%0A%0A     {SetMA} = One_Middle -> R7.Many_Right -> R10.Many_Above%0A%0A      NoInSet = countof {SetMA}%0A%0A      if NoInSet = 1 then%0A%0A         for Inst in {SetMA} do%0A            if Inst.Above_Data = 1 then%0A               [] = RPT2:Test_Passed ["Single Instance to Single Instance M to MR to MA"%2C Test%2C Inst.Above_Data]%0A            else%0A              [] = RPT3:Test_Failed ["Single Instance to Single Instance M to MR to MA"%2C Test%2C Inst.Above_Data]%0A            endif%0A         endfor%0A%0A      else%0A        [] = RPT3:Test_Failed ["Single Instance to Single Instance M to MR to MA"%2C Test%2C NoInSet]%0A      endif%0A%0A   endif%0A%0A%0A# End Test 4%0A%0A#--------------------------------------------------------------------------------------------#%0A# Test 5 - Same as the previous test except navigating to a set in Many Above as opposed to a %0A#          single instance%0A#--------------------------------------------------------------------------------------------#%0A%0A   if Iteration = 5 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "Set Navigation"%2C "Single Instance to Set M to MR to MA"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0603"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0702"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      Three_Above   = create Many_Above with Above_Data        = 3   %0A%0A      link Three_Above  R10 Three_Right%0A%0A      {SetMA} = One_Middle -> R7.Many_Right -> R10.Many_Above%0A%0A      NoInSet = countof {SetMA}%0A%0A      if NoInSet = 2 then%0A         [] = RPT2:Test_Passed ["Single Instance to Set M to MR to MA"%2C Test%2C NoInSet]%0A      else%0A         [] = RPT3:Test_Failed ["Single Instance to Set M to MR to MA"%2C Test%2C NoInSet]%0A      endif%0A%0A   endif %0A%0A# End Test 5%0A%0A#--------------------------------------------------------------------------------------------#%0A# Test 6 - Add a new instance in Many Above object and link it to One_Right. %0A#          Navigate from a single instance in the Middle Object to Many Right object then to %0A#           Many Above object returning a set%0A#--------------------------------------------------------------------------------------------#%0A%0A   if Iteration = 6 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "Set Navigation"%2C "Single to Set M to MR to MA"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0603"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0702"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      Two_Above       =   create Many_Above with Above_Data = 2  %0A      link Two_Above  R10 One_Right%0A%0A      {SetMA} = One_Middle -> R7.Many_Right ->R10.Many_Above%0A%0A      NoInSet = countof {SetMA}%0A%0A      if NoInSet = 3 then%0A         [] = RPT2:Test_Passed ["Single to Set M to MR to MA"%2C Test%2C NoInSet]%0A      else%0A         [] = RPT3:Test_Failed ["Single to Set M to MR to MA"%2C Test%2C NoInSet]%0A      endif%0A%0A   endif%0A%0A# End Test 6%0A%0A#--------------------------------------------------------------------------------------------#%0A# Test 7 - Add new link from Two_Above to Three_Right%2C Many Above object has three instances %0A#          but four links. Navigate from Middle to Many Above through Many Right object%0A#--------------------------------------------------------------------------------------------#%0A%0A   if Iteration = 7 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "Set Navigation"%2C "Single at M to Set at MA through RA"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0603"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0702"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      Two_Above = find-one Many_Above where Above_Data = 2%0A%0A      link Two_Above R10 Three_Right%0A%0A      {SetMA} = One_Middle -> R7.Many_Right -> R10.Many_Above%0A%0A      NoInSet = countof {SetMA}%0A%0A      if NoInSet = 4 then%0A         [] = RPT2:Test_Passed ["Single at M to Set at MA through RA"%2C Test%2C NoInSet]%0A      else%0A         [] = RPT3:Test_Failed ["Single at M to Set at MA through RA"%2C Test%2C NoInSet]%0A      endif%0A%0A   endif%0A%0A# End Test 7%0A%0A#--------------------------------------------------------------------------------------------#%0A# Test 8 - Navigate from a single instance in Middle object to a set in the Many Right  %0A#          object. Navigate from the third instance of Many Right object to Many above object%0A#--------------------------------------------------------------------------------------------#%0A%0A   if Iteration = 8 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0702"%2C "Relationships"%2C "Set Navigation"%2C "M1 to MR then MR3 to MA"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      {SetMR} = One_Middle -> R7.Many_Right%0A%0A      if countof {SetMR} != 3 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A%0A         InstFound = FALSE%0A%0A         for InstMR in {SetMR} do%0A%0A            if InstMR.Right_Identifier = 3 then%0A               InstFound = TRUE%0A               {SetMA}   = InstMR -> R10.Many_Above%0A            %0A               if countof{SetMA} = 2 then%0A                  Val1 = -30%0A                  Val2 = -40%0A%0A                  for InstMA in {SetMA} do%0A%0A                     if InstMA.Above_Data = 2 then%0A                        Val1 = InstMA.Above_Data%0A                     endif%0A%0A                     if InstMA.Above_Data = 3 then%0A                        Val2 = InstMA.Above_Data%0A                     endif%0A%0A                  endfor%0A%0A                  if Val1 = 2 then%0A%0A                     if Val2 != 3 then%0A                        Has_Failed   = TRUE%0A                        Failure_Code = Val2%0A                     endif%0A  %0A                  else%0A                     Has_Failed   = TRUE%0A                     Failure_Code = Val1%0A                  endif%0A%0A               else%0A                  Has_Failed   = TRUE%0A                  Failure_Code = -50%0A               endif%0A%0A            endif%0A%0A         endfor%0A%0A         if not Has_Failed then%0A%0A            if not InstFound then%0A               [] = RPT3:Test_Failed ["Instance not found"%2C Test%2C -20]      %0A            else%0A               [] = RPT2:Test_Passed ["M1 to MR then MR3 to MA"%2C Test%2C 0]%0A            endif%0A%0A         else%0A            [] = RPT3:Test_Failed ["Navigation Failed"%2C Test%2C Failure_Code]%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 8%0A%0A#--------------------------------------------------------------------------------------------#%0A# Test 9 - Navigate directly from Many Right object to Many Above object%0A#--------------------------------------------------------------------------------------------#%0A%0A   if Iteration = 9 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0702"%2C "Relationships"%2C "Set Navigation"%2C "Many Right to Many Above"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0603"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      Fourth_Right = create Many_Right with Right_Identifier  = 4 & Right_Data = 0%0A      Fourth_Above = create Many_Above with Above_Data = 4%0A%0A      link Fourth_Above  R10 Fourth_Right%0A%0A      {SetMA} = Fourth_Right -> R10.Many_Above%0A%0A      if countof {SetMA} = 1 then%0A%0A         for InstMA in {SetMA} do%0A%0A            if InstMA.Above_Data = 4 then%0A               [] = RPT2:Test_Passed ["Many Right to Many Above"%2C Test%2C 0]%0A            else%0A               [] = RPT3:Test_Failed ["Wrong instance found"%2C Test%2C -10]%0A            endif%0A%0A         endfor%0A%0A      else%0A         [] = RPT3:Test_Failed ["Empty set in Many Above object"%2C Test%2C -20]      %0A      endif%0A%0A   endif%0A%0A# End Test 9%0A%0A#--------------------------------------------------------------------------------------------#%0A# Test 10 - Navigate from a single instance in Many Right object to Middle object%0A#--------------------------------------------------------------------------------------------#%0A%0A   if Iteration = 10 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0701"%2C "Relationships"%2C "Set Navigation"%2C "Many Right to Middle"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      InstM = Two_Right -> R7.Middle%0A%0A      if InstM.Middle_Identifier = 1 then%0A         [] = RPT2:Test_Passed ["Many Right to Middle"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed ["Wrong instance in Middle"%2C Test%2C InstM.Middle_Identifier]%0A      endif%0A%0A   endif%0A%0A# End Test 10%0A%0A#--------------------------------------------------------------------------------------------#%0A# Test 11 - Navigate from the many right accociative object to the many right object%0A#--------------------------------------------------------------------------------------------#%0A%0A   if Iteration = 11 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0707"%2C "Relationships"%2C "Set Navigation"%2C "Navigate from associative object to Many Right"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      InstMR= One_MRA -> R8.Many_Right   %0A%0A      if InstMR.Right_Identifier = 1 then%0A         [] = RPT2:Test_Passed ["Associative object to Many Right"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed ["Wrong instance in Many Right"%2C Test%2C InstMR.Right_Identifier]%0A      endif%0A%0A   endif%0A%0A# End Test 11%0A%0A#--------------------------------------------------------------------------------------------#%0A# Test 12 - Navigate from the many right accociative object to the many far right object%0A#--------------------------------------------------------------------------------------------#%0A%0A   if Iteration = 12 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0707"%2C "Relationships"%2C "Set Navigation"%2C "Assoc object to Many Far Right"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      InstMFR = Two_MRA -> R8.Many_Far_Right   %0A%0A      if InstMFR.MFR_Identifier = 2 then%0A         [] = RPT2:Test_Passed ["Associative object to Many Right"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed ["Wrong instance found"%2C Test%2C InstMFR.MFR_Identifier]%0A      endif%0A%0A   endif%0A%0A# End Test 12%0A%0A#--------------------------------------------------------------------------------------------#%0A# Test 13 - Test to make sure that the architecture does not restrict the number of instances%0A#           for a single object%0A#           Create 10000 instances as this is many times the maximum number of instances for%0A#           a single instance that is currently being implemented%0A#--------------------------------------------------------------------------------------------#%0A%0A   if Iteration = 13 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0619"%2C "Relationships"%2C "Set Navigation"%2C "Create many instances"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A%0A%0A      # Set about creating 10000 instances of the Middle object%0A      Count = 0%0A%0A      loop%0A         The_ID = Count + 100%0A         newMiddleInst = create Middle with Middle_Identifier = The_ID%0A         Count = Count + 1%0A         breakif Count = 10000%0A%0A      endloop%0A%0A      [] = RPT5:Test_Text[Test%2C "Instances created"]%0A%0A      {SetM} = find Middle where Middle_Identifier >= 100%0A%0A      No_Inst = countof {SetM}%0A%0A      for InstM in {SetM} do%0A         delete InstM%0A      endfor%0A%0A      [] = RPT5:Test_Text[Test%2C "Instances deleted"]%0A%0A      if No_Inst = 10000 then%0A         [] = RPT2:Test_Passed ["All instances created"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed ["Instances incorrectly created"%2C Test%2C No_Inst]%0A      endif%0A%0A   endif%0A%0A# End Test 13%0A%0A#--------------------------------------------------------------------------------------------#%0A# Test 14 - Test that architecture does not restrict the total number of instances%0A#           There are 40 plus objects in the relationships domain each object is going to be%0A#           populated with 10000 instances making 400000 plus instances.%0A#--------------------------------------------------------------------------------------------#%0A%0A   if Iteration = 14 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0619"%2C "Relationships"%2C "Set Navigation"%2C "Create many instances"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A%0A      Count = 0%0A%0A      loop%0A         The_ID = Count + 100%0A%0A         newA          = create Object_A         with idA               = The_ID%0A         newB          = create Object_B         with idB               = The_ID%0A         newC          = create Object_C         with idC               = The_ID%0A         newD          = create Object_D         with idD               = The_ID%0A         newDO         = create Object_DO        with idDO              = The_ID%0A         newE          = create Object_E         with idE               = The_ID%0A         newF          = create Object_F         with idF               = The_ID%0A         newEF         = create Object_EF        with idEF              = The_ID%0A         newG          = create Object_G         with idG               = The_ID         %0A         newH          = create Object_H         with idH               = The_ID%0A         newI          = create Object_I         with IDI               = The_ID%0A         newK          = create Object_K         with idK               = The_ID%0A         newL          = create Object_L         with idL               = The_ID%0A         newO          = create Object_O         with idO               = The_ID%0A         newP          = create Object_P         with idP               = The_ID %0A         newQ          = create Object_Q         with idQ               = The_ID%0A         newR          = create Object_R         with idR               = The_ID%0A         newLO         = create Left_Object      with idLO              = The_ID%0A         newMO         = create Middle_Object    with idMO              = The_ID%0A         newRO         = create Right_Object     with idRO              = The_ID%0A         newMRAssoc    = create MR_Assoc         with idMR              = The_ID%0A         newLeftMany   = create Left_Many        with idLM              = The_ID%0A         newRightMany  = create Right_Many       with idRM              = The_ID%0A         newLMRMAssoc  = create LMRM_Assoc       with idLMRM            = The_ID%0A         newBottomMany = create Bottom_Many      with idBM              = The_ID%0A         newSL1        = create Sub_L1           with idSL1             = The_ID%0A         newSL2        = create Sub_L2           with idSL2             = The_ID%0A         newSL3        = create Sub_L3           with idSL3             = The_ID%0A         newSSL1       = create Sub_Sub_L1       with idSSL1            = The_ID %0A         newSSL2       = create Sub_Sub_L2       with idSSL2            = The_ID %0A         newSSL3       = create Sub_Sub_L3       with idSSL3            = The_ID %0A         newSSL4       = create Sub_Sub_L4       with idSSL4            = The_ID %0A         newSSL5       = create Sub_Sub_L5       with idSSL5            = The_ID %0A         newSSL6       = create Sub_Sub_L6       with idSSL6            = The_ID %0A         newSSL7       = create Sub_Sub_L7       with idSSL7            = The_ID %0A         newSSL8       = create Sub_Sub_L8       with idSSL8            = The_ID %0A         newSSL9       = create Sub_Sub_L9       with idSSL9            = The_ID %0A         newSSL10      = create Sub_Sub_L10      with idSSL10           = The_ID %0A         newSSL11      = create Sub_Sub_L11      with idSSL11           = The_ID %0A         newSSSL1      = create Sub_Sub_Sub_L1   with idSSSL1           = The_ID %0A         newSSSL2      = create Sub_Sub_Sub_L2   with idSSSL2           = The_ID %0A         newFL         = create Far_Left         with Left_Identifier   = The_ID%0A         newMiddleInst = create Middle           with Middle_Identifier = The_ID%0A         newMR         = create Many_Right       with Right_Identifier  = The_ID%0A         newMA         = create Many_Above       with Above_Data        = The_ID%0A         newMRA        = create Many_Right_Assoc with MRA_Identifier    = The_ID%0A         newMFR        = create Many_Far_Right   with MFR_Identifier    = The_ID%0A%0A         Count = Count + 1%0A         breakif Count = 10000%0A%0A      endloop%0A%0A      [] = RPT5:Test_Text[Test%2C "Instances created"]%0A      %0A      {SetA}          = find Object_A         where idA               >= 100%0A      {SetB}          = find Object_B         where idB               >= 100%0A      {SetC}          = find Object_C         where idC               >= 100%0A      {SetD}          = find Object_D         where idD               >= 100%0A      {SetDO}         = find Object_DO        where idDO              >= 100%0A      {SetE}          = find Object_E         where idE               >= 100%0A      {SetF}          = find Object_F         where idF               >= 100%0A      {SetEF}         = find Object_EF        where idEF              >= 100%0A      {SetG}          = find Object_G         where idG               >= 100  %0A      {SetH}          = find Object_H         where idH               >= 100%0A      {SetI}          = find Object_I         where IDI               >= 100%0A      {SetK}          = find Object_K         where idK               >= 100%0A      {SetL}          = find Object_L         where idL               >= 100%0A      {SetO}          = find Object_O         where idO               >= 100%0A      {SetP}          = find Object_P         where idP               >= 100%0A      {SetQ}          = find Object_Q         where idQ               >= 100%0A      {SetR}          = find Object_R         where idR               >= 100%0A      {SetLO}         = find Left_Object      where idLO              >= 100%0A      {SetMO}         = find Middle_Object    where idMO              >= 100%0A      {SetRO}         = find Right_Object     where idRO              >= 100%0A      {SetMRAssoc}    = find MR_Assoc         where idMR              >= 100%0A      {SetLeftMany}   = find Left_Many        where idLM              >= 100%0A      {SetRightMany}  = find Right_Many       where idRM              >= 100%0A      {SetLMRMAssoc}  = find LMRM_Assoc       where idLMRM            >= 100%0A      {SetBottomMany} = find Bottom_Many      where idBM              >= 100%0A      {SetSL1}        = find Sub_L1           where idSL1             >= 100%0A      {SetSL2}        = find Sub_L2           where idSL2             >= 100%0A      {SetSL3}        = find Sub_L3           where idSL3             >= 100%0A      {SetSSL1}       = find Sub_Sub_L1       where idSSL1            >= 100%0A      {SetSSL2}       = find Sub_Sub_L2       where idSSL2            >= 100%0A      {SetSSL3}       = find Sub_Sub_L3       where idSSL3            >= 100%0A      {SetSSL4}       = find Sub_Sub_L4       where idSSL4            >= 100%0A      {SetSSL5}       = find Sub_Sub_L5       where idSSL5            >= 100%0A      {SetSSL6}       = find Sub_Sub_L6       where idSSL6            >= 100%0A      {SetSSL7}       = find Sub_Sub_L7       where idSSL7            >= 100%0A      {SetSSL8}       = find Sub_Sub_L8       where idSSL8            >= 100%0A      {SetSSL9}       = find Sub_Sub_L9       where idSSL9            >= 100%0A      {SetSSL10}      = find Sub_Sub_L10      where idSSL10           >= 100%0A      {SetSSL11}      = find Sub_Sub_L11      where idSSL11           >= 100%0A      {SetSSSL1}      = find Sub_Sub_Sub_L1   where idSSSL1           >= 100%0A      {SetSSSL2}      = find Sub_Sub_Sub_L2   where idSSSL2           >= 100%0A      {SetFL}         = find Far_Left         where Left_Identifier   >= 100%0A      {SetMiddleInst} = find Middle           where Middle_Identifier >= 100%0A      {SetMR}         = find Many_Right       where Right_Identifier  >= 100%0A      {SetMA}         = find Many_Above       where Above_Data        >= 100%0A      {SetMRA}        = find Many_Right_Assoc where MRA_Identifier    >= 100%0A      {SetMFR}        = find Many_Far_Right   where MFR_Identifier    >= 100%0A%0A      The_Grand_Total = countof {SetA}%0A      The_Grand_Total = The_Grand_Total + countof {SetB}%0A      The_Grand_Total = The_Grand_Total + countof {SetC}%0A      The_Grand_Total = The_Grand_Total + countof {SetD}%0A      The_Grand_Total = The_Grand_Total + countof {SetDO}%0A      The_Grand_Total = The_Grand_Total + countof {SetE}%0A      The_Grand_Total = The_Grand_Total + countof {SetEF}%0A      The_Grand_Total = The_Grand_Total + countof {SetG}%0A      The_Grand_Total = The_Grand_Total + countof {SetH}%0A      The_Grand_Total = The_Grand_Total + countof {SetI}%0A      The_Grand_Total = The_Grand_Total + countof {SetK}%0A      The_Grand_Total = The_Grand_Total + countof {SetL}%0A      The_Grand_Total = The_Grand_Total + countof {SetO}%0A      The_Grand_Total = The_Grand_Total + countof {SetP}%0A      The_Grand_Total = The_Grand_Total + countof {SetQ}%0A      The_Grand_Total = The_Grand_Total + countof {SetR}%0A      The_Grand_Total = The_Grand_Total + countof {SetLO}%0A      The_Grand_Total = The_Grand_Total + countof {SetMO}%0A      The_Grand_Total = The_Grand_Total + countof {SetRO}%0A      The_Grand_Total = The_Grand_Total + countof {SetMRAssoc}%0A      The_Grand_Total = The_Grand_Total + countof {SetLeftMany}%0A      The_Grand_Total = The_Grand_Total + countof {SetRightMany}%0A      The_Grand_Total = The_Grand_Total + countof {SetLMRMAssoc}%0A      The_Grand_Total = The_Grand_Total + countof {SetBottomMany}%0A      The_Grand_Total = The_Grand_Total + countof {SetSL1}%0A      The_Grand_Total = The_Grand_Total + countof {SetSL2}%0A      The_Grand_Total = The_Grand_Total + countof {SetSL3}%0A      The_Grand_Total = The_Grand_Total + countof {SetSSL1}%0A      The_Grand_Total = The_Grand_Total + countof {SetSSL2}%0A      The_Grand_Total = The_Grand_Total + countof {SetSSL3}%0A      The_Grand_Total = The_Grand_Total + countof {SetSSL4}%0A      The_Grand_Total = The_Grand_Total + countof {SetSSL5}%0A      The_Grand_Total = The_Grand_Total + countof {SetSSL6}%0A      The_Grand_Total = The_Grand_Total + countof {SetSSL7}%0A      The_Grand_Total = The_Grand_Total + countof {SetSSL8}%0A      The_Grand_Total = The_Grand_Total + countof {SetSSL9}%0A      The_Grand_Total = The_Grand_Total + countof {SetSSL10}%0A      The_Grand_Total = The_Grand_Total + countof {SetSSL11}%0A      The_Grand_Total = The_Grand_Total + countof {SetSSSL1}%0A      The_Grand_Total = The_Grand_Total + countof {SetSSSL2}%0A      The_Grand_Total = The_Grand_Total + countof {SetFL}%0A      The_Grand_Total = The_Grand_Total + countof {SetMiddleInst}%0A      The_Grand_Total = The_Grand_Total + countof {SetMR}%0A      The_Grand_Total = The_Grand_Total + countof {SetMA}%0A      The_Grand_Total = The_Grand_Total + countof {SetMRA}%0A      The_Grand_Total = The_Grand_Total + countof {SetMFR}%0A%0A      if The_Grand_Total = 460000 then%0A         [] = RPT2:Test_Passed ["All instances created"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed ["Instances incorrectly created"%2C Test%2C The_Grand_Total]%0A      endif%0A%0A      [] = RPT5:Test_Text[Test%2C "Deleting instances"]      %0A%0A      for InstA in {SetA} do%0A         delete InstA%0A      endfor%0A%0A      for InstB in {SetB} do%0A         delete InstB%0A      endfor%0A%0A      for InstC in {SetC} do%0A         delete InstC%0A      endfor%0A%0A      for InstD in {SetD} do%0A         delete InstD%0A      endfor%0A%0A      for InstDO in {SetDO} do%0A         delete InstDO%0A      endfor%0A%0A      for InstE in {SetE} do%0A         delete InstE%0A      endfor%0A%0A      for InstEF in {SetEF} do%0A         delete InstEF%0A      endfor%0A%0A      for InstF in {SetF} do%0A         delete InstF%0A      endfor%0A%0A      for InstG in {SetG} do%0A         delete InstG%0A      endfor%0A%0A      for InstH in {SetH} do%0A         delete InstH%0A      endfor%0A%0A      for InstI in {SetI} do%0A         delete InstI%0A      endfor%0A%0A      for InstK in {SetK} do%0A         delete InstK%0A      endfor%0A%0A      for InstL1 in {SetL} do%0A         delete InstL1%0A      endfor%0A%0A      for InstO in {SetO} do%0A         delete InstO%0A      endfor%0A%0A      for InstP in {SetP} do%0A         delete InstP%0A      endfor%0A%0A      for InstQ in {SetQ} do%0A         delete InstQ%0A      endfor%0A%0A      for InstR in {SetR} do%0A         delete InstR%0A      endfor%0A%0A      for InstLO in {SetLO} do%0A         delete InstLO%0A      endfor%0A%0A      for InstRO in {SetRO} do%0A         delete InstRO%0A      endfor%0A%0A      for InstMO in {SetMO} do%0A         delete InstMO%0A      endfor%0A%0A      for InstMRAssoc in {SetMRAssoc} do%0A         delete InstMRAssoc%0A      endfor%0A%0A      for InstLeftMany in {SetLeftMany} do%0A         delete InstLeftMany%0A      endfor%0A%0A      for InstRightMany in {SetRightMany} do%0A         delete InstRightMany%0A      endfor%0A%0A      for InstLMRMAssoc in {SetLMRMAssoc} do%0A         delete InstLMRMAssoc%0A      endfor%0A%0A      for InstBottomMany in {SetBottomMany} do%0A         delete InstBottomMany%0A      endfor%0A%0A      for InstSL1 in {SetSL1} do%0A         delete InstSL1%0A      endfor%0A%0A      for InstSL2 in {SetSL2} do%0A         delete InstSL2%0A      endfor%0A%0A      for InstSL3 in {SetSL3} do%0A         delete InstSL3%0A      endfor%0A%0A      for InstSSL1 in {SetSSL1} do%0A         delete InstSSL1%0A      endfor%0A%0A      for InstSSL2 in {SetSSL2} do%0A         delete InstSSL2%0A      endfor%0A%0A      for InstSSL3 in {SetSSL3} do%0A         delete InstSSL3%0A      endfor%0A%0A      for InstSSL4 in {SetSSL4} do%0A         delete InstSSL4%0A      endfor%0A%0A      for InstSSL5 in {SetSSL5} do%0A         delete InstSSL5%0A      endfor%0A%0A      for InstSSL6 in {SetSSL6} do%0A         delete InstSSL6%0A      endfor%0A%0A      for InstSSL7 in {SetSSL7} do%0A         delete InstSSL7%0A      endfor%0A%0A      for InstSSL8 in {SetSSL8} do%0A         delete InstSSL8%0A      endfor%0A%0A      for InstSSL9 in {SetSSL9} do%0A         delete InstSSL9%0A      endfor%0A%0A      for InstSSL10 in {SetSSL10} do%0A         delete InstSSL10%0A      endfor%0A%0A      for InstSSL11 in {SetSSL11} do%0A         delete InstSSL11%0A      endfor%0A%0A      for InstSSSL1 in {SetSSSL1} do%0A         delete InstSSSL1%0A      endfor%0A%0A      for InstSSSL2 in {SetSSSL2} do%0A         delete InstSSSL2%0A      endfor%0A%0A      for InstFarLeft in {SetFL} do%0A         delete InstFarLeft%0A      endfor%0A%0A      for InstMiddleInst in {SetMiddleInst} do%0A         delete InstMiddleInst%0A      endfor%0A%0A      for InstMR in {SetMR} do%0A         delete InstMR%0A      endfor%0A%0A      for InstMA in {SetMA} do%0A         delete InstMA%0A      endfor%0A%0A      for InstMRA in {SetMRA} do%0A         delete InstMRA%0A      endfor%0A%0A      for InstMFR in {SetMFR} do%0A         delete InstMFR%0A      endfor%0A%0A      [] = RPT5:Test_Text[Test%2C "Instances Deleted"] %0A%0A   endif,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Relationships,Middle,public,Delete_Relationships,,,3,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Delete all relationships%0A#%0A# The architectre shall provide a mechanism to allow deletion of a %0A# simple relationship link between two object instance%0A# 1241-0000-01-0604%0A#%0A# The architecture shall provide a mechanism to allow the deletion of %0A# an associative link between an associative object and the link %0A# between two objects%0A# 1241-0000-01-0612%0A#%0A# The architecture shall provide a mechanism to allow the deletion %0A# of a link between two objects in a associative relationship%0A# 1241-0000-01-0613%0A#%0A# The architecture shall support a translation of the ASL unassociate%0A# statment to map to the mechanism that allows the deletion of an %0A# associative link between an associative object and the link between%0A# two objects%0A# 1241-0000-01-1203%0A#%0A# The architecture shall support a translation of the ASL unlink%0A# statement to map to the mechanism that allow the deletion of a %0A# link between two objects in a relationship%0A# 1241-0000-01-1204%0A#%0A# The architecture shall support a translation of the ASL navigate%0A# statment to map to the mechanism that allows the traversal of%0A# relationship links%0A# 1241-0000-01-1205%0A#%0A#-------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0604"%2C "Relationships"%2C "Set Navigation"%2C "Delete objects and relationships"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0612"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0613"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1203"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1204"]%0A   [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A   [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0622"]%0A%0A   One_Left     = find-one Far_Left   where Left_Identifier   = 1%0A   One_Middle   = find-one Middle     where Middle_Identifier = 1%0A   One_Right    = find-one Many_Right where Right_Identifier  = 1%0A   Two_Right    = find-one Many_Right where Right_Identifier  = 2%0A   Three_Right  = find-one Many_Right where Right_Identifier  = 3%0A   Fourth_Right = find-one Many_Right where Right_Identifier  = 4%0A   Five_Right   = find-one Many_Right where Right_Identifier  = 5%0A   Six_Right    = find-one Many_Right where Right_Identifier  = 6%0A%0A   One_MRA = find-one Many_Right_Assoc where MRA_Identifier  = 1%0A   Two_MRA = find-one Many_Right_Assoc where MRA_Identifier  = 2%0A%0A   One_MFR = find-one Many_Far_Right where MFR_Identifier = 1%0A   Two_MFR = find-one Many_Far_Right where MFR_Identifier = 2%0A%0A   One_Above    = find-one Many_Above where Above_Data = 1%0A   Two_Above    = find-one Many_Above where Above_Data = 2%0A   Three_Above  = find-one Many_Above where Above_Data = 3%0A   Fourth_Above = find-one Many_Above where Above_Data = 4%0A%0A   Has_Failed   = FALSE%0A   Failure_Code = 0%0A%0A   unlink One_Left   R6 One_Middle%0A%0A   unlink One_Middle R7 One_Right%0A   unlink One_Middle R7 Two_Right%0A   unlink One_Middle R7 Three_Right%0A   %0A   unlink One_Above     R10 One_Right%0A   unlink Two_Above     R10 One_Right%0A   unlink Two_Above     R10 Three_Right%0A   unlink Three_Above   R10 Three_Right%0A   unlink Fourth_Above  R10 Fourth_Right%0A%0A   unassociate One_Right R8 One_MFR from One_MRA%0A   unassociate One_Right R8 Two_MFR from Two_MRA%0A   unassociate Two_Right R8 Two_MFR from Two_MRA%0A%0A   unlink One_Right R8 One_MFR%0A   unlink One_Right R8 Two_MFR%0A   unlink Two_Right R8 Two_MFR%0A%0A   # Test each object for any relationship links prior to deletion%0A   InstM = One_Left -> R6.Middle%0A%0A   if InstM = UNDEFINED then%0A      delete One_Left%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -1%0A   endif%0A%0A   {SetMR} = One_Middle -> R7.Many_Right%0A%0A   if countof{SetMR} = 0 then%0A      delete One_Middle%0A   else%0A      Has_Failed = TRUE%0A      Failure_Code = Failure_Code - 2%0A   endif%0A%0A   {SetMA} = One_Right -> R10.Many_Above%0A%0A   if countof{SetMA} = 0 then%0A      delete One_Above%0A   else%0A      Has_Failed = TRUE%0A      Failure_Code = Failure_Code - 4%0A   endif%0A%0A   {SetMA} = Three_Right -> R10.Many_Above%0A%0A   if countof{SetMA} = 0 then%0A      delete Two_Above%0A      delete Three_Above%0A      delete Three_Right%0A   else%0A      Has_Failed = TRUE%0A      Failure_Code = Failure_Code - 8%0A   endif%0A%0A   {SetMRA}  = One_Right -> R8.Many_Right_Assoc%0A%0A   if countof{SetMRA} = 0 then%0A      delete One_Right%0A      delete One_MRA%0A      delete One_MFR%0A   else%0A      Has_Failed = TRUE%0A      Failure_Code = Failure_Code - 16%0A   endif%0A%0A   {SetMRA} = Two_MFR -> R8.Many_Right_Assoc%0A   if countof {SetMRA} = 0 then%0A      delete Two_MRA%0A      delete Two_MFR%0A   else%0A      Has_Failed = TRUE%0A      Failure_Code = Failure_Code - 32%0A   endif%0A%0A   {SetMA} = Fourth_Right -> R10.Many_Above%0A   if countof {SetMA} = 0 then%0A      delete Fourth_Right%0A      delete Fourth_Above%0A   else%0A      Has_Failed = TRUE%0A      Failure_Code = -64%0A   endif%0A   %0A   # Delete remaining unlinked instances%0A   delete Two_Right%0A%0A   if not Has_Failed then%0A%0A      {SetFL}  = find-all Far_Left%0A      {SetM}   = find-all Middle%0A      {SetMR}  = find-all Many_Right%0A      {SetMA}  = find-all Many_Above%0A      {SetMRA} = find-all Many_Right_Assoc%0A      {SetMFR} = find-all Many_Far_Right%0A%0A      CountFL = countof{SetFL}%0A      CountM  = countof{SetM}%0A      CountMR = countof{SetMR}%0A      CountMA = countof{SetMA}%0A      CountMRA = countof{SetMRA}%0A      CountMFR = countof{SetMFR}%0A%0A      if CountFL = 0 then%0A%0A         if CountM = 0 then%0A%0A            if CountMR = 0 then%0A%0A               if CountMA = 0 then%0A%0A                  if CountMRA = 0 then%0A%0A                     if CountMFR != 0 then%0A                        [] = RPT3:Test_Failed ["Delete all objects and relationships"%2C Test%2C -10]      %0A                     else%0A                        [] = RPT2:Test_Passed ["Delete all objects and relationships"%2C Test%2C 0]%0A                     endif%0A%0A                  else%0A                     [] = RPT3:Test_Failed ["Delete all objects and relationships"%2C Test%2C -20]      %0A                  endif%0A%0A               else%0A                  [] = RPT3:Test_Failed ["Delete all objects and relationships"%2C Test%2C -30]      %0A               endif%0A%0A            else%0A               [] = RPT3:Test_Failed ["Delete all objects and relationships"%2C Test%2C -40]      %0A            endif%0A%0A         else%0A            [] = RPT3:Test_Failed ["Delete all objects and relationships"%2C Test%2C -50]      %0A         endif%0A%0A      else%0A         [] = RPT3:Test_Failed ["Delete all objects and relationships"%2C Test%2C -60]      %0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed ["Delete all objects and relationships"%2C Test%2C Failure_Code]      %0A   endif%0A%0A# End Test 21%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
object,,,,,,,,
object,Middle_Object,MO,22,,,,,
attribute,idMO,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,idLO,,,idMO,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R12,,has,Left_Object,idLO,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,idLO,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,Relationships,Middle_Object,public,Create_Relationships,,,1,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Create relationships%0A#%0A# The architecture shall implement simple 1:M relationships%0A# 1241-0000-01-0602%0A#%0A# The architecture shall provide a mechanism to allow creation of a %0A# simple relationship link between two object instances%0A# 1241-0000-01-0603%0A#%0A# The architecture shall implement associative 1-1:M relationships%0A# 1241-0000-01-0609%0A# %0A# The architecture shall provide a mechanism to allow creation of an%0A# associative relationship link between two object instances and am%0A# associative instance%0A# 1241-0000-01-0611%0A#%0A# The architectureshall support a translation of the ASL link %0A# statement to map to the mechanism that allows creation of a %0A# relationship link between two object instances%0A# 1241-0000-01-1202%0A#%0A# The architecture shall support a translation of the ASL navigate%0A# statment to map to the mechanism that allows the traversal of%0A# relationship links%0A# 1241-0000-01-1205%0A#%0A#-------------------------------------------------------------------#%0A%0A[] = RPT1:Start_Test[Test%2C "1241-0000-01-0602"%2C "Relationships"%2C "MO"%2C "Create relationships"]%0A[] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0603"]%0A[] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A[] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0611"]%0A[] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1202"]%0A[] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A[] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0612"]%0A%0AHas_Failed  = FALSE%0A%0A# Find the desired instances for Left_Object%0AfirstLeft  = find-one Left_Object where idLO = 1%0AsecondLeft = find-one Left_Object where idLO = 2%0AthirdLeft  = find-one Left_Object where idLO = 3%0A%0A# Find the desired instances for Middle_Object%0AfirstMiddle  = find-one Middle_Object where idMO = 1%0AthirdMiddle  = find-one Middle_Object where idMO = 3%0AfourthMiddle = find-one Middle_Object where idMO = 4%0AfifthMiddle  = find-one Middle_Object where idMO = 5%0A%0A# Find the desired instances for Right_Object%0AsecondRight = find-one Right_Object where idRO = 2%0AfourthRight = find-one Right_Object where idRO = 4%0AfifthRight  = find-one Right_Object where idRO = 5%0A%0A# Find the desired instances for MR_Object%0AfirstMR = find-one MR_Assoc where idMR = 1%0AsecondMR = find-one MR_Assoc where idMR = 2%0AthirdMR = find-one MR_Assoc where idMR = 3%0AfifthMR = find-one MR_Assoc where idMR = 5%0A%0A# Create normal 1:Mc relationships%0Alink firstLeft R12 firstMiddle%0Alink firstLeft R12 thirdMiddle%0Alink secondLeft R12 fifthMiddle%0A%0A# Create associative Mc:1 relationships%0Alink firstMiddle R14 secondRight using firstMR%0Alink thirdMiddle R14 fourthRight using fifthMR%0Alink fifthMiddle R14 fourthRight using thirdMR%0A%0A# Create a couple of instances to prove the relationships%0A# For coding purposes%2C it is necessary to overspecify%0A# the relationship.%0A%0ALeftInstance   = firstMiddle -> R12.Left_Object%0A{MiddleSet}    = secondLeft  -> R12.Middle_Object%0ARightInstance  = firstMiddle -> R14.Right_Object%0AInstAssoc      = firstMiddle -> R14.MR_Assoc%0A%0A# Now check that the navigations can be performed%0A%0Aif LeftInstance = UNDEFINED then%0A   Has_Failed   = TRUE%0A   Failure_Code = -10%0Aelse%0A%0A   if LeftInstance.idLO != 1 then%0A      Has_Failed   = TRUE%0A      Failure_Code = -20%0A   endif%0A%0Aendif%0A%0Aif not Has_Failed then%0A%0A   if countof {MiddleSet} != 1 then%0A      Has_Failed   = TRUE%0A      Failure_Code = -30%0A   endif%0A%0Aendif%0A%0Aif not Has_Failed then%0A   if InstAssoc = UNDEFINED then%0A      Has_Failed   = TRUE%0A      Failure_Code = -40%0A   else%0A%0A      if InstAssoc.idMR != 1 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -50%0A      endif%0A%0A   endif%0A%0Aendif%0A%0Aif not Has_Failed then%0A   if RightInstance = UNDEFINED then%0A      Has_Failed   = TRUE%0A      Failure_Code = -60%0A   else%0A%0A      if RightInstance.idRO != 2 then%0A         Has_Failed = TRUE%0A         Failure_Code = -70%0A      endif%0A%0A   endif%0A%0Aendif%0A%0A#-------------------------------------------------------------------#%0A# Test complete%0A#-------------------------------------------------------------------#%0A%0A   if not Has_Failed then%0A      [] = RPT2:Test_Passed["MO"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["MO"%2C Test%2C Failure_Code]%0A   endif%0A%0A#-------------------------------------------------------------------#,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Relationships,Middle_Object,public,Middle_Object_Navigation,,,2,
parameter,Iteration,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Normal navigation%0A# %0A# The architecture shall implement simple 1:M relationships%0A# 1241-0000-01-0602%0A#%0A# The architecture shall implement associative 1-1:M relationships%0A# 1241-0000-01-0609%0A#%0A# The architecture shall provide operations which%2C given a starting %0A# instance handle and a relationshipspecification%2C return a single %0A# handle of the related instance%0A# 1241-0000-01-0701%0A#%0A# The architecture shall provide operations which%2C given a starting %0A# instance handle and a relationship specification %2C return a set of%0A# handles of the related instances%0A# 1241-0000-01-0702%0A#%0A# The architecture shall support chains of navigations expressed in %0A# ASL%0A# 1241-0000-01-0704%0A#%0A# The architecture shall support navigations to associative objects%0A# expressed in ASL%0A# 1241-0000-01-0706%0A#%0A# The architecture shall support navigations from singly associative%0A# objects expressed in ASL%0A# 1241-0000-01-0707%0A#%0A# The architectureshall support a translation of the ASL link %0A# statement to map to the mechanism that allows creation of a %0A# relationship link between two object instances%0A# 1241-0000-01-1202%0A#%0A# The architecture shall support a translation of the ASL navigate%0A# statment to map to the mechanism that allows the traversal of%0A# relationship links%0A# 1241-0000-01-1205%0A#%0A#-------------------------------------------------------------------#%0A%0A# Initialise the fault flag%0AHas_Failed       = FALSE%0ASupported        = TRUE%0A#-------------------------------------------------------------------#%0A%0A# Find the desired instances Left_Object%0AfirstLeft  = find-one Left_Object where idLO = 1%0AsecondLeft = find-one Left_Object where idLO = 2%0AthirdLeft  = find-one Left_Object where idLO = 3%0A%0A# Find the desired instances Middle_Object%0AfirstMiddle  = find-one Middle_Object where idMO = 1%0AthirdMiddle  = find-one Middle_Object where idMO = 3%0AfourthMiddle = find-one Middle_Object where idMO = 4%0AfifthMiddle  = find-one Middle_Object where idMO = 5%0A%0A# Find the desired instances Right_Object%0AsecondRight = find-one Right_Object where idRO = 2%0AfourthRight = find-one Right_Object where idRO = 4%0AfifthRight  = find-one Right_Object where idRO = 5%0A%0A# Find the desired instances Associative Object%0AfirstMR  = find-one MR_Assoc where idMR = 1%0AsecondMR = find-one MR_Assoc where idMR = 2%0A%0A#-------------------------------------------------------------------#%0A# Test 1 - Navigate from Left to Middle using relationship number%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 1 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0702"%2C "Relationships"%2C "MO"%2C "Navigate from Left to Middle"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]  %0A%0A      # Perform the navigation%0A      {SetMO} = firstLeft -> R12.Middle_Object%0A%0A      if countof {SetMO} = 0 then%0A         Has_Failed = TRUE%0A      else%0A%0A         Val1 = -10%0A         Val2 = -20%0A%0A         for InstMO in {SetMO} do%0A   %0A            if InstMO.idMO = 1 then%0A               Val1 = InstMO.idMO%0A            endif%0A%0A            if InstMO.idMO = 3 then%0A               Val2 = InstMO.idMO%0A            endif%0A%0A         endfor%0A%0A         if Val1 = 1 then%0A%0A            if Val2 != 3 then%0A               Has_Failed = TRUE%0A               Failure_Code = Val2%0A            endif%0A%0A         else%0A            Has_Failed = TRUE%0A            Failure_Code = Val1%0A         endif %0A%0A      endif%0A%0A   endif%0A%0A# End Test 1%0A%0A#-------------------------------------------------------------------#%0A# Test 2 - Navigate From Middle To Left using relationship number%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 2 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0701"%2C "Relationships"%2C "MO"%2C "Navigate From Middle To Left"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Perform the navigation%0A      InstLO = fifthMiddle -> R12.Left_Object%0A%0A      # Check the result of the navigation%0A      if InstLO != UNDEFINED then%0A%0A         if InstLO.idLO != 2 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -10%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 2%0A%0A#-------------------------------------------------------------------#%0A# Test 3 - Navigate from an instance of the middle object to an%0A#          instance in the right object using relationship number%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 3 then %0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0701"%2C "Relationships"%2C "MO"%2C "Navigate From Middle To Right"]   %0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Perform the navigation%0A      InstRO = firstMiddle -> R14.Right_Object%0A%0A      # Check the result of the navigation%0A      if InstRO != UNDEFINED then%0A%0A         if InstRO.idRO != 2 then%0A            Has_Failed   = TRUE%0A            Failure_Code = InstRO.idRO%0A         endif%0A%0A      else%0A         Has_Failed = TRUE%0A         Failure_Code = -20%0A      endif%0A%0A   endif%0A %0A# End Test 3%0A%0A#-------------------------------------------------------------------#%0A# Test 4 - Navigate from an instance in the right object to a set in%0A#          the middle object%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 4 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0702"%2C "Relationships"%2C "MO"%2C "Navigate From Right To Middle"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      # Perform the navigation%0A      {SetMO} = fourthRight -> R14.Middle_Object%0A%0A      if countof {SetMO} = 0 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A%0A         Val1 = -20%0A         Val2 = -30%0A%0A         for InstMO in {SetMO} do%0A%0A            if (InstMO.idMO = 3) then%0A               Val1 = InstMO.idMO%0A            endif%0A%0A            if InstMO.idMO = 5 then%0A               Val2 = InstMO.idMO%0A            endif%0A%0A         endfor%0A%0A         if Val1 = 3 then%0A%0A            if Val2 != 5 then%0A               Has_Failed   = TRUE%0A               Failure_Code = Val2%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Val1%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 4%0A%0A%0A#-------------------------------------------------------------------#%0A# Test 5 - Navigate to the associative object from the Middle Object%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 5 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0706"%2C "Relationships"%2C "MO"%2C "Nav from MO to Assoc"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      InstAssoc = firstMiddle -> R14.MR_Assoc%0A%0A      if InstAssoc != UNDEFINED then%0A%0A         if InstAssoc.idMR != 1 then%0A            Has_Failed = TRUE%0A            Failure_Code = InstAssoc.idMR%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 5%0A%0A#-------------------------------------------------------------------#%0A# Test 6 - Navigation from a set of instance handles as the source%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 6 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0703"%2C "Relationships"%2C "MO"%2C "Navigation from set of IH"]%0A%0A      [] = RPT5:Test_Text [Test%2C "Naviagation from sets unsupported"]%0A%0A      Supported = FALSE%0A%0A   endif%0A%0A# End Test 6%0A%0A#-------------------------------------------------------------------#%0A# Test 7 - Attempt to perform a navigation on instance that is not %0A#          linked to another instance%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 7 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "MO"%2C "Nav non-linked rel M to L"]%0A%0A      # Fourth Middle is not currently linked to any instances of Left Object.%0A%0A      # Perform the navigation%0A      InstLO = fourthMiddle -> R12.Left_Object%0A%0A      # Check the result of the navigation%0A      if InstLO != UNDEFINED then%0A         Has_Failed = TRUE%0A      endif%0A%0A   endif%0A%0A# End Test 7%0A%0A#-------------------------------------------------------------------#%0A# Test 8 - Attempt to perform a navigation on instance that is not %0A#          linked to another instance%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 8 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "MO"%2C "Nav non-linked rel M to R"]%0A%0A      # Create two new instances%0A      bigMiddle = create Middle_Object with idMO = 1975%0A      bigRight  = create Right_Object  with idRO = 2001%0A%0A      # Seventh Middle is not currently linked to any instances of Right Object.%0A %0A      # Perform the navigation%0A      InstRO = bigMiddle -> R14.Right_Object%0A%0A      # Check the result of the navigation%0A      if InstRO != UNDEFINED then%0A         Failure_Code = InstRO.idRO%0A         Has_Failed   = TRUE%0A      endif%0A%0A   endif%0A%0A# End Test 8%0A%0A#-------------------------------------------------------------------#%0A# Test 9 - Attempt to perform a navigation on instance that is not %0A#          linked to another instance%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 9 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "MO"%2C "Nav non-linked rel L to M"]%0A%0A      # Third Left is not currently linked to any instances of Middle Object.%0A%0A      # Perform the navigation%0A      {SetMO} = thirdLeft -> R12.Middle_Object%0A%0A      if countof {SetMO} != 0 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif %0A%0A   endif%0A%0A# End Test 9%0A%0A#-------------------------------------------------------------------#%0A# Test 10 - Attempt to perform a navigation on instance that is not%0A#           linked to another instance%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 10 then%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "MO"%2C "Nav non-linked rel R to M"]%0A%0A      # Fifth Right is not currently linked to any instances of Middle Object.%0A%0A      # Perform the navigation%0A      {SetMO} = fifthRight -> R14.Middle_Object%0A%0A      if countof {SetMO} != 0 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A   endif%0A%0A# End Test 10%0A%0A#-------------------------------------------------------------------#%0A# Test 11 - Navigate to the associative object from the Right Object%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 11 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0706"%2C "Relationships"%2C "MO"%2C "Nav from RO to Assoc"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      {SetAssoc} = fourthRight -> R14.MR_Assoc%0A%0A      No_In_Set = countof {SetAssoc}%0A%0A      if countof {SetAssoc} != 2 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A         %0A         Val1 = -20%0A         Val2 = -30%0A%0A         for InstAssoc in {SetAssoc} do%0A%0A            if InstAssoc.idMR = 3 then%0A               Val1 = InstAssoc.idMR%0A            endif%0A%0A            if InstAssoc.idMR = 5 then%0A               Val2 = InstAssoc.idMR%0A            endif%0A%0A         endfor%0A%0A         if Val1 = 3 then%0A%0A            if Val2 != 5 then%0A               Has_Failed   = TRUE%0A               Failure_Code = Val2%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Val1%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 11%0A%0A#-------------------------------------------------------------------#%0A# Test 12 - Navigate to the associative object from a middle instance %0A#           that isn't linked to the associated object%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 12 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "MO"%2C "Nav from RO to Assoc which isnt linked"]%0A      {SetAssoc} = fifthRight -> R14.MR_Assoc%0A%0A      if countof {SetAssoc} != 0 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A   endif%0A%0A# End Test 12%0A%0A#-------------------------------------------------------------------#%0A# Test 13 - Navigate to the associative object from a right instance %0A#           that isn't linked to the associated object%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 13 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "MO"%2C "Nav from MO to Assoc which isnt linked"]%0A%0A      InstAssoc = fourthMiddle -> R14.MR_Assoc%0A%0A      if InstAssoc != UNDEFINED then%0A         Failure_Code = InstAssoc.idMR%0A         Has_Failed   = TRUE%0A      endif%0A%0A   endif%0A%0A# End Test 13%0A%0A#-------------------------------------------------------------------#%0A# Test 14 - Navigate to the associative object from a middle instance %0A#           then to the right object%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 14 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0706"%2C "Relationships"%2C "MO"%2C "Navigate from middle to associative to right"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0704"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0707"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      InstRO = firstMiddle -> R14.MR_Assoc -> R14.Right_Object%0A%0A      if InstRO != UNDEFINED then%0A%0A         if InstRO.idRO != 2 then%0A            Has_Failed = TRUE%0A            Failure_Code = InstRO.idRO%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A   endif%0A%0A# End Test 14%0A%0A#-------------------------------------------------------------------#%0A# Test 15 - Navigate to the associative object from a right instance %0A#           then to a set in the middle object%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 15 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0706"%2C "Relationships"%2C "MO"%2C "Navigate from right to associative to middle"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0704"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0707"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      {SetMO} = fourthRight -> R14.MR_Assoc -> R14.Middle_Object%0A%0A      if countof {SetMO} = 0 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A%0A         Val1 = -20%0A         Val2 = -30%0A%0A         for InstMO in {SetMO} do%0A%0A            if InstMO.idMO = 3 then%0A               Val1 = InstMO.idMO%0A            endif%0A%0A            if InstMO.idMO = 5 then%0A              Val2 = InstMO.idMO%0A            endif%0A%0A         endfor%0A%0A         if Val1 = 3 then%0A%0A            if Val2 != 5 then%0A               Has_Failed   = TRUE%0A               Failure_Code = Val2%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Val1%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 15%0A%0A#-------------------------------------------------------------------#%0A# Test 16 - Navigate from Left to Middle to Right%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 16 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "MO"%2C "Navigate from left to middle to right"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0702"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      link thirdLeft    R12 fourthMiddle%0A      link fourthMiddle R14 fifthRight using secondMR%0A   %0A      {SetRO} = thirdLeft -> R12.Middle_Object -> R14.Right_Object%0A%0A      if countof {SetRO} != 1 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A%0A         for InstRO in {SetRO} do%0A%0A            if InstRO.idRO != 5 then%0A               Has_Failed   = TRUE%0A               Failure_Code = -20%0A            endif%0A%0A         endfor%0A%0A      endif%0A%0A   endif%0A%0A# End Test 16%0A%0A#-------------------------------------------------------------------#%0A# Test 17 - Navigate from Right to Middle to Left%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 17 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "MO"%2C "Navigate from Right to middle to left"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0702"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      {SetLO} = fifthRight -> R14.Middle_Object -> R12.Left_Object%0A%0A      if countof {SetLO} != 1  then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A%0A         for InstLO in {SetLO} do%0A         %0A            if InstLO.idLO != 3 then%0A               Has_Failed   = TRUE%0A               Failure_Code = InstLO.idLO%0A            endif%0A  %0A         endfor%0A%0A      endif%0A%0A   endif%0A%0A# End Test 17%0A%0A#-------------------------------------------------------------------#%0A# Test 18 - Navigate from second instance of right object to the %0A#           associative object to the middle object to the left %0A#           object%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 18 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "MO"%2C "RO to Assoc to MO to LO"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0702"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0706"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0707"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      {SetLO} = secondRight -> R14.MR_Assoc -> R14.Middle_Object -> R12.Left_Object%0A%0A      if countof {SetLO} != 1 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A%0A         for InstLO in {SetLO} do%0A%0A            if InstLO.idLO != 1 then%0A               Has_Failed   = TRUE%0A               Failure_Code = InstLO.idLO%0A            endif%0A%0A         endfor%0A%0A      endif%0A%0A   endif%0A%0A# End Test 18%0A%0A#-------------------------------------------------------------------#%0A# Tests complete%0A#-------------------------------------------------------------------#%0A%0A   if Supported = TRUE then%0A%0A      if Has_Failed = FALSE then%0A         [] = RPT2:Test_Passed["MO"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["MO"%2C Test%2C Failure_Code]%0A      endif%0A   %0A   else%0A      [] = RPT4:Test_Unsupported[Test]%0A   endif%0A%0A#-------------------------------------------------------------------#%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Relationships,Middle_Object,public,Delete_Relationships,,,3,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Delete all relationships%0A#%0A# The architecture shall provide a mapping from the ASL delete %0A# instance statment to the deletion mechanism%0A# 1241-0000-01-0121%0A#%0A# The architecture shall provide a mechanism to allow deletion of a %0A# simple relationship link between two object instances%0A# 1241-0000-01-0604%0A#%0A# The architecture shall provide a mechanism to allow the deletion of %0A# an associative link between an associative object and the link an%0A# between two objects%0A# 1241-0000-01-0612%0A#%0A# The architecture shall provide a mechanism to allow the deletion of %0A# a link between two objects in an associative relationship%0A# 1241-0000-01-0613%0A#%0A# The architecture shall support a translation of the ASL unassociate%0A# statment to map to the mechanism that allows the deletion of an %0A# associative link between an associative object and the link between%0A# two objects%0A# 1241-0000-01-1203%0A#%0A# The architecture shall support a translation of the ASL unlink%0A# statement to map to the mechanism that allow the deletion of a %0A# link between two objects in a relationship%0A# 1241-0000-01-1204%0A#%0A# The architecture shall support a translation of the ASL navigate%0A# statment to map to the mechanism that allows the traversal of%0A# relationship links%0A# 1241-0000-01-1205%0A#%0A#-------------------------------------------------------------------#%0A%0AHas_Failed = FALSE%0A%0A[] = RPT1:Start_Test[Test%2C "1241-0000-01-0604"%2C "Relationships"%2C "MO"%2C "Delete all relationships"]%0A[] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0612"]%0A[] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0613"]%0A[] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1203"]%0A[] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1204"]%0A[] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A[] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0622"]%0A# Find the desired instances %0A%0A# Find the desired instances Left_Object%0AfirstLeft  = find-one Left_Object where idLO = 1%0AsecondLeft = find-one Left_Object where idLO = 2%0AthirdLeft  = find-one Left_Object where idLO = 3%0A%0A# Find the desired instances Middle_Object%0AfirstMiddle  = find-one Middle_Object where idMO = 1%0AthirdMiddle  = find-one Middle_Object where idMO = 3%0AfourthMiddle = find-one Middle_Object where idMO = 4%0AfifthMiddle  = find-one Middle_Object where idMO = 5%0AbigMiddle    = find-one Middle_Object where idMO = 1975%0A%0A# Find the desired instances Right_Object%0AsecondRight = find-one Right_Object where idRO = 2%0AfourthRight = find-one Right_Object where idRO = 4%0AfifthRight  = find-one Right_Object where idRO = 5%0AbigRight    = find-one Right_Object where idRO = 2001%0A%0A# Find the desired instances Associative_Object%0AfirstMR  = find-one MR_Assoc where idMR = 1%0AsecondMR = find-one MR_Assoc where idMR = 2%0AthirdMR  = find-one MR_Assoc where idMR = 3%0AfifthMR  = find-one MR_Assoc where idMR = 5%0A   %0A# Delete all relationships%0Aunlink firstLeft  R12 firstMiddle%0Aunlink firstLeft  R12 thirdMiddle%0A%0A# unlink secondLeft R12 firstMiddle%0Aunlink secondLeft R12 fifthMiddle%0Aunlink thirdLeft  R12 fourthMiddle%0A%0Aunassociate firstMiddle  R14 secondRight from firstMR%0Aunassociate thirdMiddle  R14 fourthRight from fifthMR%0Aunassociate fifthMiddle  R14 fourthRight from thirdMR%0Aunassociate fourthMiddle R14 fifthRight from secondMR%0A%0Aunlink firstMiddle  R14 secondRight%0Aunlink thirdMiddle  R14 fourthRight%0Aunlink fifthMiddle  R14 fourthRight%0Aunlink fourthMiddle R14 fifthRight%0A%0A# Explicitly check that all instances have been unlinked%0A# correctly.%0A%0A{Set1M}    = firstLeft  -> R12.Middle_Object%0A{Set2M}    = secondLeft -> R12.Middle_Object%0A{Set3M}    = thirdLeft  -> R12.Middle_Object%0A%0AInst1MRa = firstMiddle  -> R14.MR_Assoc%0AInst1MRb = fourthMiddle -> R14.MR_Assoc%0AInst5MRa = thirdMiddle  -> R14.MR_Assoc%0AInst5MRb = fifthMiddle  -> R14.MR_Assoc  %0A%0AInst2R = firstMR -> R14.Right_Object%0AInst4R = fifthMR -> R14.Right_Object%0A%0ANo_In_Set_1M = countof {Set1M}%0A%0A# Attempt to perform some illegal navigations%0A%0Aif countof {Set1M}  = 0 then%0A%0A   if Inst1MRa = UNDEFINED then%0A%0A      if Inst4R != UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -30%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -20%0A   endif%0A%0Aelse%0A   Has_Failed   = TRUE%0A   Failure_Code = -10%0Aendif%0A%0Aif not Has_Failed then%0A   {SetLO}  = find-all Left_Object%0A   {SetMO}  = find-all Middle_Object%0A   {SetRO}  = find-all Right_Object%0A   {SetMRA} = find-all MR_Assoc%0A%0A   for InstLO in {SetLO} do%0A      delete InstLO%0A   endfor%0A%0A   for InstMO in {SetMO} do%0A      delete InstMO%0A   endfor%0A%0A%0A   for InstRO in {SetRO} do%0A      delete InstRO%0A   endfor%0A%0A%0A   for InstMRA in {SetMRA} do%0A      delete InstMRA%0A   endfor%0A%0A   {SetLO}  = find-all Left_Object%0A   {SetMO}  = find-all Middle_Object%0A   {SetRO}  = find-all Right_Object%0A   {SetMRA} = find-all MR_Assoc%0A%0A   if countof {SetLO} = 0 then%0A%0A      if countof {SetMO} = 0 then%0A%0A         if countof {SetRO} = 0 then%0A%0A            if countof {SetMRA} != 0 then%0A               Has_Failed   = TRUE%0A               Failure_Code = -40%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -50%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -60%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -70%0A   endif%0A%0Aendif%0A%0A#-------------------------------------------------------------------#%0A# Test complete%0A#-------------------------------------------------------------------#%0A%0A   if Has_Failed then%0A      [] = RPT3:Test_Failed["MO"%2C Test%2C Failure_Code]%0A   else%0A      [] = RPT2:Test_Passed["MO"%2C Test%2C 0]%0A   endif%0A%0A#-------------------------------------------------------------------#,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
event,Fail,,1,,,,,
event,,,,,,,,
event,Start_A,,2,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,Finished,,3,,,,,
event,,,,,,,,
event,Start_B,,4,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Iteration,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,Start_C,,5,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,Invocation,,6,,,,,
event,,,,,,,,
object,,,,,,,,
object,MR_Assoc,assMR,23,,,,,
attribute,idMO,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R14,,has,Middle_Object,idMO,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idRO,,,idMO,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R14,,has,Right_Object,idRO,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idMR,,,idRO,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Object_A,objA,2,,,,,
attribute,idA,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
description, This object forms part of a normal 1c:1c relationship.%0A,,,,,,,
object,,,,,,,,
object,Object_B,objB,3,,,,,
attribute,idB,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,idA,,,idB,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R1,,May_have_a,Object_A,idA,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,idA,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicate that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
attribute,idM,,,ResultA,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R18,,Has_a,Object_M,idM,,,
referential,,,,,,,,
attribute,,,,,,,,
operation,Relationships,Object_B,public,Create_Relationships,,,1,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Create relationships%0A#%0A# The architecture shall provide a mechanism to allow creation of a%0A# simple relationship link between two object instances%0A# 1241-0000-01-603%0A#%0A# The architecture shall provide operations which%2C given a starting %0A# instance handle and a relationship specification%2C return a single%0A# handle of the related instances%0A# 1241-0000-01-0701%0A#%0A# The architectureshall support a translation of the ASL link %0A# statement to map to the mechanism that allows creation of a %0A# relationship link between two object instances%0A# 1241-0000-01-1202%0A#%0A# The architecture shall support a translation of the ASL navigate%0A# statment to map to the mechanism that allows the traversal of%0A# relationship links%0A# 1241-0000-01-1205%0A#%0A#-------------------------------------------------------------------#%0A%0A[] = RPT1:Start_Test     [Test%2C "1241-0000-01-0603"%2C "Relationships"%2C "objB"%2C "Create relationships"]%0A[] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A%0A%0AHas_Failed = TRUE%0A%0A# Find the desired instances for Object_A%0AfirstA = find-one Object_A where idA = 1%0AthirdA = find-one Object_A where idA = 3%0A%0A# Find the desired instances for Object_B %0AfirstB  = find-one Object_B where idB = 1%0AfourthB = find-one Object_B where idB = 4%0A%0A# Find the desired instances for Object_M%0AsecondM = find-one Object_M where idM = 2%0AthirdM  = find-one Object_M where idM = 3%0A%0A# Create normal 1:1 relationships%0Alink firstA R1 firstB%0Alink thirdA R1 fourthB%0Alink fourthB R18 thirdM  %0A%0A# Create a couple of instances to prove the relationships%0A# For coding purposes%2C it is necessary to overspecify%0A# the relationship.%0A%0AInstA = firstB -> R1.Object_A%0AInstB = thirdA -> R1.Object_B %0A%0A# Now check that the navigations can be performed%0Aif InstA != UNDEFINED & InstB != UNDEFINED then%0A   Has_Failed = FALSE%0Aendif%0A%0A#-------------------------------------------------------------------#%0A# Test complete%0A#-------------------------------------------------------------------#%0A%0Aif Has_Failed then%0A   [] = RPT3:Test_Failed["objB"%2C Test%2C -1]%0Aelse%0A   [] = RPT2:Test_Passed["objB"%2C Test%2C 0]%0Aendif%0A%0A#-------------------------------------------------------------------#,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Relationships,Object_B,public,ObjB_Navigation,,,2,
parameter,Iteration,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Normal navigation%0A#%0A# The architecture shall implement simple 1:1 relationships%0A# 1241-0000-01-0601%0A# %0A# Given a starting instance handle and a relationship specification%0A# return a single handle of the related instance%0A# 1241-0000-01-0701%0A#%0A# The architecture shall support chains of navigations%0A# 1241-0000-10-0704%0A#%0A# The architecture shall support a translation of the ASL navigate%0A# statment to map to the mechanism that allows the traversal of%0A# relationship links%0A# 1241-0000-01-1205%0A#%0A#-------------------------------------------------------------------#%0A%0A# Initialise the all variables%0A%0ASupported        = TRUE%0AHas_Failed       = FALSE%0AThe_Result       = 0%0A%0A#-------------------------------------------------------------------#%0A%0A#Find the desired instances for Object_A%0AfirstA = find-one Object_A where idA = 1%0AthirdA = find-one Object_A where idA = 3%0A%0A#Find the desired instances for Object_B%0AfirstB  = find-one Object_B where idB = 1%0AfourthB = find-one Object_B where idB = 4%0AfifthB  = find-one Object_B where idB = 5%0A%0A#Find the desired instances for Object_M%0AsecondM = find-one Object_M where idM = 2%0AthirdM  = find-one Object_M where idM = 3%0A%0A[Host] = WAW1:What_Env[]%0A%0A#-------------------------------------------------------------------#%0A# Test 1 - Navigate from first instance of Object_B to Object_A using %0A#          relationship number%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 1 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0701"%2C "Relationships"%2C "objB"%2C "Navigate from Obj B to Obj A"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0601"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Perform the navigation%0A      InstA = firstB -> R1.Object_A%0A%0A      # Check the result of the navigation%0A      if InstA = UNDEFINED then%0A         Has_Failed = TRUE%0A      else%0A%0A         if InstA.idA != 1 then%0A            Has_Failed = TRUE%0A            The_Result = InstA.idA%0A         else%0A            The_Result = InstA.idA%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 1%0A%0A#-------------------------------------------------------------------#%0A# Test 2 - Navigate from fourh instance of Object_B to Object_M using %0A#          relationship number%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 2 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0701"%2C "Relationships"%2C "objB"%2C "Navigate from Obj B to Obj M"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0601"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Perform the navigation%0A      InstM = fourthB -> R18.Object_M%0A%0A      # Check the result of the navigation%0A      if InstM = UNDEFINED then%0A         Has_Failed = TRUE%0A      else%0A%0A         if InstM.idM != 3 then%0A            Has_Failed = TRUE%0A            The_Result = InstM.idM%0A         else%0A            The_Result = InstM.idM%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 2%0A%0A#-------------------------------------------------------------------#%0A# Test 3 - Navigate from third instance of Object_A to Object_B using %0A#          relationship number%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 3 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0701"%2C "Relationships"%2C "objB"%2C "Navigate from Obj A to Obj B"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0601"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Perform the navigation%0A      InstB = thirdA -> R1.Object_B%0A%0A      #Check the result of the navigation%0A      if InstB = UNDEFINED then%0A         Has_Failed = TRUE%0A      else%0A%0A         if InstB.idB != 4 then%0A            Has_Failed = TRUE%0A            The_Result = InstB.idB%0A         else%0A            The_Result = InstB.idB%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 3%0A%0A#-------------------------------------------------------------------#%0A# Test 4 - Navigate from third instance of Object_M to Object_B using %0A#          relationship number%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 4 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0701"%2C "Relationships"%2C "objB"%2C "Navigate from Obj M to Obj B"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0601"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Perform the navigation%0A      InstB = thirdM -> R18.Object_B%0A%0A      # Check the result of the navigation%0A      if InstB = UNDEFINED then%0A         Has_Failed = TRUE%0A      else%0A%0A         if InstB.idB != 4 then%0A            Has_Failed = TRUE%0A            The_Result = InstB.idB%0A         else%0A            The_Result = InstB.idB%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 4%0A%0A#-------------------------------------------------------------------#%0A# Test 5 - Navigate from fourth instance of Object_B to Object_A %0A#          using relationship role. %0A#          This is not currently supported by the WACA%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 5 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objB"%2C "Relationship navigation with role"]%0A%0A      # Perform the navigation%0A      InstA = fourthB -> R1."May_have_a".Object_A%0A%0A      # Check the result of the navigation. Role navigation is only%0A      # supported with reflexive navigations. So should return an %0A      # undefined instance.%0A%0A      if Host = "ISIM" then%0A         Supported = FALSE%0A      else%0A%0A         if InstA = UNDEFINED then%0A            Has_Failed = FALSE%0A         else%0A            Has_Failed = TRUE%0A            The_Result = InstA.idA%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 5%0A%0A#-------------------------------------------------------------------#%0A# Test 6 - Attempt to perform a navigation on instance that is not %0A#          linked to another instance%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 6 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objB"%2C "Navigate non-linked relationship"]%0A%0A      # Fifth B is not currently linked to any instances of Object A.%0A      # Perform the navigation%0A      InstA = fifthB -> R1.Object_A%0A%0A      #Check the result of the navigation%0A      if InstA != UNDEFINED then%0A         Has_Failed = TRUE%0A         The_Result = InstA.idA%0A      endif%0A %0A   endif%0A%0A# End Test 6%0A%0A#-------------------------------------------------------------------#%0A# Test 7 - Perform a chained navigation from the third instance of%0A#          Object_A through Object_B and finish at Object_M%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 7 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "objB"%2C "Navigate from A to B to M"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0601"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      InstM = thirdA -> R1.Object_B -> R18.Object_M  %0A%0A      # Check the result of the navigation%0A      if InstM = UNDEFINED then%0A         Has_Failed = TRUE%0A      else%0A%0A         if InstM.idM != 3 then%0A            Has_Failed = TRUE%0A            The_Result = InstM.idM%0A         else%0A            The_Result = InstM.idM%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 7%0A%0A#-------------------------------------------------------------------#%0A# Test 8 - Perform a chained navigation starting at the first %0A#          instance of Object_A and returning back to Object_A via%0A#          Object_B%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 8 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "objB"%2C "Navigate from A to B to A"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0601"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      InstA = firstA -> R1.Object_B -> R1.Object_A%0A%0A      # Check the result of the navigation%0A      if InstA = UNDEFINED then%0A         Has_Failed = TRUE%0A      else%0A%0A         if InstA.idA != 1 then%0A            Has_Failed = TRUE%0A            The_Result = InstA.idA%0A         else%0A            The_Result = InstA.idA%0A         endif%0A%0A      endif%0A%0A   endif  %0A%0A# End Test 8 %0A%0A%0A#-------------------------------------------------------------------#%0A# Test 9 - Perform a chained navigation starting at the third %0A#          instance of Object_M and navigating to Object_A via%0A#          Object_B%0A#-------------------------------------------------------------------#%0A   if Iteration = 9 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "objB"%2C "Navigate from M to B to A"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0601"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      InstA = thirdM -> R18.Object_B -> R1.Object_A%0A%0A      # Check the result of the navigation%0A      if InstA = UNDEFINED then%0A         Has_Failed = TRUE%0A      else%0A%0A         if InstA.idA != 3 then%0A            Has_Failed = TRUE%0A            The_Result = InstA.idA%0A         else%0A            The_Result = InstA.idA%0A         endif%0A%0A      endif%0A%0A   endif  %0A%0A# End Test 9%0A%0A#-------------------------------------------------------------------#%0A# Test 10 - Perform a chained navigation starting at the third %0A#           instance of Object_M and returning back to Object_M via%0A#           Object_B%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 10 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "objB"%2C "Navigate from M to B to M"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0601"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      InstM = thirdM -> R18.Object_B -> R18.Object_M%0A%0A      # Check the result of the navigation%0A      if InstM = UNDEFINED then%0A         Has_Failed = TRUE%0A      else%0A%0A         if InstM.idM != 3 then%0A            Has_Failed = TRUE%0A            The_Result = InstM.idM%0A         else%0A            The_Result = InstM.idM%0A         endif%0A%0A      endif%0A%0A   endif  %0A%0A# End Test 10%0A%0A#-------------------------------------------------------------------#%0A# Test 11 - Perform a chained navigation starting at the fourth %0A#           instance of Object_B and returning back to Object_B via%0A#           Object_M%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 11 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "objB"%2C "Navigate from B to M to B"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0601"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      InstB = fourthB -> R18.Object_M -> R18.Object_B%0A%0A      # Check the result of the navigation%0A      if InstB = UNDEFINED then%0A         Has_Failed = TRUE%0A      else%0A%0A         if InstB.idB != 4 then%0A            Has_Failed = TRUE%0A            The_Result = InstB.idB%0A         else%0A            The_Result = InstB.idB%0A         endif%0A%0A      endif%0A%0A   endif  %0A%0A# End Test 11%0A%0A#-------------------------------------------------------------------#%0A# Test 12 - Perform a chained navigation starting at the fourth %0A#           instance of Object_B and returning back to Object_B via%0A#           Object_A%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 12 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "objB"%2C "Navigate from B to A to B"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0601"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      InstB = fourthB -> R1.Object_A -> R1.Object_B%0A%0A      # Check the result of the navigation%0A      if InstB = UNDEFINED then%0A         Has_Failed = TRUE%0A      else%0A%0A         if InstB.idB != 4 then%0A            Has_Failed = TRUE%0A            The_Result = InstB.idB%0A         else%0A            The_Result = InstB.idB%0A         endif%0A%0A      endif%0A%0A   endif  %0A%0A# End Test 12%0A%0A#-------------------------------------------------------------------#%0A# Test 13 - Attempt to navigate to Object_M from Object_B through a %0A#           link thats not yet been established%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 13 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objB"%2C "Navigate to M when not linked to B"]%0A%0A      InstM = firstB -> R18.Object_M%0A%0A      if InstM != UNDEFINED then%0A         Has_Failed = TRUE%0A         The_Result = InstM.idM%0A      endif%0A%0A   endif%0A%0A# End Test 13%0A%0A#-------------------------------------------------------------------#%0A# Test 14 - Attempt to navigate from Object_M to Object_B via a link%0A#           that has not been established%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 14 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objB"%2C "B to M while not linked"]%0A%0A      InstB = secondM -> R18.Object_B%0A%0A      if InstB != UNDEFINED then%0A         Has_Failed = TRUE%0A         The_Result = InstB.idB%0A      endif%0A%0A   endif%0A%0A# End Test 14%0A%0A#-------------------------------------------------------------------#%0A# Tests complete%0A#-------------------------------------------------------------------#%0A%0A# If the test is supported%0Aif Supported = TRUE then%0A%0A   if Has_Failed = FALSE then%0A      [] = RPT2:Test_Passed["objB"%2C Test%2C The_Result]%0A   else%0A      [] = RPT3:Test_Failed["objB"%2C Test%2C The_Result]%0A   endif%0A%0Aelse%0A   [] = RPT4:Test_Unsupported[Test]%0Aendif%0A%0A#-------------------------------------------------------------------#,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Relationships,Object_B,public,Delete_Relationships,,,3,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,# -------------------------------------------------------------------#%0A#%0A# Delete all relationships%0A#%0A# The architecture shall provide a mapping from the ASL delete %0A# instance statement to the deletion mechanism%0A# 1241-0000-01-0121%0A#%0A# The architecture shall provide a mechanism to allow deletion of a %0A# simple relationship link between two object instances%0A# 1241-0000-01-0604%0A#%0A# The architecture shall support a translation of the ASL unlink%0A# statement to map to the mechanism that allow the deletion of a %0A# link between two objects in a relationship%0A# 1241-0000-01-1204%0A#%0A# The architecture shall support a translation of the ASL navigate%0A# statment to map to the mechanism that allows the traversal of%0A# relationship links%0A# 1241-0000-01-1205%0A#%0A# -------------------------------------------------------------------#%0A%0AHas_Failed = TRUE%0A%0A[] = RPT1:Start_Test [Test%2C "1241-0000-01-0604"%2C "Relationships"%2C "objB"%2C "Delete all relationships"]%0A[] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0121"]%0A[] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1204"]%0A[] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0621"]%0A%0A# Find the desired instances of Object_A%0AfirstA  = find-one Object_A where idA = 1%0AsecondA = find-one Object_A where idA = 2%0AthirdA  = find-one Object_A where idA = 3%0AfourthA = find-one Object_A where idA = 4%0AfifthA  = find-one Object_A where idA = 5 %0A%0A# Find the desired instances of Object_B%0AfirstB  = find-one Object_B where idB = 1%0AsecondB = find-one Object_B where idB = 2%0AthirdB  = find-one Object_B where idB = 3%0AfourthB = find-one Object_B where idB = 4%0AfifthB  = find-one Object_B where idB = 5%0A%0A# Find the desired instances of Object_M%0AfirstM  = find-one Object_M where idM = 1%0AsecondM = find-one Object_M where idM = 2%0AthirdM  = find-one Object_M where idM = 3%0AfourthM = find-one Object_M where idM = 4%0AfifthM  = find-one Object_M where idM = 5%0A%0A# Delete all relationships%0Aunlink firstA  R1  firstB%0Aunlink thirdA  R1  fourthB%0A%0Aunlink fourthB R18 thirdM%0A%0A# Explicitly check that all instances have been unlinked%0A# correctly.%0A%0AInstB1 = firstA -> R1.Object_B%0AInstB2 = thirdA -> R1.Object_B%0A%0AInstM1 = firstB -> R18.Object_M%0AInstM2 = fourthB -> R18.Object_M%0A%0A# Attempt to perform some illegal navigations%0A%0Aif InstB1 = UNDEFINED then%0A%0A   if InstB2 = UNDEFINED then%0A%0A      if InstM1 = UNDEFINED then%0A%0A         if InstM2 = UNDEFINED then%0A%0A            delete Object_A where idA = 1 %0A            delete Object_A where idA = 2%0A            delete Object_A where idA = 3%0A            delete Object_A where idA = 4%0A            delete Object_A where idA = 5%0A%0A#            delete firstA%0A#            delete secondA%0A#            delete thirdA%0A#            delete fourthA%0A#            delete fifthA%0A%0A            delete firstB%0A            delete secondB%0A            delete thirdB%0A            delete fourthB%0A            delete fifthB%0A%0A            delete firstM%0A            delete secondM%0A            delete thirdM%0A            delete fourthM%0A            delete fifthM%0A%0A            {SetA} = find-all Object_A%0A            {SetB} = find-all Object_B%0A            {SetM} = find-all Object_M%0A%0A            if countof {SetA} = 0 then%0A%0A               if countof {SetB} = 0 then%0A%0A                  if countof {SetM} = 0 then%0A                     Has_Failed = FALSE%0A                  else%0A                     Has_Failed   = TRUE%0A                     Failure_Code = -10%0A                  endif%0A%0A               else%0A                  Has_Failed   = TRUE%0A                  Failure_Code = -20%0A               endif%0A%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = -30%0A            endif%0A%0A         else%0A            Failure_Code = -40%0A         endif%0A%0A         Failure_Code = -50%0A      endif%0A%0A      Failure_Code = -60%0A   endif%0A%0A  Failure_Code = -70%0A%0Aendif%0A%0A#-------------------------------------------------------------------#%0A# Test complete%0A#-------------------------------------------------------------------#%0A%0Aif Has_Failed then%0A   [] = RPT3:Test_Failed["objB"%2C Test%2C Failure_Code]%0Aelse%0A   [] = RPT2:Test_Passed["objB"%2C Test%2C 0]%0Aendif%0A%0A#-------------------------------------------------------------------#,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
event,Finished,,1,,,,,
event,,,,,,,,
event,StartA,,2,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,Fault,,9,,,,,
event,,,,,,,,
event,StartB,,10,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartC,,11,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Iteration,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartD,,12,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartE,,13,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartF,,14,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartG,,15,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
description, This object forms part of a 1c:1c and 1-(1c:1c) relationships.%0A %0A All tests for the above relationships are controlled by this object.%0A,,,,,,,
object,,,,,,,,
object,Object_C,objC,5,,,,,
attribute,idC,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,idD,,,idC,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R3,,Has_a,Object_D,idD,,,
referential,,,,,,,,
attribute,,,,,,,,
description, This object forms part of a 1c:Mc relationship.%0A,,,,,,,
object,,,,,,,,
object,Object_D,objD,6,,,,,
attribute,idD,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,idD,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicate that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
attribute,Colour_Of_D,,,ResultA,,,,
typeref,Colour,,,,,,,
typeref,,,,,,,,
description, Colour enumeration%0A,,,,,,,
attribute,,,,,,,,
operation,Relationships,Object_D,public,Create_Relationships,,,1,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Create relationships%0A#%0A# The architecture shall implement simple 1:M relationships%0A# 1241-0000-01-0602%0A#%0A# The architecture shall provide a mechanism to allow creation of a %0A# simple relationship link between two object instances%0A# 1241-0000-01-0603%0A#%0A# The architecture shall implement associative 1-1:M relationships%0A# 1241-0000-01-0609%0A#%0A# The architecture shall provide operations which%2C given a starting %0A# instance handle and a relationship specification%2C return a single %0A# handle of the related instance%0A# 1241-0000-01-0701%0A#%0A# The architecture shall provide operations which%2C given a starting %0A# instance handle and a relationship specification%2C return a set of %0A# handles of the related instance%0A# 1241-0000-01-0702%0A#%0A# The architectureshall support a translation of the ASL link %0A# statement to map to the mechanism that allows creation of a %0A# relationship link between two object instances%0A# 1241-0000-01-1202%0A#%0A#-------------------------------------------------------------------#%0A %0A[] = RPT1:Start_Test     [Test%2C "1241-0000-01-0603"%2C "Relationship"%2C "objD"%2C "Create relationships"]%0A[] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0602"]%0A[] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0609"]%0A[] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A[] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A[] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0612"]%0A%0A# Find the desired instances for Object_C%0AfirstC  = find-one Object_C where idC = 1%0AthirdC  = find-one Object_C where idC = 3%0AfourthC = find-one Object_C where idC = 4%0AfifthC  = find-one Object_C where idC = 5%0A%0A# Find the desired instances for Object_D%0AfirstD  = find-one Object_D where idD = 1%0AfourthD = find-one Object_D where idD = 4%0A%0A# Find the desired instances for Object_O%0AsecondO = find-one Object_O where idO = 2%0AthirdO  = find-one Object_O where idO = 3%0A%0A# Find the desired instances for Object_Do%0AfirstDO = find-one Object_DO where idDO = 1%0AfifthDO = find-one Object_DO where idDO = 5%0A%0A# Create normal 1:Mc relationships%0Alink firstD  R3 firstC%0Alink firstD  R3 thirdC%0Alink fourthD R3 fourthC%0Alink fourthD R3 fifthC%0A%0A# Create associative 1:M relationships%0Alink firstD R19 secondO using firstDO%0Alink firstD R19 thirdO  using fifthDO%0A%0A#-------------------------------------------------------------------#%0A# Perform a navigation to ensure that linking has been succesfull%0A#-------------------------------------------------------------------#%0A%0AInstD  = firstC -> R3.Object_D%0A{SetO} = firstD -> R19.Object_O%0A%0Aif InstD.idD = 1 then%0A   if countof {SetO} = 2 then%0A      [] = RPT2:Test_Passed["objD"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objD"%2C Test%2C -2]%0A   endif%0Aelse%0A   [] = RPT3:Test_Failed["objD"%2C Test%2C -1]%0Aendif%0A%0A#-------------------------------------------------------------------#,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Relationships,Object_D,public,ObjD_Navigation,,,2,
parameter,Iteration,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Normal navigation%0A# %0A# The architecture shall implement simple 1:M relationships%0A# 1241-0000-01-0602%0A#%0A# The architecture shall implement associative 1-1:M relationships%0A# 1241-0000-01-0609%0A#%0A# The architecture shall provide a mechanismto allow the creation of%0A# associative relationship link between two object instances and an%0A# associative instance%0A# 1241-0000-01-0611%0A#%0A# The architecture shall provide a mechanismto allow the deletion of%0A# an associative link between an associative object and the link %0A# between two objects%0A# 1241-0000-01-0612%0A#%0A# The architecture shall provide a mechanism to allow the deletion of%0A# a link between two objects in an associative relationship%0A# 1241-0000-01-0613%0A#%0A# The architecture shall provide operations which%2C given a starting %0A# instance handle and a relationshipspecification%2C return a single %0A# handle of the related instance%0A# 1241-0000-01-0701%0A#%0A# The architecture shall provide operations which%2C given a starting %0A# instance handle and a relationship specification %2C return a set of%0A# handles of the related instances%0A# 1241-0000-01-0703%0A#%0A# The architecture shall support chains of navigations expressed in %0A# ASL%0A# 1241-0000-01-0704%0A#%0A# The architecture shall support navigations to associative objects%0A# expressed in ASL%0A# 1241-0000-01-0706%0A#%0A# The architecture shall support navigations from singly associative%0A# objects expressed in ASL%0A# 1241-0000-01-0707%0A#%0A# The architecture shall support a translation of the ASL link %0A# statment to map to the mechanism that allows creation of a %0A# relationship link between two object instances%0A# 1241-0000-01-1202%0A#%0A# The architecture shall support a translation of the ASL unassociate%0A# statment to map to the mechanism that allows the deletion of an %0A# associative link between an associative object and the link between%0A# two objects%0A# 1241-0000-01-1203%0A#%0A# The architecture shall support a translation of the ASL unlink%0A# statement to map to the mechanism that allow the deletion of a %0A# link between two objects in a relationship%0A# 1241-0000-01-1204%0A#%0A# The architecture shall support a translation of the ASL navigate%0A# statment to map to the mechanism that allows the traversal of%0A# relationship links%0A# 1241-0000-01-1205%0A#%0A#-------------------------------------------------------------------#%0A%0A# Initialise the variables%0AHas_Failed       = FALSE%0ASupported        = TRUE%0AFailure_Code     = 0%0ATesting_For_What = "UNDEFINED"%0A%0A[Host] = WAW1:What_Env[]%0A%0A#-------------------------------------------------------------------#%0A%0A# Find the desired instances for Object_C%0AfirstC  = find-one Object_C where idC = 1%0AsecondC = find-one Object_C where idC = 2%0AthirdC  = find-one Object_C where idC = 3%0AfourthC = find-one Object_C where idC = 4%0AfifthC  = find-one Object_C where idC = 5%0A%0A# Find the desired instances for Object_D%0AfirstD  = find-one Object_D where idD = 1 & Colour_Of_D = 'Red'%0AsecondD = find-one Object_D where idD = 2 & Colour_Of_D = 'Red'%0AthirdD  = find-one Object_D where idD = 3 & Colour_Of_D = 'Red'%0AfourthD = find-one Object_D where idD = 4 & Colour_Of_D = 'Red'%0A%0A# Find the desired instances for Object_O%0AsecondO = find-one Object_O where idO = 2%0AthirdO  = find-one Object_O where idO = 3%0AfifthO  = find-one Object_O where idO = 5%0A%0A# Find the desired instances for Object_DO%0AfirstDO = find-one Object_DO where idDO = 1%0AthirdDO = find-one Object_DO where idDO = 3%0AfifthDO = find-one Object_DO where idDO = 5%0A%0A%0A#-------------------------------------------------------------------#%0A# Test 1 - Navigate from a single instance in Object_D to a set in %0A#          Object_C%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 1 then%0A%0A      [] = RPT1:Start_Test [Test%2C "1241-0000-01-0602"%2C "Relationships"%2C "objD"%2C "Simple navigation to set IH"]%0A      [] = RPT8:Specify_Requid [Test%2C"1241-0000-01-0702"]%0A      [] = RPT8:Specify_Requid [Test%2C"1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      # Perform the navigation%0A      {SetC} = firstD -> R3.Object_C%0A%0A      # Check the results of the navigation%0A      if countof {SetC} != 2 then%0A%0A         Failure_Code = -10%0A         Has_Failed   = TRUE%0A%0A      else%0A%0A         # Check the contents of the set%0A         Val1  = -20%0A         Val2  = -30%0A%0A         for InstC in {SetC} do%0A         %0A            if InstC.idC = 1 then%0A               Val1  = InstC.idC%0A            endif%0A%0A            if InstC.idC = 3 then%0A               Val2  = InstC.idC%0A            endif%0A %0A         endfor%0A%0A         # Check found values%0A         if Val1 = 1 then%0A%0A            if Val2 = 3 then%0A               Has_Failed = FALSE%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = Val2%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Val1%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 1%0A%0A#-------------------------------------------------------------------#%0A# Test 2 - Relationship role%2C set of instance handles returned%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 2 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objD"%2C "Navigate to a set using role"]%0A      # Target object must be specified for WACA%0A%0A      # Perform the navigation%0A      # Relationship Role is unsupported by the WACA so the set%0A      # returned should be empty. %0A   %0A#      if Host = "WACA" then%0A         Supported = FALSE%0A#      else      %0A#         {SetC} = fourthD -> R3."Has_many".Object_C%0A#         CountC = countof {SetC}%0A%0A         # Check the results of the navigation%0A#         if CountC != 0 then%0A#            Failure_Code = -10%0A#            Has_Failed   = TRUE%0A#         endif%0A%0A#      endif%0A   %0A   endif%0A%0A# End Test 2%0A%0A#-------------------------------------------------------------------#%0A# Test 3 - Navigate from an instance of Object_D to a set of Object_O%0A#          ignoring the assocciative object DO%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 3 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0702"%2C "Relationships"%2C "objD"%2C "Navigate from ObjD to a set in ObjO"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      # Perform the navigation%0A      {SetO} = firstD -> R19.Object_O%0A%0A      # Check the results of the navigation%0A      if countof {SetO} != 2 then%0A         Failure_Code = -10%0A         Has_Failed   = TRUE%0A%0A      else%0A%0A         # Check the contents of the set%0A         Val1  = -20%0A         Val2  = -30%0A%0A         for InstO in {SetO} do%0A%0A            if InstO.idO = 2 then%0A               Val1  = InstO.idO%0A            endif  %0A%0A            if InstO.idO = 3 then%0A               Val2  = InstO.idO%0A            endif  %0A%0A         endfor%0A%0A         # Check the values%0A         if Val1 = 2 then%0A%0A            if Val2 = 3 then%0A               Has_Failed = FALSE%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = Val2%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Val1%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 3%0A%0A#-------------------------------------------------------------------#%0A# Test 4 - Navigate from a single instance of a set within Object_C%0A#          to an instance within Object_D%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 4 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0701"%2C "Relationships"%2C "objD"%2C "Navigate from Object C to Object D"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Perform the navigation%0A      InstD = thirdC -> R3.Object_D%0A%0A      # Check the results of the navigation%0A      if InstD != UNDEFINED then%0A%0A         if InstD.idD = 1 then%0A%0A            if InstD.Colour_Of_D = 'Red' then%0A               Has_Failed = FALSE%0A            else%0A               Failure_Code = -10%0A               Has_Failed   = TRUE%0A            endif%0A%0A         else%0A            Failure_Code = InstD.idD%0A            Has_Failed   = TRUE%0A         endif%0A%0A      else%0A         Failure_Code = -20%0A         Has_Failed   = TRUE%0A      endif%0A%0A   endif%0A%0A# End Test 4%0A%0A#-------------------------------------------------------------------#%0A# Test 5 - Navigate from a single instance of a set within Object_O%0A#          to an instance within Object_D%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 5 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0701"%2C "Relationships"%2C "objD"%2C "Navigate from Object O to Object D"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Perform the navigation%0A      InstD = thirdO -> R19.Object_D%0A%0A      # Check the results of the navigation%0A      if InstD != UNDEFINED then%0A%0A         if InstD.idD = 1 then%0A            Has_Failed = FALSE%0A         else%0A            Failure_Code = InstD.idD%0A            Has_Failed   = TRUE%0A         endif%0A%0A      else%0A         Failure_Code = -10%0A         Has_Failed   = TRUE       %0A      endif%0A%0A   endif%0A%0A# End Test 5%0A%0A#-------------------------------------------------------------------#%0A# Test 6 -  Navigate from an instance of the associated object DO to %0A#           an instance within object D%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 6 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0707"%2C "Relationships"%2C "objD"%2C "Nav from assoc object to ObjD"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Perform the navigation%0A      InstD = fifthDO -> R19.Object_D%0A%0A      # Check the results of the navigation%0A      if InstD != UNDEFINED then%0A%0A         if InstD.idD = 1 then%0A            Has_Failed = FALSE%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = InstD.idD%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -10   %0A      endif%0A%0A   endif%0A%0A# End Test 6%0A%0A#-------------------------------------------------------------------#%0A# Test 7 - Navigate from a set of one instance to a set of one %0A#          instance%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 7 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0703"%2C "Relationships"%2C "objD"%2C "Navigate from set C to D"]%0A%0A      link secondC R3 secondD%0A%0A      {SetC} = find Object_C where idC = 2%0A%0A      if countof {SetC} = 1 then%0A%0A         {SetD} = {SetC} -> R3.Object_D%0A%0A         if countof {SetD} != 1 then%0A            Has_Failed = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      else%0A         Has_Failed = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A     unlink secondC R3 secondD%0A%0A   endif%0A%0A# End Test 7%0A%0A#-------------------------------------------------------------------#%0A# Test 8 - Navigate from a set on the MANY side of the relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 8 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0703"%2C "Relationships"%2C "objD"%2C "Navigate from set C to D"]%0A%0A      Val1 = 0%0A      Val2 = 0%0A%0A      {SetC} = firstD -> R3.Object_C%0A%0A      if countof {SetC} = 2 then%0A%0A         {SetD} = {SetC} -> R3.Object_D%0A%0A         if countof {SetD} != 2 then%0A            Has_Failed = TRUE%0A            Failure_Code = -10%0A         else%0A%0A            for tmpInst in {SetD} do%0A%0A               if Val1 = 0 then%0A                  Val1 = tmpInst.idD%0A               else%0A                  Val2 = tmpInst.idD%0A               endif%0A%0A            endfor%0A%0A            if Val1 = 1 then%0A               if Val2 != 1 then%0A                  Has_Failed = TRUE%0A                  Failure_Code = -20%0A               endif%0A            else%0A               Has_Failed = TRUE%0A               Failure_Code = -30%0A            endif%0A%0A         endif%0A%0A      else%0A%0A         Has_Failed = TRUE%0A         Failure_Code = -30%0A      endif%0A%0A   endif%0A%0A# End Test 8%0A%0A#-------------------------------------------------------------------#%0A# Test 9 - Navigate from a set on the MANY side of the relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 9 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0703"%2C "Relationships"%2C "objD"%2C "Navigate from set C to D"]%0A%0A      Val1 = 0%0A      Val2 = 0%0A      Val3 = 0%0A%0A      link secondC R3 secondD%0A%0A      {SetC} = find Object_C where idC = 1 or idC = 2 or idC = 3%0A%0A      if countof {SetC} = 3 then%0A%0A         {SetD} = {SetC} -> R3.Object_D%0A%0A         if countof {SetD} != 3 then%0A            Has_Failed = TRUE%0A            Failure_Code = countof {SetD}%0A         else%0A%0A            for tmpInst in {SetD} do%0A%0A               if Val1 = 0 then%0A                  Val1 = tmpInst.idD%0A               else%0A                  if Val2 = 0 then%0A                     Val2 = tmpInst.idD%0A                  else%0A                     Val3 = tmpInst.idD%0A                  endif%0A               endif%0A%0A            endfor%0A%0A            if Val1 = 1 & Val2 = 1 & Val3 = 2 then%0A               Has_Failed = FALSE%0A            else%0A%0A               if Val1 = 1 & Val2 = 2 & Val3 = 1 then%0A                  Has_Failed = FALSE %0A               else%0A%0A                  if Val1 = 2 & Val2 = 1 & Val3 = 1 then%0A                     Has_Failed = FALSE%0A                  else%0A                     Has_Failed = TRUE%0A                     Failure_Code = -20%0A                  endif%0A%0A               endif%0A%0A            endif%0A%0A         endif%0A%0A      else%0A%0A         Has_Failed = TRUE%0A         Failure_Code = -30%0A      endif%0A%0A      unlink secondC R3 secondD%0A%0A   endif%0A%0A# End Test 9%0A%0A#-------------------------------------------------------------------#%0A# Test 10 - Navigate from a set to a set in a one to many assoc %0A#           relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 10 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objD"%2C "Nav from set O to D"]%0A%0A      Val1 = 0%0A      Val2 = 0%0A%0A      {SetO} = firstD -> R19.Object_O%0A%0A      if countof {SetO} = 2 then%0A%0A         {SetD} = {SetO} -> R19.Object_D%0A%0A         if countof {SetD} = 2 then%0A%0A            for InstD in {SetD} do%0A%0A               if Val1 = 0 then%0A                  Val1 = InstD.idD%0A               else%0A                  Val2 = InstD.idD%0A               endif%0A%0A            endfor%0A%0A            if Val1 != 1 | Val2 != 1 then%0A               Has_Failed = TRUE%0A               Failure_Code = -10%0A            endif%0A%0A         else%0A            Has_Failed = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      else%0A         Has_Failed = TRUE%0A         Failure_Code = -30%0A      endif%0A%0A   endif%0A%0A# End Test 10%0A%0A#-------------------------------------------------------------------#%0A# Test 11 - Navigate from a set to a set in a one to many assoc %0A#           relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 11 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objD"%2C "Nav from set O to DO"]%0A%0A      Val1 = 0%0A      Val2 = 0%0A%0A      {SetO} = firstD -> R19.Object_O%0A%0A      if countof {SetO} = 2 then%0A%0A         {SetDO} = {SetO} -> R19.Object_DO%0A%0A         if countof {SetDO} = 2 then%0A%0A            for InstDO in {SetDO} do%0A%0A               if Val1 = 0 then%0A                  Val1 = InstDO.idDO%0A               else%0A                  Val2 = InstDO.idDO%0A               endif%0A%0A            endfor%0A%0A            if Val1 = 1 & Val2 = 5 then%0A               Has_Failed = FALSE%0A            else%0A               if Val1 = 5 & Val2 = 1 then%0A                  Has_Failed = FALSE%0A               else%0A                  Has_Failed = TRUE%0A                  Failure_Code = -10%0A               endif%0A%0A            endif%0A%0A         else%0A            Has_Failed = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      else%0A         Has_Failed = TRUE%0A         Failure_Code = -30%0A      endif%0A%0A   endif%0A%0A# End Test 11%0A%0A#-------------------------------------------------------------------#%0A# Test 12 - Attempt to navigate from an instance that does not form %0A#          any part of a relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 12 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objD"%2C "Nav from D to O while not linked"]%0A%0A      # Perform the navigation%0A      {SetO} = fourthD -> R19.Object_O%0A%0A      # Check the results of the navigation%0A      if countof {SetO} != 0 then%0A         Failure_Code = -10%0A         Has_Failed   = TRUE%0A      endif%0A%0A   endif%0A%0A# End Test 12%0A%0A#-------------------------------------------------------------------#%0A# Test 13 - Attempt to navigate from an instance that does not form %0A#          any part of a relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 13 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objD"%2C "Nav from D to C while not linked"]%0A%0A      # Perform the navigation%0A      {SetC} = thirdD -> R3.Object_C%0A%0A      # Check the results of the navigation%0A      if countof {SetC} != 0 then%0A         Failure_Code = -10%0A         Has_Failed   = TRUE%0A      endif%0A%0A   endif%0A%0A# End Test 13%0A%0A#-------------------------------------------------------------------#%0A# Test 14 - Attempt to navigate from an instance that does not form %0A#           any part of a relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 14 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objD"%2C "Nav from C to D while not linked"]%0A%0A      # Perform the navigation      %0A      InstD = secondC -> R3.Object_D%0A%0A      # Check the results of the navigation%0A      if InstD != UNDEFINED then%0A         Failure_Code = -10%0A         Has_Failed   = TRUE%0A      endif%0A%0A   endif%0A%0A# End Test 14%0A%0A#-------------------------------------------------------------------#%0A# Test 15 - Attempt to navigate to the associative from an instance %0A#           that does not form any part of a relationship  %0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 15 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objD"%2C "Nav from D to DO while not linked"]%0A%0A      # Perform the navigation%0A      {SetDO} = fourthD -> R19.Object_DO%0A%0A      # Check the results of the navigation%0A      if countof {SetDO} != 0 then%0A         Failure_Code = -10%0A         Has_Failed   = TRUE%0A      endif%0A%0A   endif%0A%0A# End Test 15%0A%0A#-------------------------------------------------------------------#%0A# Test 16 - Navigate to the associative object from Object D%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 16 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0706"%2C "Relationships"%2C "objD"%2C "Navigate from ObjD to assoc object DO"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      # Perform The Navigation%0A      {SetDO} = firstD -> R19.Object_DO%0A%0A      if countof {SetDO} != 2 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A%0A         Val1  = -20%0A         Val2  = -30         %0A%0A         for InstDO in {SetDO} do%0A%0A            if InstDO.idDO = 1 then%0A               Val1  = InstDO.idDO%0A            endif%0A%0A            if InstDO.idDO = 5 then%0A               Val2  = InstDO.idDO%0A            endif%0A%0A         endfor%0A%0A      endif%0A%0A      if Val1 = 1 then%0A%0A         if Val2 = 5 then%0A            Has_Failed = FALSE%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Val2%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = Val1%0A      endif%0A%0A   endif%0A%0A# End Test 16%0A%0A#-------------------------------------------------------------------#%0A# Test 17 - Navigate from associative object to Object D%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 17 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0707"%2C "Relationships"%2C "objD"%2C "Navigate from the assoc to Object D"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A      # Perform The Navigation%0A      InstD = fifthDO -> R19.Object_D%0A%0A      if InstD.idD != 1  then%0A         Has_Failed   = TRUE%0A         Failure_Code = InstD.idD%0A      endif%0A%0A   endif%0A%0A# End Test 17%0A%0A#-------------------------------------------------------------------#%0A# Test 18 - Navigate from associative object to Object O%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 18 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0707"%2C "Relationships"%2C "objD"%2C "Nav from the assoc to Obj O"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Perform The Navigation%0A      InstO = firstDO -> R19.Object_O%0A%0A      if InstO.idO != 2 then%0A         Has_Failed   = TRUE%0A         Failure_Code = InstO.idO%0A      endif%0A%0A   endif%0A%0A# End Test 18%0A%0A#-------------------------------------------------------------------#%0A# Test 19 - Navigate from Object O to the asociative object%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 19 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0706"%2C "Relationships"%2C "objD"%2C "Nav from Obj O to Obj DO"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A      # Perform The Navigation%0A      InstDO = secondO -> R19.Object_DO%0A%0A      if InstDO.idDO != 1 then%0A         Has_Failed   = TRUE%0A         Failure_Code = InstDO.idDO%0A      endif%0A%0A   endif%0A%0A# End Test 19%0A%0A#-------------------------------------------------------------------#%0A# Test 20 - Attempt to navigate an unlinked relationship %0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 20 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-1205"%2C "Relationships"%2C "objD"%2C "Nav from O to D which isn't linked"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      BigD = create Object_D with idD = 1000%0A      BigO = create Object_O with idO = 1001%0A%0A      # Perform The Navigation%0A      InstD = BigO -> R19.Object_D%0A%0A      if InstD != UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A      delete BigD%0A      delete BigO%0A   endif%0A%0A# End Test 20%0A%0A#-------------------------------------------------------------------#%0A# Test 21 - Create some new instances and link them and then attempt%0A#           to navigate them%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 21 then%0A       %0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0609"%2C "Relationships"%2C "objD"%2C "Nav from O to D"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0611"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0612"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0613"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0701"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1203"]      %0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      NewInstD  = create Object_D  with idD  = 101%0A      NewInstO  = create Object_O  with idO  = 202%0A      NewInstDO = create Object_DO with idDO = 303 %0A%0A      link NewInstD R19 NewInstO using NewInstDO%0A%0A      #Perform The Navigation%0A      InstD = NewInstO -> R19.Object_D%0A%0A      if InstD != UNDEFINED then%0A%0A         if InstD.idD != 101 then%0A            Has_Failed   = TRUE%0A            Failure_Code = InstD.idD%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A      unassociate NewInstD R19 NewInstO from NewInstDO%0A%0A      unlink NewInstD R19 NewInstO%0A%0A      delete NewInstD%0A      delete NewInstO%0A      delete NewInstDO%0A     %0A   endif%0A%0A# End Test 21%0A%0A#-------------------------------------------------------------------#%0A# Test 22 - Chained navigation from a single instance in Object C%0A#           through Object D to Object O%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 22 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "objD"%2C "ObjC to ObjD to ObjO"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      # Perform the navigation%0A      InstD = thirdC -> R3.Object_D%0A%0A      if InstD != UNDEFINED then%0A%0A         {SetO} = thirdC -> R3.Object_D -> R19.Object_O%0A%0A         if countof {SetO} != 2 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -10%0A         else%0A%0A            Val1  = -20%0A            Val2  = -30%0A%0A            for InstO in {SetO} do%0A%0A               if InstO.idO = 2 then%0A                  Val1  = InstO.idO%0A               endif%0A%0A               if InstO.idO = 3 then%0A                  Val2  = InstO.idO%0A               endif%0A%0A            endfor%0A%0A            if Val1 = 2 then%0A  %0A               if Val2 = 3 then%0A                  Has_Failed = FALSE%0A               else%0A                  Has_Failed   = TRUE%0A                  Failure_Code = Val2%0A               endif%0A%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = Val1%0A            endif%0A%0A         endif%0A%0A      else%0A         Failure_Code = -100%0A      endif%0A%0A   endif%0A%0A# End Test 22%0A%0A#-------------------------------------------------------------------#%0A# Test 23 - Chained navigation from a single instance in Object O%0A#           through Object D to Object C%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 23 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "objD"%2C "ObjO to ObjD to ObjC"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0602"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      # Perform the navigation%0A      {SetC} = secondO -> R19.Object_D -> R3.Object_C%0A%0A      if countof {SetC} != 2 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A%0A         Val1  = -20%0A         Val2  = -30%0A%0A         for InstC in {SetC} do%0A%0A            if InstC.idC = 1 then%0A               Val1  = InstC.idC%0A            endif%0A%0A            if InstC.idC = 3 then%0A               Val2  = InstC.idC%0A            endif%0A%0A         endfor%0A%0A         if Val1 = 1 then%0A%0A            if Val2 = 3 then%0A               Has_Failed = FALSE%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = Val2%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Val1%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 23%0A%0A#-------------------------------------------------------------------#%0A# Test 24 - Chained navigation from a single instance in Object O%0A#           to Object D via an instance of Object DO%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 24 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0706"%2C "Relationships"%2C "objD"%2C "ObjO to ObjD via ObjDO"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0704"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Perform the navigation%0A      InstD = secondO -> R19.Object_DO -> R19.Object_D%0A%0A      if InstD.idD != 1 then%0A         Has_Failed   = TRUE%0A         Failure_Code = InstD.idD%0A      endif%0A%0A   endif%0A%0A# End Test 24%0A%0A#-------------------------------------------------------------------#%0A# Test 25 - Chained navigation from a single instance in Object C to%0A#           Object DO via Object D%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 25 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0706"%2C "Relationships"%2C "objD"%2C "ObjC to ObjDO via ObjD"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0704"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A     %0A      # Perform the navigation%0A      {SetDO} = thirdC -> R3.Object_D -> R19.Object_DO%0A%0A      if countof{SetDO} != 2 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A%0A         Val1  = -20%0A         Val2  = -30%0A%0A         for InstDO in {SetDO} do%0A %0A           if InstDO.idDO = 1 then%0A              Val1  = InstDO.idDO%0A           endif%0A%0A           if InstDO.idDO = 5 then%0A              Val2  = InstDO.idDO%0A           endif%0A%0A%0A         endfor%0A%0A      endif%0A%0A      if Val1 = 1 then%0A%0A         if Val2 = 5 then%0A            Has_Failed = FALSE%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Val2%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = Val1%0A      endif%0A%0A   endif%0A%0A# End Test 25%0A%0A#-------------------------------------------------------------------#%0A# Test 26 - Chained navigation from a single instance in Object O to%0A#           Object C via Objects DO and D%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 26 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0706"%2C "Relationships"%2C "objD"%2C "ObjO to ObjC via ObjD and ObjDO"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0704"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0609"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      # Perform the navigation%0A      {SetC} = secondO -> R19.Object_DO -> R19.Object_D -> R3.Object_C%0A%0A      if countof{SetC} != 2 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A%0A         Val1  = -20%0A         Val2  = -30%0A%0A         for InstC in {SetC} do%0A%0A            if InstC.idC = 1 then%0A               Val1  = InstC.idC%0A            endif%0A %0A            if InstC.idC = 3 then%0A               Val2  = InstC.idC%0A            endif%0A%0A         endfor%0A%0A      endif%0A%0A      if Val1 = 1 then%0A%0A         if Val2 = 3 then%0A            Has_Failed = FALSE%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Val2%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = Val1%0A      endif%0A%0A   endif%0A%0A# End Test 26%0A%0A#-------------------------------------------------------------------#%0A# Test 27 - Attempt to navigate an unlinked relationship %0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 27 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objD"%2C "Nav ObjDO to ObjO while unlinked"]%0A%0A      # Perform The Navigation%0A      InstO = thirdDO -> R19.Object_O%0A%0A      if InstO != UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A   endif%0A%0A# End Test 27%0A%0A#-------------------------------------------------------------------#%0A# Test 28 - Attempt to navigate an unlinked relationship %0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 28 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objD"%2C "Nav ObjDO to ObjO while unlinked"]%0A%0A      # Perform The Navigation%0A      InstD = thirdDO -> R19.Object_D%0A%0A      if InstD != UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A   endif%0A%0A# End Test 28%0A%0A#-------------------------------------------------------------------#%0A# Test 29 - Attempt to navigate an unlinked relationship %0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 29 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objD"%2C "Nav ObjO to ObjD while unlinked"]%0A%0A      # Perform The Navigation%0A      InstD = fifthO -> R19.Object_D%0A%0A      if InstD != UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A   endif%0A%0A# End Test 29%0A%0A#-------------------------------------------------------------------#%0A# Tests complete%0A#-------------------------------------------------------------------#%0A%0Aif Supported = TRUE then%0A%0A   if Has_Failed = FALSE then%0A      [] = RPT2:Test_Passed["objD"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objD"%2C Test%2C Failure_Code]%0A   endif%0A%0Aelse%0A   [] = RPT4:Test_Unsupported[Test]%0Aendif,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Relationships,Object_D,public,Delete_Relationships,,,3,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Delete all relationships%0A#%0A# The architectre shall provide a mechanism to allow deletion of a %0A# simple relationship link between two object instance%0A# 1241-0000-01-0604%0A#%0A# The architecture shall provide a mechanism to allow the deletion of %0A# an associative link between an associative object and the link %0A# between two objects%0A# 1241-0000-01-0612%0A#%0A# The architecture shall provide a mechanism to allow the deletion %0A# of a link between two objects in a associative relationship%0A# 1241-0000-01-0613%0A#%0A# The architecture shall support a translation of the ASL unassociate%0A# statment to map to the mechanism that allows the deletion of an %0A# associative link between an associative object and the link between%0A# two objects%0A# 1241-0000-01-1203%0A#%0A# The architecture shall support a translation of the ASL unlink%0A# statement to map to the mechanism that allow the deletion of a %0A# link between two objects in a relationship%0A# 1241-0000-01-1204%0A#%0A# The architecture shall support a translation of the ASL navigate%0A# statment to map to the mechanism that allows the traversal of%0A# relationship links%0A# 1241-0000-01-1205%0A#%0A#-------------------------------------------------------------------#%0A%0A# Initilise the variables%0AHas_Failed   = FALSE%0AFailure_Code = 0%0A%0A[] = RPT1:Start_Test[Test%2C "1241-0000-01-0612"%2C "Relationship"%2C "objD"%2C "Delete relationships"]%0A[] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0604"]%0A[] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0612"]%0A[] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0613"]%0A[] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1203"]%0A[] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1204"]%0A[] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A[] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0622"]%0A%0A# Find the desired instances for Object_C%0AfirstC  = find-one Object_C where idC = 1%0AsecondC = find-one Object_C where idC = 2%0AthirdC  = find-one Object_C where idC = 3%0AfourthC = find-one Object_C where idC = 4%0AfifthC  = find-one Object_C where idC = 5%0A%0A# Find the desired instances for Object_D%0AfirstD  = find-one Object_D where idD = 1%0AsecondD = find-one Object_D where idD = 2%0AthirdD  = find-one Object_D where idD = 3%0AfourthD = find-one Object_D where idD = 4%0AfifthD  = find-one Object_D where idD = 5%0A%0A# Find the desired instances for Object_O%0AfirstO  = find-one Object_O where idO = 1%0AsecondO = find-one Object_O where idO = 2%0AthirdO  = find-one Object_O where idO = 3%0AfourthO = find-one Object_O where idO = 4%0AfifthO  = find-one Object_O where idO = 5%0A%0A# Find the desired instances for Object_DO%0AfirstDO  = find-one Object_DO where idDO = 1%0AsecondDO = find-one Object_DO where idDO = 2%0AthirdDO  = find-one Object_DO where idDO = 3%0AfourthDO = find-one Object_DO where idDO = 4%0AfifthDO  = find-one Object_DO where idDO = 5%0A%0A# Delete relationships%0Aunlink firstD  R3 firstC%0Aunlink firstD  R3 thirdC%0Aunlink fourthD R3 fourthC%0Aunlink fourthD R3 fifthC%0A%0Aunassociate firstD R19 secondO from firstDO%0Aunassociate firstD R19 thirdO  from fifthDO%0A%0Aunlink firstD R19 secondO%0Aunlink firstD R19 thirdO%0A%0A#-------------------------------------------------------------------#%0A%0A   if Has_Failed then%0A      [] = RPT3:Test_Failed["objD"%2CTest%2C Failure_Code]%0A   else%0A      [] = RPT2:Test_Passed["objD"%2CTest%2C 0]%0A   endif%0A%0A#-------------------------------------------------------------------#,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Relationships,Object_D,public,Delete_Instances,,,4,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,[] = RPT1:Start_Test[Test%2C "1241-0000-01-0612"%2C "Relationship"%2C "objD"%2C "Delete relationships"]%0A%0A# Delete set of instances%0A%0A#InstRedD = find-one Object_D where Colour_Of_D = 'Red'%0A#delete InstRedD%0A%0A#InstBlackD = find-one Object_D where Colour_Of_D = 'Black'%0A#delete InstBlackD%0A%0A{SetC}  = find-all Object_C%0A{SetD}  = find-all Object_D%0A{SetDO} = find-all Object_DO%0A{SetO}  = find-all Object_O%0A%0Adelete {SetC}%0Adelete {SetD}%0Adelete {SetDO}%0Adelete {SetO}%0A%0A{SetC}  = find-all Object_C%0A{SetD}  = find-all Object_D%0A{SetDO} = find-all Object_DO%0A{SetO}  = find-all Object_O%0A%0A# Test to ensure that all instances have been deleted%0Aif countof {SetC} = 0 then%0A%0A   if countof {SetD} = 0 then%0A%0A      if countof {SetDO} = 0 then%0A%0A         if countof {SetO} = 0 then%0A            Has_Failed   = FALSE%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -10%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -30%0A   endif%0A%0Aelse%0A   Has_Failed   = TRUE%0A   Failure_Code = -40%0Aendif%0A%0A%0A#-------------------------------------------------------------------#%0A%0A   if Has_Failed then%0A      [] = RPT3:Test_Failed["objD"%2CTest%2C Failure_Code]%0A   else%0A      [] = RPT2:Test_Passed["objD"%2CTest%2C 0]%0A   endif%0A%0A#-------------------------------------------------------------------#,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
event,Fault,,9,,,,,
event,,,,,,,,
event,Finished,,10,,,,,
event,,,,,,,,
event,StartA,,11,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartB,,12,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartC,,13,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Iteration,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartD,,14,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartE,,15,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartF,,16,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartG,,17,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
description, This object forms part of 1c:Mc and 1-(1c:Mc) relationship.%0A %0A All tests for the above relationships are controlled by this object.%0A,,,,,,,
object,,,,,,,,
object,Object_DO,objDO,29,,,,,
attribute,idD,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R19,,Has_a,Object_D,idD,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idO,preferred,,idD,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R19,,Has_Many,Object_O,idO,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idDO,,,idO,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
description, This is the associative object that forms part of the 1-(1c:Mc) realtionship.%0A,,,,,,,
object,,,,,,,,
object,Object_E,objE,7,,,,,
attribute,idE,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,idE,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated %0A,,,,,,,
attribute,,,,,,,,
operation,Relationships,Object_E,public,Create_Relationships,,,1,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Create relationships%0A#%0A# The architecture shall provide a mechainsm to allow creation of a %0A# simple relationship link between two object instances %0A# 1241-0000-01-0603%0A#%0A# The architecture shall provide a mechanism to allow creation of a %0A# associative relationship link between two object instances and an %0A# associative instance%0A# 1241-0000-01-0611%0A#%0A# The architectureshall support a translation of the ASL link %0A# statement to map to the mechanism that allows creation of a %0A# relationship link between two object instances%0A# 1241-0000-01-1202%0A#%0A#-------------------------------------------------------------------#%0A%0A[] = RPT1:Start_Test[Test%2C "1241-0000-01-0603"%2C "Relationships"%2C "objE"%2C "Find instances ObjE F and EF"]%0A[] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0611"]%0A[] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1202"]%0A[] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0612"]%0A%0A# Find the desired instances for Object_E%0AfirstE  = find-one Object_E where idE = 1%0AthirdE  = find-one Object_E where idE = 3%0AfifthE  = find-one Object_E where idE = 5%0A%0A# Find the desired instances for Object_F%0AfirstF  = find-one Object_F where idF = 1%0AfourthF = find-one Object_F where idF = 4%0A%0A# Find the desired instances for Object_EF%0AfirstEF  = find-one Object_EF where idEF = 1%0AsecondEF = find-one Object_EF where idEF = 2%0AthirdEF  = find-one Object_EF where idEF = 3%0AfourthEF = find-one Object_EF where idEF = 4%0A%0A# Create Mc:Mc relationships%0Alink firstE R5 firstF  using fourthEF%0Alink firstE R5 fourthF using thirdEF%0Alink thirdE R5 fourthF using secondEF%0Alink fifthE R5 fourthF using firstEF%0A%0A#-------------------------------------------------------------------#%0A# Test that the creation and linking has been successfull%0A#-------------------------------------------------------------------#%0A%0A{SetF}  = firstE -> R5.Object_F%0A{SetEF} = firstE -> R5.Object_EF%0A%0Aif countof {SetF} != 0 then%0A%0A   if countof {SetEF} != 0 then%0A      [] = RPT2:Test_Passed["ObjE"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["ObjE"%2C Test%2C -2]%0A   endif%0A%0Aelse%0A   [] = RPT3:Test_Failed["ObjE"%2C Test%2C -1]%0Aendif%0A%0A#-------------------------------------------------------------------#%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Relationships,Object_E,public,ObjE_Navigation,,,2,
parameter,Iteration,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Normal navigation%0A#%0A# The architecture shall implement simple 1:M relationships%0A# 1241-0000-01-0602%0A#%0A# The architecture shall implement associative 1-M:M relationships%0A# 1241-0000-01-0610%0A#%0A# The architecture shall provide a mechanism to allow the creation of%0A# associative relationship link between two object instances and an%0A# associative instance%0A# 1241-0000-01-0611%0A#%0A# The architecture shall provide a mechanism to allow the deletion of%0A# an associative link between an associative object and the link %0A# between two objects%0A# 1241-0000-01-0612%0A#%0A# The architecture shall provide a mechanism to allow the deletion of%0A# a link between two objects in an associative relationship%0A# 1241-0000-01-0613%0A#%0A# The architecture shall provide operations which%2C given a starting %0A# instance handle and a relationshipspecification%2C return a single %0A# handle of the related instance%0A# 1241-0000-01-0701%0A#%0A# The architecture shall provide operations which%2C given a starting %0A# instance handle and a relationship specification %2C return a set of%0A# handles of the related instances%0A# 1241-0000-01-0702%0A#%0A# The architecture shall provide operations which%2C given a starting %0A# instance handle and a relationship specification%2C return a set of %0A# handles of the related instances%0A# 1241-0000-01-0703 **** NOT SUPPORTED BY WACA ****%0A#%0A# The architecture shall support chains of navigations expressed in %0A# ASL%0A# 1241-0000-01-0704%0A#%0A# The architecture shall support navigations to associative objects%0A# expressed in ASL%0A# 1241-0000-01-0706%0A#%0A# The architecture shall support navigations from singly associative%0A# objects expressed in ASL%0A# 1241-0000-01-0707%0A#%0A# The architecture shall support a translation of the ASL link %0A# statment to map to the mechanism that allows creation of a %0A# relationship link between two object instances%0A# 1241-0000-01-1202%0A#%0A# The architecture shall support a translation of the ASL unassociate%0A# statment to map to the mechanism that allows the deletion of an %0A# associative link between an associative object and the link between%0A# two objects%0A# 1241-0000-01-1203%0A#%0A# The architecture shall support a translation of the ASL unlink%0A# statement to map to the mechanism that allow the deletion of a %0A# link between two objects in a relationship%0A# 1241-0000-01-1204%0A#%0A# The architecture shall support a translation of the ASL navigate%0A# statment to map to the mechanism that allows the traversal of%0A# relationship links%0A# 1241-0000-01-1205%0A#%0A#-------------------------------------------------------------------#%0A%0A# Initialise the variables%0AHas_Failed       = FALSE%0AUnsupported      = FALSE%0AFailure_Code     = -1%0A%0A#-------------------------------------------------------------------#%0A%0A# Find the desired instances for Object_E%0AfirstE  = find-one Object_E where idE = 1%0AthirdE  = find-one Object_E where idE = 3%0AfourthE = find-one Object_E where idE = 4%0AfifthE  = find-one Object_E where idE = 5%0A%0A#Find the desired instances for Object_F%0AfirstF  = find-one Object_F where idF = 1%0AfourthF = find-one Object_F where idF = 4%0AfifthF  = find-one Object_F where idF = 5%0A%0A#Find the desired instances for Object_EF%0AfirstEF  = find-one Object_EF where idEF = 1%0AsecondEF = find-one Object_EF where idEF = 2%0AthirdEF  = find-one Object_EF where idEF = 3%0AfourtEF  = find-one Object_EF where idEF = 4%0AfifthEF  = find-one Object_EF where idEF = 5%0A%0A#-------------------------------------------------------------------#%0A# Test 1 - Navigate from first instance of Object E to Object F%0A#          using qualified number%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 1 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0702"%2C "Relationships"%2C "objE"%2C "Navigate from ObjE to ObjF"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      # Perform the navigation%0A      {SetF} = firstE -> R5.Object_F%0A%0A      # Check the result of the navigation%0A      if countof {SetF} != 2 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A         # Check the set contents%0A         Val1 = -11%0A         Val2 = -12%0A%0A         for InstF in {SetF} do%0A%0A            if InstF.idF = 1 then%0A               Val1 = InstF.idF%0A            endif%0A%0A            if InstF.idF = 4 then%0A               Val2 = InstF.idF%0A            endif%0A%0A         endfor%0A%0A         if Val1 = 1 then%0A            if Val2 = 4 then%0A               Has_Failed = FALSE%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = Val2%0A            endif%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Val1%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 1%0A%0A#-------------------------------------------------------------------#%0A# Test 2 - Navigate from Object F back to Object E%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 2 then%0A%0A      [] = RPT1:Start_Test[Test%2C"1241-0000-01-0702" %2C "Relationships"%2C "objE"%2C "Object F to Object E"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      {SetE} = fourthF -> R5.Object_E%0A%0A      if countof {SetE} = 0 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -30%0A      else%0A         %0A         Val1 = -10%0A         Val2 = -20%0A         Val3 = -30%0A%0A         for InstE in {SetE} do%0A%0A            if InstE.idE = 1 then%0A               Val1 = InstE.idE%0A            endif%0A%0A            if InstE.idE = 3 then%0A               Val2 = InstE.idE%0A            endif%0A%0A            if InstE.idE = 5 then%0A               Val3 = InstE.idE%0A            endif%0A%0A         endfor%0A%0A         if Val1 = 1 then%0A            if Val2 = 3 then%0A               if Val3 = 5 then%0A                  Has_Failed = FALSE%0A               else%0A                  Has_Failed   = TRUE%0A                  Failure_Code = Val3%0A               endif%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = Val2%0A            endif%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Val1%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 2%0A%0A%0A#-------------------------------------------------------------------#%0A# Test 3 - Navigate from third instance of Object E to Object F%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 3 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0702"%2C "Relationships"%2C "objE"%2C "Navigate from ObjE to ObjF"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      # Perform the navigation%0A      {SetF} = thirdE -> R5.Object_F%0A%0A      # Check the result of the navigation%0A      if countof {SetF} != 1 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A         # Check the set contents%0A         Val1 = -20%0A%0A         for InstF in {SetF} do%0A%0A            if InstF.idF != 4 then%0A               Failure_Code = Val1%0A               Has_Failed   = TRUE%0A            endif%0A%0A         endfor%0A%0A      endif%0A%0A   endif%0A%0A# End Test 3%0A%0A#-------------------------------------------------------------------#%0A# Test 4 - Navigate from a set of instance handles%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 4 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0703"%2C "Relationships"%2C "objE"%2C "Navigate from set F to E"]%0A%0A      Val1 = 0%0A      Val2 = 0%0A      Val3 = 0%0A      Val4 = 0%0A%0A      {SetF} = firstE -> R5.Object_F%0A%0A      if countof {SetF} = 2 then%0A         {SetE} = {SetF} -> R5.Object_E%0A%0A         if countof {SetE} = 4 then%0A         %0A            for InstE in {SetE} do%0A%0A               if Val1 = 0 then%0A                  Val1 = InstE.idE%0A               else%0A                  if Val2 = 0 then%0A                     Val2 = InstE.idE%0A                  else%0A%0A                     if Val3 = 0 then%0A                        Val3 = InstE.idE%0A                     else%0A                        Val4 = InstE.idE%0A                     endif%0A%0A                  endif%0A%0A               endif%0A%0A            endfor%0A%0A            Total = 0%0A            Total = Val1 + Val2 + Val3 + Val4%0A%0A            if Total != 10 then%0A               Has_Failed = TRUE%0A               Failure_Code = -10%0A            endif%0A%0A         else%0A            Has_Failed = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      else%0A         Has_Failed = TRUE%0A         Failure_Code = -30%0A      endif%0A%0A   endif%0A%0A# End Test 4%0A%0A#-------------------------------------------------------------------#%0A# Test 5 - Navigate from a set of instance handles%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 5 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0703"%2C "Relationships"%2C "objE"%2C "Navigate from set E to F"]%0A%0A      temp = 0%0A      Total = 0%0A%0A      {SetE} = fourthF -> R5.Object_E%0A%0A      if countof {SetE} = 3 then%0A         {SetF} = {SetE} -> R5.Object_F%0A%0A         if countof {SetF} = 4 then%0A         %0A            for InstF in {SetF} do%0A               temp  = InstF.idF%0A               Total = Total + temp%0A            endfor%0A%0A            if  Total != 13 then%0A               Has_Failed = TRUE%0A               Failure_Code = Total%0A            endif%0A%0A         else%0A            Has_Failed = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      else%0A         Has_Failed = TRUE%0A         Failure_Code = -30%0A      endif%0A%0A   endif%0A%0A# End Test 5%0A%0A#-------------------------------------------------------------------#%0A# Test 6 - Navigate from a set of instance handles%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 6 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0703"%2C "Relationships"%2C "objE"%2C "Navigate from set F to EF"]%0A%0A      Val1 = 0%0A      Val2 = 0%0A      Val3 = 0%0A      Val4 = 0%0A%0A      {SetF} = firstE -> R5.Object_F%0A%0A      if countof {SetF} = 2 then%0A         {SetEF} = {SetF} -> R5.Object_EF%0A%0A         if countof {SetEF} = 4 then%0A         %0A            for InstEF in {SetEF} do%0A%0A               if Val1 = 0 then%0A                  Val1 = InstEF.idEF%0A               else%0A                  if Val2 = 0 then%0A                     Val2 = InstEF.idEF%0A                  else%0A%0A                     if Val3 = 0 then%0A                        Val3 = InstEF.idEF%0A                     else%0A                        Val4 = InstEF.idEF%0A                     endif%0A%0A                  endif%0A%0A               endif%0A%0A            endfor%0A%0A            Total = 0%0A            Total = Val1 + Val2 + Val3 + Val4%0A%0A            if Total != 10 then%0A               Has_Failed = TRUE%0A               Failure_Code = -10%0A            endif%0A%0A         else%0A            Has_Failed = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      else%0A         Has_Failed = TRUE%0A         Failure_Code = -30%0A      endif%0A%0A   endif%0A%0A# End Test 6%0A%0A#-------------------------------------------------------------------#%0A# Test 7 - Navigate from a set of instance handles%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 7 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0703"%2C "Relationships"%2C "objE"%2C "Navigate from set E to EF"]%0A%0A      Val1 = 0%0A      Val2 = 0%0A      Val3 = 0%0A      Val4 = 0%0A%0A      {SetE} = fourthF -> R5.Object_E%0A%0A      if countof {SetE} = 3 then%0A         {SetEF} = {SetE} -> R5.Object_EF%0A%0A         if countof {SetEF} = 4 then%0A         %0A            for InstEF in {SetEF} do%0A%0A               if Val1 = 0 then%0A                  Val1 = InstEF.idEF%0A               else%0A                  if Val2 = 0 then%0A                     Val2 = InstEF.idEF%0A                  else%0A%0A                     if Val3 = 0 then%0A                        Val3 = InstEF.idEF%0A                     else%0A                        Val4 = InstEF.idEF%0A                     endif%0A%0A                  endif%0A%0A               endif%0A%0A            endfor%0A%0A            Total = 0%0A            Total = Val1 + Val2 + Val3 + Val4%0A%0A            if Total != 10 then%0A               Has_Failed = TRUE%0A               Failure_Code = -10%0A            endif%0A%0A         else%0A            Has_Failed = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      else%0A         Has_Failed = TRUE%0A         Failure_Code = -30%0A      endif%0A%0A   endif%0A%0A# End Test 7%0A%0A#-------------------------------------------------------------------#%0A# Test 8 - Navigate to the associative object from the fifth instance%0A#          of Object E%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 8 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0706"%2C "Relationships"%2C "objE"%2C "Navigate to associative object"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      # Perform the navigation%0A      {SetEF} = fifthE -> R5.Object_EF%0A%0A      # Check the result of the navigation%0A      if countof {SetEF} != 1 then%0A         Has_Failed = TRUE%0A      else%0A %0A         # Check the contents of the set%0A         for InstEF in {SetEF} do%0A%0A            if InstEF.idEF != 1 then%0A               Failure_Code = -10%0A               Has_Failed   = TRUE%0A            endif%0A%0A         endfor%0A%0A      endif%0A%0A   endif%0A%0A# End Test 8%0A%0A#-------------------------------------------------------------------#%0A# Test 9 - Navigate from Object F to the associated object EF%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 9 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0706"%2C "Relationships"%2C "objE"%2C "ObjF to associated Object EF"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      {SetEF} = fourthF -> R5.Object_EF%0A%0A      if countof {SetEF} = 0 then%0A         Has_Failed = TRUE%0A         Failure_Code = -70%0A      else%0A         Val1 = -10%0A         Val2 = -20%0A         Val3 = -30%0A%0A         for InstEF in {SetEF} do%0A%0A            if InstEF.idEF = 1 then%0A               Val1 = InstEF.idEF%0A            endif%0A%0A            if InstEF.idEF = 2 then%0A               Val2 = InstEF.idEF%0A            endif%0A%0A            if InstEF.idEF = 3 then%0A               Val3 = InstEF.idEF%0A            endif%0A%0A         endfor%0A%0A         for InstEF in {SetEF} do%0A%0A            if InstEF.idEF = 1 then%0A               Val1 = InstEF.idEF%0A            endif%0A%0A            if InstEF.idEF = 2 then%0A               Val2 = InstEF.idEF%0A            endif%0A%0A            if InstEF.idEF = 3 then%0A               Val3 = InstEF.idEF%0A            endif%0A%0A         endfor%0A%0A         if Val1 = 1 then%0A            if Val2 = 2 then%0A               if Val3 = 3 then%0A                  Has_Failed = FALSE%0A               else%0A                  Has_Failed   = TRUE%0A                  Failure_Code = Val3%0A               endif%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = Val2%0A            endif%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Val1%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 9%0A%0A#-------------------------------------------------------------------#%0A# Test 10 - Navigate from the associated object EF to object F%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 10 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0707"%2C "Relationships"%2C "objE"%2C "Associated object EF to object F"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      {SetEF} = find-all Object_EF%0A%0A      for InstEF in {SetEF} do%0A%0A         if InstEF.idEF = 1 then%0A            InstF = InstEF -> R5.Object_F%0A%0A            if InstF.idF != 4 then%0A               Has_Failed   = TRUE%0A               Failure_Code = -10%0A               break%0A            endif%0A%0A         endif%0A%0A         if InstEF.idEF = 2 then%0A            InstF = InstEF -> R5.Object_F%0A%0A            if InstF.idF != 4 then%0A               Has_Failed   = TRUE%0A               Failure_Code = -20%0A               break%0A            endif%0A%0A         endif%0A%0A         if InstEF.idEF = 3 then%0A            InstF = InstEF -> R5.Object_F%0A%0A            if InstF.idF != 4 then%0A               Has_Failed   = TRUE%0A               Failure_Code = -30%0A               break%0A            endif%0A%0A         endif%0A%0A         if InstEF.idEF = 4 then%0A            InstF = InstEF -> R5.Object_F%0A            if InstF.idF != 1 then%0A               Has_Failed   = TRUE%0A               Failure_Code = -40%0A               break%0A            endif%0A%0A         endif%0A%0A      endfor%0A%0A   endif%0A%0A# End Test 10%0A%0A#-------------------------------------------------------------------#%0A# Test 11 - Navigate from the associated object EF to object E%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 11 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0707"%2C "Relationships"%2C "objE"%2C "Associated Object EF to Object E"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      InstE = thirdEF -> R5.Object_E%0A%0A      if InstE = UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A%0A         if InstE.idE != 1 then%0A            Has_Failed = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      endif%0A%0A   endif %0A%0A# End Test 11%0A%0A#-------------------------------------------------------------------#%0A# Test 12  - Navigate from object E to the associated object EF and %0A#           then to object F%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 12 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "objE"%2C "ObjE to assoc ObjEF to ObjF"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0706"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0707"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1205"]%0A%0A      # Unsupported by WACA 301 beta%0A      # Will be supported for WACA 500%0A%0A      {SetF} = fifthE -> R5.Object_EF -> R5.Object_F%0A      %0A      if countof{SetF} = 1 then%0A%0A         for InstF in {SetF} do%0A%0A            if InstF.idF != 4 then%0A               Has_Failed   = TRUE%0A               Failure_Code = -10%0A            endif%0A%0A         endfor%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A      endif%0A%0A   endif%0A%0A# End Test 12%0A%0A#-------------------------------------------------------------------#%0A# Test 13 - Navigate from object F to the associated object EF then  %0A#           to object E%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 13 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0704"%2C "Relationships"%2C "objE"%2C "Object F to assoc object EF to object E"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0706"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0707"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      # Will be supported for WACA 500%0A      {SetE} = firstF -> R5.Object_EF -> R5.Object_E%0A%0A      if countof {SetE} = 1 then%0A%0A         for InstE in {SetE} do%0A%0A            if InstE.idE != 1 then%0A               Has_Failed   = TRUE%0A               Failure_Code = -10%0A            endif%0A%0A         endfor%0A     %0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A      endif%0A%0A   endif%0A%0A# End Test 13%0A%0A%0A#-------------------------------------------------------------------#%0A# Test 14 - Navigate a relationships where the source instance does %0A#           not form any part of a relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 14 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objE"%2C "Source forms no part of relationship"]%0A%0A      # Perform the navigation%0A      {SetF} = fourthE -> R5.Object_F%0A%0A      # Check the result of the navigation%0A      if countof {SetF} != 0 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A   endif%0A%0A# End Test 14%0A%0A#-------------------------------------------------------------------#%0A# Test 15 - Navigate a relationships where the source instance does %0A#           not form any part of a relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 15 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objE"%2C "Source forms no part of relationship"]%0A%0A      # Perform the navigation%0A      {SetE} = fifthF -> R5.Object_E%0A%0A      # Check the result of the navigation%0A      if countof {SetF} != 0 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A   endif%0A%0A# End Test 15%0A%0A#-------------------------------------------------------------------#%0A# Test 16 - Navigate to an associative object where the source %0A#           instance does not form part of the relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 16 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objE"%2C "Source forms no part of relationship"]%0A     %0A      # Perform the navigation%0A      {SetEF} = fourthE -> R5.Object_EF%0A%0A      # Check the result of the navigation%0A      if countof {SetEF} != 0 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A   endif%0A%0A# End Test 16%0A%0A#-------------------------------------------------------------------#%0A# Test 17 - Navigate to an associative object where the source %0A#           instance does not form part of the relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 17 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objE"%2C "Source forms no part of relationship"]%0A%0A      # Perform the navigation%0A      {SetEF} = fifthF -> R5.Object_EF%0A%0A      # Check the result of the navigation%0A      if countof {SetEF} != 0 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A   endif%0A%0A# End Test 17%0A%0A#-------------------------------------------------------------------#%0A# Test 18 - Navigate to an associative object where the source %0A#           instance does not form part of the relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 18 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objE"%2C "Source forms no part of relationship"]%0A      # Perform the navigation%0A      InstF = fifthEF -> R5.Object_F%0A%0A      # Check the result of the navigation%0A      if InstF != UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A   endif%0A%0A# End Test 18%0A%0A#-------------------------------------------------------------------#%0A# Test 19 - Navigate to an associative object where the source %0A#           instance does not form part of the relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 19 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objE"%2C "Source forms no part of relationship"]%0A%0A      # Perform the navigation%0A      InstE = fifthEF -> R5.Object_E%0A%0A      # Check the result of the navigation%0A      if InstE != UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A   endif%0A%0A# End Test 19%0A%0A#-------------------------------------------------------------------#%0A# Test 20 - Correlated associative navigation%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 20 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-1205"%2C "Relationships"%2C "objE"%2C "Correlated Assoc Navigation"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      InstEF = firstE and firstF -> R5.Object_EF%0A%0A      if InstEF.idEF != 4 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A   endif%0A%0A# End Test 20%0A%0A#-------------------------------------------------------------------#%0A# Test 21 - Attempt to naviagate from Object E to Object F via %0A#           unlinked relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 21 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objE"%2C "Nav from E to F"]%0A%0A      BigE = create Object_E with idE = 10000%0A      BigF = create Object_F with idF = 20000%0A%0A      {SetF} = BigE -> R5.Object_F%0A%0A      if countof {SetF} != 0 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A      delete BigE%0A      delete BigF%0A%0A   endif%0A%0A# End Test 21%0A%0A#-------------------------------------------------------------------#%0A# Test 22 - This test ensures that when instances of an object are%0A#           linked%2C unlinked then relinked that the linking of the%0A#           new instances is correct%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 22 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0603"%2C "Relationships"%2C "objE"%2C "Check that no in assoc inst is correct"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0604"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0610"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0612"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0613"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0702"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1203"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1205"]%0A%0A      firstNewE   = create Object_E  with idE = 10%0A      secondNewE  = create Object_E  with idE = 11%0A      firstNewF   = create Object_F  with idF = 20%0A      secondNewF  = create Object_F  with idF = 21%0A      firstNewEF  = create Object_EF with idE = 30%0A      secondNewEF = create Object_EF with idE = 31%0A%0A      link firstNewE  R5 firstNewF  using firstNewEF%0A      link secondNewE R5 secondNewF using secondNewEF%0A%0A      {SetEF} = firstNewE -> R5.Object_EF%0A%0A      if countof {SetEF} != 1 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A      unassociate firstNewE  R5 firstNewF  from firstNewEF%0A      unassociate secondNewE R5 secondNewF from secondNewEF%0A%0A      unlink firstNewE  R5 firstNewF%0A      unlink secondNewE R5 secondNewF%0A%0A      if not Has_Failed then%0A%0A         link firstNewE  R5 firstNewF  using firstNewEF%0A         link secondNewE R5 secondNewF using secondNewEF%0A%0A         {newSetEF} = firstNewE -> R5.Object_EF%0A%0A         if countof {newSetEF} != 1 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      endif%0A%0A      unassociate firstNewE  R5 firstNewF  from firstNewEF%0A      unassociate secondNewE R5 secondNewF from secondNewEF%0A%0A      unlink firstNewE  R5 firstNewF%0A      unlink secondNewE R5 secondNewF%0A%0A      delete firstNewE %0A      delete secondNewE%0A      delete firstNewF%0A      delete secondNewF%0A      delete firstNewEF%0A      delete secondNewEF%0A%0A   endif%0A%0A# End Test 22%0A%0A#-------------------------------------------------------------------#%0A# Tests complete%0A#-------------------------------------------------------------------#%0A%0Aif Unsupported = FALSE then %0A%0A   if Has_Failed = FALSE then%0A      [] = RPT2:Test_Passed["objE" %2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objE"%2C Test%2C Failure_Code]%0A   endif%0A%0Aelse%0A   [] = RPT4:Test_Unsupported[Test]%0Aendif%0A%0A#-------------------------------------------------------------------#%0A%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Relationships,Object_E,public,Delete_Relationships,,,3,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Delete all relationships%0A#%0A# The architectre shall provide a mechanism to allow deletion of a %0A# simple relationship link between two object instance%0A# 1241-0000-01-0604%0A#%0A# The architecture shall provide a mechanism to allow the deletion of %0A# an associative link between an associative object and the link %0A# between two objects%0A# 1241-0000-01-0612%0A#%0A# The architecture shall provide a mechanism to allow the deletion %0A# of a link between two objects in a associative relationship%0A# 1241-0000-01-0613%0A#%0A# The architecture shall support a translation of the ASL unassociate%0A# statment to map to the mechanism that allows the deletion of an %0A# associative link between an associative object and the link between%0A# two objects%0A# 1241-0000-01-1203%0A#%0A# The architecture shall support a translation of the ASL unlink%0A# statement to map to the mechanism that allow the deletion of a %0A# link between two objects in a relationship%0A# 1241-0000-01-1204%0A#%0A# The architecture shall support a translation of the ASL navigate%0A# statment to map to the mechanism that allows the traversal of%0A# relationship links%0A# 1241-0000-01-1205%0A#%0A#-------------------------------------------------------------------#%0A%0A# Set the variable defaults%0AHas_Failed   = FALSE%0AFailure_Code = 0%0A%0A[] = RPT1:Start_Test[Test%2C "1241-0000-01-0613"%2C "Relationships"%2C "ObjE"%2C "Delete relationships"]%0A[] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0604"]%0A[] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0612"]%0A[] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1203"]%0A[] = RPT8:Specify_Requid[Test%2C"1241-0000-01-1204"]%0A[] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A[] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0622"]%0A%0A%0A%0ACurrentID = 1%0A%0Aloop%0A%0A   InstE = find-one Object_E where idE = CurrentID%0A   breakif InstE = UNDEFINED%0A%0A   {setAssoc} = InstE -> R5.Object_EF%0A   %0A   for instAssoc in {setAssoc} do%0A      InstF = instAssoc -> R5.Object_F   %0A      unassociate InstE R5 InstF from instAssoc%0A      unlink InstE R5 InstF%0A      delete instAssoc%0A   endfor%0A%0A   delete InstE%0A%0A   CurrentID = CurrentID + 1%0A%0Aendloop%0A%0A%0A# Find the desired instances for Object_E%0A#firstE  = find-one Object_E where idE = 1%0A#thirdE  = find-one Object_E where idE = 3%0A#fifthE  = find-one Object_E where idE = 5%0A%0A# Find the desired instances for Object_F%0A#firstF  = find-one Object_F where idF = 1%0A#fourthF = find-one Object_F where idF = 4%0A%0A# Find the desired instances for Object_EF%0A#firstEF  = find-one Object_EF where idEF = 1%0A#secondEF = find-one Object_EF where idEF = 2%0A#thirdEF  = find-one Object_EF where idEF = 3%0A#fourthEF = find-one Object_EF where idEF = 4%0A#fifthEF  = find-one Object_EF where idEF = 5%0A%0A# Delete relationships%0A#unassociate firstE R5 firstF  from fourthEF%0A#unassociate firstE R5 fourthF from thirdEF%0A#unassociate thirdE R5 fourthF from secondEF%0A#unassociate fifthE R5 fourthF from firstEF%0A%0A#unlink firstE R5 firstF%0A#unlink firstE R5 fourthF%0A#unlink thirdE R5 fourthF%0A#unlink fifthE R5 fourthF%0A%0A{SetE}  = find-all Object_E%0A{SetEF} = find-all Object_EF%0A{SetF}  = find-all Object_F%0A%0Afor InstE in {SetE} do%0A   delete InstE%0Aendfor%0A%0Afor InstEF in {SetEF} do%0A   delete InstEF%0Aendfor%0A%0Afor InstF in {SetF} do%0A   delete InstF%0Aendfor%0A%0A{SetE}  = find-all Object_E%0A{SetEF} = find-all Object_EF%0A{SetF}  = find-all Object_F%0A%0Aif countof {SetE} = 0 then%0A%0A   if countof {SetEF} = 0 then%0A%0A      if countof {SetF} != 0 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -20%0A   endif%0A%0Aelse%0A   Has_Failed   = TRUE%0A   Failure_Code = -30%0Aendif%0A%0A%0A#-------------------------------------------------------------------#%0A%0Aif Has_Failed then%0A   [] = RPT3:Test_Failed["objE"%2C Test%2C Failure_Code]%0Aelse%0A   [] = RPT2:Test_Passed["ObjE"%2C Test%2C 0]%0Aendif%0A%0A#-------------------------------------------------------------------#,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
event,Fault,,1,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
event,,,,,,,,
event,StartA,,3,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartB,,4,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartC,,5,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Iteration,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartD,,6,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartE,,7,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartF,,8,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartG,,9,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
description, This object forms part of a 1-(Mc:Mc) relationships.%0A %0A All tests for the above relationship are controlled by this object.%0A,,,,,,,
object,,,,,,,,
object,Object_EF,OBJEF,9,,,,,
attribute,idE,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R5,,Has_lots,Object_E,idE,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idF,preferred,,idE,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R5,,Has_many,Object_F,idF,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,idF,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicate that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
attribute,idEF,,,ResultA,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
description, This is the associative object that forms part of the 1-(Mc:Mc) relationship.%0A,,,,,,,
object,,,,,,,,
object,Object_F,objF,8,,,,,
attribute,idF,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
event,One2One,,1,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
event,,,,,,,,
event,ERROR,,3,,,,,
event,,,,,,,,
event,Many2Many,,4,,,,,
event,,,,,,,,
event,One2Many,,5,,,,,
event,,,,,,,,
description, This object forms part of a 1-(Mc:Mc) relationship.%0A,,,,,,,
object,,,,,,,,
object,Object_G,objG,18,,,,,
attribute,ResultA,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicate that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
attribute,idG,preferred,,ResultA,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,idG_Reflexive_ID,,,idG,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R11,,Has_a,Object_G,idG,,,
referential,,,,,,,,
referential,R13,,Has_a,Object_G,idG,,,
referential,,,,,,,,
referential,R2,,A_Large_relationship_role,Object_G,idG,,,
referential,,,,,,,,
referential,R4,,Has_a,Object_G,idG,,,
referential,,,,,,,,
attribute,,,,,,,,
operation,Relationships,Object_G,public,Is_It_Defined,,,1,
parameter,The_IH,in,,,,,,
typeref,instance of Object_G,,,,,,,
typeref,,,,,,,,
parameter,It_Is_Defined,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,It_Is_Defined = FALSE%0A%0Aif The_IH != UNDEFINED then%0A %0A   It_Is_Defined = TRUE%0A%0A# else%0A%0A#   [] = RPT5:Test_Text[0%2C "Undefined"]%0A%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Relationships,Object_G,public,One_To_One_Reflexive,,,2,
parameter,Iteration,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Reflexive navigations 1c:1c%0A#%0A#-------------------------------------------------------------------#%0A%0A#Initialise the fault flag%0AHas_Failed   = FALSE%0AUnsupported  = FALSE%0AFailure_Code = -1%0A%0A#-------------------------------------------------------------------#%0A%0A#Find the desired instances of Object_G%0A%0AfirstG  = find-one Object_G where idG = 1%0AsecondG = find-one Object_G where idG = 2%0AthirdG  = find-one Object_G where idG = 3%0AfourthG = find-one Object_G where idG = 4%0AfifthG  = find-one Object_G where idG = 5%0AsixthG  = find-one Object_G where idG = 6%0A%0A#-------------------------------------------------------------------#%0A# Formalise some relationships %0A# This section initialise relationships depending upon which test%0A# is being performed.%0A#-------------------------------------------------------------------#%0A%0A   if Iteration >= 2 & Iteration <= 6 then%0A%0A      # Formalise some relationships%0A      link firstG  R11."Has_a"    fifthG%0A      link secondG R11."May_have" thirdG%0A%0A   endif%0A%0A#-------------------------------------------------------------------#%0A# Test 1 - Navigate an undefined relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 1 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A%0A      # Perform the navigation%0A      InstG = sixthG -> R11."Has_a".Object_G%0A%0A      #Check the result of the navigation%0A      if InstG != UNDEFINED then%0A         Has_Failed = TRUE%0A      endif%0A%0A   endif%0A%0A# End Test 1%0A%0A#-------------------------------------------------------------------#%0A# Test 2 - Relationship role%2C single instance handle as the source%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 2 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Perform the navigation%0A      InstG = firstG -> R11."Has_a".Object_G%0A%0A      # Check the result of the navigation%0A      if InstG != UNDEFINED then%0A%0A         if InstG.idG != 5 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -10%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A      endif%0A      %0A   endif%0A%0A# End Test 2%0A%0A#-------------------------------------------------------------------#%0A# Test 3 - Qualified role%2C single instance handle as the source%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 3 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0605"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Perform the navigation%0A      InstG = secondG -> R11."May_have".Object_G%0A%0A      # Check the result of the navigation%0A      if InstG != UNDEFINED then%0A%0A         if InstG.idG != 3 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -10%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A      endif%0A%0A   endif%0A%0A# End Test 3%0A%0A#-------------------------------------------------------------------#%0A# Test 4 - Relationship role%2C set of instance handles as the source%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 4 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0703"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT5:Test_Text [Test%2C "Navigate from set unsupported"]%0A%0A      Unsupported = TRUE%0A%0A   endif%0A%0A# End Test 4%0A%0A#-------------------------------------------------------------------#%0A# Test 5 - Qualified role%2C set of instance handles as the source%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 5 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0703"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT5:Test_Text [Test%2C "Navigate from set unsupported"]%0A%0A      Unsupported = TRUE%0A%0A   endif%0A%0A# End Test 5%0A%0A#-------------------------------------------------------------------#%0A# Test 6 - Navigate the relationship in reverse %0A#          Relationship role%2C single instance handle as the source%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 6 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0605"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A%0A      # Perform the navigation%0A      InstG = fifthG -> R11."May_have".Object_G%0A%0A      # Check the result of the navigation%0A      if InstG != UNDEFINED then%0A      %0A         if InstG.idG != 1 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -10%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A      endif%0A%0A   endif %0A%0A# End Test 6%0A%0A#-------------------------------------------------------------------#%0A# Test 7 - Attempt to navigate a deleted relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 7 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Define a relationship%0A      link firstG R11."Has_a" thirdG%0A%0A      # Perform the navigation%0A      InstG = firstG -> R11."Has_a".Object_G%0A%0A      # Check the result of the navigation%0A      if InstG != UNDEFINED then%0A     %0A         if InstG.idG != 3 then%0A            Has_Failed = TRUE%0A            Failure_Code = -10%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A      endif%0A   %0A      # Delete relationship%0A      unlink firstG R11."Has_a" thirdG%0A%0A      # Perform the navigation%2C again%0A      InstG = firstG -> R11."Has_a".Object_G%0A%0A      # Check the result of the navigation%0A      if InstG != UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -2%0A      endif%0A%0A   endif%0A%0A# End Test 7%0A%0A# ---------------------------------------------------------------------------%0A# Test 8 - Link a series of instances together and prove that navigation is %0A#          possible from the first through to the last%0A# ---------------------------------------------------------------------------%0A%0A   if Iteration = 8 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0605"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      Defined = FALSE%0A %0A      link firstG  R11."Has_a" secondG%0A      link secondG R11."Has_a" thirdG%0A      link thirdG  R11."Has_a" fourthG%0A      link fourthG R11."Has_a" fifthG%0A%0A      second_instanceG  = firstG -> R11."Has_a".Object_G%0A%0A      [Defined] = objG1:Is_It_Defined[second_instanceG]%0A%0A      if Defined then%0A %0A         third_instanceG  = second_instanceG -> R11."Has_a".Object_G%0A%0A         [Defined] = objG1:Is_It_Defined[third_instanceG]%0A%0A         if Defined then%0A%0A            fourth_instanceG = third_instanceG  -> R11."Has_a".Object_G%0A%0A            [Defined] = objG1:Is_It_Defined[fourth_instanceG]%0A%0A            if Defined then%0A%0A               fifth_instanceG  = fourth_instanceG -> R11."Has_a".Object_G%0A   %0A               [Defined] = objG1:Is_It_Defined[fifth_instanceG]%0A%0A               if Defined then%0A%0A                  # Everything has linked through to the final instance.%0A                  # It would have been easier to traverse the link to the end%0A                  # in one go%2C but that would not have shown up any failure at a%0A                  # particular node.%0A%0A                  Has_Failed = FALSE%0A%0A                  # Now unlink the formalised relationships to clean up tidily.%0A                  unlink fourthG R11."Has_a" fifthG%0A                  unlink thirdG  R11."Has_a" fourthG%0A                  unlink secondG R11."Has_a" thirdG%0A                  unlink firstG  R11."Has_a" secondG%0A%0A               else%0A%0A                  Has_Failed   = TRUE%0A                  Failure_Code = -5%0A               endif%0A%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = -4%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -3%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -2%0A      endif%0A%0A   endif%0A%0A# End Test 8%0A%0A# ------------------------------------------------------------------------#%0A# Test 9 - Link a series of instances together and prove that navigation %0A#          is possible from the first through to the last using the other %0A#          role parameter.%0A# ------------------------------------------------------------------------#%0A%0A   if Iteration = 9 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0605"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      Defined = FALSE%0A%0A      link firstG  R11."May_have" secondG%0A      link secondG R11."May_have" thirdG%0A      link thirdG  R11."May_have" fourthG%0A      link fourthG R11."May_have" fifthG%0A%0A      second_instanceG  = firstG -> R11."May_have".Object_G%0A%0A      [Defined] = objG1:Is_It_Defined[second_instanceG]%0A%0A      if Defined then%0A %0A         third_instanceG  = second_instanceG -> R11."May_have".Object_G%0A%0A         [Defined] = objG1:Is_It_Defined[third_instanceG]%0A%0A         if Defined then%0A%0A            fourth_instanceG = third_instanceG  -> R11."May_have".Object_G%0A%0A            [Defined] = objG1:Is_It_Defined[fourth_instanceG]%0A%0A            if Defined then%0A%0A               fifth_instanceG  = fourth_instanceG -> R11."May_have".Object_G%0A   %0A               [Defined] = objG1:Is_It_Defined[fifth_instanceG]%0A%0A               if Defined then%0A%0A                  # Everything has linked through to the final instance.%0A                  # It would have been easier to traverse the link to the end%0A                  # in one go%2C but that would not have shown up any failure at a%0A                  # particular node.%0A%0A                  Has_Failed = FALSE%0A%0A                  # Now unlink the formalised relationships to clean up tidily.%0A                  unlink fourthG R11."May_have" fifthG%0A                  unlink thirdG  R11."May_have" fourthG%0A                  unlink secondG R11."May_have" thirdG%0A                  unlink firstG  R11."May_have" secondG%0A%0A               else%0A%0A                  Has_Failed   = TRUE%0A                  Failure_Code = -5%0A               endif%0A%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = -4%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -3%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -2%0A      endif%0A%0A   endif      %0A%0A# End Test 9%0A    %0A# ------------------------------------------------------------------------#%0A# Test 10 - Link a series of instances together and prove that navigation %0A#           is possible from the first through to the last%0A# ------------------------------------------------------------------------#%0A%0A   if Iteration = 10 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0605"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      Defined = FALSE%0A%0A      link firstG  R11."Has_a" secondG%0A      link secondG R11."Has_a" thirdG%0A      link thirdG  R11."Has_a" fourthG%0A      link fourthG R11."Has_a" fifthG%0A%0A      second_instanceG  = firstG -> R11."Has_a".Object_G%0A%0A      [Defined] = objG1:Is_It_Defined[second_instanceG]%0A%0A      if Defined then%0A %0A         third_instanceG  = second_instanceG -> R11."Has_a".Object_G%0A   %0A         [Defined] = objG1:Is_It_Defined[third_instanceG]%0A%0A         if Defined then%0A%0A            fourth_instanceG = third_instanceG  -> R11."Has_a".Object_G%0A%0A            [Defined] = objG1:Is_It_Defined[fourth_instanceG]%0A%0A            if Defined then%0A%0A               fifth_instanceG  = fourth_instanceG -> R11."Has_a".Object_G%0A   %0A               [Defined] = objG1:Is_It_Defined[fifth_instanceG]%0A%0A               if Defined then%0A%0A                  # Everything has linked through to the final instance.%0A                  # It would have been easier to traverse the link to the end%0A                  # in one go%2C but that would not have shown up any failure at a%0A                  # particular node.%0A%0A                  Has_Failed = FALSE%0A%0A                  # Now unlink the formalised relationships to clean up tidily.%0A                  unlink fifthG  R11."May_have" fourthG%0A                  unlink fourthG R11."May_have" thirdG%0A                  unlink thirdG  R11."May_have" secondG%0A                  unlink secondG R11."May_have" firstG%0A%0A               else%0A%0A                  Has_Failed   = TRUE%0A                  Failure_Code = -5%0A               endif%0A%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = -4%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -3%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -2%0A      endif%0A %0A   endif      %0A      %0A# End Test 10%0A%0A# ------------------------------------------------------------------------#%0A# Test 11 - Link a series of instances together and prove that navigation %0A#           is possible from the first through to the last%0A# ------------------------------------------------------------------------#%0A%0A   if Iteration = 11 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0605"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      Defined = FALSE%0A%0A      link firstG  R11."May_have" secondG%0A      link secondG R11."May_have" thirdG%0A      link thirdG  R11."May_have" fourthG%0A      link fourthG R11."May_have" fifthG%0A%0A      second_instanceG  = firstG -> R11."May_have".Object_G%0A%0A      [Defined] = objG1:Is_It_Defined[second_instanceG]%0A%0A      if Defined then%0A %0A         third_instanceG  = second_instanceG -> R11."May_have".Object_G%0A%0A         [Defined] = objG1:Is_It_Defined[third_instanceG]%0A%0A         if Defined then%0A%0A            fourth_instanceG = third_instanceG  -> R11."May_have".Object_G%0A%0A            [Defined] = objG1:Is_It_Defined[fourth_instanceG]%0A%0A            if Defined then%0A%0A               fifth_instanceG  = fourth_instanceG -> R11."May_have".Object_G%0A   %0A               [Defined] = objG1:Is_It_Defined[fifth_instanceG]%0A%0A               if Defined then%0A%0A                  # Everything has linked through to the final instance.%0A                  # It would have been easier to traverse the link to the end%0A                  # in one go%2C but that would not have shown up any failure at a%0A                  # particular node.%0A%0A                  Has_Failed = FALSE%0A%0A                  # Now unlink the formalised relationships to clean up tidily.%0A                  unlink fifthG  R11."Has_a" fourthG%0A                  unlink fourthG R11."Has_a" thirdG%0A                  unlink thirdG  R11."Has_a" secondG%0A                  unlink secondG R11."Has_a" firstG%0A%0A               else%0A%0A                  Has_Failed   = TRUE%0A                  Failure_Code = -5%0A               endif%0A%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = -4%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -3%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -2%0A      endif%0A%0A   endif      %0A      %0A# End Test 11%0A%0A#-------------------------------------------------------------------#%0A# Test 12 - %0A#-------------------------------------------------------------------# %0A%0A   if Iteration = 12 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0605"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      link firstG R2."A_Large_relationship_role" secondG%0A%0A      InstG = firstG -> R2."A_Large_relationship_role".Object_G%0A%0A      if InstG = UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -1%0A      else%0A         Has_Failed = FALSE%0A      endif%0A%0A      unlink firstG R2."A_Large_relationship_role" secondG%0A%0A   endif%0A%0A# End Test 12%0A%0A#-------------------------------------------------------------------#%0A# Test 13 -%0A#-------------------------------------------------------------------# %0A%0A   if Iteration = 13 then%0A%0A      [] = RPT1:Start_Test[Test%2C"1241-0000-01-0705" %2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0605"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      link firstG R2."qwertyuiopasdfghjklzxcvbnmqwerty" secondG%0A%0A      InstG = firstG -> R2."qwertyuiopasdfghjklzxcvbnmqwerty".Object_G%0A%0A      if InstG = UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -1%0A      else%0A         Has_Failed = FALSE%0A      endif%0A%0A      unlink firstG R2."qwertyuiopasdfghjklzxcvbnmqwerty" secondG%0A%0A   endif%0A%0A# End Test 13%0A%0A#-------------------------------------------------------------------#%0A# Test 14 -%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 14 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0605"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      link firstG R2."A_Large_relationship_role" secondG%0A%0A      InstG = secondG -> R2."qwertyuiopasdfghjklzxcvbnmqwerty".Object_G%0A%0A      if InstG = UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -1%0A      else%0A         Has_Failed = FALSE%0A      endif%0A%0A      unlink firstG R2."A_Large_relationship_role" secondG%0A%0A   endif%0A%0A# End Test 14%0A%0A#-------------------------------------------------------------------#%0A# Test 15%0A#-------------------------------------------------------------------# %0A%0A   if Iteration = 15 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0605"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      link firstG R2."qwertyuiopasdfghjklzxcvbnmqwerty" secondG%0A%0A      InstG = secondG -> R2."A_Large_relationship_role".Object_G%0A%0A      if InstG = UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -1%0A      else%0A         Has_Failed = FALSE%0A      endif%0A%0A      unlink firstG R2."qwertyuiopasdfghjklzxcvbnmqwerty" secondG%0A%0A   endif%0A%0A# End Test 15%0A%0A#-------------------------------------------------------------------#%0A# Test 16 - %0A#-------------------------------------------------------------------# %0A%0A   if Iteration = 16 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0605"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      Defined = FALSE%0A%0A      link firstG  R11."Has_a" secondG%0A      link secondG R11."Has_a" thirdG%0A      link thirdG  R11."Has_a" fourthG%0A      link fourthG R11."Has_a" fifthG%0A%0A      # We know this works%2C see test 8%0A%0A      second_instanceG  = firstG           -> R11."Has_a".Object_G%0A      third_instanceG   = second_instanceG -> R11."Has_a".Object_G%0A      fourth_instanceG  = third_instanceG  -> R11."Has_a".Object_G%0A      fifth_instanceG   = fourth_instanceG -> R11."Has_a".Object_G%0A %0A      # Belt and braces%2C prove it%0A      final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G%0A%0A      [Defined] = objG1:Is_It_Defined[final_instance]%0A      if Defined then%0A         # Now unlink the formalised relationship thirdG to fourthG%2C using same order and role%0A         # to unlink that they were linked in%0A         unlink thirdG R11."Has_a" fourthG%0A%0A         # Check that navigation from first to second%2C second to third and fourth to fifth%0A         # is still possible%2C%0A         # First to third%0A         final_instance = firstG -> R11."Has_a".Object_G -> R11."Has_a".Object_G%0A         [Defined] = objG1:Is_It_Defined[final_instance]%0A   %0A         if final_instance.idG = thirdG.idG then%0A            # Third to first%0A            first_instance = thirdG -> R11."May_have".Object_G -> R11."May_have".Object_G%0A%0A            if first_instance.idG = firstG.idG then%0A               # Fourth to fifth%0A               final_instance = fourthG -> R11."Has_a".Object_G%0A%0A               if final_instance.idG = fifthG.idG then%0A                  # Fifth to fourth%0A                  first_instance = fifthG -> R11."May_have".Object_G%0A%0A                  if first_instance.idG = fourthG.idG then%0A                     # and navigation from third to fourth%2C or fourth to third is not possible.%0A%0A                     fourth_instance = thirdG -> R11."Has_a".Object_G%0A                     [Defined] = objG1:Is_It_Defined[fourth_instance]%0A%0A                     if Defined = FALSE then%0A                        third_instance = fourthG -> R11."May_have".Object_G%0A                        [Defined] = objG1:Is_It_Defined[third_instance]%0A%0A                        if Defined = FALSE then%0A                           # Navigating from third to fourth%2C and fourth to third returns an%0A                           # undefined instance%0A%0A                           # And for a finale%2C relink third to fourth and try the full traverse%2C first to fifth.%0A                           link thirdG  R11."Has_a" fourthG %0A%0A                           final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G%0A%0A                           [Defined] = objG1:Is_It_Defined[final_instance]%0A%0A                           if Defined then%0A                              Has_Failed   = FALSE%0A                              Failure_Code = 0%0A%0A                              unlink firstG  R11."Has_a" secondG%0A                              unlink secondG R11."Has_a" thirdG%0A                              unlink thirdG  R11."Has_a" fourthG%0A                              unlink fourthG R11."Has_a" fifthG%0A%0A                           else%0A                              Has_Failed   = TRUE%0A                              Failure_Code = -12%0A                           endif%0A %0A                        else%0A                           Has_Failed   = TRUE%0A                           Failure_Code = -11%0A                        endif%0A%0A                     else%0A                        Has_Failed   = TRUE%0A                        Failure_Code = -10%0A                     endif%0A%0A                  else%0A                     Has_Failed   = TRUE%0A                     Failure_Code = -9%0A                  endif%0A%0A               else%0A                  Has_Failed   = TRUE%0A                  Failure_Code = -8%0A               endif%0A%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = -7%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -6%0A         endif%0A %0A      else%0A         # Link didn't work%2C %0A         Failure_Code = -1%0A         Has_Failed   = TRUE%0A      endif%0A               %0A   endif%0A%0A# End Test 16%0A%0A#-------------------------------------------------------------------#%0A# Test 17%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 17 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0605"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      Defined = FALSE%0A   %0A      link firstG  R11."Has_a" secondG%0A      link secondG R11."Has_a" thirdG%0A      link thirdG  R11."Has_a" fourthG%0A      link fourthG R11."Has_a" fifthG%0A%0A      # We know this works%2C see test 8%0A%0A      second_instanceG  = firstG           -> R11."Has_a".Object_G%0A      third_instanceG   = second_instanceG -> R11."Has_a".Object_G%0A      fourth_instanceG  = third_instanceG  -> R11."Has_a".Object_G%0A      fifth_instanceG   = fourth_instanceG -> R11."Has_a".Object_G%0A %0A      # Belt and braces%2C prove it%0A      final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G%0A%0A      [Defined] = objG1:Is_It_Defined[final_instance]%0A      if Defined then%0A %0A         # Now unlink the formalised relationship thirdG to fourthG%2C using opposite order and role%0A         # to unlink that they were linked in%0A         unlink fourthG R11."May_have" thirdG%0A%0A         # Check that navigation from first to second%2C second to third and fourth to fifth%0A         # is still possible%2C%0A         # First to third%0A         final_instance = firstG -> R11."Has_a".Object_G -> R11."Has_a".Object_G%0A         [Defined] = objG1:Is_It_Defined[final_instance]%0A%0A         if final_instance.idG = thirdG.idG then%0A            # Third to first%0A            first_instance = thirdG -> R11."May_have".Object_G -> R11."May_have".Object_G%0A%0A            if first_instance.idG = firstG.idG then%0A               # Fourth to fifth%0A               final_instance = fourthG -> R11."Has_a".Object_G%0A%0A               if final_instance.idG = fifthG.idG then%0A                  # Fifth to fourth%0A                  first_instance = fifthG -> R11."May_have".Object_G%0A%0A                  if first_instance.idG = fourthG.idG then%0A                     # and navigation from third to fourth%2C or fourth to third is not possible.%0A%0A                     fourth_instance = thirdG -> R11."Has_a".Object_G%0A                     [Defined] = objG1:Is_It_Defined[fourth_instance]%0A%0A                     if Defined = FALSE then%0A                        third_instance = fourthG -> R11."May_have".Object_G%0A                        [Defined] = objG1:Is_It_Defined[third_instance]%0A     %0A                        if Defined = FALSE then%0A                           # Navigating from third to fourth%2C and fourth to third returns an%0A                           # undefined instance%0A %0A                           # And for a finale%2C relink third to fourth and try the full traverse%2C first to fifth.%0A                           link thirdG  R11."Has_a" fourthG %0A%0A                           final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G%0A %0A                           [Defined] = objG1:Is_It_Defined[final_instance]%0A%0A                           if Defined then%0A                              Has_Failed   = FALSE%0A                              Failure_Code = 0%0A%0A                              unlink firstG  R11."Has_a" secondG%0A                              unlink secondG R11."Has_a" thirdG%0A                              unlink thirdG  R11."Has_a" fourthG%0A                              unlink fourthG R11."Has_a" fifthG%0A %0A                           else%0A                              Has_Failed   = TRUE%0A                              Failure_Code = -12%0A                           endif%0A %0A                        else%0A                           Has_Failed   = TRUE%0A                           Failure_Code = -11%0A                        endif%0A%0A                     else%0A                        Has_Failed   = TRUE%0A                        Failure_Code = -10%0A                     endif%0A%0A                  else%0A                     Has_Failed = TRUE%0A                     Failure_Code = -9%0A                  endif%0A%0A               else%0A                  Has_Failed   = TRUE%0A                  Failure_Code = -8%0A               endif%0A%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = -7%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -6%0A         endif%0A %0A      else%0A         # Link didn't work%2C %0A         Failure_Code = -1%0A         Has_Failed   = TRUE%0A      endif%0A%0A   endif%0A%0A# End Test 17%0A%0A#-------------------------------------------------------------------#%0A# Test 18%0A#-------------------------------------------------------------------# %0A%0A   if Iteration = 18 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0605"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      Defined = FALSE%0A%0A      link firstG  R11."Has_a" secondG%0A      link secondG R11."Has_a" thirdG%0A      link thirdG  R11."Has_a" fourthG%0A      link fourthG R11."Has_a" fifthG%0A%0A      # We know this works%2C see test 8%0A%0A      second_instanceG  = firstG           -> R11."Has_a".Object_G%0A      third_instanceG   = second_instanceG -> R11."Has_a".Object_G%0A      fourth_instanceG  = third_instanceG  -> R11."Has_a".Object_G%0A      fifth_instanceG   = fourth_instanceG -> R11."Has_a".Object_G%0A %0A      # Belt and braces%2C prove it%0A%0A      final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G%0A%0A      [Defined] = objG1:Is_It_Defined[final_instance]%0A%0A      if Defined then%0A %0A         # Now unlink the formalised relationship thirdG to fourthG%2C using same order and role%0A         # to unlink that they were linked in%0A         unlink thirdG R11."Has_a" fourthG%0A%0A         # Check that navigation from first to second%2C second to third and fourth to fifth%0A         # is still possible%2C%0A         # First to third%0A         final_instance = firstG -> R11."Has_a".Object_G -> R11."Has_a".Object_G%0A         [Defined] = objG1:Is_It_Defined[final_instance]%0A%0A         if final_instance.idG = thirdG.idG then%0A            # Third to first%0A            first_instance = thirdG -> R11."May_have".Object_G -> R11."May_have".Object_G%0A%0A            if first_instance.idG = firstG.idG then%0A               # Fourth to fifth%0A               final_instance = fourthG -> R11."Has_a".Object_G%0A%0A               if final_instance.idG = fifthG.idG then%0A                  # Fifth to fourth%0A                  first_instance = fifthG -> R11."May_have".Object_G%0A%0A                  if first_instance.idG = fourthG.idG then%0A                     # and navigation from third to fourth%2C or fourth to third is not possible.%0A                     fourth_instance = thirdG -> R11."Has_a".Object_G%0A                     [Defined] = objG1:Is_It_Defined[fourth_instance]%0A      %0A                     if Defined = FALSE then%0A                        third_instance = fourthG -> R11."May_have".Object_G%0A                        [Defined] = objG1:Is_It_Defined[third_instance]%0A         %0A                        if Defined = FALSE then%0A                           # Navigating from third to fourth and fourth to third returns an%0A                           # undefined instance%0A%0A                           # And for a finale%2C relink fourth to third and try the full traverse%2C first to fifth.%0A                           link fourthG  R11."May_have" thirdG %0A%0A                           final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G%0A%0A                           [Defined] = objG1:Is_It_Defined[final_instance]%0A%0A                           if Defined then%0A                              Has_Failed = FALSE%0A                              Failure_Code = 0%0A%0A                              unlink firstG  R11."Has_a" secondG%0A                              unlink secondG R11."Has_a" thirdG%0A                              unlink thirdG  R11."Has_a" fourthG%0A                              unlink fourthG R11."Has_a" fifthG%0A%0A                           else%0A                              Has_Failed = TRUE%0A                              Failure_Code = -12%0A                           endif%0A %0A                        else%0A                           Has_Failed   = TRUE%0A                           Failure_Code = -11%0A                        endif%0A%0A                     else%0A                        Has_Failed   = TRUE%0A                        Failure_Code = -10%0A                     endif%0A%0A                  else%0A                     Has_Failed   = TRUE%0A                     Failure_Code = -9%0A                  endif%0A%0A               else%0A                  Has_Failed   = TRUE%0A                  Failure_Code = -8%0A               endif%0A%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = -7%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -6%0A         endif%0A %0A      else%0A         # Link didn't work%2C %0A         Failure_Code = -1%0A         Has_Failed   = TRUE%0A      endif%0A %0A   endif%0A%0A# End Test 18%0A%0A#-------------------------------------------------------------------#%0A# Test 19%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 19 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0605"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      Defined = FALSE%0A   %0A      link firstG  R11."Has_a" secondG%0A      link secondG R11."Has_a" thirdG%0A      link thirdG  R11."Has_a" fourthG%0A      link fourthG R11."Has_a" fifthG%0A%0A      # We know this works%2C see test 8%0A%0A      second_instanceG  = firstG           -> R11."Has_a".Object_G%0A      third_instanceG   = second_instanceG -> R11."Has_a".Object_G%0A      fourth_instanceG  = third_instanceG  -> R11."Has_a".Object_G%0A      fifth_instanceG   = fourth_instanceG -> R11."Has_a".Object_G%0A %0A      # Belt and braces%2C prove it%0A%0A      final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G%0A%0A      [Defined] = objG1:Is_It_Defined[final_instance]%0A      if Defined then%0A %0A         # Now unlink the formalised relationship thirdG to fourthG%2C using same order and role%0A         # to unlink that they were linked in%0A         unlink fourthG R11."May_have" thirdG%0A%0A         # Check that navigation from first to second%2C second to third and fourth to fifth%0A         # is still possible%2C%0A         # First to third%0A         final_instance = firstG -> R11."Has_a".Object_G -> R11."Has_a".Object_G%0A         [Defined] = objG1:Is_It_Defined[final_instance]%0A         if final_instance.idG = thirdG.idG then%0A            # Third to first%0A            first_instance = thirdG -> R11."May_have".Object_G -> R11."May_have".Object_G%0A%0A            if first_instance.idG = firstG.idG then%0A               # Fourth to fifth%0A               final_instance = fourthG -> R11."Has_a".Object_G%0A%0A               if final_instance.idG = fifthG.idG then%0A                  # Fifth to fourth%0A                  first_instance = fifthG -> R11."May_have".Object_G%0A%0A                  if first_instance.idG = fourthG.idG then%0A                     # and navigation from third to fourth%2C or fourth to third is not possible.%0A                     fourth_instance = thirdG -> R11."Has_a".Object_G%0A                     [Defined] = objG1:Is_It_Defined[fourth_instance]%0A       %0A                     if Defined = FALSE then%0A                        third_instance = fourthG -> R11."May_have".Object_G%0A                        [Defined] = objG1:Is_It_Defined[third_instance]%0A      %0A                        if Defined = FALSE then%0A                           # Navigating from third to fourth%2C and fourth to third returns an%0A                           # undefined instance%0A%0A                           # And for a finale%2C relink third to fourth and try the full traverse%2C first to fifth.%0A                           link fourthG  R11."May_have" thirdG %0A%0A                           final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G%0A%0A                           [Defined] = objG1:Is_It_Defined[final_instance]%0A%0A                           if Defined then%0A                              Has_Failed = FALSE%0A%0A                              unlink firstG  R11."Has_a" secondG%0A                              unlink secondG R11."Has_a" thirdG%0A                              unlink thirdG  R11."Has_a" fourthG%0A                              unlink fourthG R11."Has_a" fifthG%0A%0A                              Failure_Code = 0%0A%0A                           else%0A                              Has_Failed   = TRUE%0A                              Failure_Code = -12%0A                           endif%0A %0A                        else%0A                           Has_Failed   = TRUE%0A                           Failure_Code = -11%0A                        endif%0A%0A                     else%0A                        Has_Failed   = TRUE%0A                        Failure_Code = -10%0A                     endif%0A%0A                  else%0A                     Has_Failed = TRUE%0A                     Failure_Code = -9%0A                  endif%0A%0A               else%0A                  Has_Failed   = TRUE%0A                  Failure_Code = -8%0A               endif%0A            %0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = -7%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -6%0A         endif%0A %0A      else%0A         # Link didn't work%2C %0A         Failure_Code = -1%0A         Has_Failed   = TRUE%0A      endif%0A %0A   endif%0A%0A# End Test 19%0A%0A#-------------------------------------------------------------------#%0A# Test 20%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 20 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0605"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      Defined = FALSE%0A%0A      link firstG  R11."Has_a" secondG%0A      link secondG R11."Has_a" thirdG%0A      link thirdG  R11."Has_a" fourthG%0A      link fourthG R11."Has_a" fifthG%0A%0A      # We know this works%2C see test 8%0A%0A      second_instanceG  = firstG           -> R11."Has_a".Object_G%0A      third_instanceG   = second_instanceG -> R11."Has_a".Object_G%0A      fourth_instanceG  = third_instanceG  -> R11."Has_a".Object_G%0A      fifth_instanceG   = fourth_instanceG -> R11."Has_a".Object_G%0A %0A      # Belt and braces%2C prove it%0A%0A      final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G%0A%0A      [Defined] = objG1:Is_It_Defined[final_instance]%0A      if Defined then%0A %0A         #  Break a link%2C add a new entry and remake the chain.%0A         unlink third_instanceG R11."Has_a" fourth_instanceG%0A%0A         local_objectG = create Object_G with idG = Iteration & ResultA = 0%0A%0A         link third_instanceG R11."Has_a" local_objectG%0A%0A         link local_objectG R11."Has_a" fourth_instanceG%0A%0A         # See if it worked%0A         final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G%0A%0A         [Defined] = objG1:Is_It_Defined[final_instance]%0A         if Defined then%0A%0A            unlink firstG         R11."Has_a" secondG%0A            unlink secondG        R11."Has_a" thirdG%0A            unlink thirdG         R11."Has_a" local_objectG%0A            unlink local_objectG  R11."Has_a" fourthG%0A            unlink fourthG        R11."Has_a" fifthG%0A%0A%0A            Failure_Code = 0%0A            Has_Failed   = FALSE%0A%0A         else%0A            # New link didn't work%2C %0A            Failure_Code = -2%0A            Has_Failed = TRUE%0A%0A         endif%0A      else%0A         # Link didn't work%2C %0A         Failure_Code = -1%0A         Has_Failed   = TRUE%0A      endif%0A%0A   endif%0A%0A# End Test 20%0A%0A#-------------------------------------------------------------------#%0A# Test 21%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 21 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0605"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      Defined = FALSE%0A%0A      link firstG  R11."Has_a" secondG%0A      link secondG R11."Has_a" thirdG%0A      link thirdG  R11."Has_a" fourthG%0A      link fourthG R11."Has_a" fifthG%0A%0A      # We know this works%2C see test 8%0A%0A      second_instanceG  = firstG           -> R11."Has_a".Object_G%0A      third_instanceG   = second_instanceG -> R11."Has_a".Object_G%0A      fourth_instanceG  = third_instanceG  -> R11."Has_a".Object_G%0A      fifth_instanceG   = fourth_instanceG -> R11."Has_a".Object_G%0A %0A      # Belt and braces%2C prove it%0A%0A      final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G%0A%0A      [Defined] = objG1:Is_It_Defined[final_instance]%0A      %0A      if Defined then%0A %0A         #  Break a link%2C add a new entry and remake the chain.%0A         unlink second_instanceG R11."Has_a" third_instanceG%0A%0A         link second_instanceG R11."Has_a" sixthG%0A%0A         link sixthG R11."Has_a" third_instanceG%0A%0A         # See if it worked%0A         final_instance = firstG -> R11."Has_a".Object_G  -> R11."Has_a".Object_G  -> R11."Has_a".Object_G -> R11."Has_a".Object_G -> R11."Has_a".Object_G%0A%0A         [Defined] = objG1:Is_It_Defined[final_instance]%0A         if Defined then%0A%0A            unlink firstG   R11."Has_a" secondG%0A            unlink secondG  R11."Has_a" sixthG%0A            unlink sixthG   R11."Has_a" thirdG%0A            unlink thirdG   R11."Has_a" fourthG%0A            unlink fourthG  R11."Has_a" fifthG%0A%0A            Failure_Code = 0%0A            Has_Failed   = FALSE%0A%0A         else%0A            # New link didn't work%2C %0A            Failure_Code = -2%0A            Has_Failed   = TRUE%0A%0A         endif%0A  %0A      else%0A         # Link didn't work%2C %0A         Failure_Code = -1%0A         Has_Failed   = TRUE%0A      endif%0A%0A   endif%0A%0A# End Test 21%0A%0A#-------------------------------------------------------------------#%0A# Test 22%0A#-------------------------------------------------------------------# %0A%0A   if Iteration = 22 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "1 to 1 reflexive"%2C "Qualifed single instance source"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0605"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      link firstG  R11."Has_a" secondG%0A%0A      # Attempt navigation from first instance to the unlinked side %0A      first_undefined_instance = firstG -> R11."May_have".Object_G%0A%0A      # Attempt navigation from last instance to unlinked side%0A      last_undefined_instance = secondG -> R11."Has_a".Object_G%0A%0A      if first_undefined_instance != UNDEFINED then%0A%0A        Failure_Code = -1%0A        Has_Failed   = TRUE%0A%0A      else%0A%0A         if last_undefined_instance != UNDEFINED then%0A%0A            Failure_Code = -2%0A            Has_Failed   = TRUE%0A%0A         else%0A%0A            Failure_Code = 0%0A            Has_Failed   = FALSE%0A%0A            unlink firstG  R11."Has_a" secondG%0A%0A        endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 22%0A%0A#-------------------------------------------------------------------#%0A# Delete some relationships This section deletes relationships %0A# depending upon which test has been performed.%0A#-------------------------------------------------------------------#%0A%0A   if Iteration >= 2 & Iteration <= 6 then%0A%0A      # Delete the formalised relationships%0A      unlink firstG  R11."Has_a"    fifthG%0A      unlink secondG R11."May_have" thirdG%0A%0A   endif%0A%0A#-------------------------------------------------------------------#%0A# Tests complete%0A#-------------------------------------------------------------------#%0A%0A   if Unsupported = FALSE then%0A%0A      if Has_Failed = FALSE then%0A         [] = RPT2:Test_Passed["1 to 1 reflexive"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["1 to 1 reflexive"%2C Test%2C Failure_Code]%0A      endif%0A%0A   else%0A      [] = RPT4:Test_Unsupported[Test]%0A   endif%0A%0A#-------------------------------------------------------------------#%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Relationships,Object_G,public,One_To_Many_Reflexive,,,3,
parameter,Iteration,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#Reflexive navigations 1c:Mc%0A#-------------------------------------------------------------------#%0A%0A# Initialise the fault flag%0AHas_Failed   = FALSE%0AInst_Failed  = FALSE%0AUnsupported  = FALSE%0A%0A# Tests 11 to 15 are copies of tests 6 to 10%2C using a reflexive navigation with the A and B%0A# conditional roles reversed.%0A%0A#-------------------------------------------------------------------#%0A%0A# Find the desired instances for Object_G%0AfirstG   = find-one Object_G where idG = 1%0AsecondG  = find-one Object_G where idG = 2%0AthirdG   = find-one Object_G where idG = 3%0AfourthG  = find-one Object_G where idG = 4%0AfifthG   = find-one Object_G where idG = 5%0AsixthG   = find-one Object_G where idG = 6%0AseventhG = find-one Object_G where idG = 7%0AeigthG   = find-one Object_G where idG = 8%0AninthG   = find-one Object_G where idG = 9%0A%0A#-------------------------------------------------------------------#%0A%0A# Formalise some relationships%0A# This section initialise relationships depending upon which test%0A# is being performed.%0A%0Aif Iteration >= 2 & Iteration <= 5 then%0A%0A   # Formalise some relationships%0A   link firstG R13."Has_many" thirdG%0A   link firstG R13."Has_many" fourthG%0A   link fifthG R13."Has_a"    secondG%0A%0Aendif%0A%0A#-------------------------------------------------------------------#%0A# Test 1 - Navigate an undefined relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 1 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objG"%2C "1c to Mc reflexive navigations"]%0A%0A      # Perform the navigation%0A      InstG = sixthG -> R13."Has_a".Object_G%0A%0A      # Check the result of the navigation%0A      if InstG != UNDEFINED then%0A         Has_Failed = TRUE%0A      endif%0A  %0A   endif%0A%0A# End Test 1%0A%0A#-------------------------------------------------------------------#%0A# Test 2 - Navigate to the MANY side of the relationship%0A#          Relationship role%2C single instance handle as the source%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 2 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "objG"%2C "1c to Mc reflexive navigations"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0606"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      # Perform the navigation%0A      {SetG} = firstG -> R13."Has_many".Object_G%0A%0A      # Check the result of the navigation%0A      if countof {SetG} != 2 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -30%0A      else%0A         # Check the contents of the set%0A         Val1 = -10%0A         Val2 = -20%0A%0A         for InstG in {SetG} do%0A%0A            if InstG.idG = 3 then%0A               Val1 = InstG.idG%0A            endif%0A%0A            if InstG.idG = 4 then%0A               Val2 = InstG.idG%0A            endif%0A%0A         endfor%0A%0A         # Check counter values%0A         if Val1 = 3 then%0A%0A            if Val2 != 4 then%0A               Has_Failed   = TRUE%0A               Failure_Code = Val2%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Val1%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A#End Test 2%0A%0A#-------------------------------------------------------------------#%0A# Test 3 - Navigate to the MANY side of the relationship%0A#          Qualified role%2C set of instance handles as the source%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 3 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objG"%2C "1c to Mc reflexive navigations"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0703"]%0A      [] = RPT5:Test_Text [Test%2C "Navigation from sets unsupported"]%0A%0A      Unsupported = TRUE%0A%0A   endif%0A%0A# End Test 3%0A%0A#-------------------------------------------------------------------#%0A# Test 4 -Navigate to the SINGLE side of the relationship%0A#         Relationship role%2C single instance handle as the source%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 4 then%0A %0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "objG"%2C "1c to Mc reflexive navigations"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0606"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Perform the navigation%0A      InstG = fifthG -> R13."Has_a".Object_G%0A%0A      # Check the result of the navigation%0A      if InstG != UNDEFINED then%0A%0A         if InstG.idG != 2 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -10%0A         endif%0A   %0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A      endif%0A%0A   endif%0A%0A# End Test 4%0A%0A#-------------------------------------------------------------------#%0A# Test 5 - Navigate to the SINGLE side of the relationship%0A#          Qualified role%2C set of instance handles as the source%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 5 then%0A%0A      [] = RPT1:Start_Test[Test%2C  "Null Requid"%2C "Relationships"%2C "objG"%2C "1c to Mc reflexive navigations"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0703"]%0A%0A      [] = RPT5:Test_Text [Test%2C "Navigation from set unsupported"]%0A%0A      Unsupported = TRUE%0A %0A   endif%0A%0A#End Test 5%0A%0A#-------------------------------------------------------------------#%0A# Test 6 - Attempt to navigate a deleted relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 6 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "objG"%2C "1c to Mc reflexive navigations"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0606"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      # Formalise some relationships%0A      link firstG R13."Has_many" thirdG%0A      link firstG R13."Has_many" fourthG%0A      link fifthG R13."Has_a"    secondG%0A%0A      # Delete the formalised relationships%0A      unlink firstG R13."Has_many" thirdG%0A      unlink firstG R13."Has_many" fourthG%0A      unlink fifthG R13."Has_a"    secondG%0A%0A      # Navigate to the MANY side%0A      {SetG} = firstG -> R13."Has_many".Object_G%0A%0A      # Check the result of the navigation%0A      if countof {SetG} != 0 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A         # Navigate to the SINGLE side%0A         InstG = fifthG -> R13."Has_a".Object_G%0A%0A         # Check the result of the navigation%0A         if InstG != UNDEFINED then%0A            Has_Failed   = TRUE%0A            Failure_Code = -2%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 6%0A%0A#-------------------------------------------------------------------#%0A# Test 7 - Attempt to link one to many and navigate to the end of %0A#          each link%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 7 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "objG"%2C "Navigate to the end of each link"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0606"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      # Formalise some relationships%0A      link firstG R13."Has_many" secondG%0A      link firstG R13."Has_many" thirdG%0A      link firstG R13."Has_many" fourthG%0A%0A      link secondG R13."Has_many" fifthG%0A      link secondG R13."Has_many" sixthG%0A%0A      link thirdG R13."Has_many" seventhG%0A %0A      link fourthG R13."Has_many" eigthG%0A      link fourthG R13."Has_many" ninthG%0A%0A      # Prove that we can navigate from first to fifth and sixth%0A      {SetG} = firstG -> R13."Has_many".Object_G%0A%0A      # Count of number of instances in this little empire.%0A      # Include the instance that we are navigating from.%0A%0A      Local_Counter = 1%0A%0A      if countof {SetG} = 3 then%0A%0A         for InstG in {SetG} do%0A%0A            if InstG = UNDEFINED then%0A               Inst_Failed  = TRUE%0A               Failure_Code = -10%0A            else%0A               Local_Counter = Local_Counter + 1%0A               {Next_SetG} = InstG -> R13."Has_many".Object_G%0A%0A               for Sub_InstG in {Next_SetG} do%0A%0A                  if Sub_InstG = UNDEFINED then%0A                     Inst_Failed  = TRUE%0A                     Failure_Code = -20%0A                  else%0A                     Local_Counter = Local_Counter + 1%0A                  endif%0A%0A               endfor         %0A%0A            endif%0A%0A         endfor%0A%0A      else%0A         Inst_Failed = TRUE%0A         Failure_Code = countof {SetG}%0A      endif%0A%0A      if Inst_Failed = FALSE then%0A%0A         if Local_Counter = 9 then%0A            Has_Failed = FALSE%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Local_Counter%0A         endif%0A %0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = Local_Counter%0A      endif%0A%0A      unlink firstG R13."Has_many" secondG%0A      unlink firstG R13."Has_many" thirdG%0A      unlink firstG R13."Has_many" fourthG%0A%0A      unlink secondG R13."Has_many" fifthG%0A      unlink secondG R13."Has_many" sixthG%0A %0A      unlink thirdG R13."Has_many" seventhG%0A %0A      unlink fourthG R13."Has_many" eigthG%0A      unlink fourthG R13."Has_many" ninthG%0A%0A   endif%0A%0A# End Test 7%0A%0A%0A#-------------------------------------------------------------------#%0A# Test 8 - Attempt to link one to many and navigate to the end of %0A#          each link%0A#          Add in a new instance as a last instance in a chain.%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 8 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "objG"%2C "1c to Mc reflexive navigations"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0606"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      Local_Counter = 0%0A%0A      # Formalise some relationships%0A      link firstG R13."Has_many" secondG%0A      link firstG R13."Has_many" thirdG%0A      link firstG R13."Has_many" fourthG%0A%0A      link secondG R13."Has_many" fifthG%0A      link secondG R13."Has_many" sixthG%0A%0A      link thirdG R13."Has_many" seventhG%0A %0A      link fourthG R13."Has_many" eigthG%0A      link fourthG R13."Has_many" ninthG%0A%0A      tenthG = find-one Object_G where idG = 10%0A%0A      {SetG} = firstG -> R13."Has_many".Object_G%0A%0A      # Count of number of instances in this little empire.%0A      # Include the instance that we are navigating from.%0A      Local_Counter = 1%0A%0A      if countof {SetG} = 3 then%0A%0A         for InstG in {SetG} do%0A%0A            if InstG = UNDEFINED then%0A               Inst_Failed  = TRUE%0A               Failure_Code = -10%0A            else%0A               Local_Counter = Local_Counter + 1%0A               {Next_SetG} = InstG -> R13."Has_many".Object_G%0A%0A               for Sub_InstG in {Next_SetG} do%0A %0A                  if Sub_InstG = UNDEFINED then%0A                     Inst_Failed  = TRUE%0A                     Failure_Code = -20%0A                  else%0A                     Local_Counter = Local_Counter + 1%0A                     Inst_Failed   = FALSE%0A                  endif%0A%0A               endfor         %0A%0A            endif%0A%0A         endfor%0A%0A      else%0A         Inst_Failed  = TRUE%0A         Failure_Code = countof {SetG} %0A      endif%0A%0A      if Inst_Failed = FALSE then%0A%0A         if Local_Counter = 9 then%0A            # Link in new element%0A            link thirdG R13."Has_many" tenthG%0A                  %0A            #Can we navigate back from tenthG to thirdG%0A            newThird = tenthG -> R13."Has_a".Object_G%0A%0A            if newThird = UNDEFINED then%0A               Inst_Failed  = TRUE%0A               Failure_Code = -30%0A            else%0A%0A               # New instance is not undefined%0A               Inst_Failed = FALSE%0A               Local_Counter = 1%0A               {SetG} = firstG -> R13."Has_many".Object_G%0A%0A               for InstG in {SetG} do%0A%0A                  if InstG = UNDEFINED then%0A                     Inst_Failed  = TRUE%0A                     Failure_Code = -40%0A                  else%0A                     Local_Counter = Local_Counter + 1%0A                     {Next_SetG} = InstG -> R13."Has_many".Object_G%0A  %0A                     for Sub_InstG in {Next_SetG} do%0A%0A                        if Sub_InstG = UNDEFINED then%0A                           Inst_Failed  = TRUE%0A                           Failure_Code = -50%0A                        else%0A                           Local_Counter = Local_Counter + 1%0A                        endif%0A  %0A                     endfor         %0A%0A                  endif%0A%0A               endfor%0A %0A            endif%0A%0A            if Inst_Failed = FALSE then%0A%0A               if Local_Counter = 10 then%0A                  Failure_Code = 0%0A                  Has_Failed   = FALSE%0A               else%0A                  Failure_Code = -100 - Local_Counter%0A                  Has_Failed   = TRUE%0A               endif%0A%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = -60%0A            endif%0A%0A         else%0A            Failure_Code = -200 - Local_Counter%0A            Has_Failed   = TRUE%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -70%0A      endif%0A%0A      unlink firstG R13."Has_many" secondG%0A      unlink firstG R13."Has_many" thirdG%0A      unlink firstG R13."Has_many" fourthG%0A%0A      unlink secondG R13."Has_many" fifthG%0A      unlink secondG R13."Has_many" sixthG%0A%0A      unlink thirdG R13."Has_many" seventhG%0A      unlink thirdG R13."Has_many" tenthG%0A   %0A      unlink fourthG R13."Has_many" eigthG%0A      unlink fourthG R13."Has_many" ninthG%0A%0A   endif%0A%0A# End Test 8%0A%0A#-------------------------------------------------------------------#%0A# Test 9 - Attempt to link one to many and navigate to the end of%0A#          each link%0A#          Add in a new instance in the middle of a chain with one %0A#          end object.%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 9 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "objG"%2C "1c to Mc reflexive navigations"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0606"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      Local_Counter = 0%0A      No_Instances  = 0%0A%0A      # Formalise some relationships%0A      link firstG R13."Has_many" secondG%0A      link firstG R13."Has_many" thirdG%0A      link firstG R13."Has_many" fourthG%0A%0A      link secondG R13."Has_many" fifthG%0A      link secondG R13."Has_many" sixthG%0A%0A      link thirdG R13."Has_many" seventhG%0A %0A      link fourthG R13."Has_many" eigthG%0A      link fourthG R13."Has_many" ninthG%0A%0A      tenthG = find-one Object_G where idG = 10%0A%0A      {SetG} = firstG -> R13."Has_many".Object_G%0A%0A      # Count of number of instances in this little empire.%0A      # Include the instance that we are navigating from.%0A      Local_Counter = 1%0A%0A      if countof {SetG} = 3 then%0A%0A         for InstG in {SetG} do%0A%0A            if InstG = UNDEFINED then%0A               Inst_Failed  = TRUE%0A               Failure_Code = -10%0A            else%0A               Local_Counter = Local_Counter + 1%0A               {Next_SetG} = InstG -> R13."Has_many".Object_G%0A%0A               for Sub_InstG in {Next_SetG} do%0A%0A                  if Sub_InstG = UNDEFINED then%0A                     Inst_Failed  = TRUE%0A                     Failure_Code = -20%0A                  else%0A                     Local_Counter = Local_Counter + 1%0A                  endif%0A%0A               endfor         %0A%0A            endif%0A  %0A         endfor%0A%0A      else%0A         Inst_Failed  = TRUE%0A         Failure_Code = countof {SetG} %0A      endif%0A%0A      if Inst_Failed = FALSE then%0A%0A         if Local_Counter = 9 then%0A            # Unlink old element and splice in a new element%2C making sure that the links are%0A            # still correct.%0A            unlink firstG R13."Has_many" thirdG%0A%0A            # Link in new element%0A            link firstG R13."Has_many" tenthG%0A%0A            # Relink new element to old element%0A            link tenthG R13."Has_many" thirdG %0A                  %0A            # Can we navigate back from thirdG to tenthG%0A            new_tenth = thirdG -> R13."Has_a".Object_G%0A%0A            # And while we're at it%2C can we navigate from last back to first%2C%0A            # taking into account the newly added link%0A            new_first = seventhG -> R13."Has_a".Object_G -> R13."Has_a".Object_G -> R13."Has_a".Object_G%0A%0A            if new_tenth = UNDEFINED then%0A               Inst_Failed  = TRUE%0A               Failure_Code = -30%0A            else%0A%0A               if new_first = UNDEFINED then%0A                  Inst_Failed  = TRUE%0A                  Failure_Code = -40%0A               else%0A                  # New instance is not undefined%0A                  Inst_Failed = FALSE%0A                  Failure_Code = 0%0A%0A                  Local_Counter = 1%0A%0A                  {SetG} = firstG -> R13."Has_many".Object_G%0A%0A                  for InstG in {SetG} do%0A%0A                     if InstG = UNDEFINED then%0A                        Inst_Failed  = TRUE%0A                        Failure_Code = -50%0A                     else%0A                        Local_Counter = Local_Counter + 1%0A                        {Next_SetG} = InstG -> R13."Has_many".Object_G%0A                        for Sub_InstG in {Next_SetG} do%0A%0A                           if Sub_InstG = UNDEFINED then%0A                              Inst_Failed  = TRUE%0A                              Failure_Code = -60%0A                           else%0A                              Local_Counter = Local_Counter + 1%0A                              {Next_Next_SetG} = Sub_InstG -> R13."Has_many".Object_G%0A%0A                              for Sub_Sub_InstG in {Next_Next_SetG} do%0A %0A                                 if Sub_Sub_InstG = UNDEFINED then%0A                                    Inst_Failed  = TRUE%0A                                    Failure_Code = -70%0A                                 else %0A                                    Local_Counter = Local_Counter + 1%0A                                 endif%0A%0A                              endfor%0A%0A                           endif%0A%0A                        endfor         %0A%0A                     endif%0A%0A                  endfor%0A%0A               endif%0A%0A            endif%0A%0A            if Inst_Failed = FALSE then%0A%0A               if Local_Counter = 10 then%0A                  Failure_Code = 0%0A                  Has_Failed   = FALSE%0A               else%0A                  Has_Failed   = TRUE%0A                  Failure_Code = -100 - Local_Counter%0A               endif%0A%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = -80%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -200 - Local_Counter%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -90%0A      endif%0A%0A      unlink firstG R13."Has_many" secondG%0A      unlink firstG R13."Has_many" tenthG%0A      unlink firstG R13."Has_many" fourthG%0A%0A      unlink tenthG R13."Has_many" thirdG%0A%0A      unlink secondG R13."Has_many" fifthG%0A      unlink secondG R13."Has_many" sixthG%0A%0A      unlink thirdG R13."Has_many" seventhG%0A   %0A      unlink fourthG R13."Has_many" eigthG%0A      unlink fourthG R13."Has_many" ninthG%0A%0A   endif%0A%0A# End Test 9%0A%0A#-------------------------------------------------------------------#%0A# Test 10 - Attempt to link one to many and navigate to the end of %0A#           each link%0A#           Add in a new instance in the middle of a chain with two %0A#           end objects.%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 10 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "objG"%2C "1c to Mc reflexive navigations"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0606"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      Local_Counter = 0%0A      Has_Failed    = TRUE%0A      Inst_Failed   = FALSE%0A %0A      # Formalise some relationships%0A      link firstG R13."Has_many" secondG%0A      link firstG R13."Has_many" thirdG%0A      link firstG R13."Has_many" fourthG%0A%0A      link secondG R13."Has_many" fifthG%0A      link secondG R13."Has_many" sixthG%0A%0A      link thirdG R13."Has_many" seventhG%0A %0A      link fourthG R13."Has_many" eigthG%0A      link fourthG R13."Has_many" ninthG%0A%0A      tenthG = find-one Object_G where idG = 10%0A%0A      {SetG} = firstG -> R13."Has_many".Object_G%0A%0A      # Count of number of instances in this little empire.%0A      # Include the instance that we are navigating from.%0A      Local_Counter = 1%0A%0A      No_Instances = countof {SetG}%0A      if No_Instances = 3 then%0A%0A         for InstG in {SetG} do%0A%0A            if InstG = UNDEFINED then%0A               Inst_Failed  = TRUE%0A               Failure_Code = -10%0A            else%0A               Local_Counter = Local_Counter + 1%0A               {Next_SetG} = InstG -> R13."Has_many".Object_G%0A%0A               for Sub_InstG in {Next_SetG} do%0A%0A                  if Sub_InstG = UNDEFINED then%0A                     Inst_Failed  = TRUE%0A                     Failure_Code = -3%0A                  else%0A                     Local_Counter = Local_Counter + 1%0A                  endif%0A%0A               endfor         %0A%0A            endif%0A%0A         endfor%0A%0A      else%0A         Inst_Failed  = TRUE%0A         Failure_Code = No_Instances %0A      endif%0A%0A      if Inst_Failed = FALSE & Local_Counter = 9 then%0A         # Unlink old element and splice in a new element%2C making sure that the links are%0A         # still correct.%0A         unlink firstG R13."Has_many" fourthG%0A%0A         # Link in new element%0A         link firstG R13."Has_many" tenthG%0A%0A         # Relink new element to old element%0A         link tenthG R13."Has_many" fourthG %0A                  %0A         # Can we navigate back from thirdG to tenthG%0A         new_tenth = fourthG -> R13."Has_a".Object_G%0A%0A         # And while we're at it%2C can we navigate from last back to first%2C%0A         # taking into account the newly added link%0A         new_first = eigthG -> R13."Has_a".Object_G -> R13."Has_a".Object_G -> R13."Has_a".Object_G%0A%0A         if new_tenth = UNDEFINED then%0A            Inst_Failed  = TRUE%0A            Failure_Code = -30%0A         else%0A%0A            if new_first = UNDEFINED then%0A               Inst_Failed  = TRUE%0A               Failure_Code = -40%0A            else%0A               # New instance is not undefined%0A               Inst_Failed   = FALSE%0A               Failure_Code  = 0%0A               Local_Counter = 1%0A               {SetG} = firstG -> R13."Has_many".Object_G%0A%0A               for InstG in {SetG} do%0A%0A                  if InstG = UNDEFINED then%0A                     Inst_Failed  = TRUE%0A                     Failure_Code = -50%0A                  else%0A                     Local_Counter = Local_Counter + 1%0A                     {Next_SetG} = InstG -> R13."Has_many".Object_G%0A%0A                     for Sub_InstG in {Next_SetG} do%0A%0A                        if Sub_InstG = UNDEFINED then%0A                           Inst_Failed  = TRUE%0A                           Failure_Code = -60%0A                        else%0A                           Local_Counter = Local_Counter + 1%0A                           {Next_Next_SetG} = Sub_InstG -> R13."Has_many".Object_G%0A%0A                           for Sub_Sub_InstG in {Next_Next_SetG} do%0A%0A                              if Sub_Sub_InstG = UNDEFINED then%0A                                 Inst_Failed  = TRUE%0A                                 Failure_Code = -8%0A                               else%0A                                 Local_Counter = Local_Counter + 1%0A                               endif%0A%0A                            endfor         %0A  %0A                         endif%0A   %0A                      endfor         %0A%0A                   endif%0A%0A                endfor%0A%0A             endif%0A%0A          endif%0A%0A          if Inst_Failed = FALSE & Local_Counter = 10 then%0A             Failure_Code = 0%0A             Has_Failed   = FALSE%0A%0A             unlink firstG R13."Has_many" secondG%0A             unlink firstG R13."Has_many" thirdG%0A             unlink firstG R13."Has_many" tenthG%0A%0A             unlink tenthG R13."Has_many" fourthG%0A %0A             unlink secondG R13."Has_many" fifthG%0A             unlink secondG R13."Has_many" sixthG%0A%0A             unlink thirdG R13."Has_many" seventhG%0A%0A             unlink fourthG R13."Has_many" eigthG%0A             unlink fourthG R13."Has_many" ninthG%0A%0A          else%0A             Has_Failed   = TRUE%0A             Failure_Code = Local_Counter%0A          endif%0A%0A       else%0A          Has_Failed = TRUE%0A          Failure_Code = Local_Counter%0A       endif%0A%0A   endif%0A%0A# End Test 10%0A%0A#-------------------------------------------------------------------#%0A# Test 11 - Attempt to navigate a deleted relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 11 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objG"%2C "Attempt to navigate a deleted relationship"]%0A%0A      # Formalise some relationships%0A      link firstG R4."Has_many" thirdG%0A      link firstG R4."Has_many" fourthG%0A      link fifthG R4."Has_a"    secondG%0A%0A      # Delete the formalised relationships%0A      unlink firstG R4."Has_many" thirdG%0A      unlink firstG R4."Has_many" fourthG%0A      unlink fifthG R4."Has_a"    secondG%0A%0A      # Navigate to the MANY side%0A      {SetG} = firstG -> R4."Has_many".Object_G%0A%0A      # Check the result of the navigation%0A      if countof {SetG} != 0 then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A         # Navigate to the SINGLE side%0A         InstG = fifthG -> R4."Has_a".Object_G%0A%0A         # Check the result of the navigation%0A         if InstG != UNDEFINED then%0A            Has_Failed   = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A# End Test 11%0A%0A#-------------------------------------------------------------------#%0A# Test 12 - Attempt to link one to many and navigate to the end of %0A#           each link%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 12 then%0A %0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "objG"%2C "1c to Mc reflexive navigations"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0606"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      #Navigate to the MANY side%0A      {SetG} = firstG -> R4."Has_many".Object_G%0A%0A      # Check the result of the navigation%0A      what = countof {SetG} %0A%0A      #Formalise some relationships%0A      link firstG R4."Has_many" secondG%0A      link firstG R4."Has_many" thirdG%0A      link firstG R4."Has_many" fourthG%0A%0A      link secondG R4."Has_many" fifthG%0A      link secondG R4."Has_many" sixthG%0A%0A      link thirdG R4."Has_many" seventhG%0A %0A      link fourthG R4."Has_many" eigthG%0A      link fourthG R4."Has_many" ninthG%0A%0A      # Prove that we can navigate from first to fifth and sixth%0A%0A      {SetG} = firstG -> R4."Has_many".Object_G%0A%0A      # Count of number of instances in this little empire.%0A      # Include the instance that we are navigating from.%0A      Local_Counter = 1%0A%0A      if countof {SetG} = 3 then%0A%0A         for InstG in {SetG} do%0A%0A            if InstG = UNDEFINED then%0A               Inst_Failed  = TRUE%0A               Failure_Code = -10%0A            else%0A               Local_Counter = Local_Counter + 1%0A               {Next_SetG} = InstG -> R4."Has_many".Object_G%0A%0A               for Sub_InstG in {Next_SetG} do%0A%0A                  if Sub_InstG = UNDEFINED then%0A                     Inst_Failed  = TRUE%0A                     Failure_Code = -3%0A                  else%0A                     Local_Counter = Local_Counter + 1%0A                  endif%0A%0A               endfor         %0A%0A            endif%0A%0A         endfor%0A%0A      else%0A         Inst_Failed  = TRUE%0A         Failure_Code = countof {SetG} %0A      endif%0A%0A      if Inst_Failed = FALSE & Local_Counter = 9 then%0A         Has_Failed   = FALSE%0A         Failure_Code = 0%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = Local_Counter%0A      endif%0A%0A      unlink firstG R4."Has_many" secondG%0A      unlink firstG R4."Has_many" thirdG%0A      unlink firstG R4."Has_many" fourthG%0A%0A      unlink secondG R4."Has_many" fifthG%0A      unlink secondG R4."Has_many" sixthG%0A%0A      unlink thirdG R4."Has_many" seventhG%0A %0A      unlink fourthG R4."Has_many" eigthG%0A      unlink fourthG R4."Has_many" ninthG%0A%0A   endif%0A%0A# End Test 12%0A%0A#-------------------------------------------------------------------#%0A# Test 13 - Attempt to link one to many and navigate to the end of %0A#           each link%0A#           Add in a new instance as a last instance in a chain.%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 13 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "objG"%2C "1c to Mc reflexive navigations"]%0A      [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0606"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      Local_Counter = 0%0A      Has_Failed    = TRUE%0A      Inst_Failed   = TRUE%0A%0A      # Formalise some relationships%0A      link firstG R4."Has_many" secondG%0A      link firstG R4."Has_many" thirdG%0A      link firstG R4."Has_many" fourthG%0A%0A      link secondG R4."Has_many" fifthG%0A      link secondG R4."Has_many" sixthG%0A%0A      link thirdG R4."Has_many" seventhG%0A %0A      link fourthG R4."Has_many" eigthG%0A      link fourthG R4."Has_many" ninthG%0A%0A      tenthG = find-one Object_G where idG = 10%0A%0A      {SetG} = firstG -> R4."Has_many".Object_G%0A%0A      # Count of number of instances in this little empire.%0A      # Include the instance that we are navigating from.%0A      Local_Counter = 1%0A%0A      No_Instances = countof {SetG}%0A      if No_Instances = 3 then%0A%0A         for InstG in {SetG} do%0A%0A            if InstG = UNDEFINED then%0A               Inst_Failed  = TRUE%0A               Failure_Code = -10%0A            else%0A               Local_Counter = Local_Counter + 1%0A               {Next_SetG} = InstG -> R4."Has_many".Object_G%0A%0A               for Sub_InstG in {Next_SetG} do%0A%0A                  if Sub_InstG = UNDEFINED then%0A                     Inst_Failed = TRUE%0A                     Failure_Code = -20%0A                  else%0A                     Local_Counter = Local_Counter + 1%0A                     Inst_Failed = FALSE%0A                  endif%0A%0A               endfor         %0A%0A            endif%0A%0A         endfor%0A%0A      else%0A         Inst_Failed = TRUE%0A         Failure_Code = No_Instances %0A      endif%0A%0A      if Inst_Failed = FALSE & Local_Counter = 9 then%0A         # Link in new element%0A         link thirdG R4."Has_many" tenthG%0A                  %0A         # Can we navigate back from tenthG to thirdG%0A         new_third = tenthG -> R4."Has_a".Object_G%0A%0A         if new_third = UNDEFINED then%0A            Inst_Failed  = TRUE%0A            Failure_Code = -30%0A         else%0A            # New instance is not undefined%0A            Inst_Failed  = FALSE%0A            Failure_Code = 0%0A%0A            Local_Counter = 1%0A%0A            {SetG} = firstG -> R4."Has_many".Object_G%0A%0A            for InstG in {SetG} do%0A%0A               if InstG = UNDEFINED then%0A                  Inst_Failed  = TRUE%0A                  Failure_Code = -40%0A               else%0A                  Local_Counter = Local_Counter + 1%0A                  {Next_SetG} = InstG -> R4."Has_many".Object_G%0A%0A                  for Sub_InstG in {Next_SetG} do%0A%0A                     if Sub_InstG = UNDEFINED then%0A                        Inst_Failed  = TRUE%0A                        Failure_Code = -50%0A                     else%0A                        Local_Counter = Local_Counter + 1%0A                     endif%0A%0A                  endfor         %0A%0A               endif%0A%0A            endfor%0A%0A         endif%0A%0A         if Inst_Failed = FALSE & Local_Counter = 10 then%0A            Failure_Code = 0%0A            Has_Failed   = FALSE%0A%0A            unlink firstG R4."Has_many" secondG%0A            unlink firstG R4."Has_many" thirdG%0A            unlink firstG R4."Has_many" fourthG%0A%0A            unlink secondG R4."Has_many" fifthG%0A            unlink secondG R4."Has_many" sixthG%0A%0A            unlink thirdG R4."Has_many" seventhG%0A            unlink thirdG R4."Has_many" tenthG%0A   %0A            unlink fourthG R4."Has_many" eigthG%0A            unlink fourthG R4."Has_many" ninthG%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Local_Counter%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = Local_Counter%0A      endif%0A%0A   endif%0A%0A# End Test 13%0A%0A#-------------------------------------------------------------------#%0A# Test 14 - Attempt to link one to many and navigate to the end of %0A#           each link%0A#           Add in a new instance in the missle of a chain with one %0A#           end object.%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 14 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "objG"%2C "1c to Mc reflexive navigations"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0606"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      Local_Counter = 0%0A      Inst_Failed = FALSE%0A      Unsupported = FALSE%0A      No_Instances = 0%0A%0A      {SetG} = firstG -> R4."Has_many".Object_G%0A%0A      No_Instances = countof {SetG}%0A%0A      # Formalise some relationships%0A      link firstG R4."Has_many" secondG%0A      link firstG R4."Has_many" thirdG%0A      link firstG R4."Has_many" fourthG%0A%0A      link secondG R4."Has_many" fifthG%0A      link secondG R4."Has_many" sixthG%0A%0A      link thirdG R4."Has_many" seventhG%0A %0A      link fourthG R4."Has_many" eigthG%0A      link fourthG R4."Has_many" ninthG%0A%0A      tenthG = find-one Object_G where idG = 10%0A%0A      {SetG} = firstG -> R4."Has_many".Object_G%0A%0A      # Count of number of instances in this little empire.%0A      # Include the instance that we are navigating from.%0A      Local_Counter = 1%0A%0A      if countof {SetG} = 3 then%0A%0A         for InstG in {SetG} do%0A%0A            if InstG = UNDEFINED then%0A               Inst_Failed  = TRUE%0A               Failure_Code = -10%0A            else%0A               Local_Counter = Local_Counter + 1%0A               {Next_SetG} = InstG -> R4."Has_many".Object_G%0A%0A               for Sub_InstG in {Next_SetG} do%0A%0A                  if Sub_InstG = UNDEFINED then%0A                     Inst_Failed  = TRUE%0A                     Failure_Code = -20%0A                  else%0A                     Local_Counter = Local_Counter + 1%0A                  endif%0A%0A               endfor         %0A%0A            endif%0A%0A         endfor%0A%0A      else%0A         Inst_Failed  = TRUE%0A         Failure_Code = countof {SetG}%0A      endif%0A%0A      if Inst_Failed = FALSE then%0A%0A         if Local_Counter = 9 then%0A            # Unlink old element and splice in a new element%2C making sure that the links are%0A            # still correct.%0A            unlink firstG R4."Has_many" thirdG%0A%0A            # Link in new element%0A            link firstG R4."Has_many" tenthG%0A%0A            # Relink new element to old element%0A            link tenthG R4."Has_many" thirdG %0A                  %0A            # Can we navigate back from thirdG to tenthG%0A            new_tenth = thirdG -> R4."Has_a".Object_G%0A%0A            # And while we're at it%2C can we navigate from last back to first%2C%0A            # taking into account the newly added link%0A            new_first = seventhG -> R4."Has_a".Object_G -> R4."Has_a".Object_G -> R4."Has_a".Object_G%0A  %0A            if new_tenth = UNDEFINED then%0A               Inst_Failed  = TRUE%0A               Failure_Code = -30%0A            else%0A%0A               if new_first = UNDEFINED then%0A                  Inst_Failed  = TRUE%0A                  Failure_Code = -40%0A               else%0A                  # New instance is not undefined%0A                  Inst_Failed  = FALSE%0A                  Failure_Code = 0%0A                  Local_Counter = 1%0A%0A                  {SetG} = firstG -> R4."Has_many".Object_G%0A                  No_Instances = countof {SetG}%0A%0A                  for InstG in {SetG} do%0A%0A                     if InstG = UNDEFINED then%0A                        Inst_Failed  = TRUE%0A                        Failure_Code = -50%0A                     else%0A                        Local_Counter = Local_Counter + 1%0A                        {Next_SetG} = InstG -> R4."Has_many".Object_G%0A%0A                        for Sub_InstG in {Next_SetG} do%0A%0A                           if Sub_InstG = UNDEFINED then%0A                              Inst_Failed  = TRUE%0A                              Failure_Code = -60%0A                           else%0A                              Local_Counter = Local_Counter + 1%0A                              {Next_Next_SetG} = Sub_InstG -> R4."Has_many".Object_G%0A                              No_Next_Next_Set = countof {Next_Next_SetG}%0A%0A                              for Sub_Sub_InstG in {Next_Next_SetG} do%0A%0A                                 if Sub_Sub_InstG = UNDEFINED then%0A                                    Inst_Failed  = TRUE%0A                                    Failure_Code = -70%0A                                 else %0A                                    Local_Counter = Local_Counter + 1%0A                                 endif%0A%0A                              endfor%0A%0A                           endif%0A%0A                        endfor         %0A%0A                     endif%0A%0A                  endfor%0A%0A               endif%0A%0A            endif%0A%0A            if Inst_Failed = FALSE then%0A%0A               if Local_Counter = 10 then%0A                  Failure_Code = 0%0A                  Has_Failed   = FALSE%0A               else%0A                  Has_Failed   = TRUE%0A                  Failure_Code = -100 - Local_Counter%0A               endif%0A%0A            else%0A               Failure_Code = -80%0A               Has_Failed   = TRUE%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -200 - Local_Counter      %0A         endif%0A%0A      else%0A         Has_Failed = TRUE%0A         Failure_Code = Local_Counter%0A      endif%0A%0A      unlink firstG R4."Has_many" secondG%0A      unlink firstG R4."Has_many" tenthG%0A      unlink firstG R4."Has_many" fourthG%0A%0A      unlink tenthG R4."Has_many" thirdG%0A%0A      unlink secondG R4."Has_many" fifthG%0A      unlink secondG R4."Has_many" sixthG%0A%0A      unlink thirdG R4."Has_many" seventhG%0A   %0A      unlink fourthG R4."Has_many" eigthG%0A      unlink fourthG R4."Has_many" ninthG%0A%0A   endif%0A%0A# End Test 14%0A%0A#-------------------------------------------------------------------#%0A# Test 15 - Attempt to link one to many and navigate to the end of %0A#           each link%0A#           Add in a new instance in the middle of a chain with two %0A#           end objects.%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 15 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0705"%2C "Relationships"%2C "objG"%2C "1c to Mc reflexive navigations"]%0A      [] = RPT8:Specify_Requid[Test%2C"1241-0000-01-0606"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0607"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0608"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0631"]%0A%0A      Local_Counter = 0%0A      Inst_Failed   = FALSE%0A      Unsupported   = FALSE%0A%0A      # Formalise some relationships%0A      link firstG R4."Has_many" secondG%0A      link firstG R4."Has_many" thirdG%0A      link firstG R4."Has_many" fourthG%0A%0A      link secondG R4."Has_many" fifthG%0A      link secondG R4."Has_many" sixthG%0A%0A      link thirdG R4."Has_many" seventhG%0A %0A      link fourthG R4."Has_many" eigthG%0A      link fourthG R4."Has_many" ninthG%0A%0A      tenthG = find-one Object_G where idG = 10%0A%0A      {SetG} = firstG -> R4."Has_many".Object_G%0A%0A      Local_Counter = 1%0A%0A      if countof {SetG} = 3 then%0A%0A         for InstG in {SetG} do%0A%0A            if InstG = UNDEFINED then%0A               Inst_Failed  = TRUE%0A               Failure_Code = -10%0A            else%0A               Local_Counter = Local_Counter + 1%0A%0A               {Next_SetG} = InstG -> R4."Has_many".Object_G%0A%0A               for Sub_InstG in {Next_SetG} do%0A %0A                  if Sub_InstG = UNDEFINED then%0A                     Inst_Failed  = TRUE%0A                     Failure_Code = -20%0A                  else%0A                     Local_Counter = Local_Counter + 1%0A                  endif%0A%0A               endfor         %0A%0A            endif%0A%0A         endfor%0A%0A      else%0A         Inst_Failed  = TRUE%0A         Failure_Code = countof {SetG}%0A      endif%0A%0A      if Inst_Failed = FALSE then %0A%0A         if Local_Counter = 9 then%0A            # Unlink old element and splice in a new element%2C making sure that the links are%0A            # still correct.%0A            unlink firstG R4."Has_many" fourthG%0A%0A            # Link in new element%0A            link firstG R4."Has_many" tenthG%0A%0A            # Relink new element to old element%0A            link tenthG R4."Has_many" fourthG %0A                    %0A            # Can we navigate back from thirdG to tenthG%0A            new_tenth = fourthG -> R4."Has_a".Object_G%0A%0A            # And while we're at it%2C can we navigate from last back to first%2C%0A            # taking into account the newly added link%0A            new_first = eigthG -> R4."Has_a".Object_G -> R4."Has_a".Object_G -> R4."Has_a".Object_G%0A%0A            if new_tenth = UNDEFINED then%0A               Inst_Failed  = TRUE%0A               Failure_Code = -30%0A            else%0A%0A               if new_first = UNDEFINED then%0A                  Inst_Failed  = TRUE%0A                  Failure_Code = -40%0A               else%0A                  # New instance is not undefined%0A                  Inst_Failed  = FALSE%0A                  Failure_Code = 0%0A%0A                  Local_Counter = 1%0A%0A                  {SetG} = firstG -> R4."Has_many".Object_G%0A%0A                  for InstG in {SetG} do%0A%0A                     if InstG = UNDEFINED then%0A                        Inst_Failed  = TRUE%0A                        Failure_Code = -50%0A                     else%0A                        Local_Counter = Local_Counter + 1%0A                        {Next_SetG} = InstG -> R4."Has_many".Object_G%0A%0A                        for Sub_InstG in {Next_SetG} do%0A     %0A                           if Sub_InstG = UNDEFINED then%0A                              Inst_Failed  = TRUE%0A                              Failure_Code = -60%0A                           else%0A                              Local_Counter = Local_Counter + 1%0A                              {Next_Next_SetG} = Sub_InstG -> R4."Has_many".Object_G%0A     %0A                              for Sub_Sub_InstG in {Next_Next_SetG} do%0A      %0A                                 if Sub_Sub_InstG = UNDEFINED then%0A                                    Inst_Failed  = TRUE%0A                                    Failure_Code = -70%0A                                 else%0A                                    Local_Counter = Local_Counter + 1%0A                                 endif%0A%0A                              endfor         %0A%0A                           endif%0A%0A                        endfor         %0A%0A                     endif%0A%0A                  endfor%0A%0A               endif%0A%0A            endif%0A%0A            if Inst_Failed = FALSE then%0A%0A               if Local_Counter = 10 then%0A                  Failure_Code = 0%0A                  Has_Failed = FALSE%0A               else%0A                  Has_Failed   =TRUE%0A                  Failure_Code = -100 - Local_Counter%0A               endif%0A%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = -80%0A            endif%0A%0A         else%0A            Has_Failed = TRUE%0A            Failure_Code = -200 - Local_Counter%0A         endif%0A%0A      else%0A         Has_Failed = TRUE%0A         Failure_Code = -90%0A      endif%0A%0A      unlink firstG R4."Has_many" secondG%0A      unlink firstG R4."Has_many" thirdG%0A      unlink firstG R4."Has_many" tenthG%0A%0A      unlink tenthG R4."Has_many" fourthG%0A %0A      unlink secondG R4."Has_many" fifthG%0A      unlink secondG R4."Has_many" sixthG%0A%0A      unlink thirdG R4."Has_many" seventhG%0A%0A      unlink fourthG R4."Has_many" eigthG%0A      unlink fourthG R4."Has_many" ninthG%0A%0A   endif%0A%0A# End Test 15%0A%0A#-------------------------------------------------------------------#%0A# Delete some relationships%0A# This section deletes relationships depending upon which test%0A# has been performed.%0A#-------------------------------------------------------------------#%0A%0A   if Iteration >= 2 & Iteration <= 5 then%0A%0A      # Delete the formalised relationships%0A      unlink firstG R13."Has_many" thirdG%0A      unlink firstG R13."Has_many" fourthG%0A      unlink fifthG R13."Has_a"    secondG%0A%0A   endif%0A%0A#-------------------------------------------------------------------#%0A# Tests complete%0A#-------------------------------------------------------------------#%0A%0A   if Unsupported = FALSE then%0A%0A      if Has_Failed = FALSE then%0A         [] = RPT2:Test_Passed["objG"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["objG"%2C Test%2C Failure_Code]%0A      endif%0A%0A   else%0A      [] = RPT4:Test_Unsupported[Test]%0A   endif%0A%0A#-------------------------------------------------------------------#%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Relationships,Object_G,public,Many_To_Many_Reflexive,,,4,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A# Reflexive navigations Mc:Mc%0A#-------------------------------------------------------------------#%0A %0A[] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objG"%2C "Mc to Mc reflexive navigations"]%0A%0A[] = RPT4:Test_Unsupported[Test]%0A%0A#-------------------------------------------------------------------#%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
event,Fault,,1,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
event,,,,,,,,
event,StartA,,3,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Iteration,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartB,,4,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Iteration,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartC,,5,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartD,,6,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartE,,7,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartF,,8,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
description, This object forms part of the following types of reflexive relationships:%0A %0A 	1c:1c%0A 	1c:Mc%0A 	Mc:Mc%0A %0A All tests for the above relationships are handled by this object.%0A,,,,,,,
object,,,,,,,,
object,Object_H,objH,12,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicate that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
operation,Relationships,Object_H,public,Super_Sub_Relationships,,,1,
parameter,Iteration,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Subtype/Supertype relationship%0A#%0A# The architecture shall implement supertype/subtype relationships%0A# 1241-0000-01-0614%0A#%0A# The architecture shall provide a mechanism to allow creation of a %0A# supertype/subtype relationship link between two object instances%0A# 1241-0000-01-0615%0A#%0A# The architecture shall provide a mechanism to all deletion of a %0A# supertype/subtype relationship link between two object instances%0A# 1241-0000-01-0616%0A# %0A# The architecture shall support a minimum of three subtype trees %0A# from any supertype object class%0A# 1241-0000-01-0617%0A#%0A# The architecture shall tress of depth greater than 1%0A# 1241-0000-01-0618%0A# %0A# The architecture shall provide operations which%2C given a stating %0A# instance handle and a relationship specification%2C return a set of%0A# instance handles%0A# 1241-0000-01-0702%0A#%0A# The architecture shall support naviagations from a subtype object %0A# to a supertype object expressed in ASL%0A# 1241-0000-01-0708%0A#%0A# The architecture shall support navigations from a supertype object%0A# to a subtype object expressed in ASL%0A# 1241-0000-01-0709%0A#%0A# The architecture shall support a translation of the ASL link %0A# statment to map to the mechanism that allows creation of a %0A# relationship link between two object instances%0A# 1241-0000-01-1202%0A#%0A# The architecture shall support a translation of the ASL unlink%0A# statement to map to the mechanism that allow the deletion of a %0A# link between two objects in a relationship%0A# 1241-0000-01-1204%0A#%0A# The architecture shall support a translation of the ASL navigate%0A# statment to map to the mechanism that allows the traversal of%0A# relationship links%0A# 1241-0000-01-1205%0A#%0A#-------------------------------------------------------------------#%0A%0A# Initialise the variables%0AHas_Failed   = FALSE%0AUnsupported  = FALSE%0A#-------------------------------------------------------------------#%0A%0A# Find the desired instances Object_H%0AfirstH  = find-one Object_H where idH = 1%0AsecondH = find-one Object_H where idH = 2%0AthirdH  = find-one Object_H where idH = 3%0AfourthH = find-one Object_H where idH = 4%0AfifthH  = find-one Object_H where idH = 5%0A%0A# Find the desired instances Object_L%0AfirstL  = find-one Object_L where idL = 1%0AsecondL = find-one Object_L where idL = 2%0AthirdL  = find-one Object_L where idL = 3%0A%0A# Find the desired instances Object_I%0AsecondI  = find-one Object_I where IDI = 2%0AthirdI   = find-one Object_I where IDI = 3%0AfourthI  = find-one Object_I where IDI = 4%0AfifthI   = find-one Object_I where IDI = 5%0A%0A# Find the desired instance of Object_K%0AfirstK = find-one Object_K where idK = 1%0AthirdK = find-one Object_K where idK = 3%0AfifthK = find-one Object_K where idK = 5%0A%0A# Find the desired instance of Sub_L2%0AsecondSL2 = find-one Sub_L2 where idSL2 = 2%0A%0A# Find the desired instances Sub_L3%0AfirstSL3  = find-one Sub_L3 where idSL3 = 1%0AsecondSL3 = find-one Sub_L3 where idSL3 = 2%0AthirdSL3  = find-one Sub_L3 where idSL3 = 3%0A%0A# Find the desired instances Sub_Sub_L1%0AfirstSSL1 = find-one Sub_Sub_L1 where idSSL1 = 1%0A%0A# Find the desired instances Sub_Sub_L2%0AsecondSSL2 = find-one Sub_Sub_L2 where idSSL2 = 2%0A%0A# Find the desired instances Sub_Sub_L3%0AthirdSSL3 = find-one Sub_Sub_L3 where idSSL3 = 3%0A%0A# Find the desired instances Sub_Sub_L4%0AfourthSSL4 = find-one Sub_Sub_L4 where idSSL4 = 4%0A%0A# Find the desired instances Sub_Sub_L5%0AfifthSSL5 = find-one Sub_Sub_L5 where idSSL5 = 5%0A%0A# Find the desired instances Sub_Sub_L6%0AfirstSSL6  = find-one Sub_Sub_L6 where idSSL6 = 1%0AfourthSSL6 = find-one Sub_Sub_L6 where idSSL6 = 4%0A%0A# Find the desired instances Sub_Sub_L7%0AsecondSSL7 = find-one Sub_Sub_L7 where idSSL7 = 2%0A%0A# Find the desired instances Sub_Sub_L8%0AthirdSSL8 = find-one Sub_Sub_L8 where idSSL8 = 3%0A%0A# Find the desired instances Sub_Sub_L9%0AfourthSSL9 = find-one Sub_Sub_L9 where idSSL9 = 4%0A%0A# Find the desired instances Sub_Sub_L10%0AthirdSSL10 = find-one Sub_Sub_L10 where idSSL10 = 3%0AfifthSSL10 = find-one Sub_Sub_L10 where idSSL10 = 5%0A%0A# Find the desired instances Sub_Sub_L10%0AfourthSSSL2 = find-one Sub_Sub_Sub_L2 where idSSSL2 = 4 %0A%0A#-------------------------------------------------------------------#%0A# Test 1 - Navigate from second instance of Object H to Object L%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 1 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0709"%2C "Relationships"%2C "objH"%2C "ObjH to ObjL"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0614"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0615"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0616"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Create a relationship%0A      link secondH R9 firstL%0A%0A      # Perform the navigation%0A      InstL = secondH -> R9.Object_L%0A%0A      # Check the result of the navigation%0A      if InstL = UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A%0A         if InstL.idL != 1 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      endif%0A%0A      # Unlink the relationship%0A      unlink secondH R9 firstL%0A%0A   endif%0A%0A# End Test 1%0A%0A#-------------------------------------------------------------------#%0A# Test 2 - Navigate from the first instance of object H to Object I%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 2 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0709"%2C "Relationships"%2C "objH"%2C "ObjH to ObjI"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0614"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0615"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0616"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A%0A      # Create the relationship%0A      link firstH R9 thirdI%0A%0A      # Perform the navigation%0A      InstI = firstH -> R9.Object_I%0A%0A      # Check the result of the navigation%0A      if InstI = UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A%0A         if InstI.IDI != 3 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      endif%0A%0A      # Unlink the relationship%0A      unlink firstH R9 thirdI%0A%0A   endif%0A%0A# End Test 2%0A%0A#-------------------------------------------------------------------#%0A# Test 3 - Navigate a chained relationship from the third instance of %0A#          Object H to the third instance of SubL3 via Object L%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 3 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0709"%2C "Relationships"%2C "objH"%2C "ObjH to SubL3 via ObjL"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0614"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0615"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0616"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0618"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A%0A      # Create the relationship%0A      link thirdH R9 thirdL%0A      link thirdL R26 thirdSL3%0A%0A      # Perform the navigation%0A      InstSL3 = thirdH -> R9.Object_L -> R26.Sub_L3%0A%0A      # Check the result of the navigation%0A      if InstSL3 = UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A%0A         if InstSL3.idSL3 != 3 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      endif%0A%0A      # Unlink the relationships%0A      unlink thirdH R9 thirdL%0A      unlink thirdL R26 thirdSL3%0A%0A   endif%0A%0A# End Test 3%0A%0A#-------------------------------------------------------------------#%0A# Test 4 - Navigate from the second instance of Object H again this  %0A#          time to the fifth instance of Object I%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 4 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0709"%2C "Relationships"%2C "objH"%2C "ObjH to ObjI"]  %0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0614"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0615"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0616"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Create the relationship%0A      link secondH R9 fifthI%0A%0A      # Perform the navigation%0A      InstI = secondH -> R9.Object_I%0A%0A      # Check the result of the navigation%0A      if InstI = UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A%0A         if InstI.IDI != 5 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      endif%0A%0A      # Unlink the relationship%0A      unlink secondH R9 fifthI%0A%0A   endif%0A%0A# End Test 4%0A%0A#-------------------------------------------------------------------#%0A# Test 5 - Navigate from Object L to Sub L2 without linking Object L  %0A#          to Object H%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 5 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-1205"%2C "Relationships"%2C "objH"%2C "ObjL to SubSL2"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Create the relationship%0A      link secondL R26 secondSL2%0A%0A      # Perform the navigation%0A      InstSL2 = secondL -> R26.Sub_L2%0A      %0A      # Check the results of the navigation%0A      if InstSL2 = UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A%0A         if InstSL2.idSL2 != 2 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      endif%0A%0A      # Unlink the relationship%0A      unlink secondL R26 secondSL2%0A%0A   endif%0A%0A# End Test 5%0A%0A#-------------------------------------------------------------------#%0A# Test 6 - Attempt to navigate a partially defined relationship%2C i.e.%0A#          the last sequence in the relationship has been deleted%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 6 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-1205"%2C "Relationships"%2C "objH"%2C "Partially defined relationship"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Create the relationship%0A      link firstH R9 firstL%0A%0A      # Perform the navigation%0A      InstSL1 = firstH -> R9.Object_L -> R26.Sub_L1%0A%0A      # Check the result of the navigation%0A      if InstSL1 != UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A      # Unlink the relationship%0A      unlink firstH R9 firstL%0A%0A   endif%0A%0A# End Test 6%0A%0A#-------------------------------------------------------------------#%0A# Test 7 - Attempt to navigate to one subtype object while linked to %0A#          another%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 7 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-1205"%2C "Relationships"%2C "objH"%2C "Attempt to nav incorrect to subtype"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Define a relationship%0A      link thirdH R9 firstL%0A%0A      # Perform the navigation%0A      InstI = thirdH -> R9.Object_I%0A%0A      # Check the result of the navigation%0A      if InstI != UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A      # Deleete the relationship%0A      unlink thirdH R9 firstL%0A%0A   endif%0A%0A# End Test 7%0A%0A#-------------------------------------------------------------------#%0A# Test 8 - Attempt to navigate undefined relationship%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 8 then%0A%0A      [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "objH"%2C "Attempt to navigate undefined relationship"]%0A%0A      InstI = thirdH -> R9.Object_I%0A%0A      # Check the reult of the navigation%0A      if InstI != UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A   endif%0A%0A# End Test 8%0A%0A#-------------------------------------------------------------------#%0A# Test 9 - Navigate to all subtype treesbranching off Sub_L3%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 9 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0709"%2C "Relationships"%2C "objH"%2C "Navigate to all subtypes trees off SL3"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0614"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0615"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0616"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0617"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Create the relationships%0A      link firstH R9 firstL%0A      link firstL R26 secondSL3%0A      link secondSL3 R27 firstSSL1%0A      link secondSL3 R29 secondSSL7%0A      link secondSL3 R30 thirdSSL8%0A      link secondSL3 R31 fifthSSL10%0A%0A      # Perform all of the navigations%0A      InstSSL1  = firstH -> R9.Object_L -> R26.Sub_L3 -> R27.Sub_Sub_L1%0A      InstSSL7  = firstH -> R9.Object_L -> R26.Sub_L3 -> R29.Sub_Sub_L7%0A      InstSSL8  = firstH -> R9.Object_L -> R26.Sub_L3 -> R30.Sub_Sub_L8%0A      InstSSL10 = firstH -> R9.Object_L -> R26.Sub_L3 -> R31.Sub_Sub_L10%0A%0A      if InstSSL1 != UNDEFINED then%0A%0A         if InstSSL7 != UNDEFINED then%0A%0A            if InstSSL8 != UNDEFINED then%0A%0A               if InstSSL10 != UNDEFINED then%0A                  Has_Failed   = FALSE%0A               else%0A                  Has_Failed   = TRUE%0A                  Failure_Code = -40%0A               endif%0A%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = -30   %0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif     %0A%0A%0A      # Delete the relationships%0A      unlink firstH R9 firstL%0A      unlink firstL R26 secondSL3%0A      unlink secondSL3 R27 firstSSL1%0A      unlink secondSL3 R29 secondSSL7%0A      unlink secondSL3 R30 thirdSSL8%0A      unlink secondSL3 R31 fifthSSL10     %0A%0A   endif%0A%0A# End Test 9%0A%0A#-------------------------------------------------------------------#%0A# Test 10 - Navigate from Object H all the way down to %0A#           Sub_Sub_Sub_L1%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 10 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0709"%2C "Relationships"%2C "objH"%2C "H to L to SL to SSl to SSSL"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0614"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0615"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0616"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0618"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Create the relationships%0A      link secondH    R9 thirdL%0A      link thirdL     R26 secondSL3%0A      link secondSL3  R27 secondSSL2%0A      link secondSSL2 R28 fourthSSSL2%0A%0A      # Perform the navigation%0A      InstSSSL2 = secondH -> R9.Object_L -> R26.Sub_L3 -> R27.Sub_Sub_L2 -> R28.Sub_Sub_Sub_L2%0A%0A      if InstSSSL2 = UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      else%0A         %0A         if InstSSSL2.idSSSL2 != 4 then%0A            Has_Failed = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      endif%0A%0A      # Delete the relationships%0A      unlink secondH    R9 thirdL%0A      unlink thirdL     R26 secondSL3%0A      unlink secondSL3  R27 secondSSL2%0A      unlink secondSSL2 R28 fourthSSSL2%0A%0A   endif%0A%0A# End Test 10%0A%0A#-------------------------------------------------------------------#%0A# Test 11 - Navigate from SSL10 to SSL6 via SL3%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 11 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0708"%2C "Relationships"%2C "objH"%2C "SSL10 to SLL6 via SL3"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0614"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0615"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0616"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0617"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Create the relationships%0A      link firstSL3 R31 thirdSSL10%0A      link firstSL3 R29 fourthSSL6%0A%0A      # Perform the navigation%0A      InstSSL6 = thirdSSL10 -> R31.Sub_L3 -> R29.Sub_Sub_L6%0A%0A      if InstSSL6 != UNDEFINED then%0A   %0A         if InstSSL6.idSSL6 = 4 then%0A            Has_Failed = FALSE%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A      # Delete the relationships%0A      unlink firstSL3 R31 thirdSSL10%0A      unlink firstSL3 R29 fourthSSL6%0A      %0A   endif%0A%0A# End Test 11%0A%0A#-------------------------------------------------------------------#%0A# Test 12 - Navigate from Sub_Sub_Sub_L2 to Object H%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 12 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0708"%2C "Relationships"%2C "objH"%2C "SSSL2 to ObjH"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0614"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0615"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0616"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0618"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Create the relationships%0A      link firstH     R9  secondL%0A      link secondL    R26 secondSL3%0A      link secondSL3  R27 secondSSL2%0A      link secondSSL2 R28 fourthSSSL2%0A%0A      # Perform the navigation%0A      InstH = fourthSSSL2 -> R28.Sub_Sub_L2 -> R27.Sub_L3 -> R26.Object_L -> R9.Object_H%0A%0A      if InstH != UNDEFINED then%0A      %0A         if InstH.idH = 1 then%0A            Has_Failed = FALSE%0A         else%0A            Has_Failed = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -10%0A      endif%0A%0A      # Delete the relationships%0A      unlink firstH     R9  secondL%0A      unlink secondL    R26 secondSL3%0A      unlink secondSL3  R27 secondSSL2%0A      unlink secondSSL2 R28 fourthSSSL2%0A%0A   endif%0A%0A# End Test 12%0A%0A#-------------------------------------------------------------------#%0A# Test 13 - Navigate from Object_H to Object_K%0A#-------------------------------------------------------------------#%0A%0A   if Iteration = 13 then%0A%0A      [] = RPT1:Start_Test[Test%2C "1241-0000-01-0709"%2C "Relationships"%2C "objH"%2C "Naviaget from objH to ObjK"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0614"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0615"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0616"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0618"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0702"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1202"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1204"]%0A      [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1205"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0611"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0621"]%0A      [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0632"]%0A%0A      # Create the relationships%0A      link firstH R9 secondL%0A      link secondL R26 secondSL3%0A      link secondSL3 R29 firstSSL6%0A      link firstSSL6 R32 firstK%0A      link firstSSL6 R32 fifthK%0A%0A      # Perform the navigation%0A      {SetK} = firstH -> R9.Object_L -> R26.Sub_L3 -> R29.Sub_Sub_L6 -> R32.Object_K%0A%0A      if countof {SetK} != 0 then%0A      %0A         Val1 = -10%0A         Val2 = -20%0A%0A         for InstK in {SetK} do%0A%0A            if InstK.idK = 1 then%0A               Val1 = InstK.idK%0A            endif%0A%0A            if InstK.idK = 5 then%0A               Val2 = InstK.idK%0A            endif%0A%0A         endfor%0A%0A         if Val1 = 1 then%0A%0A            if Val2 = 5 then%0A               Has_Failed = FALSE%0A            else%0A               Has_Failed   = TRUE%0A               Failure_Code = Val2%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = Val1%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -30%0A      endif%0A   %0A      # Delete the relationships%0A      unlink firstH R9 secondL%0A      unlink secondL R26 secondSL3%0A      unlink secondSL3 R29 firstSSL6%0A      unlink firstSSL6 R32 firstK%0A      unlink firstSSL6 R32 fifthK%0A%0A   endif%0A%0A# End Test 13%0A%0A#-------------------------------------------------------------------#%0A# Test complete%0A#-------------------------------------------------------------------#%0A%0Aif Unsupported = FALSE then%0A%0A   if Has_Failed = FALSE then%0A      [] = RPT2:Test_Passed["objH"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objH"%2C Test%2C Failure_Code]%0A   endif%0A%0Aelse%0A   [] = RPT4:Test_Unsupported[Test]%0Aendif%0A#-------------------------------------------------------------------#%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
event,Fault,,1,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
event,,,,,,,,
event,StartA,,3,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Iteration,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartB,,4,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Iteration,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
description, Supertype object.%0A,,,,,,,
object,,,,,,,,
object,Object_I,objI,13,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R9,,,,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,IDI,,,ResultA,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
event,Fault,,1,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
event,,,,,,,,
description, Subtype object and supertype object.%0A,,,,,,,
object,,,,,,,,
object,Object_K,objK,56,,,,,
attribute,idK,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,idH,,,idK,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R32,,has,Sub_Sub_L6,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Object_L,objL,25,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R9,,,,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,idL,,,ResultA,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
event,Fault,,1,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
event,,,,,,,,
event,StartA,,3,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartB,,4,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
description, Subtype object.%0A,,,,,,,
object,,,,,,,,
object,Object_M,objM,26,,,,,
attribute,idM,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
description, This object was part of a 1-(1c:1c) relationship.%0A Since 1:1 associative relationships are not%0A supported by code builder%2C it is now a 1-1 relationship.%0A,,,,,,,
object,,,,,,,,
object,Object_O,objO,28,,,,,
attribute,idO,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
description, This object forms part of the 1-(1c:Mc) relationship.%0A,,,,,,,
object,,,,,,,,
object,Object_P,objP,30,,,,,
attribute,idP,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,idP,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulted to indicate that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
operation,Relationships,Object_P,public,ObjP_Navigation,,,1,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,#-------------------------------------------------------------------#%0A#%0A# Composed relationships%0A#%0A#-------------------------------------------------------------------#%0A%0A# Initialise the fault flag%0A%0A[] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Relationships"%2C "ObjP"%2C "Composed Relationships"]%0A%0A# Test 1%0A# Navigate from a single instance handle as the source%0A#End Test 1%0A%0A#-------------------------------------------------------------------#%0A%0A#Test 2%0A#Navigate from a set of instance handles as the source%0A#End Test 2%0A%0A#-------------------------------------------------------------------#%0A%0A[] = RPT4:Test_Unsupported[Test]%0A%0A#-------------------------------------------------------------------#%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
event,Fault,,1,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
event,,,,,,,,
event,StartA,,3,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
description, This object forms part of a composed relationship.%0A,,,,,,,
object,,,,,,,,
object,Object_Q,objQ,31,,,,,
attribute,idQ,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,idP,,,idQ,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R20,,Has_a,Object_P,idP,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idR,,,idP,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R21,,Has_a,Object_R,idR,,,
referential,,,,,,,,
attribute,,,,,,,,
description, This object forms part of a composed relationship.%0A,,,,,,,
object,,,,,,,,
object,Object_R,objR,32,,,,,
attribute,idR,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
description, This object forms part of a composed relationship.%0A,,,,,,,
object,,,,,,,,
object,Ref_Att_ObjA,RAOA,35,,,,,
attribute,RAOA_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,RAOA_id_R_SEVENTEEN,,,RAOA_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R17,,has,Ref_Att_ObjA,RAOA_id,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,RAOA_id_R_TWENTY_THREE,,,RAOA_id_R_SEVENTEEN,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R23,,has,Ref_Att_ObjA,RAOA_id,,,
referential,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Report_Data,RD,4,,,,,
attribute,Report_Data_Unique_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Reported_Domain_Number,,,Report_Data_Unique_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Right_Many,objRM,27,,,,,
attribute,idRM,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Right_Object,RO,21,,,,,
attribute,idRO,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Sub_L1,objSL1,39,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R26,,,,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idSL1,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Sub_L2,objSL2,41,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R26,,,,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idSL2,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Sub_L3,objSL3,42,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R26,,,,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idSL3,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Sub_Sub_L1,objSSL1,43,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R27,,,,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idSSL1,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Sub_Sub_L10,objSSL10,54,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R31,,,,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idSSL10,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Sub_Sub_L11,objSSL11,55,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R31,,,,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idSSL11,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Sub_Sub_L2,objSSL2,44,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R27,,,,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idSSL2,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Sub_Sub_L3,objSSL3,45,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R27,,,,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idSSL3,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Sub_Sub_L4,objSSL4,46,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R27,,,,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idSSL4,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Sub_Sub_L5,objSSL5,49,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R29,,,,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idSSL5,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Sub_Sub_L6,objSSL6,50,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R29,,,,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idSSL6,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Sub_Sub_L7,objSSL7,51,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R29,,,,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idSSL7,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Sub_Sub_L8,objSSL8,52,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R30,,,,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idSSL8,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Sub_Sub_L9,objSSL9,53,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R30,,,,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idSSL9,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Sub_Sub_Sub_L1,objSSSL1,47,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R28,,,,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idSSSL1,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Sub_Sub_Sub_L2,objSSSL2,48,,,,,
attribute,idH,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R28,,,,idH,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idSSSL2,,,idH,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Test_Data,TN,15,,,,,
attribute,The_Test_Number,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
pragma,version,,,,,,,
pragmaitem,19,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Tests Relationship manipulations.%0A,,,,,,,
domain,,,,,,,,
