-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("c7705ac4-8456-4354-88b1-591701401ec2",
	'Object_With_Reals',
	6,
	'RL',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("84b19f64-c5f0-4343-b2ee-efec4c497774",
	"c7705ac4-8456-4354-88b1-591701401ec2",
	'Check_The_Reals',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'# type subset_1_of_real is          real range      1.0.. 10.0
# type subset_minus_1_of_real is    real range    -10.0 .. -1.0
# type subset_zero_of_real is       real range    -10.0 .. 10.0
# type one_to_maximum_real is       real range      1.0 .. 32767.0
# type zero_to_maximum_real is      real range      0.0 .. 32767.0
# type minus_one_to_maximum_real is real range     -1.0 .. 32767.0
# type minimum_to_minus_one_real is real range -32768.0 .. -1.0
# type minimum_to_zero_real is      real range -32768.0 .. 0.0
# type minimum_to_maximum_real is   real range -32768.0 .. 32767.0


#First_Real  is Subset_1_of_Real
#Second_Real is Subset_minus_1_Of_Real
#Third_Real  is Subset_Zero_of_Real
#Fourth_Real is one_to_maximum_real
#Fifth_Real  is minimum_to_minus_one_real
#Sixth_Real  is minimum_to_maximum_real

[] = RPT1:Start_Test[Test, The_Requid, "User Defined Types", "Real assignment", Testing_For]

# Set up some negative numbers. I-SIM doesn''t like assigning a magic 
# negative number to an attribute. 

# These are defined by I-SIM as of base type.

Minus_Ten    = -10.0
Minus_Max    = -32768.0
Minus_One    = -1.0
Plus_One     =  1.0
Plus_Ten     =  10.0
Plus_Max     =  32767.0
Big_Fat_Real_Zero =  0.0

Test_Has_Passed  = FALSE
Failure_Code = 0

#--------------------------------------------------------------------------
# Test 8
#--------------------------------------------------------------------------

   if Test = 8 then

      # This test shall prove that assignment using magic numbers is 
      # handled correctly. 

      # Note that these magic numbers are base type, and assinging them to 
      # an attribute of UDT is what we are really looking at here.

      The_Object = create Object_With_Reals with Unique_Identifier = Test

      The_Object.First_Real  = 1.0
      The_Object.Second_Real = Minus_Ten 
      The_Object.Third_Real  = 10.0
      The_Object.Fourth_Real = 1.0
      The_Object.Fifth_Real  = Minus_Max
      The_Object.Sixth_Real  = 0.0

      if The_Object.First_Real  = Plus_One   then

         if The_Object.Second_Real = Minus_Ten  then

            if The_Object.Third_Real  = Plus_Ten   then

               if The_Object.Fourth_Real = Plus_One   then

                  if The_Object.Fifth_Real  = Minus_Max  then

                     if The_Object.Sixth_Real  = Big_Fat_Real_Zero then
                        Test_Has_Passed = TRUE
                     else
                        Failure_Code = (-6)
                     endif

                  else
                     Failure_Code = (-5)
                  endif

               else
                  Failure_Code = (-4)
               endif
   
            else
               Failure_Code = (-3)
            endif

         else
            Failure_Code = (-2)
         endif

      else
         Failure_Code = (-1)
      endif

      delete The_Object

   endif

# End Test 8

#--------------------------------------------------------------------------
# Test 9
#--------------------------------------------------------------------------

   if Test = 9 then
  
      # This test shall prove that assignment using data objects is 
      # handled correctly. 

      # Note that these data objects are base type, and assinging them to 
      # an attribute of UDT is what we are really looking at here.

      The_Object = create Object_With_Reals with Unique_Identifier = Test

      The_Object.First_Real  = Plus_One
      The_Object.Second_Real = Minus_Ten
      The_Object.Third_Real  = Plus_Ten
      The_Object.Fourth_Real = Plus_One
      The_Object.Fifth_Real  = Minus_Max
      The_Object.Sixth_Real  = Big_Fat_Real_Zero

      if (The_Object.First_Real  = Plus_One  ) then

         if (The_Object.Second_Real = Minus_Ten ) then

            if (The_Object.Third_Real  = Plus_Ten  ) then

               if (The_Object.Fourth_Real = Plus_One  ) then

                  if (The_Object.Fifth_Real  = Minus_Max ) then

                     if (The_Object.Sixth_Real  = Big_Fat_Real_Zero) then
                        Test_Has_Passed = TRUE
                     else
                        Failure_Code = (-6)
                     endif

                  else
                     Failure_Code = (-5)
                  endif

               else
                  Failure_Code = (-4)
               endif

            else
               Failure_Code = (-3)
            endif

         else
            Failure_Code = (-2)
         endif

      else
         Failure_Code = (-1)
      endif

      delete The_Object

   endif

# End Test 9

#--------------------------------------------------------------------------
# Test 10
#--------------------------------------------------------------------------

   if Test = 10 then

      # This test shall prove that assignment using data objects is 
      # handled correctly.  Values set to minimum allowable for range.

      The_Object = create Object_With_Reals with Unique_Identifier = Test

      The_Object.First_Real  = Plus_Ten
      The_Object.Second_Real = Minus_One
      The_Object.Third_Real  = Plus_Ten
      The_Object.Fourth_Real = Plus_Max
      The_Object.Fifth_Real  = Minus_One
      The_Object.Sixth_Real  = Plus_Max

      if (The_Object.First_Real  = Plus_Ten  ) then

         if (The_Object.Second_Real = Minus_One ) then

            if (The_Object.Third_Real  = Plus_Ten  ) then

               if (The_Object.Fourth_Real = Plus_Max  ) then

                  if (The_Object.Fifth_Real  = Minus_One ) then

                     if (The_Object.Sixth_Real  = Plus_Max ) then
                        Test_Has_Passed = TRUE
                     else
                        Failure_Code = (-6)
                     endif

                  else
                     Failure_Code = (-5)
                  endif
   
               else
                  Failure_Code = (-4)
               endif

            else
               Failure_Code = (-3)
            endif

         else
            Failure_Code = (-2)
         endif

      else
         Failure_Code = (-1)
      endif

      delete The_Object

   endif

# End Test 10

#--------------------------------------------------------------------------
# Test 11
#--------------------------------------------------------------------------

   if Test = 11 then

      # This test shall prove that assignment using data objects is 
      # handled correctly.  Values set to maximum allowable for range.

      The_Object = create Object_With_Reals with Unique_Identifier = Test

      The_Object.First_Real  = Plus_One
      The_Object.Second_Real = Minus_Ten
      The_Object.Third_Real  = Minus_Ten
      The_Object.Fourth_Real = Plus_One
      The_Object.Fifth_Real  = Minus_Max
      The_Object.Sixth_Real  = Minus_Max

      if (The_Object.First_Real  = Plus_One  ) then

         if (The_Object.Second_Real = Minus_Ten ) then

            if (The_Object.Third_Real  = Minus_Ten  ) then

               if (The_Object.Fourth_Real = Plus_One  ) then

                  if (The_Object.Fifth_Real  = Minus_Max ) then

                     if (The_Object.Sixth_Real  = Minus_Max ) then
                        Test_Has_Passed = TRUE
                     else
                        Failure_Code = (-6)
                     endif

                  else
                     Failure_Code = (-5)
                  endif

               else
                  Failure_Code = (-4)
               endif

            else
               Failure_Code = (-3)
            endif

         else
            Failure_Code = (-2)
         endif

      else
         Failure_Code = (-1)
      endif

      delete The_Object

   endif

# End Test 11

#--------------------------------------------------------------------------
# Test 12
#--------------------------------------------------------------------------

   if Test = 12 then

      # This test shall prove that I_SIM allows root data types to be used for
      # User Defined Types, and in fact totally ignores data typing.

      # Also note that the local data objects are UDT type, and reused by each
      # assingment. This will cause problems for WACA as first use for a local
      # object should defined it as being the same type as the attribute that
      # is being copied into it. Subsequent copies should cause grief.

      Other_Id  = Test + 1
      Result_ID = Other_Id + 1

      The_Object1 = create Object_With_Reals with Unique_Identifier = Test
      The_Object2 = create Object_With_Reals with Unique_Identifier = Other_Id
      Result_Object = create Object_With_Reals with Unique_Identifier = Other_Id

      The_Object1.First_Real  = Plus_One
      The_Object1.Second_Real = Minus_Ten
      The_Object1.Third_Real  = Minus_Ten
      The_Object1.Fourth_Real = Plus_Max
      The_Object1.Fifth_Real  = Minus_Max
      The_Object1.Sixth_Real  = Minus_Max

      The_Object2.First_Real  = Plus_One
      The_Object2.Second_Real = Minus_One
      The_Object2.Third_Real  = Minus_Ten
      The_Object2.Fourth_Real = Plus_One
      The_Object2.Fifth_Real  = Minus_One
      The_Object2.Sixth_Real  = Plus_Max

      # 1.0 + 1.0 in range 1.0..10.0 result 2.0 inside range
      Local_Real1 = The_Object1.First_Real  
      Local_Real2 = The_Object2.First_Real
      Result_Real3 = Local_Real1 + Local_Real2
      Result_Object.First_Real  =  Result_Real3

      # -10.0 - -1.0 in range -10.0 .. -1.0 result = -9.0 inside of range
      Local_Real4 = The_Object1.Second_Real  
      Local_Real5 = The_Object2.Second_Real
      Result_Real6 = Local_Real4 - Local_Real5
      Result_Object.Second_Real  =  Result_Real6

      # -10.0 - -10.0 in range -10.0 .. +10.0 result = 0.0 inside range
      Local_Real7 = The_Object1.Third_Real  
      Local_Real8 = The_Object2.Third_Real
      Result_Real9 = Local_Real7 - Local_Real8
      Result_Object.Third_Real  =  Result_Real9

      # 32767.0 - 1.0 in range 1.0 .. 32767.0 result 32766.0 inside of range
      Local_Real10 = The_Object1.Fourth_Real  
      Local_Real11 = The_Object2.Fourth_Real
      Result_Real12 = Local_Real10 - Local_Real11
      Result_Object.Fourth_Real  =  Result_Real12

      # -32768.0 - -1.0 in range -32768.0 .. -1.0 result -32767.0 inside of range
      Local_Real13 = The_Object1.Fifth_Real  
      Local_Real14 = The_Object2.Fifth_Real
      Result_Real15 = Local_Real13 - Local_Real14
      Result_Object.Fifth_Real  =  Result_Real15

      # -32768.0 + 32767.0 in range -32768.0 .. 32767.0 result -1.0 inside range
      Local_Real16 = The_Object1.Sixth_Real  
      Local_Real17 = The_Object2.Sixth_Real
      Result_Real18 = Local_Real16 + Local_Real17
      Result_Object.Sixth_Real  =  Result_Real18

      # Non unique binary operands
      if Result_Real3  = Result_Object.First_Real  &\
         Result_Real6  = Result_Object.Second_Real &\
         Result_Real9  = Result_Object.Third_Real  &\
         Result_Real12 = Result_Object.Fourth_Real &\
         Result_Real15 = Result_Object.Fifth_Real  &\
         Result_Real18 = Result_Object.Sixth_Real then

         Test_Has_Passed = TRUE
      else
         Failure_Code = -1
      endif

      delete The_Object1
      delete The_Object2

   endif

# End Test 12

#--------------------------------------------------------------------------
# Test 13
#--------------------------------------------------------------------------

   if Test = 13 then

      # This test proves that individual local data objects must be used for different data
      # types.

      # This test is the same as test 12, with one important difference. The local
      # data objects are not reused, thus first use should specify them as 
      # of the attribute''s type, and no conflict should arise.

      Other_Id  = Test + 1
      Result_ID = Other_Id + 1

      The_Object1 = create Object_With_Reals with Unique_Identifier = Test
      The_Object2 = create Object_With_Reals with Unique_Identifier = Other_Id
      Result_Object = create Object_With_Reals with Unique_Identifier = Other_Id

      The_Object1.First_Real  = Plus_One
      The_Object1.Second_Real = Minus_Ten
      The_Object1.Third_Real  = Minus_Ten
      The_Object1.Fourth_Real = Plus_Max
      The_Object1.Fifth_Real  = Minus_Max
      The_Object1.Sixth_Real  = Minus_Max

      The_Object2.First_Real  = Plus_One
      The_Object2.Second_Real = Minus_One
      The_Object2.Third_Real  = Minus_Ten
      The_Object2.Fourth_Real = Plus_One
      The_Object2.Fifth_Real  = Minus_One
      The_Object2.Sixth_Real  = Plus_Max
  
      # 1.0 + 1.0 in range 1.0..10.0 result 2.0 inside range
      Local_Real1 = The_Object1.First_Real  
      Local_Real2 = The_Object2.First_Real
      Result_Real3 = Local_Real1 + Local_Real2
      Result_Object.First_Real  =  Result_Real3

      # -10.0 - -1.0 in range -10.0 .. -1.0 result = -9.0 inside of range
      Local_Real4 = The_Object1.Second_Real  
      Local_Real5 = The_Object2.Second_Real
      Result_Real6 = Local_Real4 - Local_Real5
      Result_Object.Second_Real  =  Result_Real6

      # -10.0 - -10.0 in range -10.0 .. +10.0 result = 0.0 inside range
      Local_Real7 = The_Object1.Third_Real  
      Local_Real8 = The_Object2.Third_Real
      Result_Real9 = Local_Real7 - Local_Real8
      Result_Object.Third_Real  =  Result_Real9

      # 32767.0 - 1.0 in range 1.0 .. 32767.0 result 32766.0 inside of range
      Local_Real10 = The_Object1.Fourth_Real  
      Local_Real11 = The_Object2.Fourth_Real
      Result_Real12 = Local_Real10 - Local_Real11
      Result_Object.Fourth_Real  =  Result_Real12

      # -32768.0 - -1.0 in range -32768.0 .. -1.0 result -32767.0 inside of range
      Local_Real13 = The_Object1.Fifth_Real  
      Local_Real14 = The_Object2.Fifth_Real
      Result_Real15 = Local_Real13 - Local_Real14
      Result_Object.Fifth_Real  =  Result_Real15

      # -32768.0 + 32767.0 in range -32768.0 .. 32767.0 result -1.0 inside range
      Local_Real16 = The_Object1.Sixth_Real  
      Local_Real17 = The_Object2.Sixth_Real
      Result_Real18 = Local_Real16 + Local_Real17
      Result_Object.Sixth_Real  =  Result_Real18

      # Unique result_real''s and binary operands
      if Result_Real3 = Result_Object.First_Real  &\
         Result_Real6 = Result_Object.Second_Real &\
         Result_Real9 = Result_Object.Third_Real  &\
         Result_Real12 = Result_Object.Fourth_Real &\
         Result_Real15 = Result_Object.Fifth_Real  &\
         Result_Real18 = Result_Object.Sixth_Real then

         Test_Has_Passed = TRUE
      else
         Failure_Code = -1
      endif

      delete The_Object1
      delete The_Object2

   endif

# End Test 13

#--------------------------------------------------------------------------
# Test 14
#--------------------------------------------------------------------------

   if Test = 14 then

      # This test proves that individual local data objects must be used for different data
      # types.

      # Add max values to minimum values.

      # This test shall cause some attributes to go out of range on assignment
      # to the results object attributes.

      # It is unclear what is to happen about this. 

      # It highlights an important distinction between I-SIM and WACA. 
      # UDT''s ARE TOTALLY UNSUPPORTED IN I-SIM, and trying to test for them here
      # will give erroneous results.

      Other_Id  = Test + 1
      Result_ID = Other_Id + 1

      The_Object1 = create Object_With_Reals with Unique_Identifier = Test
      The_Object2 = create Object_With_Reals with Unique_Identifier = Other_Id
      Result_Object = create Object_With_Reals with Unique_Identifier = Other_Id

   #   The_Object1.First_Real  = Plus_One
   #   The_Object1.Second_Real = Minus_Ten
   #   The_Object1.Third_Real  = Minus_Ten
   #   The_Object1.Fourth_Real = Plus_One
   #   The_Object1.Fifth_Real  = Minus_Max
   #   The_Object1.Sixth_Real  = Minus_Max

   #   The_Object2.First_Real  = Plus_Ten
   #   The_Object2.Second_Real = Plus_One
   #   The_Object2.Third_Real  = Plus_Ten
   #   The_Object2.Fourth_Real = Plus_Max
   #   The_Object2.Fifth_Real  = Minus_One
   #   The_Object2.Sixth_Real  = Plus_Max

   # 1.0 + 10.0  in range 1.0 .. 10.0 result 11.0 outside of range
   #   Local_Real1 = The_Object1.First_Real  
   #   Local_Real2 = The_Object2.First_Real
   #   Result_Real3 = Local_Real1 + Local_Real2
   #   Result_Object.First_Real  =  Result_Real3

   # -10.0 - 1.0 in range -10.0 .. -1.0 result = -11.0 outside of range
   #   Local_Real4 = The_Object1.Second_Real  
   #   Local_Real5 = The_Object2.Second_Real
   #   Result_Real6 = Local_Real4 - Local_Real5
   #   Result_Object.Second_Real  =  Result_Real6

   # -10.0 - 10.0 in range -10.0 .. 10.0 result  -20.0 outside of range
   #   Local_Real7 = The_Object1.Third_Real  
   #   Local_Real8 = The_Object2.Third_Real
   #   Result_Real9 = Local_Real7 - Local_Real8
   #   Result_Object.Third_Real  =  Result_Real9

   # 1.0 + 32767.0 in range 1.0 .. 32767.0 result 32768.0 outside of range
   #   Local_Real10 = The_Object1.Fourth_Real  
   #   Local_Real11 = The_Object2.Fourth_Real
   #   Result_Real12 = Local_Real10 + Local_Real11
   #   Result_Object.Fourth_Real  =  Result_Real12

   # -32768.00 + -1.0 in range -32768.0 .. 0.0 result -32769.0 outside of range
   #   Local_Real13 = The_Object1.Fifth_Real  
   #   Local_Real14= The_Object2.Fifth_Real
   #   Result_Real15 = Local_Real13 + Local_Real14
   #   Result_Object.Fifth_Real  =  Result_Real15

   # -32768.0 - 32767.0  in range -32768.0 .. 32767.0 result -65535.0 outside range
   #   Local_Real16 = The_Object1.Sixth_Real  
   #   Local_Real17 = The_Object2.Sixth_Real
   #   Result_Real18 = Local_Real16 - Local_Real17
   #   Result_Object.Sixth_Real  =  Result_Real18

   # Unique result_real''s and binary operands

   #   if Result_Real3  = Result_Object.First_Real  &\
   #      Result_Real6  = Result_Object.Second_Real &\
   #      Result_Real9  = Result_Object.Third_Real  &\
   #      Result_Real12 = Result_Object.Fourth_Real &\
   #      Result_Real15 = Result_Object.Fifth_Real  &\
   #      Result_Real18 = Result_Object.Sixth_Real then

   #      Test_Has_Passed = TRUE
   #   else
   #      Failure_Code = -1
   #   endif

      Failure_Code = 0

      delete The_Object1
      delete The_Object2

   endif

# End Test 14

#--------------------------------------------------------------------------
# Report the results.
#--------------------------------------------------------------------------

if Test_Has_Passed then
  
   if Result_Object = UNDEFINED then
      [] = RPT2:Test_Passed[Testing_For, Test, Failure_Code]
   else
      [] = RPT2:Test_Passed[Testing_For, Test, Failure_Code]

      [] = RPT8:Test_Real_Passed[Testing_For, Test, Result_Object.First_Real]
      [] = RPT8:Test_Real_Passed[Testing_For, Test, Result_Object.Second_Real]
      [] = RPT8:Test_Real_Passed[Testing_For, Test, Result_Object.Third_Real]
      [] = RPT8:Test_Real_Passed[Testing_For, Test, Result_Object.Fourth_Real]
      [] = RPT8:Test_Real_Passed[Testing_For, Test, Result_Object.Fifth_Real]
      [] = RPT8:Test_Real_Passed[Testing_For, Test, Result_Object.Sixth_Real]
   endif

else

   if Failure_Code = 0 then
      [] = RPT4:Test_Unsupported[Test]
   else
      [] = RPT3:Test_Failed[Testing_For, Test, Failure_Code]
   endif

endif

if Result_Object != UNDEFINED then
   delete Result_Object
endif
',
	3,
	'',
	"00000000-0000-0000-0000-000000000000",
	2,
	1);
INSERT INTO O_TPARM
	VALUES ("cbad4b5d-72b3-47a9-b977-21b3b01f6d24",
	"84b19f64-c5f0-4343-b2ee-efec4c497774",
	'Test',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("fed01f86-a110-4747-8ea0-9f871baf2b62",
	"84b19f64-c5f0-4343-b2ee-efec4c497774",
	'Testing_For',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"cbad4b5d-72b3-47a9-b977-21b3b01f6d24",
	'');
INSERT INTO O_TPARM
	VALUES ("bfd37377-a0bd-4aee-84cb-6b2526461949",
	"84b19f64-c5f0-4343-b2ee-efec4c497774",
	'The_Requid',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"fed01f86-a110-4747-8ea0-9f871baf2b62",
	'');
INSERT INTO O_NBATTR
	VALUES ("bc7ce3c3-8341-4ecd-bf74-29fb24ade91d",
	"c7705ac4-8456-4354-88b1-591701401ec2");
INSERT INTO O_BATTR
	VALUES ("bc7ce3c3-8341-4ecd-bf74-29fb24ade91d",
	"c7705ac4-8456-4354-88b1-591701401ec2");
INSERT INTO O_ATTR
	VALUES ("bc7ce3c3-8341-4ecd-bf74-29fb24ade91d",
	"c7705ac4-8456-4354-88b1-591701401ec2",
	"00000000-0000-0000-0000-000000000000",
	'Unique_Identifier',
	'',
	'',
	'Unique_Identifier',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("8e3f9aa2-5836-430b-b9b4-4ece75a84ff5",
	"c7705ac4-8456-4354-88b1-591701401ec2");
INSERT INTO O_BATTR
	VALUES ("8e3f9aa2-5836-430b-b9b4-4ece75a84ff5",
	"c7705ac4-8456-4354-88b1-591701401ec2");
INSERT INTO O_ATTR
	VALUES ("8e3f9aa2-5836-430b-b9b4-4ece75a84ff5",
	"c7705ac4-8456-4354-88b1-591701401ec2",
	"bc7ce3c3-8341-4ecd-bf74-29fb24ade91d",
	'First_Real',
	'',
	'',
	'First_Real',
	0,
	"ec349dc8-6d1e-4459-849c-e13b4d87d342",
	'',
	'');
INSERT INTO S_DT_PROXY
	VALUES ("ec349dc8-6d1e-4459-849c-e13b4d87d342",
	"00000000-0000-0000-0000-000000000000",
	'Subset_1_Of_Real',
	'',
	'',
	'../../types/types.xtuml');
INSERT INTO O_NBATTR
	VALUES ("1d05461e-2c99-4410-9d20-d3c29d8eb1ed",
	"c7705ac4-8456-4354-88b1-591701401ec2");
INSERT INTO O_BATTR
	VALUES ("1d05461e-2c99-4410-9d20-d3c29d8eb1ed",
	"c7705ac4-8456-4354-88b1-591701401ec2");
INSERT INTO O_ATTR
	VALUES ("1d05461e-2c99-4410-9d20-d3c29d8eb1ed",
	"c7705ac4-8456-4354-88b1-591701401ec2",
	"8e3f9aa2-5836-430b-b9b4-4ece75a84ff5",
	'Second_Real',
	'',
	'',
	'Second_Real',
	0,
	"6f68eee9-65bd-49d6-8c73-0951a7fda435",
	'',
	'');
INSERT INTO S_DT_PROXY
	VALUES ("6f68eee9-65bd-49d6-8c73-0951a7fda435",
	"00000000-0000-0000-0000-000000000000",
	'Subset_Minus_1_Of_Real',
	'',
	'',
	'../../types/types.xtuml');
INSERT INTO O_NBATTR
	VALUES ("8d8cd00d-9885-4142-a2a6-48ab84c1bda1",
	"c7705ac4-8456-4354-88b1-591701401ec2");
INSERT INTO O_BATTR
	VALUES ("8d8cd00d-9885-4142-a2a6-48ab84c1bda1",
	"c7705ac4-8456-4354-88b1-591701401ec2");
INSERT INTO O_ATTR
	VALUES ("8d8cd00d-9885-4142-a2a6-48ab84c1bda1",
	"c7705ac4-8456-4354-88b1-591701401ec2",
	"1d05461e-2c99-4410-9d20-d3c29d8eb1ed",
	'Third_Real',
	'',
	'',
	'Third_Real',
	0,
	"ec42029c-b481-4751-a72c-f914c2383561",
	'',
	'');
INSERT INTO S_DT_PROXY
	VALUES ("ec42029c-b481-4751-a72c-f914c2383561",
	"00000000-0000-0000-0000-000000000000",
	'Subset_Zero_Of_Real',
	'',
	'',
	'../../types/types.xtuml');
INSERT INTO O_NBATTR
	VALUES ("278db8ab-ef02-45a9-ac8c-edab0eee1e69",
	"c7705ac4-8456-4354-88b1-591701401ec2");
INSERT INTO O_BATTR
	VALUES ("278db8ab-ef02-45a9-ac8c-edab0eee1e69",
	"c7705ac4-8456-4354-88b1-591701401ec2");
INSERT INTO O_ATTR
	VALUES ("278db8ab-ef02-45a9-ac8c-edab0eee1e69",
	"c7705ac4-8456-4354-88b1-591701401ec2",
	"8d8cd00d-9885-4142-a2a6-48ab84c1bda1",
	'Fourth_Real',
	'',
	'',
	'Fourth_Real',
	0,
	"b4633880-d8d7-4f3b-8659-10cbc5e20a5f",
	'',
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b4633880-d8d7-4f3b-8659-10cbc5e20a5f",
	"00000000-0000-0000-0000-000000000000",
	'One_To_Maximum_Of_Real',
	'',
	'',
	'../../types/types.xtuml');
INSERT INTO O_NBATTR
	VALUES ("6677f126-066c-40d8-b950-540a67c5e469",
	"c7705ac4-8456-4354-88b1-591701401ec2");
INSERT INTO O_BATTR
	VALUES ("6677f126-066c-40d8-b950-540a67c5e469",
	"c7705ac4-8456-4354-88b1-591701401ec2");
INSERT INTO O_ATTR
	VALUES ("6677f126-066c-40d8-b950-540a67c5e469",
	"c7705ac4-8456-4354-88b1-591701401ec2",
	"278db8ab-ef02-45a9-ac8c-edab0eee1e69",
	'Fifth_Real',
	'',
	'',
	'Fifth_Real',
	0,
	"b24620cc-f852-4260-83d4-626575e6d0b9",
	'',
	'');
INSERT INTO S_DT_PROXY
	VALUES ("b24620cc-f852-4260-83d4-626575e6d0b9",
	"00000000-0000-0000-0000-000000000000",
	'Minimum_To_Minus_One_Of_Real',
	'',
	'',
	'../../types/types.xtuml');
INSERT INTO O_NBATTR
	VALUES ("cdcc0fad-b798-4fb7-a969-566fd3df5c4d",
	"c7705ac4-8456-4354-88b1-591701401ec2");
INSERT INTO O_BATTR
	VALUES ("cdcc0fad-b798-4fb7-a969-566fd3df5c4d",
	"c7705ac4-8456-4354-88b1-591701401ec2");
INSERT INTO O_ATTR
	VALUES ("cdcc0fad-b798-4fb7-a969-566fd3df5c4d",
	"c7705ac4-8456-4354-88b1-591701401ec2",
	"6677f126-066c-40d8-b950-540a67c5e469",
	'Sixth_Real',
	'',
	'',
	'Sixth_Real',
	0,
	"331b795d-6613-418a-8a8c-97f66e7cecb5",
	'',
	'');
INSERT INTO S_DT_PROXY
	VALUES ("331b795d-6613-418a-8a8c-97f66e7cecb5",
	"00000000-0000-0000-0000-000000000000",
	'Mminimum_To_Maximum_Of_Real',
	'',
	'',
	'../../types/types.xtuml');
INSERT INTO O_ID
	VALUES (0,
	"c7705ac4-8456-4354-88b1-591701401ec2");
INSERT INTO O_OIDA
	VALUES ("bc7ce3c3-8341-4ecd-bf74-29fb24ade91d",
	"c7705ac4-8456-4354-88b1-591701401ec2",
	0,
	'Unique_Identifier');
INSERT INTO O_ID
	VALUES (1,
	"c7705ac4-8456-4354-88b1-591701401ec2");
INSERT INTO O_ID
	VALUES (2,
	"c7705ac4-8456-4354-88b1-591701401ec2");
INSERT INTO PE_PE
	VALUES ("c7705ac4-8456-4354-88b1-591701401ec2",
	1,
	"238861ac-0fa2-439e-9565-9318d8eb4a43",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("238861ac-0fa2-439e-9565-9318d8eb4a43",
	"00000000-0000-0000-0000-000000000000",
	"e9e35aea-8723-48ea-8651-face3587858f",
	'UDT',
	'',
	0,
	'../UDT.xtuml');
