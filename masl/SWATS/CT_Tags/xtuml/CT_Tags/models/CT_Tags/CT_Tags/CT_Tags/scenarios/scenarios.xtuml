-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("9ee5b004-df57-461b-9e41-f0c4b01bb8ed",
	"00000000-0000-0000-0000-000000000000",
	"661bcb35-4b5e-4dd1-a9c1-08c8f3bf651f",
	'scenarios',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("31d48bd6-2cc0-4b37-b976-5b931080d02e",
	112,
	"9ee5b004-df57-461b-9e41-f0c4b01bb8ed",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'CT_Tags::CT_Tags::CT_Tags::scenarios');
INSERT INTO DIM_DIA
	VALUES ("31d48bd6-2cc0-4b37-b976-5b931080d02e",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("985c9869-fae7-4b3d-bf9a-0bafe8a73e19",
	"00000000-0000-0000-0000-000000000000",
	'Start_Domain_Tests',
	' Start_Domain_Tests
',
	'my_test = create Test_Data with Current_Test_Number = 1

old_report = find-one Report_Data

if old_report != UNDEFINED then
   delete old_report
endif

My_Report = create unique Report_Data with Reported_Domain_Number = 1

My_Results = create unique Results with CCATotal   = 0     &\
                                        TCATotal   = 0     &\
                                        CCAFlag    = FALSE &\
                                        TCAFlag    = FALSE &\
                                        ResRef     = 0     &\
                                        idRes      = 1

[] = RPT6:Domain_Test_Start["CCU TCU Tagging"]',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	4);
INSERT INTO PE_PE
	VALUES ("985c9869-fae7-4b3d-bf9a-0bafe8a73e19",
	1,
	"9ee5b004-df57-461b-9e41-f0c4b01bb8ed",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0250b75e-c031-431f-ab73-a7cc5dadf118",
	"00000000-0000-0000-0000-000000000000",
	'TCA_Tests',
	' TCA_Tests
',
	'my_test = find-one Test_Data

Test = my_test.Current_Test_Number

LocalCount = 0

instResult = find-one Results where idRes = 1

instResult.TCAFlag = TRUE

firstGS = create Global_Super with idGS          = 2      &\
                                   GSRef         = 0      &\
                                   CCAFlag       = FALSE  &\
                                   TCAFlag       = FALSE  &\
                                   GlobalFlag    = FALSE  &\
                                   Current_State = ''Idle''

firstTSA = create TCA_SubA with idTSA         = 2     &\
                                Current_State = ''Idle''

firstGSC = create Global_SubC with idGSC         = 2 &\
                                   Current_State = ''Idle''


firstTS = create TCA_Super with idTS          = 2     &\
                                TSRef         = 0     &\
                                TCAFlag       = FALSE &\
                                Current_State = ''Idle''

firstTSD = create TCA_SubD with idTSD         = 2 &\
                                Current_State = ''Idle''

firstGSF = create Global_SubF with idGSF         = 2     &\
                                   GlobalFlag    = FALSE &\
                                   Current_State = ''Idle''

firstTCA_D = create TCA_D with idTD          = 2     &\
                               TDRef         = 0     &\
                               TDPassed      = FALSE &\
                               TDLinked      = FALSE &\
                               Current_State = ''Idle''

firstTCA_E = create TCA_E with idTE          = 2 &\
                               TERef         = 0 &\
                               Current_State = ''Idle''

firstTCA_F = create TCA_F with idTF          = 2 &\
                               TFRef         = 0 &\
                               Current_State = ''Idle''

firstTSG = create TCA_SubG with idTSG = 2

firstGSI = create Global_SubI with idGSI         = 2     &\
                                   GlobalFlag    = FALSE &\
                                   Current_State = ''Idle''

firstTA = create TCA_A    with idTA = 2 and Current_State = ''Idle''
firstTB = create TCA_B    with idTB = 2
firstTC = create TCA_C    with idTC = 2
firstGA = create Global_A with idGA = 2
firstGB = create Global_B with idGB = 2

firstTCA_CP = create TCA_CP with idTCP = 2
firstGlob_CP = create Global_CP with idGCP = 2

#-----------------------------------------------------------------------------------
# Test 1 - Test for existance of object instances
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "TCA Objects created"]

   if firstTA != UNDEFINED then

      if firstTB != UNDEFINED then

         if firstTC != UNDEFINED then

            if firstGA != UNDEFINED then

               if firstGB != UNDEFINED then
                  [] = RPT2:Test_Passed["TCA Objects created", Test, 0]
               else
                  [] = RPT3:Test_Failed["TCA Objects created", Test, -10]
               endif

            else
               [] = RPT3:Test_Failed["TCA Objects created", Test, -20]
            endif

         else
            [] = RPT3:Test_Failed["TCA Objects created", Test, -30]
         endif

      else
         [] = RPT3:Test_Failed["TCA Objects created", Test, -40]
      endif

   else
      [] = RPT3:Test_Failed["TCA Objects created", Test, -50]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 1

#-----------------------------------------------------------------------------------
# Test 2 - Navigate from TCA_A to TCA_B
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Navigate TCA super to TCA sub"]

   link firstTA R2 firstTB

   instTB = firstTA -> R2.TCA_B

   unlink firstTA R2 firstTB

   if instTB !=UNDEFINED then

      if instTB.idTB = 2 then
         [] = RPT2:Test_Passed["Navigate TCA super to TCA sub", Test, 0]
      else
         [] = RPT3:Test_Failed["Navigate TCA super to TCA sub", Test, -10]
      endif

   else
      [] = RPT3:Test_Failed["Navigate TCA super to TCA sub", Test, -20]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 2

#-----------------------------------------------------------------------------------
# Test 3 - Navigate from Global_B to TCA_C
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Navigate GlobB to TCA"]

   link firstGB R4 firstTC

   instTC = firstGB -> R4.TCA_C

   unlink firstGB R4 firstTC

   if instTC != UNDEFINED then

      if instTC.idTC = 2 then
         [] = RPT2:Test_Passed["Navigate GlobB to TCA", Test, 0]
      else
         [] = RPT3:Test_Failed["Navigate GlobB to TCA", Test, -10]
      endif

   else
      [] = RPT3:Test_Failed["Navigate GlobB to TCA", Test, -20]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 3

#-----------------------------------------------------------------------------------
# Test 4 - Navigate from Global_A to Global_B
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Navigate Global to Global"]

   link firstGA R13 firstGB

   instGB = firstGA -> R13.Global_B

   unlink firstGA R13 firstGB

   if instGB != UNDEFINED then

      if instGB.idGB = 2 then
         [] = RPT2:Test_Passed["Navigate Global to Global", Test, 0]
      else
         [] = RPT3:Test_Failed["Navigate Global to Global", Test, -10]
      endif

   else
      [] = RPT3:Test_Failed["Navigate Global to Global", Test, -20]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 4

#-----------------------------------------------------------------------------------
# Test 5 - Navigate round Global super type TCA subtypes
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Global Super type"]

   link firstGS    R5  firstTSA
   link firstTSA   R8  firstTCA_D
   link firstTCA_D R12 firstTCA_E
   link firstTCA_E R11 firstTCA_F
   link firstTCA_F R10 firstGSC

   instTSA   = firstGS   -> R5.TCA_SubA
   instTCA_D = instTSA   -> R8.TCA_D
   instTCA_E = instTCA_D -> R12.TCA_E
   instTCA_F = instTCA_E -> R11.TCA_F
   instGSC   = instTCA_F -> R10.Global_SubC

   unlink firstGS    R5  firstTSA
   unlink firstTSA   R8  firstTCA_D
   unlink firstTCA_D R12 firstTCA_E
   unlink firstTCA_E R11 firstTCA_F
   unlink firstTCA_F R10 firstGSC

   if instGSC.idGSC = 2 then
      [] = RPT2:Test_Passed["Global Super type", Test, 0]
   else
      [] = RPT3:Test_Failed["Global Super type", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 5

#-----------------------------------------------------------------------------------
# Test 6 - Navigate round Global super type TCA subtypes
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Global Super type"]

   link firstGS    R5  firstGSC
   link firstTSA   R8  firstTCA_D
   link firstTCA_D R12 firstTCA_E
   link firstTCA_E R11 firstTCA_F
   link firstTCA_F R10 firstGSC

   instGSC   = firstGS   -> R5.Global_SubC
   instTCA_F = instGSC   -> R10.TCA_F
   instTCA_E = instTCA_F -> R11.TCA_E
   instTCA_D = instTCA_E -> R12.TCA_D
   instTSA   = instTCA_D -> R8.TCA_SubA

   unlink firstGS    R5  firstGSC
   unlink firstTSA   R8  firstTCA_D
   unlink firstTCA_D R12 firstTCA_E
   unlink firstTCA_E R11 firstTCA_F
   unlink firstTCA_F R10 firstGSC

   if instTSA.idTSA = 2 then
      [] = RPT2:Test_Passed["Global Super type", Test, 0]
   else
      [] = RPT3:Test_Failed["Global Super type", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 6

#-----------------------------------------------------------------------------------
# Test 7 - Navigate TCA Super type to TSA sub type
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "TCA Supertype to TCA subtype"]

   link firstTS R6 firstTSD

   instTSD = firstTS -> R6.TCA_SubD

   unlink firstTS R6 firstTSD

   temp = instTSD.idTSD

   instTSD = firstTS -> R6.TCA_SubD

   if temp = 2 and instTSD = UNDEFINED then
      [] = RPT2:Test_Passed["TCA Supertype to TCA subtype", Test, 0]
   else
      [] = RPT3:Test_Failed["TCA Supertype to TCA subtype", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 7

#-----------------------------------------------------------------------------------
# Test 8 - Navigate TCA Super type to Global sub type
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "TCA Supertype to Global subtype"]

   link firstTS R6 firstGSF

   instGSF = firstTS -> R6.Global_SubF

   unlink firstTS R6 firstGSF

   temp = instGSF.idGSF

   instGSF = firstTS -> R6.Global_SubF

   if temp = 2 and instGSF = UNDEFINED then
      [] = RPT2:Test_Passed["TCA Supertype to Global subtype", Test, 0]
   else
      [] = RPT3:Test_Failed["TCA Supertype to Global subtype", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 8

#-----------------------------------------------------------------------------------
# Test 9 - Ensure that sub type of a CCA super type still exists
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "TCA Sub type of CCA super type"]

   if firstTSG != UNDEFINED then
      [] = RPT2:Test_Passed["TCA Sub type of CCA super type", Test, 0]
   else
      [] = RPT3:Test_Failed["TCA Sub type of CCA super type", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 9

#-----------------------------------------------------------------------------------
# Test 10 - Ensure that Global sub type of CCA super type still exists
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Glob Sub type of CCA super type"]

   if firstGSI != UNDEFINED then
      [] = RPT2:Test_Passed["Glob Sub type of CCA super type", Test, 0]
   else
      [] = RPT3:Test_Failed["Glob Sub type of CCA super type", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 10

#-----------------------------------------------------------------------------------
# Test 11 - Test TCA object sync service for a TCA object
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Call TCA service"]

   TheRes = 0

   [TheRes] = TCAA1:Add_One[TheRes]

   if TheRes = 1 then
      [] = RPT2:Test_Passed["Call TCA service", Test, 0]
   else
      [] = RPT3:Test_Failed["Call TCA service", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 11

#-----------------------------------------------------------------------------------
# Test 12 - Test Global object sync service for a global object
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Call Global service"]

   [TheRes] = GA1:Add_One[TheRes]

   if TheRes = 2 then
      [] = RPT2:Test_Passed["Call Global service", Test, 0]
   else
      [] = RPT3:Test_Failed["Call Global service", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 12

#-----------------------------------------------------------------------------------
# Test 13 - Test TCA Domain Sync Service
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Call Global service"]

   [TheRes] = CT_Tags1::TCA_Add_One[TheRes]

   if TheRes = 3 then
      [] = RPT2:Test_Passed["Call TCA Domain Sync service", Test, 0]
   else
      [] = RPT3:Test_Failed["Call TCA Domain Sync service", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 13

#-----------------------------------------------------------------------------------
# Test 14 - Test TCA Domain Sync Service
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Call Global service"]

   [TheRes] = CT_Tags3::Global_Add_One[TheRes]

   if TheRes = 4 then
      [] = RPT2:Test_Passed["Call Global Domain Sync service", Test, 0]
   else
      [] = RPT3:Test_Failed["Call Global Domain Sync service", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 14

#-----------------------------------------------------------------------------------
# Test 15 - Test TCA Domain Sync Service
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "TCA_Bridge"]

   [TheRes] = AO1:TCA_Add[TheRes]

   if TheRes = 5 then
      [] = RPT2:Test_Passed["TCA_Bridge", Test, 0]
   else
      [] = RPT3:Test_Failed["TCA_Bridge", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 15

#-----------------------------------------------------------------------------------
# Test 16 - Test TCA Domain Sync Service
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "TCA_Bridge"]

   [TheRes] = AO2:Global_Add[TheRes]

   if TheRes = 6 then
      [] = RPT2:Test_Passed["TCA_Bridge", Test, 0]
   else
      [] = RPT3:Test_Failed["TCA_Bridge", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 16

#-----------------------------------------------------------------------------------
# Test 17 - TCA to TCA Counterpoint link
#-----------------------------------------------------------------------------------
[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "TCA to TCA Counterpoint Link"]

   [ReturnVal] = Nav_TCA2:Create_And_Link_TCA[firstTCA_CP]

   if ReturnVal = 1 then
      [] = RPT2:Test_Passed["TCA counterpoint link", Test, 0]
   else
      [] = RPT3:Test_Failed["TCA counterpoint link", Test, ReturnVal]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 17

#-----------------------------------------------------------------------------------
# Test 18 - TCA to TCA Counterpoint navigate
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "TCA to TCA Counterpoint nav"]

   [ReturnVal] = Nav_TCA1:Navigate_TCA[firstTCA_CP]

   if ReturnVal = 1 then
      [] = RPT2:Test_Passed["TCA counterpoint nav", Test, 0]
   else
      [] = RPT3:Test_Failed["TCA counterpoint nav", Test, ReturnVal]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 18

#-----------------------------------------------------------------------------------
# Test 19 - TCA to TCA Counterpoint navigate
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "TCA to TCA Counterpoint unlink"]

   [ReturnVal] = Nav_TCA3:Unlink_TCA[firstTCA_CP]

   if ReturnVal = 1 then
      [] = RPT2:Test_Passed["TCA counterpoint unlink", Test, 0]
   else
      [] = RPT3:Test_Failed["TCA counterpoint unlink", Test, ReturnVal]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 19

#-----------------------------------------------------------------------------------
# Test 20 - Global to Global Counterpoint link
#-----------------------------------------------------------------------------------
[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Glob to Glob Counterpoint Link"]

   [ReturnVal] = Nav_Glob1:Create_And_Link_Glob[firstGlob_CP]

   if ReturnVal = 1 then
      [] = RPT2:Test_Passed["Glob counterpoint link", Test, 0]
   else
      [] = RPT3:Test_Failed["Glob counterpoint link", Test, ReturnVal]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 20

#-----------------------------------------------------------------------------------
# Test 21 - Global to Global Counterpoint navigate
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Glob to Glob Counterpoint nav"]

   [ReturnVal] = Nav_Glob2:Navigate_Glob[firstGlob_CP]

   if ReturnVal = 1 then
      [] = RPT2:Test_Passed["Glob counterpoint nav", Test, 0]
   else
      [] = RPT3:Test_Failed["Glob counterpoint nav", Test, ReturnVal]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 21

#-----------------------------------------------------------------------------------
# Test 22 - Global to Global Counterpoint unlink
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Glob to Glob Counterpoint unlink"]

   [ReturnVal] = Nav_Glob3:Unlink_Glob[firstGlob_CP]

   if ReturnVal = 1 then
      [] = RPT2:Test_Passed["Glob counterpoint unlink", Test, 0]
   else
      [] = RPT3:Test_Failed["Glob counterpoint unlink", Test, ReturnVal]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 22

#-----------------------------------------------------------------------------------
# Test 23 - Delete all TCA instances
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Delete all TCA instances"]

   {SetTS} = find-all TCA_Super
   for instTS in {SetTS} do
      delete instTS
   endfor

   {SetTSA} = find-all TCA_SubA
   for instTSA in {SetTSA} do
      delete instTSA
   endfor

   {SetTSD} = find-all TCA_SubD
   for instTSD in {SetTSD} do
      delete instTSD
   endfor

   {SetTD} = find-all TCA_D
   for instTD in {SetTD} do
      delete instTD
   endfor

   {SetTE} = find-all TCA_E
   for instTE in {SetTE} do
      delete instTE
   endfor

   {SetTF} = find-all TCA_F
   for instTF in {SetTF} do
      delete instTF
   endfor

   {SetTG} = find-all TCA_SubG
   for instTG in {SetTG} do
      delete instTG
   endfor

   {SetTA} = find-all TCA_A
   for instTA in {SetTA} do
      delete instTA
   endfor

   {SetTB} = find-all TCA_B
   for instTB in {SetTB} do
      delete instTB
   endfor

   {SetTC} = find-all TCA_C
   for instTC in {SetTC} do
      delete instTC
   endfor


   {SetTS} = find-all TCA_Super
   {SetTSA} = find-all TCA_SubA
   {SetTSD} = find-all TCA_SubD
   {SetTD} = find-all TCA_D
   {SetTE} = find-all TCA_E
   {SetTF} = find-all TCA_F
   {SetTG} = find-all TCA_SubG
   {SetTA} = find-all TCA_A
   {SetTB} = find-all TCA_B
   {SetTC} = find-all TCA_C

   if countof {SetTS} = 0 then

      if countof {SetTSA} = 0 then

         if countof {SetTSD} = 0 then

            if countof {SetTD} = 0 then

               if countof {SetTE} = 0 then

                  if countof {SetTF} = 0 then

                     if countof {SetTG} = 0 then
   
                        if countof {SetTA} = 0 then

                           if countof {SetTB} = 0 then

                              if countof {SetTC} = 0 then
                                 [] = RPT2:Test_Passed["Delete all TCA instances", Test, 0]
                              else
                                 [] = RPT3:Test_Failed["Delete all TCA instances", Test, -10]
                              endif

                           else
                              [] = RPT3:Test_Failed["Delete all TCA instances", Test, -20]
                           endif

                        else
                           [] = RPT3:Test_Failed["Delete all TCA instances", Test, -30]
                        endif

                     else
                        [] = RPT3:Test_Failed["Delete all TCA instances", Test, -40]
                     endif

                  else
                     [] = RPT3:Test_Failed["Delete all TCA instances", Test, -50]
                  endif

               else
                  [] = RPT3:Test_Failed["Delete all TCA instances", Test, -60]
               endif

            else
               [] = RPT3:Test_Failed["Delete all TCA instances", Test, -70]
            endif

         else
            [] = RPT3:Test_Failed["Delete all TCA instances", Test, -80]
         endif

      else
         [] = RPT3:Test_Failed["Delete all TCA instances", Test, -90]
      endif

   else
      [] = RPT3:Test_Failed["Delete all TCA instances", Test, -90]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 23

#-----------------------------------------------------------------------------------
# Test 24 - Delete all global instances
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Delete all Global instances"]

   {SetGS} = find-all Global_Super
   for instGS in {SetGS} do
      delete instGS
   endfor

   {SetGSC} = find-all Global_SubC
   for instGSC in {SetGSC} do
      delete instGSC
   endfor

   {SetGSF} = find-all Global_SubF
   for instGSF in {SetGSF} do
      delete instGSF
   endfor

   {SetGSI} = find-all Global_SubI
   for instGSI in {SetGSI} do
      delete instGSI
   endfor

   {SetGA} = find-all Global_A
   for instGA in {SetGA} do
      delete instGA
   endfor

   {SetGB} = find-all Global_B
   for instGB in {SetGB} do
      delete instGB
   endfor

   {SetGS}  = find-all Global_Super
   {SetGSC} = find-all Global_SubC
   {SetGSF} = find-all Global_SubF
   {SetGSI} = find-all Global_SubI
   {SetGA}  = find-all Global_A
   {SetGB}  = find-all Global_B

   if countof {SetGS} = 0 then

      if countof {SetGSC} = 0 then

         if countof {SetGSF} = 0 then

            if countof {SetGSI} = 0 then

               if countof {SetGA} = 0 then

                  if countof {SetGB} = 0 then
                     [] = RPT2:Test_Passed["Global instances deleted", Test, 0]
                  else
                     [] = RPT3:Test_Failed["Global instances not deleted", Test, -10]
                  endif

               else
                  [] = RPT3:Test_Failed["Global instances not deleted", Test, -20]
               endif
   
            else
               [] = RPT3:Test_Failed["Global instances not deleted", Test, -30]
            endif

         else
            [] = RPT3:Test_Failed["Global instances not deleted", Test, -40]
         endif
   
      else
         [] = RPT3:Test_Failed["Global instances not deleted", Test, -50]
      endif

   else
      [] = RPT3:Test_Failed["Global instances not deleted", Test, -60]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 24

#-----------------------------------------------------------------------------------

temp = instResult.TCATotal
temp = temp + LocalCount
instResult.TCATotal = temp

my_test.Current_Test_Number = Test
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	1);
INSERT INTO PE_PE
	VALUES ("0250b75e-c031-431f-ab73-a7cc5dadf118",
	1,
	"9ee5b004-df57-461b-9e41-f0c4b01bb8ed",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("06e9d5db-20c0-47f2-8a5d-d923872e78ec",
	"00000000-0000-0000-0000-000000000000",
	'Get_Totals',
	' Get_Totals
',
	'my_test = find-one Test_Data

Test = my_test.Current_Test_Number

ExpectedCCACount = 39
ExpectedTCACount = 39

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Total No of tests"]

   instResult = find-one Results where idRes = 1

   if instResult.CCAFlag and instResult.TCAFlag then

      if instResult.CCATotal = ExpectedCCACount and instResult.TCATotal = ExpectedTCACount then
         [] = RPT2:Test_Passed["All tests ran", Test, 0]
      else

         if instResult.CCATotal != ExpectedCCACount and instResult.TCATotal = ExpectedTCACount then
            [] = RPT3:Test_Failed["Missing CCA tests in Glob build", Test, instResult.CCATotal]
         else

            if instResult.CCATotal = ExpectedCCACount and instResult.TCATotal != ExpectedTCACount then
               [] = RPT3:Test_Failed["Missing TCA tests in Glob build", Test, instResult.TCATotal]
            else
               [] = RPT3:Test_Failed["Missing TCA CCA tests in Global", Test, instResult.TCATotal]
            endif

         endif

      endif
            
   else

      if instResult.CCAFlag and !instResult.TCAFlag then

         if instResult.CCATotal = ExpectedCCACount then
            [] = RPT2:Test_Passed["All CCA tests ran in CCA build", Test, 0]
         else
            [] = RPT3:Test_Failed["Missing CCA tests in CCA build", Test, instResult.CCATotal]
         endif

      else

         if !instResult.CCAFlag and instResult.TCAFlag then

            if instResult.TCATotal = ExpectedTCACount then
               [] = RPT2:Test_Passed["All TCA tests ran in TCA build", Test, 0]
            else
               [] = RPT3:Test_Failed["Missing TCA tests in TCA build", Test, instResult.TCATotal]
            endif

         else
            [] = RPT3:Test_Failed["Something very wrong has happend", Test, -10]
         endif

      endif

   endif

Test = Test + 1

my_test.Current_Test_Number = Test',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	6);
INSERT INTO PE_PE
	VALUES ("06e9d5db-20c0-47f2-8a5d-d923872e78ec",
	1,
	"9ee5b004-df57-461b-9e41-f0c4b01bb8ed",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("36c4191d-438a-48d2-be1d-d1761f3e8cca",
	"00000000-0000-0000-0000-000000000000",
	'Finish_Domain_Tests',
	' Finish_Domain_Tests
',
	'[] = RPT7:Domain_Test_Finished["CCU TCU Tagging"]',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	5);
INSERT INTO PE_PE
	VALUES ("36c4191d-438a-48d2-be1d-d1761f3e8cca",
	1,
	"9ee5b004-df57-461b-9e41-f0c4b01bb8ed",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("92cedc75-eda1-4e53-8247-e4856fd34a81",
	"00000000-0000-0000-0000-000000000000",
	'CCA_Tests',
	' CCA_Tests
',
	'my_test = find-one Test_Data

Test = my_test.Current_Test_Number

LocalCount = 0

instResult = find-one Results where idRes = 1

instResult.CCAFlag = TRUE

firstGS = create Global_Super with idGS          = 1      &\
                                   GSRef         = 0      &\
                                   CCAFlag       = FALSE  &\
                                   TCAFlag       = FALSE  &\
                                   GlobalFlag    = FALSE  &\
                                   Current_State = ''Idle''

firstCSB = create CCA_SubB with idCSB         = 1 &\
                                Current_State = ''Idle''

firstGSC = create Global_SubC with idGSC         = 1 &\
                                   Current_State = ''Idle''

firstCSE = create CCA_SubE with idCSE = 1 &\
                                Current_State = ''Idle''

firstGSF = create Global_SubF with idGSF         = 1      &\
                                   GlobalFlag    = FALSE  &\
                                   Current_State = ''Idle''

firstCS = create CCA_Super with idCS = 1 &\
                                Current_State = ''Idle''

firstCSH = create CCA_SubH with idCSH = 1 &\
                                Current_State = ''Idle''

firstGSI = create Global_SubI with idGSI         = 1     &\
                                   GlobalFlag    = FALSE &\
                                   Current_State = ''Idle''

firstCA = create CCA_A with idCA          = 1     &\ 
                            CARef         = 0     &\
                            CAPassed      = FALSE &\
                            CALinked      = FALSE &\
                            Current_State = ''Idle''

firstCB = create CCA_B with idCB = 1 and Current_State = ''Idle''
firstCC = create CCA_C with idCC = 1
firstGA = create Global_A with idGA = 1
firstGB = create Global_B with idGB = 1

firstCCA_CP  = create CCA_CP    with idCCP = 1
firstGlob_CP = create Global_CP with idGCP = 1

#-----------------------------------------------------------------------------------
# CCA    Test 1 
# Navigate from CCA object to CCA object
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Navigate CCA to CCA"]

   link firstCA R1 firstCB

   instCB = firstCA -> R1.CCA_B

   unlink firstCA R1 firstCB

   if instCB !=UNDEFINED then
      [] = RPT2:Test_Passed["Navigate CCA to CCA", Test, 0]
   else
      [] = RPT3:Test_Failed["Navigate CCA to CCA", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 1

#-----------------------------------------------------------------------------------
# CCA    Test 2 
# Navigate from Global object to CCA object
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Navigate Global to CCA"]

   link firstGA R3 firstCC

   instCC = firstGA -> R3.CCA_C

   unlink firstGA R3 firstCC

   if instCC !=UNDEFINED then
      [] = RPT2:Test_Passed["Navigate Global to CCA", Test, 0]
   else
      [] = RPT3:Test_Failed["Navigate Global to CCA", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 2

#-----------------------------------------------------------------------------------
# Test 3 - Check GlobalB still exists as part of a Global TCA relationship
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Check GlobalB still exists"]

   if firstGB !=UNDEFINED then
      [] = RPT2:Test_Passed["Check GlobalB still exists", Test, 0]
   else
      [] = RPT3:Test_Failed["Check GlobalB still exists", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 3

#-----------------------------------------------------------------------------------
# Test 4 - Navigate from Global super to Global sub
#-----------------------------------------------------------------------------------
[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Navigate Glob super to Glob sub"]

   link firstGS R5 firstGSC

   instGSC = firstGS -> R5.Global_SubC

   unlink firstGS R5 firstGSC

   if instGSC.idGSC = 1 then
      [] = RPT2:Test_Passed["Navigate Glob super to Glob sub", Test, 0]
   else
      [] = RPT3:Test_Failed["Navigate Glob super to Glob sub", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 4

#-----------------------------------------------------------------------------------
# Test 5 - Navigate from Global super to CCA sub
#-----------------------------------------------------------------------------------
[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Navigate Global super to CSA sub"]

   link firstGS R5 firstCSB

   instCSB = firstGS -> R5.CCA_SubB

   unlink firstGS R5 firstCSB

   if instCSB.idCSB = 1 then
      [] = RPT2:Test_Passed["Navigate Global super to CSA sub", Test, 0]
   else
      [] = RPT3:Test_Failed["Navigate Global super to CSA sub", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 5

#-----------------------------------------------------------------------------------
# Test 6 - Ensure CCA sub type still exist when part of a TCA supertype CCA subtype 
#          relationship
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "TCA super CCA sub"]

   if firstCSE != UNDEFINED then
      [] = RPT2:Test_Passed["TCA super CCA sub", Test, 0]
   else
      [] = RPT3:Test_Failed["TCA super CCA sub", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 6

#-----------------------------------------------------------------------------------
# Test 7 - Ensure Global sub type still exist when part of a TCA supertype Global
#          subtype relationship
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "TCA Super Global sub"]

   if firstGSF != UNDEFINED then
      [] = RPT2:Test_Passed["TCA Super Global sub", Test, 0]
   else
      [] = RPT3:Test_Failed["TCA Super Global sub", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 7

#-----------------------------------------------------------------------------------
# Test 8 - Navigate CCA supertype to CCA subtype
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Navigate CCA Super CCA Sub"]

   link firstCS R7 firstCSH

   instCSH = firstCS -> R7.CCA_SubH

   unlink firstCS R7 firstCSH

   if instCSH.idCSH = 1 then
      [] = RPT2:Test_Passed["Navigate CCA Super CCA Sub", Test, 0]
   else
      [] = RPT3:Test_Failed["Navigate CCA Super CCA Sub", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 8

#-----------------------------------------------------------------------------------
# Test 9 - Navigate CCA supertype to Global subtype
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Navigate CCA Super Global Sub"]

   link firstCS R7 firstGSI

   instGSI = firstCS -> R7.Global_SubI

   unlink firstCS R7 firstGSI

   if instGSI.idGSI = 1 then
      [] = RPT2:Test_Passed["Navigate CCA Super Global Sub", Test, 0]
   else
      [] = RPT3:Test_Failed["Navigate CCA Super Global Sub", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 9

#-----------------------------------------------------------------------------------
# Test 10 - Call CCA Object Sync service
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Call CCA service"]

   TheRes = 0

   [TheRes] = CCAA1:Add_One[TheRes]

   if TheRes = 1 then
      [] = RPT2:Test_Passed["Call TCA service", Test, 0]
   else
      [] = RPT3:Test_Failed["Call TCA service", Test, TheRes]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 10

#-----------------------------------------------------------------------------------
# Test 11 - Test Global object sync service for a global object
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Call Global service"]

   [TheRes] = GA1:Add_One[TheRes]

   if TheRes = 2 then
      [] = RPT2:Test_Passed["Call TCA service", Test, 0]
   else
      [] = RPT3:Test_Failed["Call TCA service", Test, TheRes]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 11

#-----------------------------------------------------------------------------------
# Test 12 - Test CCA Domain Sync Service
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Call Global service"]

   [TheRes] = CT_Tags2::CCA_Add_One[TheRes]

   if TheRes = 3 then
      [] = RPT2:Test_Passed["Call CCA Domain Sync service", Test, 0]
   else
      [] = RPT3:Test_Failed["Call CCA Domain Sync service", Test, TheRes]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 12

#-----------------------------------------------------------------------------------
# Test 13 - Test Global Domain Sync Service
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Call Global service"]

   [TheRes] = CT_Tags3::Global_Add_One[TheRes]

   if TheRes = 4 then
      [] = RPT2:Test_Passed["Call Global Domain Sync service", Test, 0]
   else
      [] = RPT3:Test_Failed["Call Global Domain Sync service", Test, TheRes]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 13

#-----------------------------------------------------------------------------------
# Test 14 - Test CCA Bridge
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "CCA Bridge"]

   [TheRes] = AO3:CCA_Add[TheRes]

   if TheRes = 5 then
      [] = RPT2:Test_Passed["CCA Bridge", Test, 0]
   else
      [] = RPT3:Test_Failed["CCA Bridge", Test, TheRes]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 14

#-----------------------------------------------------------------------------------
# Test 15 - Test Global Domain Sync Service
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "CCA Bridge"]

   [TheRes] = AO2:Global_Add[TheRes]

   if TheRes = 6 then
      [] = RPT2:Test_Passed["CCA Bridge", Test, 0]
   else
      [] = RPT3:Test_Failed["CCA Bridge", Test, TheRes]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 15

#-----------------------------------------------------------------------------------
# Test 16 - CCA to CCA Counterpoint link
#-----------------------------------------------------------------------------------
[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "CCA to CCA Counterpoint Link"]

   [ReturnVal] = Nav_CCA1:Create_And_Link_CCA[firstCCA_CP]

   if ReturnVal = 1 then
      [] = RPT2:Test_Passed["CCA counterpoint link", Test, 0]
   else
      [] = RPT3:Test_Failed["CCA counterpoint link", Test, ReturnVal]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 16

#-----------------------------------------------------------------------------------
# Test 17 - CCA to CCA Counterpoint navigate
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "CCA to CCA Counterpoint nav"]

   [ReturnVal] = Nav_CCA2:Navigate_CCA[firstCCA_CP]

   if ReturnVal = 1 then
      [] = RPT2:Test_Passed["CCA counterpoint nav", Test, 0]
   else
      [] = RPT3:Test_Failed["CCA counterpoint nav", Test, ReturnVal]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 17

#-----------------------------------------------------------------------------------
# Test 18 - CCA to CCA Counterpoint navigate
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "CCA to CCA Counterpoint unlink"]

   [ReturnVal] = Nav_CCA3:Unlink_CCA[firstCCA_CP]

   if ReturnVal = 1 then
      [] = RPT2:Test_Passed["CCA counterpoint unlink", Test, 0]
   else
      [] = RPT3:Test_Failed["CCA counterpoint unlink", Test, ReturnVal]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 18

#-----------------------------------------------------------------------------------
# Test 19 - Global to Global Counterpoint link
#-----------------------------------------------------------------------------------
[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Glob to Glob Counterpoint Link"]

   [ReturnVal] = Nav_Glob1:Create_And_Link_Glob[firstGlob_CP]

   if ReturnVal = 1 then
      [] = RPT2:Test_Passed["Glob counterpoint link", Test, 0]
   else
      [] = RPT3:Test_Failed["Glob counterpoint link", Test, ReturnVal]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 19

#-----------------------------------------------------------------------------------
# Test 20 - TCA to TCA Counterpoint navigate
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Glob to Glob Counterpoint nav"]

   [ReturnVal] = Nav_Glob2:Navigate_Glob[firstGlob_CP]

   if ReturnVal = 1 then
      [] = RPT2:Test_Passed["Glob counterpoint nav", Test, 0]
   else
      [] = RPT3:Test_Failed["Glob counterpoint nav", Test, ReturnVal]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 20

#-----------------------------------------------------------------------------------
# Test 21 - Global to Global Counterpoint unlink
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Glob to Glob Counterpoint unlink"]

   [ReturnVal] = Nav_Glob3:Unlink_Glob[firstGlob_CP]

   if ReturnVal = 1 then
      [] = RPT2:Test_Passed["Glob counterpoint unlink", Test, 0]
   else
      [] = RPT3:Test_Failed["Glob counterpoint unlink", Test, ReturnVal]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 21

#-----------------------------------------------------------------------------------
# Test 22 - Delete all CCA instances
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Delete all CCA instances"]

   {SetCSB} = find-all CCA_SubB
   for instCSB in {SetCSB} do
      delete instCSB
   endfor

   {SetCSE} = find-all CCA_SubE
   for instCSE in {SetCSE} do
      delete instCSE
   endfor

   {SetCS} = find-all CCA_Super
   for instCS in {SetCS} do
      delete instCS
   endfor

   {SetCSH} = find-all CCA_SubH
   for instCSH in {SetCSH} do
      delete instCSH
   endfor

   {SetCSE} = find-all CCA_SubE
   for instCSE in {SetCSE} do
      delete instCSE
   endfor

   {SetCA} = find-all CCA_A
   for instCA in {SetCA} do
      delete instCA
   endfor

   {SetCB} = find-all CCA_B
   for instCB in {SetCB} do
      delete instCB
   endfor

   {SetCC} = find-all CCA_C
   for instCC in {SetCC} do
      delete instCC
   endfor

   {SetCSB} = find-all CCA_SubB
   {SetCSE} = find-all CCA_SubE
   {SetCS}  = find-all CCA_Super
   {SetCSH} = find-all CCA_SubH
   {SetCA}  = find-all CCA_A
   {SetCB}  = find-all CCA_B
   {SetCC}  = find-all CCA_C

   if countof {SetCSB} = 0 then

      if countof {SetCSE} = 0 then

         if countof {SetCS} = 0 then

            if countof {SetCSH} = 0 then

               if countof {SetCA} = 0 then

                  if countof {SetCB} = 0 then

                     if countof {SetCC} = 0 then
                        [] = RPT2:Test_Passed["Delete all CCA instances", Test, 0]
                     else
                        [] = RPT3:Test_Failed["Delete all CCA instances", Test, -10]
                     endif

                  else
                     [] = RPT3:Test_Failed["Delete all CCA instances", Test, -20]
                  endif

               else
                  [] = RPT3:Test_Failed["Delete all CCA instances", Test, -30]
               endif

            else
               [] = RPT3:Test_Failed["Delete all CCA instances", Test, -40]
            endif

         else
            [] = RPT3:Test_Failed["Delete all CCA instances", Test, -50]
         endif

      else
         [] = RPT3:Test_Failed["Delete all CCA instances", Test, -60]
      endif

   else
      [] = RPT3:Test_Failed["Delete all CCA instances", Test, -10]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 22

#-----------------------------------------------------------------------------------
# Test 23 - Delete all global instances
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Delete all Global instances"]

   {SetGS} = find-all Global_Super
   for instGS in {SetGS} do
      delete instGS
   endfor

   {SetGSC} = find-all Global_SubC
   for instGSC in {SetGSC} do
      delete instGSC
   endfor

   {SetGSF} = find-all Global_SubF
   for instGSF in {SetGSF} do
      delete instGSF
   endfor

   {SetGSI} = find-all Global_SubI
   for instGSI in {SetGSI} do
      delete instGSI
   endfor

   {SetGA} = find-all Global_A
   for instGA in {SetGA} do
      delete instGA
   endfor

   {SetGB} = find-all Global_B
   for instGB in {SetGB} do
      delete instGB
   endfor

   {SetGS}  = find-all Global_Super
   {SetGSC} = find-all Global_SubC
   {SetGSF} = find-all Global_SubF
   {SetGSI} = find-all Global_SubI
   {SetGA}  = find-all Global_A
   {SetGB}  = find-all Global_B

   if countof {SetGS} = 0 then

      if countof {SetGSC} = 0 then

         if countof {SetGSF} = 0 then

            if countof {SetGSI} = 0 then

               if countof {SetGA} = 0 then

                  if countof {SetGB} = 0 then
                     [] = RPT2:Test_Passed["Global instances deleted", Test, 0]
                  else
                     [] = RPT3:Test_Failed["Global instances not deleted", Test, -10]
                  endif

               else
                  [] = RPT3:Test_Failed["Global instances not deleted", Test, -20]
               endif
   
            else
               [] = RPT3:Test_Failed["Global instances not deleted", Test, -30]
            endif

         else
            [] = RPT3:Test_Failed["Global instances not deleted", Test, -40]
         endif
   
      else
         [] = RPT3:Test_Failed["Global instances not deleted", Test, -50]
      endif

   else
      [] = RPT3:Test_Failed["Global instances not deleted", Test, -60]
   endif

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 23

#-----------------------------------------------------------------------------------

temp = instResult.CCATotal 
temp = temp + LocalCount
instResult.CCATotal = temp

my_test.Current_Test_Number = Test',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	2);
INSERT INTO PE_PE
	VALUES ("92cedc75-eda1-4e53-8247-e4856fd34a81",
	1,
	"9ee5b004-df57-461b-9e41-f0c4b01bb8ed",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ad5d9f5d-3d9d-4200-8ce2-26d2e2d5aa8d",
	"00000000-0000-0000-0000-000000000000",
	'TCA_Events',
	' TCA_Events
',
	'my_test = find-one Test_Data

Test = my_test.Current_Test_Number

LocalCount = 0

instResult = find-one Results where idRes = 1

firstGS = create Global_Super with idGS          = 1     &\
                                   GSRef         = 0     &\
                                   CCAFlag       = FALSE &\
                                   TCAFlag       = FALSE &\
                                   GlobalFlag    = FALSE &\
                                   Current_State = ''Idle''

firstGSC = create Global_SubC with idGSC         = 1     &\ 
                                   Current_State = ''Idle''

firstTSA = create TCA_SubA with idTSA         = 1     &\
                                Current_State = ''Idle''

firstTD = create TCA_D with idTD          = 1     &\
                            TDPassed      = FALSE &\
                            TDLinked      = FALSE &\
                            Current_State = ''Idle''

firstTE = create TCA_E with idTE          = 1     &\
                            TERef         = 0     &\
                            TELinked      = FALSE &\
                            TEPassed      = FALSE &\
                            Current_State = ''Idle''

firstTS = create TCA_Super with  idTS          = 1     &\
                                 TCAFlag       = FALSE &\
                                 TSRef         = 0     &\
                                 Current_State = ''Idle''

firstTSD = create TCA_SubD with idTSD         = 1     &\
                                TSDRef        = 0     &\
                                Current_State = ''Idle''

firstGSF = create Global_SubF with idGSF         = 1     &\
                                   GlobalFlag    = FALSE &\ 
                                   Current_State = ''Idle''

firstTCAA = create TCA_A with idTA          = 1 &\
                              Current_State = ''Idle''

#-----------------------------------------------------------------------------------
# Test 25 - Generate event to TDA object D
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Gen event to TCA object"]

   generate ObjTD1:Fired (Test) to firstTD

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 25

#-----------------------------------------------------------------------------------
# Test 26 - Link Global super type to TCA sub type
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Link Global Super to TCA Sub"]

   generate ObjTD2:Link_SuperSub (Test) to firstTD

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 26

#-----------------------------------------------------------------------------------
# Test 27 - Test Polymorphic event delivery
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Gen event to Global super"]

   generate GS1:Poly_Fired(Test) to firstGS

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 27

#-----------------------------------------------------------------------------------
# Test 28 - Unlink Global supertype from TCA subtype
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Unlink Global Super TCA Sub"]

   generate TSA1:Unlink_SuperSub(Test) to firstTSA

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 28

#-----------------------------------------------------------------------------------
# Test 29 - Link Global supertype to Global subtype
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Link Glob Super to Glob Sub"]

   generate GSC4:Link_SuperSub(Test) to firstGSC

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 29

#-----------------------------------------------------------------------------------
# Test 30 - Polymorphic event delivery from Global super to global sub
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Gen event to Global super"]

   generate GS1:Poly_Fired(Test) to firstGS

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 30

#-----------------------------------------------------------------------------------
# Test 31 - Unlink Global supertype from Global subtype
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Unlink Glob Super to Glob Sub"]

   generate GSC1:Unlink_SuperSub(Test) to firstGSC

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 31

#-----------------------------------------------------------------------------------
# Test 32 - Generate event to TCA Sub E
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Gen event to TCA Sub E"]

   generate ObjTE1:Fired(Test) to firstTE

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 32


#-----------------------------------------------------------------------------------
# Test 33 - Link TCA Super to TCA Sub
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Link TCA Super to TCA Sub"]

   generate ObjTE2:Link_SuperSub(Test) to firstTE

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 33

#-----------------------------------------------------------------------------------
# Test 34 - Test Polymorphic event delivery from TCA Super to TCA Sub
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Gen event to TCA Super"]

   generate TS1:Fired(Test) to firstTS

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 34

#-----------------------------------------------------------------------------------
# Test 35 - Unlink
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Unlink TCA Super from TCA Sub"]

   generate TSD2:Unlink_SuperSub(Test) to firstTSD

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 35

#-----------------------------------------------------------------------------------
# Test 36 - Link TCA Super to Global Sub
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Link TCA Super to TCA Sub"]

   generate TCAA1:Link_To_Global(Test) to firstTCAA

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 36

#-----------------------------------------------------------------------------------
# Test 37 - Test Polymorphic event delivery from TCA Super to Global Sub
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Gen event to TCA Super"]

   generate TS1:Fired(Test) to firstTS

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 37

#-----------------------------------------------------------------------------------
# Test 38 - Unlink
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Unlink TCA Super from TCA Sub"]

   generate TCAA2:Unlink_From_Global(Test) to firstTCAA

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 38

#-----------------------------------------------------------------------------------
# Test 39 - Delete all TCA instance
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Delete TCA instances"]

   generate TSA2:Delete_Instances (Test) to firstTSA

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 39

#-----------------------------------------------------------------------------------

temp = instResult.TCATotal
temp = temp + LocalCount
instResult.TCATotal = temp

my_test.Current_Test_Number = Test
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	3);
INSERT INTO PE_PE
	VALUES ("ad5d9f5d-3d9d-4200-8ce2-26d2e2d5aa8d",
	1,
	"9ee5b004-df57-461b-9e41-f0c4b01bb8ed",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2561e18c-e0a1-45a8-9c16-c9bf864f8970",
	"00000000-0000-0000-0000-000000000000",
	'CCA_Events',
	' CCA_Events
',
	'my_test = find-one Test_Data

Test = my_test.Current_Test_Number

LocalCount = 0

instResult = find-one Results where idRes = 1

firstCCAA = create CCA_A with idCA          = 1     &\
                              CARef         = 0     &\
                              CAPassed      = FALSE &\
                              CALinked      = FALSE &\
                              Current_State = ''Idle''

firstCCASuper = create CCA_Super with idCS          = 1     &\
                                      CSRef         = 0     &\
                                      CCAFlag       = FALSE &\
                                      GlobalFlag    = FALSE &\
                                      Current_State = ''Idle''

firstCCASubB = create CCA_SubB with idCSB         = 1 &\
                                    Current_State = ''Idle''

firstCCASubE = create CCA_SubE with idCSE         = 1     &\
                                    CSERef        = 0     &\
                                    CSELinked     = TRUE  &\
                                    CSEPassed     = FALSE &\
                                    Current_State = ''Idle''

firstCCASubH = create CCA_SubH with idCSH         = 1     &\
                                    Current_State = ''Idle''

firstGlobalSubI = create Global_SubI with idGSI         = 1     &\
                                          GlobalFlag    = FALSE &\
                                          Current_State = ''Idle''

firstCCAB = create CCA_B with idCB = 1 and Current_State = ''Idle''

if instResult.TCAFlag then
   firstGlobalSuper = find-one Global_Super where idGS  = 1
   firstGlobalSubC  = find-one Global_SubC  where idGSC = 1

else
   firstGlobalSuper = create Global_Super with idGS           = 1     &\
                                                GSRef         = 0     &\
                                                CCAFlag       = FALSE &\
                                                TCAFlag       = FALSE &\
                                                GlobalFlag    = FALSE &\
                                                Current_State = ''Idle''

   firstGlobalSubC = create Global_SubC with idGSC         = 1     &\ 
                                             Current_State = ''Idle''
endif

#-----------------------------------------------------------------------------------
# Test 24 - Generate event to CCA_A object
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Gen event to CCA object"]

   generate CCAA2:Fired (Test) to firstCCAA

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 24

#-----------------------------------------------------------------------------------
# Test 25 - Link Global supertype to CCA subtype
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Link Global super to CCA sub"]

   generate CCAA1:Link_SuperSub (Test) to firstCCAA

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 25

#-----------------------------------------------------------------------------------
# Test 26 - Test polymorphic event delivery between Global super and CCA sub
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Gen event to Global super"]

   generate GS1:Poly_Fired (Test) to firstGlobalSuper

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 26

#-----------------------------------------------------------------------------------
# Test 27 - Unlink Global super type from CCA sub type
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Unlink Global Super CCA sub"]

   generate CSB1:Unlink_SuperSub (Test) to firstCCASubB

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 27

#-----------------------------------------------------------------------------------
# Test 28 - Link Global super to Global sub
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Link Global Super Global Sub"]

   generate GSC4:Link_SuperSub (Test) to firstGlobalSubC

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 28

#-----------------------------------------------------------------------------------
# Test 29 - Test polymorphic event delivery between Global super and Global sub
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Gen event to Global super"]

   generate GS1:Poly_Fired (Test) to firstGlobalSuper

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 29

#-----------------------------------------------------------------------------------
# Test 30 - Test polymorphic event delivery between Global super and Global sub
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Unlink Global Super Global Sub"]

   generate GSC1:Unlink_SuperSub (Test) to firstGlobalSubC

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 30

#-----------------------------------------------------------------------------------
# Test 31 - Gen event to CCA Sub E
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Gen event to CCA Sub E"]

   generate CSE2:Start(Test) to firstCCASubE

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 31

#-----------------------------------------------------------------------------------
# Test 32 - Link CCA Super type to CCA sub type
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Link CCA Super to CCA Sub"]

   generate CSE1:Link_SuperSub(Test) to firstCCASubE

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 32

#-----------------------------------------------------------------------------------
# Test 33 - Polymorphically deliver event to CCA sub via CCA super
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Gen poly event to CCA sub"]

   generate CS1:C_Fired(Test) to firstCCASuper

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 33

#-----------------------------------------------------------------------------------
# Test 34 - Unlink CCA Super from CCA Sub
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Unlink CCA Super from CCA Sub"]

   generate CSH1:Unlink_SuperSub (Test) to firstCCASubH

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 34

#-----------------------------------------------------------------------------------
# Test 35 - Link CCA Super to Global Sub
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Link CCA Super to Global Sub"]

   generate CCAB1:Link_To_Global (Test) to firstCCAB

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 35

#-----------------------------------------------------------------------------------
# Test 36 - Polymorphically deliver event to Global sub via CCA super
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Gen poly event to Global sub"]

   generate CS1:C_Fired (Test) to firstCCASuper

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 36

#-----------------------------------------------------------------------------------
# Test 37 - Unlink CCA Super from Global Sub
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Unlink CCA Super from Glob Sub"]

   generate CCAB2:Unlink_From_Global (Test) to firstCCAB

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 37

#-----------------------------------------------------------------------------------
# Test 38 - Delete all CCA instances
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Delete all CCA instances"]

   generate CSB2:Delete_Instances (Test) to firstCCASubB

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 38

#-----------------------------------------------------------------------------------
# Test 39 - Delete all Global instances
#-----------------------------------------------------------------------------------

[] = RPT1:Start_Test[Test, "Null Requid", "TCA CCA Tagging", "Scenario", "Delete all Global instances"]

   generate GSC2:Delete_Instances (Test) to firstGlobalSubC

   Test = Test + 1

   LocalCount = LocalCount + 1

# End Test 39

#-----------------------------------------------------------------------------------


temp = instResult.CCATotal
temp = temp + LocalCount
instResult.CCATotal = temp

my_test.Current_Test_Number = Test',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	7);
INSERT INTO PE_PE
	VALUES ("2561e18c-e0a1-45a8-9c16-c9bf864f8970",
	1,
	"9ee5b004-df57-461b-9e41-f0c4b01bb8ed",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("9ee5b004-df57-461b-9e41-f0c4b01bb8ed",
	1,
	"00000000-0000-0000-0000-000000000000",
	"3f6ee15c-20a9-46e4-bff8-76a0f1933751",
	7);
INSERT INTO C_C_PROXY
	VALUES ("3f6ee15c-20a9-46e4-bff8-76a0f1933751",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	'CT_Tags',
	'',
	0,
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'CCA_TCA_Tagging',
	'../CT_Tags.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("661bcb35-4b5e-4dd1-a9c1-08c8f3bf651f",
	'CT_Tags',
	1,
	'../../../CT_Tags.xtuml');
