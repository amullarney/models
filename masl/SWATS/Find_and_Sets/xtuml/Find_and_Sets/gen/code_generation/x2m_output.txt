domain,Find_and_Sets,Find_and_Sets,,,,,,
object,Assoc_Obj,,,,,,,
object,,,,,,,,
object,Find_Many,,,,,,,
object,,,,,,,,
object,Find_Set,,,,,,,
object,,,,,,,,
object,Find_Single,,,,,,,
object,,,,,,,,
object,Left_Obj,,,,,,,
object,,,,,,,,
object,Object_A,,,,,,,
object,,,,,,,,
object,Object_B,,,,,,,
object,,,,,,,,
object,Object_E,,,,,,,
object,,,,,,,,
object,Report_Data,,,,,,,
object,,,,,,,,
object,Right_Obj,,,,,,,
object,,,,,,,,
type,Complex_Structure_Type,private,,,,,,
structure,Complex_Structure_Type,,,,,,,
member,Number_Of_Simple_Structures,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
member,list_of_structures,,,,,,,
typeref,Simple_Structure_Type,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
structure,,,,,,,,
type,,,,,,,,
type,Simple_Structure_Type,private,,,,,,
structure,Simple_Structure_Type,,,,,,,
member,an_integer_of_structure,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
member,a_real_of_structure,,,,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
member,some_text_of_structure,,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
structure,,,,,,,,
type,,,,,,,,
type,New_Enum_Type,public,,,,,,
enumeration,New_Enum_Type,,,,,,,
enumerator,Sly,,,,,,,
enumerator,,,,,,,,
enumerator,Sandy,,,,,,,
enumerator,,,,,,,,
enumerator,Wes,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
type,,,,,,,,
routine,Find_and_Sets,,private,Find_And_Sets_Main,1,,,
codeblock,#------------------------------------------------------------------------#%0A# Setup Test Data%0A#------------------------------------------------------------------------#%0A%0A# Create several instances of each control object%0A%0Acount = 10%0Aloop%0A   #Find Single%0A   newFSI = create Find_Single with idFSI     = count &\%0A                                    ResultFSI = 0%0A%0A   #Find Many%0A   newFM  = create Find_Many with idFM     = count &\%0A                                  ResultFM = 0%0A%0A   #Find Set%0A   newFS  = create Find_Set with idFS     = count &\%0A                                 ResultFS = 0 %0A%0A   count = count - 1%0A   breakif count = 0%0Aendloop%0A%0A%0A#Create several instances of Object_A%0A%0Acount = 10%0A%0Aloop%0A   newA = create Object_A with idA = count &\%0A                               IntegerA = count%0A   count = count - 1%0A   breakif count = 0%0Aendloop%0A%0A#Create several instances of Object_E%0A%0AnewE = create Object_E with idE = 1  & IntegerA = 5 & IntegerB = 2%0AnewE = create Object_E with idE = 2  & IntegerA = 4 & IntegerB = 5%0AnewE = create Object_E with idE = 3  & IntegerA = 1 & IntegerB = 1%0AnewE = create Object_E with idE = 4  & IntegerA = 1 & IntegerB = 1%0AnewE = create Object_E with idE = 5  & IntegerA = 2 & IntegerB = 3%0AnewE = create Object_E with idE = 6  & IntegerA = 5 & IntegerB = 1%0AnewE = create Object_E with idE = 7  & IntegerA = 1 & IntegerB = 3%0AnewE = create Object_E with idE = 8  & IntegerA = 2 & IntegerB = 3%0AnewE = create Object_E with idE = 9  & IntegerA = 1 & IntegerB = 2%0AnewE = create Object_E with idE = 10 & IntegerA = 3 & IntegerB = 3%0A%0A# #########################################################################%0A%0A%0ATest = 1%0A%0A#------------------------------------------------------------------------#%0A# Find One%0A#------------------------------------------------------------------------#%0A%0A   an_instanceFSI = find-one Find_Single where idFSI     = 1 & \%0A                                               ResultFSI = 0%0A%0A   if an_instanceFSI != UNDEFINED then%0A      # Start the test%0A      [Returned_Test_Number] = objFSI1:do_find_one[Test%2C an_instanceFSI ] %0A   endif%0A%0A#------------------------------------------------------------------------#%0A# Find Single%0A#------------------------------------------------------------------------#%0A%0A   an_instanceFSI = find-one Find_Single where idFSI = 2%0A   [Test] = Find_and_Sets1::Increment[Returned_Test_Number]%0A%0A   # Start the test%0A   [Returned_Test_Number] = objFSI2:do_find_only[Test%2C an_instanceFSI]%0A%0A#------------------------------------------------------------------------#%0A# Find Many%0A#------------------------------------------------------------------------#%0A%0A   an_instanceFM = find-one Find_Many where idFM = 1%0A   [Test] = Find_and_Sets1::Increment[Returned_Test_Number]%0A%0A   # Start the test%0A   [Returned_Test_Number] = objFM1:do_find_many[Test%2C an_instanceFM ]%0A%0A#------------------------------------------------------------------------#%0A# Find Set%0A#------------------------------------------------------------------------#%0A%0A   an_instanceFS = find-one Find_Set where idFS = 1%0A   [Test] = Find_and_Sets1::Increment[Returned_Test_Number]%0A%0A   # Start the test%0A   [Returned_Test_Number] = objFS1:do_find_set[Test%2C an_instanceFS]%0A%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,1,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Find_And_Sets_Main%0A,,,,,,,
routine,,,,,,,,
routine,Find_and_Sets,,private,Start_Find_and_Sets_Tests,2,,,
codeblock,[] = Find_and_Sets2::Create_Report_Object[]%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,2,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Start Find and Sets Tests%0A,,,,,,,
routine,,,,,,,,
routine,Find_and_Sets,,private,Finish_Find_and_Sets_Tests,3,,,
codeblock,[] = Find_and_Sets3::Delete_Report_Object[]%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,3,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Finish Find and Sets Tests%0A,,,,,,,
routine,,,,,,,,
routine,Find_and_Sets,,public,Increment,1,,,
parameter,Incremental,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Incremented,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,%0A# Increment value by and return%0AIncremented = Incremental + 1%0A,,,,,,,
codeblock,,,,,,,,
description, Increment a value by 1%0A,,,,,,,
routine,,,,,,,,
routine,Find_and_Sets,,public,Create_Report_Object,2,,,
codeblock,# Find out of there already is one of these.%0A# It is not inconceivable that a report object still exists from a previous run.%0A# Report objects are not deleted at the end of a run%2C as certain events may%0A# still be en-queued.%0A%0Aold_report = find-one Report_Data%0A%0Aif old_report != UNDEFINED then%0A   delete old_report%0Aendif%0A%0AMy_Report = create unique Report_Data with Reported_Domain_Number = 0%0A%0A[] = RPT6:Domain_Test_Start["Find and Sets"]%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Find_and_Sets,,public,Delete_Report_Object,3,,,
codeblock,[] = RPT7:Domain_Test_Finished["Find and Sets"]%0A%0A# Do not delete the Report_Data object%2C as there may be still events in%0A# the queue.,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Find_and_Sets,,public,Check_Enum,4,,,
parameter,The_Input_Value,in,,,,,,
typeref,New_Enum_Type,,,,,,,
typeref,,,,,,,,
parameter,The_Return_Value,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,switch The_Input_Value%0A%0A   case 'Sly'%0A      The_Return_Value = 41%0A   case 'Sandy'%0A      The_Return_Value = 42%0A   case 'Wes'%0A      The_Return_Value = 43%0A   default%0A      The_Return_Value = -41%0Aendswitch,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Find_and_Sets,,public,Insert_Mem_Leak_Test,5,,,
routine,,,,,,,,
routine,Find_and_Sets,,public,FindAllTest,6,,,
parameter,noInst,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,{setAO} = find-all Assoc_Obj%0A%0AInstCount = 0 %0A%0AInstCount = countof {setAO}%0A%0AnoInst = InstCount,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,Report,RPT,,,,,,
routine,Find_and_Sets,,public,Start_Test,1,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Requid,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Purpose,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Find_and_Sets,,public,Test_Passed,2,,,
parameter,Test_Object_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Find_and_Sets,,public,Test_Failed,3,,,
parameter,Failed_Domain_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Failed_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Failed_Test_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Find_and_Sets,,public,Test_Unsupported,4,,,
parameter,Unsupported_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Find_and_Sets,,public,Test_Text,5,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Free_Text,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Find_and_Sets,,public,Domain_Test_Start,6,,,
parameter,This_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Find_and_Sets,,public,Domain_Test_Finished,7,,,
parameter,This_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Find_and_Sets,,public,Specify_Requid,8,,,
parameter,Requid_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,The_Requid_Itself,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
terminator,Nav_to_Bridge,NTB,,,,,,
routine,Find_and_Sets,,public,Big_Bridge_Nav,1,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
terminator,Where_Are_We,WAW,,,,,,
routine,Find_and_Sets,,public,What_Env,1,,,
parameter,Env_Text,out,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
associative,R1,Find_and_Sets,Assoc_Obj,,,,,
participation,Find_and_Sets,Left_Obj,has,unconditionally,many,Find_and_Sets,Right_Obj,
participation,Find_and_Sets,Right_Obj,has,unconditionally,many,Find_and_Sets,Left_Obj,
participation,,,,,,,,
associative,R1,Find_and_Sets,Assoc_Obj,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Right_Obj",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Left_Obj",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
associative,,,,,,,,
object,Assoc_Obj,objAO,5,,,,,
attribute,idAO,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,objLO_id,preferred,,idAO,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R1,,has,Left_Obj,objLO_id,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,objRO_id,preferred,,objLO_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R1,,has,Right_Obj,objRO_id,,,
referential,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Find_Many,objFM,9,,,,,
attribute,idFM,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultFM,,,idFM,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicate that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
operation,Find_and_Sets,Find_Many,public,do_find_many,,,1,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,an_instanceFM,in,,,,,,
typeref,instance of Find_Many,,,,,,,
typeref,,,,,,,,
parameter,Returned_Number,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# Find many instances%0A%0ALocal_Test = Test_Number%0A%0A#------------------------------------------------------------------------#%0A# Test 1 - Find where%2C no instances returned%0A#          Object to which the operation was performed contains no %0A#          instances%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1103-0000-01-0541"%2C "Find and Sets"%2C "objFM"%2C "find-many on no instances"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-1210"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-0124"]%0A%0A   Has_Failed = FALSE%0A%0A   # Perform the test%0A   {setB} = find Object_B where idB > 0%0A%0A   # Check that the set contains no instances%0A   if countof {setB} != 0 then%0A      [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C -1]%0A      Has_Failed = TRUE%0A   else%0A      temp = an_instanceFM.ResultFM + 10%0A      an_instanceFM.ResultFM = temp%0A%0A      [] = RPT2:Test_Passed["objFM"%2C Local_Test%2C temp]%0A   endif%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A# Test 2 - Find where%2C using a single condition%2C no instances returned%0A#------------------------------------------------------------------------#%0A%0A   [Local_Test] = Find_and_Sets1::Increment[Local_Test]%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1103-0000-01-0541"%2C "Find and Sets"%2C "objFM"%2C "single condition find on no instances"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-1210"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-0124"]%0A%0A   Has_Failed = FALSE%0A%0A   # Perform the test%0A   {setA} = find Object_A where idA > 20%0A%0A   # Check that the set contains no instances%0A   if countof {setA} != 0 then%0A      [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C -2]%0A      Has_Failed = TRUE%0A   else%0A      temp = an_instanceFM.ResultFM + 10%0A      an_instanceFM.ResultFM = temp%0A      [] = RPT2:Test_Passed["objFM"%2C Local_Test%2C temp]%0A   endif%0A%0A# End Test 2%0A%0A#------------------------------------------------------------------------#%0A# Test 3 - Find where%2C only one condition is fulfilled%2C no instance%0A#          returned (AND)%0A#------------------------------------------------------------------------#%0A%0A   [Local_Test] = Find_and_Sets1::Increment[Local_Test]%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1103-0000-01-0541"%2C "Find and Sets"%2C "objFM"%2C "find on one condition no instances"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-1210"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-0124"]%0A%0A   Has_Failed = FALSE%0A%0A   # Perform the test%0A   {setA} = find Object_A where idA = 2 & IntegerA = 666%0A%0A   # Check that the set contains no instances%0A   if countof {setA} != 0 then%0A      [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C -3]%0A      Has_Failed = TRUE%0A   else%0A      temp = an_instanceFM.ResultFM + 10%0A      an_instanceFM.ResultFM = temp%0A      [] = RPT2:Test_Passed["objFM"%2C Local_Test%2C temp]%0A   endif%0A%0A# End Test 3%0A%0A#------------------------------------------------------------------------#%0A# Test 4 - find where%2C using a single condition%2C some instances returned%0A#------------------------------------------------------------------------#%0A%0A   [Local_Test] = Find_and_Sets1::Increment[Local_Test]%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1103-0000-01-0541"%2C "Find and Sets"%2C "objFM"%2C "single condition some instances"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-1210"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-0124"]%0A%0A   Has_Failed = FALSE%0A%0A   # Perform the test%0A   {setA} = find Object_A where idA < 4%0A%0A   # Check that the set contains some instances and that it contains the%0A   # correct instances%0A   if countof {setA} != 3 then%0A      [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C -4]%0A      Has_Failed = TRUE%0A   else%0A      # Check each instance that is returned%0A      countA = 0%0A      countB = 0%0A      countC = 0%0A%0A      for each_instanceA in {setA} do%0A%0A         if each_instanceA.idA = 1 then%0A            countA = countA + 1%0A         else%0A%0A            if each_instanceA.idA = 2 then%0A               countB = countB + 1%0A            else%0A   %0A               if each_instanceA.idA = 3 then%0A                  countC = countC + 1%0A               else%0A                  [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C -5]%0A                  Has_Failed = TRUE%0A               endif%0A%0A            endif%0A%0A         endif%0A%0A      endfor%0A%0A      # Check counter values%0A      if (countA != 1)|(countB != 1)|(countC != 1) then%0A         [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C -6]%0A         Has_Failed = TRUE%0A      else%0A         temp = an_instanceFM.ResultFM + 10%0A         an_instanceFM.ResultFM = temp%0A      endif%0A%0A      if !Has_Failed then%0A         [] = RPT2:Test_Passed["objFM"%2C Local_Test%2C temp]%0A      endif%0A%0A   endif%0A%0A# End Test 4%0A%0A#------------------------------------------------------------------------#%0A# Test 5 - find where%2C multiple conditions are fulfilled%2C some instances %0A#          returned%0A#------------------------------------------------------------------------#%0A%0A   [Local_Test] = Find_and_Sets1::Increment[Local_Test]%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1103-0000-01-0541"%2C "Find and Sets"%2C "objFM"%2C"on some instances"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-1210"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-0124"]%0A%0A   Has_Failed = FALSE%0A%0A   # Perform the test%0A   {setA} = find Object_A where idA = 4 | idA > 8%0A%0A   # Check that the set contains some instances and that it contains the%0A   # correct instances%0A%0A   if countof {setA} != 3 then%0A      [] = RPT3:Test_Failed["obj"%2C Local_Test%2C -7]%0A      Has_Failed = TRUE%0A   else%0A      # Check each instance that is returned%0A      countA = 0%0A      countB = 0%0A      countC = 0%0A%0A      for each_instanceA in {setA} do%0A%0A         if each_instanceA.idA = 4 then%0A            countA = countA + 1%0A         else%0A%0A            if each_instanceA.idA = 9 then%0A               countB = countB + 1%0A%0A            else%0A%0A               if each_instanceA.idA = 10 then%0A                  countC = countC + 1%0A               else%0A                  [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C -8]%0A                  Has_Failed = TRUE%0A               endif%0A%0A            endif%0A%0A         endif%0A%0A      endfor%0A%0A      # Check counter values%0A      if (countA != 1)|(countB != 1)|(countC != 1) then%0A         [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C -9]%0A         Has_Failed = TRUE%0A      else%0A         temp = an_instanceFM.ResultFM + 10%0A         an_instanceFM.ResultFM = temp%0A      endif%0A%0A      if !Has_Failed then%0A         [] = RPT2:Test_Passed["objFM"%2C Local_Test%2C temp]%0A      endif%0A%0A   endif%0A%0A# End Test 5%0A%0A#------------------------------------------------------------------------#%0A# Test 6 - find where%2C multiple conditions are fulfilled%2C some instances %0A#          returned%0A#          Specified criteria would hit the same instance several times%0A#------------------------------------------------------------------------#%0A%0A   [Local_Test] = Find_and_Sets1::Increment[Local_Test]%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1103-0000-01-0541"%2C "Find and Sets"%2C "objFM"%2C "find where multiple conditions are fulfilled"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-1210"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-0124"]%0A%0A   Has_Failed = FALSE%0A%0A   # Perform the test%0A   {setA} = find Object_A where idA = 1 | idA < 4 | idA = 3%0A%0A   # Check that the set contains some instances and that it contains the%0A   # correct instances%0A   if countof {setA} != 3 then%0A      [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C -10]%0A      Has_Failed = TRUE%0A   else%0A      # Check each instance that is returned%0A      countA = 0%0A      countB = 0%0A      countC = 0%0A      for each_instanceA in {setA} do%0A%0A         if each_instanceA.idA = 1 then%0A            countA = countA + 1%0A         else%0A%0A            if each_instanceA.idA = 2 then%0A               countB = countB + 1%0A            else%0A%0A               if each_instanceA.idA = 3 then%0A                  countC = countC + 1%0A               else%0A                  [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C-11]%0A                  Has_Failed = TRUE%0A               endif%0A%0A            endif%0A%0A         endif%0A%0A      endfor%0A%0A      # Check counter values%0A      if (countA != 1)|(countB != 1)|(countC != 1) then%0A         [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C -12]%0A         Has_Failed = TRUE%0A      else%0A         temp = an_instanceFM.ResultFM + 10%0A        an_instanceFM.ResultFM = temp%0A      endif%0A%0A      if !Has_Failed then%0A         [] = RPT2:Test_Passed["objFM"%2C Local_Test%2C0]%0A      endif%0A%0A   endif%0A%0A# End Test 6%0A%0A#------------------------------------------------------------------------#%0A# Test 7 - find-all%2C no instances returned%0A#          Object to which the operation was performed contains no %0A#          instances%0A#------------------------------------------------------------------------#%0A%0A   [Local_Test] = Find_and_Sets1::Increment[Local_Test]%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1103-0000-01-0543"%2C "Find and Sets"%2C "objFM"%2C"on no instances"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-1211"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-0124"]%0A%0A   Has_Failed = FALSE%0A%0A   # Perform the test%0A   {setB} = find-all Object_B%0A%0A   # Check that the set contains no instances%0A   if countof {setB} != 0 then%0A      [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C-13]%0A      Has_Failed = TRUE%0A   else%0A      temp = an_instanceFM.ResultFM + 10%0A      an_instanceFM.ResultFM = temp%0A      [] = RPT2:Test_Passed["objFM"%2C Local_Test%2Ctemp]%0A   endif%0A%0A# End Test 7%0A%0A#------------------------------------------------------------------------#%0A# Local_Test 8 - find-all%2C some instances returned%0A#------------------------------------------------------------------------#%0A%0A   [Local_Test] = Find_and_Sets1::Increment[Local_Test]%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1103-0000-01-0543"%2C "Find and Sets"%2C "objFM"%2C"on some instances"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-1211"]%0A%0A   Has_Failed = FALSE%0A%0A   # Perform the test%0A   {setA} = find-all Object_A%0A%0A   # Check that the set contains no instances%0A   if countof {setA} != 10 then%0A      [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C -14]%0A      Has_Failed = TRUE%0A   else%0A      temp = an_instanceFM.ResultFM + 10%0A      an_instanceFM.ResultFM = temp%0A      [] = RPT2:Test_Passed["objFM"%2C Local_Test%2C temp]%0A   endif%0A%0A# End Test 8%0A%0A#------------------------------------------------------------------------#%0A# Test 9%0A#------------------------------------------------------------------------#%0A%0A   [Local_Test] = Find_and_Sets1::Increment[Local_Test]%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1103-0000-01-0543"%2C "Find and Sets"%2C "objFM"%2C"Repeat Find All"]%0A%0A   count = 5%0A%0A   loop%0A%0A      theInt = 100 + count%0A%0A      tempInstanceA = create Object_A with idA      = theInt &\%0A                                      IntegerA = theInt%0A      count = count - 1%0A      breakif count = 0%0A%0A   endloop%0A%0A   {setAA} = find-all Object_A%0A%0A   if countof {setAA} = 15 then%0A%0A      count = 5%0A%0A      loop%0A%0A         theInt = 200 + count%0A%0A         tempInstanceA = create Object_A with idA      = theInt &\%0A                                         IntegerA = theInt%0A         count = count - 1%0A         breakif count = 0%0A%0A      endloop%0A%0A      {setAB} = find-all Object_A%0A%0A      if countof {setAB} = 20 then%0A%0A         [] = RPT2:Test_Passed["objA"%2C Local_Test%2C 0]%0A%0A      else%0A%0A         [] = RPT3:Test_Failed["objA"%2C Local_Test%2C -10]%0A%0A      endif%0A%0A   else%0A%0A      [] = RPT3:Test_Failed["objA"%2C Local_Test%2C -20]%0A%0A   endif%0A%0A#------------------------------------------------------------------------#%0A# Test 10%0A#------------------------------------------------------------------------#%0A%0A   [Local_Test] = Find_and_Sets1::Increment[Local_Test]%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1103-0000-01-0543"%2C "Find and Sets"%2C "objFM"%2C"Repeat Find All"]%0A%0A   count = 5%0A%0A   loop%0A%0A      theInt = 300 + count%0A%0A      tempInstanceA = create Object_A with idA      = theInt &\%0A                                      IntegerA = theInt%0A      count = count - 1%0A      breakif count = 0%0A%0A   endloop%0A%0A   {setAC} = find-all Object_A%0A%0A   if countof {setAC} = 25 then%0A%0A      count = 5%0A%0A      loop%0A%0A         theInt = 400 + count%0A%0A         tempInstanceA = create Object_A with idA      = theInt &\%0A                                         IntegerA = theInt%0A         count = count - 1%0A         breakif count = 0%0A%0A      endloop%0A%0A      {setAC} = find-all Object_A%0A%0A      if countof {setAC} = 30 then%0A%0A         count = 5%0A%0A         loop%0A%0A            theInt = 500 + count%0A%0A            tempInstanceA = create Object_A with idA      = theInt &\%0A                                                  IntegerA = theInt%0A            count = count - 1%0A            breakif count = 0%0A%0A         endloop%0A%0A         {setAC} = find-all Object_A%0A%0A         if countof {setAC} = 35 then%0A%0A            [] = RPT2:Test_Passed["objA"%2C Local_Test%2C 0]%0A%0A         else%0A%0A            [] = RPT3:Test_Failed["objA"%2C Local_Test%2C -10]%0A%0A         endif%0A%0A      else%0A%0A         [] = RPT3:Test_Failed["objA"%2C Local_Test%2C -20]%0A%0A      endif%0A%0A   else%0A%0A      [] = RPT3:Test_Failed["objA"%2C Local_Test%2C -30]%0A%0A   endif%0A%0A#------------------------------------------------------------------------#%0A# Test 11%0A#------------------------------------------------------------------------#%0A%0A   [Local_Test] = Find_and_Sets1::Increment[Local_Test]%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1103-0000-01-0543"%2C "Find and Sets"%2C "objFM"%2C"Repeat Find All"]%0A%0A%0A   count = 5%0A%0A   loop%0A%0A      instAO = create Assoc_Obj with idAO = count%0A%0A      count = count - 1%0A      breakif count = 0%0A%0A   endloop%0A%0A   {setAO} = find-all Assoc_Obj%0A%0A   if countof {setAO} = 5 then%0A%0A      count = 5%0A%0A      loop%0A%0A         theInt = count + 5%0A         instAO = create Assoc_Obj with idAO = theInt%0A%0A         count = count - 1%0A         breakif count = 0%0A%0A      endloop%0A%0A      {setAO} = find-all Assoc_Obj%0A%0A      if countof {setAO} = 10 then%0A  %0A         count = 5%0A%0A         loop%0A%0A            theInt = count + 5%0A            instAO = create Assoc_Obj with idAO = theInt%0A   %0A            count = count - 1%0A            breakif count = 0%0A%0A         endloop%0A%0A         {setAO} = find-all Assoc_Obj%0A%0A         if countof {setAO} = 15 then%0A%0A            [] = RPT2:Test_Passed["objAO"%2C Local_Test%2C 0]%0A%0A         else%0A%0A            [] = RPT3:Test_Failed["objAO"%2C Local_Test%2C -10]%0A%0A         endif%0A%0A      else%0A%0A         [] = RPT3:Test_Failed["objAO"%2C Local_Test%2C -20]%0A%0A      endif%0A%0A   else%0A%0A      [] = RPT3:Test_Failed["objAO"%2C Local_Test%2C -30]%0A%0A   endif%0A%0A%0A#------------------------------------------------------------------------#%0A# Test 12%0A#------------------------------------------------------------------------#%0A%0A   [Local_Test] = Find_and_Sets1::Increment[Local_Test]%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1103-0000-01-0543"%2C "Find and Sets"%2C "objFM"%2C"Find All in service"]%0A%0A%0A      count = 0%0A%0A      loop%0A%0A         theInt = 100 + count%0A         instAO = create Assoc_Obj with idAO = theInt%0A %0A         count = count + 1%0A         breakif count = 5%0A%0A      endloop%0A%0A      [noInst] = Find_and_Sets6::FindAllTest[]%0A      [noInst] = Find_and_Sets6::FindAllTest[]%0A      [noInst] = Find_and_Sets6::FindAllTest[]%0A%0A      if noInst = 20 then%0A         [] = RPT2:Test_Passed["objAO"%2C Local_Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["objAO"%2C Local_Test%2C noInst]%0A      endif%0A%0A   {setToDel} = find Object_A where idA >= 100%0A   delete {setToDel}%0A%0A%0A%0A%0A%0A%0A#------------------------------------------------------------------------#%0A# Test 13 - find-all%2C inclusive expressions%2C%0A#------------------------------------------------------------------------#%0A%0A   [Local_Test] = Find_and_Sets1::Increment[Local_Test]%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1103-0000-01-0541"%2C "Find and Sets"%2C "objFM"%2C "inclusive and conditions"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-1210"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-0124"]%0A%0A   Has_Failed = FALSE%0A%0A   {setA} = find Object_A where idA > 1 & idA < 4%0A%0A   countof_set_A = countof{setA}%0A%0A   if countof_set_A = 2 then%0A      [] = RPT2:Test_Passed["objFM"%2C Local_Test%2C countof_set_A]%0A   else%0A      [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C countof_set_A]%0A   endif%0A%0A# End Test 9%0A%0A#------------------------------------------------------------------------#%0A# Local_Test 10 - find-all%2C inclusive expressions%2C%0A#------------------------------------------------------------------------#%0A%0A   [Local_Test] = Find_and_Sets1::Increment[Local_Test]%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1103-0000-01-0541"%2C "Find and Sets"%2C "objFM"%2C "inclusive or conditions"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-1210"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-0124"]%0A%0A   Has_Failed = FALSE%0A%0A   {setA} = find Object_A where idA > 1 | idA < 4%0A%0A   countof_set_A = countof{setA}%0A%0A   if countof_set_A = 10 then%0A      [] = RPT2:Test_Passed["objFM"%2C Local_Test%2C countof_set_A]%0A   else%0A      [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C countof_set_A]%0A   endif%0A%0A# End Test 10%0A%0A#------------------------------------------------------------------------#%0A# Local_Test 11 - find-all%2C exclusive expressions%2C no instances returned %0A#------------------------------------------------------------------------#%0A%0A   [Local_Test] = Find_and_Sets1::Increment[Local_Test]%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1103-0000-01-0541"%2C "Find and Sets"%2C "objFM"%2C "exclusive and conditions"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-1210"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-0124"]%0A%0A   Has_Failed = FALSE%0A%0A   {setA} = find Object_A where idA > 4 & idA < 2%0A%0A   countof_set_A = countof{setA}%0A%0A   if countof_set_A = 0 then%0A      [] = RPT2:Test_Passed["objFM"%2C Local_Test%2C countof_set_A]%0A   else%0A      [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C countof_set_A]%0A   endif%0A%0A# End Test 11%0A%0A#------------------------------------------------------------------------#%0A# Local_Test 12 - find-all%2C ordered conditions%0A#------------------------------------------------------------------------#%0A%0A   [Local_Test] = Find_and_Sets1::Increment[Local_Test]%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1103-0000-01-0541"%2C "Find and Sets"%2C "objFM"%2C"ordered conditions"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-1210"]%0A   [] = RPT8:Specify_Requid [Local_Test%2C "1241-0000-01-0124"]%0A%0A   Has_Failed = FALSE%0A%0A   {setA} = find Object_A where idA = 2 | idA > 4%0A%0A   countof_set_A = countof{setA}%0A%0A   if countof_set_A = 7 then%0A      [] = RPT2:Test_Passed["objFM"%2C Local_Test%2C countof_set_A]%0A   else%0A      [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C countof_set_A]%0A   endif%0A%0A# End Test 12%0A%0A#------------------------------------------------------------------------#%0A# Local_Test 13 - Check that there is no limit on the number of instances%0A#                 a set variable can hold.%0A#------------------------------------------------------------------------#%0A%0A   [Local_Test] = Find_and_Sets1::Increment[Local_Test]%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1241-0000-01-0125"%2C "Find and Sets"%2C "objFM"%2C"ordered conditions"]%0A   [] = RPT8:Specify_Requid[Local_Test%2C "1241-0000-01-0119"]%0A   [] = RPT8:Specify_Requid[Local_Test%2C "1241-0000-01-0122"]%0A   [] = RPT8:Specify_Requid[Local_Test%2C "1241-0000-01-0126"]%0A%0A   [] = RPT5:Test_Text [Local_Test%2C "More instances than ever required"]%0A%0A   # Create LOTS of instances of Object_B%0A   Cnt = 1000000%0A%0A   loop%0A%0A      NewInstB = create Object_B with idB = Cnt%0A      Cnt = Cnt + 1%0A      breakif Cnt = 2000000%0A%0A   endloop%0A%0A   {setOfNewInstB} = find Object_B where idB >= 1000000%0A%0A   NoInSet = countof{setOfNewInstB}%0A%0A   if NoInSet = 1000000 then%0A      [] = RPT2:Test_Passed["objFM"%2C Local_Test%2C NoInSet]%0A   else%0A      [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C NoInSet]%0A   endif   %0A%0A# End Test 13%0A%0A#------------------------------------------------------------------------#%0A# Local_Test 14 - Create LOTS more instance for a couple of other objetcs%0A#                 and make sure that all instances can be found.%0A#------------------------------------------------------------------------#%0A  %0A   [Local_Test] = Find_and_Sets1::Increment[Local_Test]%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1241-0000-01-0125"%2C "Find and Sets"%2C "objFM"%2C"ordered conditions"]%0A   [] = RPT8:Specify_Requid[Local_Test%2C "1241-0000-01-0119"]%0A   [] = RPT8:Specify_Requid[Local_Test%2C "1241-0000-01-0122"]%0A   [] = RPT8:Specify_Requid[Local_Test%2C "1241-0000-01-0126"]%0A%0A   [] = RPT5:Test_Text [Local_Test%2C "More instances than ever required"]%0A%0A   # Create LOTS of instances of Object_A%0A   Cnt = 0%0A%0A   loop%0A%0A      NewInstA = create Object_A with IntegerA = Cnt &\%0A                                      idA      = 100%0A      Cnt = Cnt + 1%0A      breakif Cnt = 100000%0A%0A   endloop%0A%0A   # Create LOTS of instances of Object_E%0A   Cnt = 0%0A%0A   loop%0A%0A      NewInstE = create Object_E with IntegerA = Cnt &\%0A                                      idE      = 100%0A      Cnt = Cnt + 1%0A      breakif Cnt = 100000%0A%0A   endloop%0A%0A   {setOfNewInstB} = find Object_B where idB >= 1000000%0A   {setOfNewInstA} = find Object_A where idA = 100%0A   {setOfNewInstE} = find Object_E where idE = 100%0A%0A   NoInSetA = countof{setOfNewInstA}%0A   NoInSetB = countof{setOfNewInstB}%0A   NoInSetE = countof{setOfNewInstE}%0A%0A   if NoInSetA = 100000 then%0A%0A      if NoInSetB = 1000000 then%0A%0A         if NoInSetE = 100000 then%0A            [] = RPT2:Test_Passed["objFM"%2C Local_Test%2C NoInSetE]%0A         else%0A            [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C NoInSetE]%0A         endif   %0A%0A      else%0A         [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C NoInSetB]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["objFM"%2C Local_Test%2C NoInSetA]%0A   endif%0A%0A   delete {setOfNewInstB}%0A   delete {setOfNewInstA}%0A   delete {setOfNewInstE}%0A%0A# End Test 14%0A%0A#------------------------------------------------------------------------#%0A# Local_Test 15 - find%0A#------------------------------------------------------------------------#%0A%0A   [Local_Test] = Find_and_Sets1::Increment[Local_Test]%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1103-0000-01-0542"%2C "Find and Sets"%2C "objFM"%2C"Find without where"]%0A%0A   [] = RPT5:Test_Text[Local_Test%2C "Find without Where is unsupported"]%0A   [] = RPT4:Test_Unsupported[Local_Test]%0A%0A# End Test 14%0A%0A#------------------------------------------------------------------------#%0AReturned_Number = Local_Test%0A#------------------------------------------------------------------------#%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
event,Fault,,1,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
event,,,,,,,,
event,Start,,3,,,,,
event,,,,,,,,
description, This object verifies the statements:%0A %0A 	find%0A 	find-all%0A,,,,,,,
object,,,,,,,,
object,Find_Set,objFS,12,,,,,
attribute,idFS,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultFS,,,idFS,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicate that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
operation,Find_and_Sets,Find_Set,public,do_find_set,,,1,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,an_instanceFS,in,,,,,,
typeref,instance of Find_Set,,,,,,,
typeref,,,,,,,,
parameter,Returned_Number,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,Test = Test_Number%0A%0A#------------------------------------------------------------------------#%0A# Find on sets of instance handles%0A#------------------------------------------------------------------------#%0A%0A# Create an initial set to perform the tests upon%0A%0A{setA} = find Object_A where idA > 5%0A%0A#------------------------------------------------------------------------#%0A# Test 1 - find-one%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Find and Sets"%2C "objFS"%2C "find one on set"]%0A%0Ahas_failed = FALSE%0A%0A#Perform the test%0A%0A# an_instanceA = find-one {setA}%0A%0A#Check the an instance is returned%0A%0A# if an_instanceA = UNDEFINED then%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A# else%0A%0A%0A#   if an_instanceA.idA < 6 then%0A%0A#      [] = RPT3:Test_Failed["objFS"%2C Test%2C-1]%0A#      has_failed = TRUE%0A#   else%0A#      temp = an_instanceFS.ResultFS + 10%0A#      an_instanceFS.ResultFS = temp%0A#      [] = RPT2:Test_Passed["objFS"%2C Test%2Ctemp]%0A%0A#   endif%0A%0A# endif%0A%0A#------------------------------------------------------------------------#%0A# Test 2 - find-one where%0A#------------------------------------------------------------------------#%0A%0A   [Test] = Find_and_Sets1::Increment[Test]%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Find and Sets"%2C "objFS"%2C "find one  on set where"]%0A%0A   has_failed = FALSE%0A%0A   # Perform the test%0A%0A   # an_instanceA = find-one {setA} where idA > 8%0A%0A   # Check the an instance is returned%0A   # if an_instanceA = UNDEFINED then%0A        [] = RPT4:Test_Unsupported[Test]%0A   # else%0A%0A   #   if an_instanceA.idA < 9 then%0A   #      [] = RPT3:Test_Failed["objFS"%2C Test%2C-2]%0A   #      has_failed = TRUE%0A   #   else%0A   #      temp = an_instanceFS.ResultFS + 10%0A   #      an_instanceFS.ResultFS = temp%0A   #      [] = RPT2:Test_Passed["objFS"%2C Test%2Ctemp]%0A   #   endif%0A%0A   # endif%0A#------------------------------------------------------------------------#%0A# Test 3 - find-only%0A#------------------------------------------------------------------------#%0A%0A   [Test] = Find_and_Sets1::Increment[Test]%0A %0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Find and Sets"%2C "objFS"%2C "find  on set only"]%0A%0A   has_failed = FALSE%0A%0A   # Perform the test%0A%0A   # an_instanceA = find-only {setA} where idA = 6%0A%0A   # Check the an instance is returned%0A   # if an_instanceA = UNDEFINED then%0A      [] = RPT4:Test_Unsupported[Test]%0A   # else%0A%0A   #   if an_instanceA.idA != 6 then%0A   #      [] = RPT3:Test_Failed["objFS"%2C Test%2C-3]%0A   #      has_failed = TRUE%0A   #   else%0A   #      temp = an_instanceFS.ResultFS + 10%0A   #      an_instanceFS.ResultFS = temp%0A   #      [] = RPT2:Test_Passed["objFS"%2C Test%2Ctemp]%0A   #   endif%0A%0A   # endif%0A%0A#------------------------------------------------------------------------#%0A# Test 4 - find where%2C using a single condition%0A#------------------------------------------------------------------------#%0A%0A   [Test] = Find_and_Sets1::Increment[Test]%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Find and Sets"%2C "objFS"%2C"find on set where single condition"]%0A%0A   has_failed = FALSE%0A%0A   # Perform the test%0A%0A   # {subsetA} = find {setA} where idA > 7%0A%0A   # Check that the set contains some instances and that it contains the%0A   # correct instances%0A%0A   # if countof {subsetA} = 0 then%0A      [] = RPT4:Test_Unsupported[Test]%0A   # else%0A%0A   #   if countof {subsetA} != 3 then%0A   #      [] = RPT3:Test_Failed["objFS"%2C Test%2C-4]%0A   #      has_failed = TRUE%0A   #   else%0A%0A          # Check each instance that is returned%0A          # countA = 0%0A          #      countB = 0%0A          #      countC = 0%0A%0A          #      for each_instanceA in {subsetA} do%0A#         if each_instanceA.idA = 8 then%0A#            countA = countA + 1%0A#         else%0A#            if each_instanceA.idA = 9 then%0A#               countB = countB + 1%0A#            else%0A#               if each_instanceA.idA = 10 then%0A#                  countC = countC + 1%0A#               else%0A%0A#                  [] = RPT3:Test_Failed["objFS"%2C Test%2C-5]%0A#                  has_failed = TRUE%0A%0A#               endif%0A#            endif%0A#         endif%0A#      endfor%0A%0A      #Check counter values%0A#      if (countA != 1)|(countB != 1)|(countC != 1) then%0A#         [] = RPT3:Test_Failed["objFS"%2C Test%2C-6]%0A#         has_failed = TRUE%0A#      else%0A#         temp = an_instanceFS.ResultFS + 10%0A#         an_instanceFS.ResultFS = temp%0A#      endif%0A%0A#      if !has_failed then%0A#         [] = RPT2:Test_Passed["objFS"%2C Test%2C0]%0A#      endif%0A#%0A#   endif%0A%0A#endif%0A%0A#------------------------------------------------------------------------#%0A#Test 5%0A#find where%2C using multiple conditions%0A#------------------------------------------------------------------------#%0A%0A[Test] = Find_and_Sets1::Increment[Test]%0A[] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Find and Sets"%2C "objFS"%2C"find on set where multiple conditions"]%0A%0Ahas_failed = FALSE%0A%0A#Perform the test%0A# {subsetA} = find {setA} where idA > 8 | idA = 4 | idA = 6%0A%0A# if countof {subsetA} = 0 then%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A# else%0A%0A%0A   #Check that the set contains some instances and that it contains the%0A   #correct instances%0A#   if countof {subsetA} != 3 then%0A#      [] = RPT3:Test_Failed["objFS"%2C Test%2C-7]%0A#      has_failed = TRUE%0A#   else%0A%0A      #Check each instance that is returned%0A#      countA = 0%0A#      countB = 0%0A#      countC = 0%0A#      for each_instanceA in {subsetA} do%0A#         if each_instanceA.idA = 6 then%0A#            countA = countA + 1%0A#         else%0A#            if each_instanceA.idA = 9 then%0A#               countB = countB + 1%0A#            else%0A#               if each_instanceA.idA = 10 then%0A#                  countC = countC + 1%0A#               else%0A#                  [] = RPT3:Test_Failed["objFS"%2C Test%2C-8]%0A#                  has_failed = TRUE%0A#               endif%0A#            endif%0A#         endif%0A#      endfor%0A%0A      #Check counter values%0A#      if (countA != 1)|(countB != 1)|(countC != 1) then%0A#         [] = RPT3:Test_Failed["objFS"%2C Test%2C-9]%0A#         has_failed = TRUE%0A#      else%0A#         temp = an_instanceFS.ResultFS + 10%0A#         an_instanceFS.ResultFS = temp%0A#      endif%0A%0A#      if !has_failed then%0A#         [] = RPT2:Test_Passed["objFS"%2C Test%2C0]%0A#      endif%0A%0A#   endif%0A%0A# endif%0A%0A%0A#------------------------------------------------------------------------#%0A%0A%0A%0AReturned_Test = Test,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
event,Fault,,1,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
event,,,,,,,,
event,Start,,3,,,,,
event,,,,,,,,
description, This object verifies that the following statements maybe peroformed on an existing set:%0A %0A 	find-one%0A 	find-only%0A 	find%0A 	find-all%0A,,,,,,,
object,,,,,,,,
object,Find_Single,objFSI,10,,,,,
attribute,idFSI,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultFSI,,,idFSI,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicate that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
operation,Find_and_Sets,Find_Single,public,do_find_one,,,1,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,an_instanceFSI,in,,,,,,
typeref,instance of Find_Single,,,,,,,
typeref,,,,,,,,
parameter,Returned_Number,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# Find-one%0A#------------------------------------------------------------------------#%0A%0ATest_Number = Test%0A%0A#------------------------------------------------------------------------#%0A# Test 1 - FIND-ONE%2C no instance is returned%0A#          The object to which the 'FIND' is being performed contains no %0A#          instances%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test [Test_Number%2C "1103-0000-01-0544"%2C "Find and Sets"%2C "objFSI find one"%2C "on no instances"]%0A   [] = RPT8:Specify_Requid [Test_Number%2C "1241-0000-01-1206"]%0A%0A   # Perform the test%0A   an_instanceB = find-one Object_B%0A%0A   # Check that no instance is returned%0A   if an_instanceB != UNDEFINED then%0A      [] = RPT3:Test_Failed["objFSI find one"%2C Test_Number%2C-1]%0A   else%0A%0A      if an_instanceFSI = UNDEFINED then%0A         [] = RPT3:Test_Failed["objFSI"%2C Test_Number%2C -2]%0A      else%0A         temp = an_instanceFSI.ResultFSI + 10%0A         an_instanceFSI.ResultFSI = temp%0A         [] = RPT2:Test_Passed["objFSI find one"%2C Test_Number%2C temp]%0A      endif%0A%0A   endif%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A# Test 2 - FIND-ONE WHERE%2C no instance is returned%0A#          The object to which the 'FIND' is being performed contains no %0A#          instances%0A#------------------------------------------------------------------------#%0A%0A   [Test_Number] = Find_and_Sets1::Increment[Test_Number]%0A%0A   [] = RPT1:Start_Test [Test_Number%2C "1103-0000-01-0545"%2C "Find and Sets"%2C "objFSI find one"%2C "on no instances"]%0A   [] = RPT8:Specify_Requid [Test_Number%2C "1241-0000-01-1207"]%0A%0A   # Perform the test%0A   an_instanceB = find-one Object_B where idB = 1%0A%0A   # Check that no instance is returned%0A   if an_instanceB != UNDEFINED then%0A      [] = RPT3:Test_Failed["objFSI find one"%2C Test_Number%2C-3]%0A   else%0A%0A      if an_instanceFSI = UNDEFINED then%0A         [] = RPT3:Test_Failed["objFSI"%2C Test_Number%2C -4]%0A      else%0A         temp = an_instanceFSI.ResultFSI + 10%0A         an_instanceFSI.ResultFSI = temp%0A         [] = RPT2:Test_Passed["objFSI find one"%2C Test_Number%2Ctemp]%0A      endif%0A%0A   endif%0A%0A# End Test 2%0A%0A#------------------------------------------------------------------------#%0A# Test 3 - FIND-ONE WHERE <single condition>%2C no instance returned%0A#------------------------------------------------------------------------#%0A%0A   [Test_Number] = Find_and_Sets1::Increment[Test_Number]%0A%0A   [] = RPT1:Start_Test [Test_Number%2C "1103-0000-01-0545"%2C "Find and Sets"%2C "objFSI find one"%2C "on no instances"]%0A   [] = RPT8:Specify_Requid [Test_Number%2C "1241-0000-01-1207"]%0A%0A   # Perform the test%0A   an_instanceA = find-one Object_A where IntegerA = 666%0A%0A   # Check that no instance is returned%0A   if an_instanceA != UNDEFINED then%0A      [] = RPT3:Test_Failed["objFSI find one"%2C Test_Number%2C-3]%0A   else%0A      temp = an_instanceFSI.ResultFSI + 10%0A      an_instanceFSI.ResultFSI = temp%0A      [] = RPT2:Test_Passed["objFSI find one"%2C Test_Number%2C temp]%0A   endif%0A%0A# End Test 3%0A%0A#------------------------------------------------------------------------#%0A# Test 4 - FIND-ONE WHERE <multiple conditions>%2C no instance returned%0A#------------------------------------------------------------------------#%0A%0A   [Test_Number] = Find_and_Sets1::Increment[Test_Number]%0A%0A   [] = RPT1:Start_Test [Test_Number%2C "1103-0000-01-0545"%2C "Find and Sets"%2C "objFSI find one"%2C "on no instances"]%0A   [] = RPT8:Specify_Requid [Test_Number%2C "1241-0000-01-1207"]%0A%0A   # Perform the test%0A   an_instanceA = find-one Object_A where IntegerA = 666 & idA = 1%0A%0A   # Check that no instance is returned%0A   if an_instanceA != UNDEFINED then%0A      [] = RPT3:Test_Failed["objFSI find one"%2C Test_Number%2C -4]%0A   else%0A      temp = an_instanceFSI.ResultFSI + 10%0A      an_instanceFSI.ResultFSI = temp%0A      [] = RPT2:Test_Passed["objFSI find one"%2C Test_Number%2C temp]%0A   endif%0A%0A# End Test 4%0A%0A#------------------------------------------------------------------------#%0A# Test 5 - FIND-ONE%2C an instance is returned%0A#------------------------------------------------------------------------#%0A%0A   [Test_Number] = Find_and_Sets1::Increment[Test_Number]%0A%0A   [] = RPT1:Start_Test [Test_Number%2C "1103-0000-01-0544"%2C "Find and Sets"%2C "objFSI find one"%2C "one instance"]%0A   [] = RPT8:Specify_Requid [Test_Number%2C "1241-0000-01-1206"]%0A%0A   # Perform the test%0A   an_instanceA = find-one Object_A%0A%0A   # Check that an instance is returned%0A   if an_instanceA = UNDEFINED then%0A      [] = RPT3:Test_Failed["objFSI find one"%2C Test_Number%2C -5]%0A   else%0A      temp = an_instanceFSI.ResultFSI + 10%0A      an_instanceFSI.ResultFSI = temp%0A      [] = RPT2:Test_Passed["objFSI find one"%2C Test_Number%2C temp]%0A   endif%0A%0A# End Test 5%0A%0A#------------------------------------------------------------------------#%0A# Test 6 - FIND-ONE WHERE <single condition>%2C an instance is returned%0A#------------------------------------------------------------------------#%0A%0A   [Test_Number] = Find_and_Sets1::Increment[Test_Number]%0A%0A   [] = RPT1:Start_Test [Test_Number%2C "1103-0000-01-0545"%2C "Find and Sets"%2C "objFSI find one"%2C "one instance"]%0A   [] = RPT8:Specify_Requid [Test_Number%2C "1241-0000-01-1207"]%0A%0A   # Perform the test%0A   an_instanceA = find-one Object_A where idA = 1%0A%0A   # Check that an instance is returned%0A   if (an_instanceA != UNDEFINED)then%0A%0A      if (an_instanceA.idA != 1) then%0A         [] = RPT3:Test_Failed["objFSI find one"%2C Test_Number%2C -6]%0A      else%0A         temp = an_instanceFSI.ResultFSI + 10%0A         an_instanceFSI.ResultFSI = temp%0A         [] = RPT2:Test_Passed["objFSI find one"%2C Test_Number%2C temp]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["objFSI find one"%2C Test_Number%2C -7]%0A   endif%0A%0A# End Test 6%0A%0A#------------------------------------------------------------------------#%0A# Test 7 - FIND-ONE WHERE <both conditions are fulfilled>%2C an instance is %0A#          returned%0A#------------------------------------------------------------------------#%0A%0A   [Test_Number] = Find_and_Sets1::Increment[Test_Number]%0A%0A   [] = RPT1:Start_Test [Test_Number%2C "1103-0000-01-0545"%2C "Find and Sets"%2C "objFSI find one"%2C "one instance"]%0A   [] = RPT8:Specify_Requid [Test_Number%2C "1241-0000-01-1207"]%0A%0A   # Perform the test%0A   an_instanceA = find-one Object_A where idA = 1 | idA = 2%0A%0A   # Check that an instance is returned%0A   if (an_instanceA != UNDEFINED)then%0A%0A      if (an_instanceA.idA > 2) then%0A         [] = RPT3:Test_Failed["objFSI find one"%2C Test_Number%2C -8]%0A      else%0A         temp = an_instanceFSI.ResultFSI + 10%0A         an_instanceFSI.ResultFSI = temp%0A         [] = RPT2:Test_Passed["objFSI find one"%2C Test_Number%2C temp]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["objFSI find one"%2C Test_Number%2C -9]%0A   endif%0A%0A# End Test 7%0A%0A#------------------------------------------------------------------------#%0A# Test 8 - FIND-ONE WHERE <only one conditions fulfilled>%2C an instance is %0A#          returned%0A#------------------------------------------------------------------------#%0A%0A   [Test_Number] = Find_and_Sets1::Increment[Test_Number]%0A%0A   [] = RPT1:Start_Test [Test_Number%2C "1103-0000-01-0545"%2C "Find and Sets"%2C "objFSI find one"%2C "one instance"]%0A   [] = RPT8:Specify_Requid [Test_Number%2C "1241-0000-01-1207"]%0A%0A   # Perform the test%0A   an_instanceA = find-one Object_A where idA = 3 | idA = 666%0A%0A   # Check that an instance is returned%0A   if (an_instanceA != UNDEFINED)then%0A%0A      if(an_instanceA.idA != 3) then%0A         [] = RPT3:Test_Failed["objFSI find one"%2C Test_Number%2C -10]%0A      else%0A         temp = an_instanceFSI.ResultFSI + 10%0A         an_instanceFSI.ResultFSI = temp%0A         [] = RPT2:Test_Passed["objFSI find one"%2C Test_Number%2C temp]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["objFSI find one"%2C Test_Number%2C -11]%0A   endif%0A%0A# End Test 8%0A%0A#------------------------------------------------------------------------#%0A%0AReturned_Number = Test_Number,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Find_and_Sets,Find_Single,public,do_find_only,,,2,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,an_instanceFSI,in,,,,,,
typeref,instance of Find_Single,,,,,,,
typeref,,,,,,,,
parameter,Returned_Number,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# Find-only%0A#------------------------------------------------------------------------#%0A%0A[Host] = WAW1:What_Env[]%0ATest = Test_Number%0A%0A#------------------------------------------------------------------------#%0A# Test 1 - FIND-ONLY return the first instance of Object A found%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0546"%2C "Find and Sets"%2C "objFSI find only"%2C"Return first inst with find-only"]%0A   [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1208"]%0A%0A   Has_Failed = FALSE%0A%0A   # Perform the test%0A%0A   if Host = "ISIM" then%0A      [] = RPT4:Test_Unsupported[Test]%0A   else%0A      an_instanceA = find-only Object_A%0A%0A      # Check that an instance is returned%0A      if (an_instanceA = UNDEFINED) then%0A         [] = RPT3:Test_Failed["objFSI find only"%2C Test%2C-4]%0A         Has_Failed = TRUE%0A      else%0A         temp = an_instanceFSI.ResultFSI + 10%0A         an_instanceFSI.ResultFSI = temp%0A         [] = RPT2:Test_Passed["objFSI find only"%2C Test%2Ctemp]%0A      endif%0A%0A   endif%0A%0A# End Test 1%0A%0A%0A#------------------------------------------------------------------------#%0A# Test 2 - FIND-ONLY WHERE <single condition>%2C an instance is returned%0A#------------------------------------------------------------------------#%0A%0A   [Test] = Find_and_Sets1::Increment[Test]%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0547"%2C "Find and Sets"%2C "objFSI find only"%2C"a condition an instance ret"]%0A   [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1209"]%0A%0A   Has_Failed = FALSE%0A%0A   # Perform the test%0A   an_instanceA = find-only Object_A where idA = 4%0A%0A   # Check that an instance is returned%0A   if (an_instanceA = UNDEFINED)|(an_instanceA.idA != 4)then%0A      [] = RPT3:Test_Failed["objFSI find only"%2C Test%2C-1]%0A      Has_Failed = TRUE%0A   else%0A%0A      if an_instanceFSI = UNDEFINED then%0A         Has_Failed = TRUE%0A         [] = RPT3:Test_Failed["objFSI"%2C Test%2C -2]%0A      else%0A         temp = an_instanceFSI.ResultFSI + 10%0A         an_instanceFSI.ResultFSI = temp%0A         [] = RPT2:Test_Passed["objFSI find only"%2C Test%2Ctemp]%0A      endif%0A%0A   endif%0A%0A# End Test 2%0A%0A#------------------------------------------------------------------------#%0A# Test 3 -  FIND-ONLY WHERE <only one condition fulfilled>%2C an instance %0A#           is returned%0A#------------------------------------------------------------------------#%0A%0A   [Test] = Find_and_Sets1::Increment[Test]%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0547"%2C "Find and Sets"%2C "objFSI find only"%2C"a condition an instance ret"]%0A   [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1209"]%0A%0A   Has_Failed = FALSE%0A%0A   # Perform the test%0A   an_instanceA = find-only Object_A where IntegerA = 666 | idA = 5%0A%0A   # Check that an instance is returned%0A   if (an_instanceA = UNDEFINED)|(an_instanceA.idA != 5) then%0A      [] = RPT3:Test_Failed["objFSI find only"%2C Test%2C-2]%0A      Has_Failed = TRUE%0A   else%0A      temp = an_instanceFSI.ResultFSI + 10%0A      an_instanceFSI.ResultFSI = temp%0A      [] = RPT2:Test_Passed["objFSI find only"%2C Test%2Ctemp]%0A   endif%0A%0A# End Test 3%0A%0A#------------------------------------------------------------------------#%0A# Test 4 - FIND-ONLY WHERE <multiple conditions fulfilled>%2C an instance %0A#          is returned%0A#------------------------------------------------------------------------#%0A%0A   [Test] = Find_and_Sets1::Increment[Test]%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0547"%2C "Find and Sets"%2C "objFSI find only"%2C"mult conditions 1 instance ret"]%0A   [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-1209"]%0A%0A   Has_Failed = FALSE%0A%0A   # Perform the test%0A   an_instanceA = find-only Object_A where IntegerA = 6 | idA = 6%0A%0A   # Check that an instance is returned%0A   if (an_instanceA = UNDEFINED)|(an_instanceA.idA != 6) then%0A      [] = RPT3:Test_Failed["objFSI find only"%2C Test%2C-3]%0A      Has_Failed = TRUE%0A   else%0A      temp = an_instanceFSI.ResultFSI + 10%0A      an_instanceFSI.ResultFSI = temp%0A      [] = RPT2:Test_Passed["objFSI find only"%2C Test%2Ctemp]%0A   endif%0A%0A# End Test 4%0A%0A#------------------------------------------------------------------------#%0A%0AReturned_Number = Test,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
event,Fault,,1,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
event,,,,,,,,
event,StartA,,3,,,,,
event,,,,,,,,
event,StartB,,4,,,,,
event,,,,,,,,
description, This object verifies the statements:%0A %0A 	find-one%0A 	find-only%0A,,,,,,,
object,,,,,,,,
object,Left_Obj,objLO,3,,,,,
attribute,objLO_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Object_A,objA,15,,,,,
attribute,idA,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,IntegerA,,,idA,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, An integer.%0A,,,,,,,
attribute,,,,,,,,
description, This object contains data that is manipulated by other objects.%0A,,,,,,,
object,,,,,,,,
object,Object_B,objB,16,,,,,
attribute,idB,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
description, Object_B contains no instances and hence any operations performed upon it will return an empty set are an undefined instance handle.%0A,,,,,,,
object,,,,,,,,
object,Object_E,objE,19,,,,,
attribute,idE,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,IntegerA,,,idE,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, An integer.%0A,,,,,,,
attribute,,,,,,,,
attribute,IntegerB,,,IntegerA,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, An integer.%0A,,,,,,,
attribute,,,,,,,,
description, This object contains data that is manipulated by other objects.%0A,,,,,,,
object,,,,,,,,
object,Report_Data,RD,2,,,,,
attribute,Report_Data_Unique_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Reported_Domain_Number,,,Report_Data_Unique_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Right_Obj,objRO,4,,,,,
attribute,objRO_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
pragma,version,,,,,,,
pragmaitem,15,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Tests finds and set manipulations.%0A,,,,,,,
domain,,,,,,,,
