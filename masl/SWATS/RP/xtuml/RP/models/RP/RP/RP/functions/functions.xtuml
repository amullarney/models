-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("8bfe8730-fb62-48fc-80a1-3100065ac9b7",
	"00000000-0000-0000-0000-000000000000",
	"4c08e6c8-a624-4053-85ee-05a06862b6c7",
	'functions',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("b9d7ff7e-5b26-43bd-a6f3-4b65ee1ebc93",
	112,
	"8bfe8730-fb62-48fc-80a1-3100065ac9b7",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'RP::RP::RP::functions');
INSERT INTO DIM_DIA
	VALUES ("b9d7ff7e-5b26-43bd-a6f3-4b65ee1ebc93",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("e010ad75-7fa8-4cf4-b8dc-c0de9fe5efe6",
	"00000000-0000-0000-0000-000000000000",
	'Test_Passed',
	' Same function as domain based synch service.
',
	'Invoking_Domain_Number = Passed_Domain_Number

the_test = Passed_Test_Number

the_val  = Passed_Test_Result_Value

the_domain = Passed_Domain

[] = DD1:A_Test_Has_Passed[the_test, Invoking_Domain_Number, the_val, the_domain]

$INLINE
fprintf(stderr, "Test Number %d %s has PASSED with  %d\n",
        the_test, the_domain, the_val);
$ENDINLINE


# $ADA_INLINE
# with Ada.Text_IO;
#
# 
# -- Ada.Text_IO.Put_Line("Object " & the_domain & 
# --                     " Test Number " & integer''image(integer(the_test)) & 
# --                     " has PASSED with " & integer''image(integer(the_val)));
#
# $END_ADAINLINE


',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	1);
INSERT INTO S_SPARM
	VALUES ("e1782f2c-3ee1-4e28-9cf7-22c5d418d26a",
	"e010ad75-7fa8-4cf4-b8dc-c0de9fe5efe6",
	'Passed_Domain',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("511f4f42-c90f-4d51-880b-ad773951448d",
	"e010ad75-7fa8-4cf4-b8dc-c0de9fe5efe6",
	'Passed_Test_Number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"e1782f2c-3ee1-4e28-9cf7-22c5d418d26a",
	'');
INSERT INTO S_SPARM
	VALUES ("c153d225-4e57-4a54-812e-86db0e63c525",
	"e010ad75-7fa8-4cf4-b8dc-c0de9fe5efe6",
	'Passed_Test_Result_Value',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"511f4f42-c90f-4d51-880b-ad773951448d",
	'');
INSERT INTO S_SPARM
	VALUES ("033a06df-5005-41bd-80a4-f16e7fc66077",
	"e010ad75-7fa8-4cf4-b8dc-c0de9fe5efe6",
	'Passed_Domain_Number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"c153d225-4e57-4a54-812e-86db0e63c525",
	'');
INSERT INTO PE_PE
	VALUES ("e010ad75-7fa8-4cf4-b8dc-c0de9fe5efe6",
	1,
	"8bfe8730-fb62-48fc-80a1-3100065ac9b7",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b16bb49e-368f-4830-97e1-ee3e6679cd4c",
	"00000000-0000-0000-0000-000000000000",
	'Test_Failed',
	'',
	'the_test = the_test_no
the_val = the_test_value

the_domain = Failed_Domain

the_domain_number = Failed_Domain_Number

[] = DD2:A_Test_Has_Failed[the_test, the_domain_number, the_val, the_domain]

$INLINE
fprintf(stderr, "Test Number %d has **** FAILED **** with %d\n",
        the_test, the_val);
$ENDINLINE

#$ADA_INLINE
# with Ada.Text_IO;
#
# -- Ada.Text_IO.New_Line(1);
# -- Ada.Text_IO.Put_Line("Object " & the_domain & 
# --                    " Test Number " & integer''image(integer(the_test)) & 
# --                    " has **** FAILED **** with " & integer''image(integer(the_val)));
# -- Ada.Text_IO.New_Line(1);
#$END_ADAINLINE




',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	2);
INSERT INTO S_SPARM
	VALUES ("018bae50-93a0-4fa6-846c-801841cfdfb3",
	"b16bb49e-368f-4830-97e1-ee3e6679cd4c",
	'Failed_Domain',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7c6ef977-3639-4bba-ac8d-23395cc7cab0",
	"b16bb49e-368f-4830-97e1-ee3e6679cd4c",
	'the_test_no',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"018bae50-93a0-4fa6-846c-801841cfdfb3",
	'');
INSERT INTO S_SPARM
	VALUES ("5fa92253-5ccb-4b9e-9b1d-6fcd7dcc45a3",
	"b16bb49e-368f-4830-97e1-ee3e6679cd4c",
	'the_test_value',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"7c6ef977-3639-4bba-ac8d-23395cc7cab0",
	'');
INSERT INTO S_SPARM
	VALUES ("72c24cce-b4b9-4d44-b8de-ccf9398c5683",
	"b16bb49e-368f-4830-97e1-ee3e6679cd4c",
	'Failed_Domain_Number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"5fa92253-5ccb-4b9e-9b1d-6fcd7dcc45a3",
	'');
INSERT INTO PE_PE
	VALUES ("b16bb49e-368f-4830-97e1-ee3e6679cd4c",
	1,
	"8bfe8730-fb62-48fc-80a1-3100065ac9b7",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("87d2721c-bba7-4bd8-9672-3582a1ad7fe3",
	"00000000-0000-0000-0000-000000000000",
	'Test_Unsupported',
	'',
	'the_test = Unsupported_Test_Number

the_domain = Unsupported_Domain_Number

[] = DD3:A_Test_Is_Unsupported[the_test, the_domain]

$INLINE
fprintf(stderr, "Test Number %d is UNSUPPORTED\n",
        the_test);
$ENDINLINE


#$ADA_INLINE
# with Ada.Text_IO;
#
# 
# -- Ada.Text_IO.Put_Line("Test Number " & integer''image(integer(the_test)) & 
# --                     " is UNSUPPORTED");
#
#$END_ADAINLINE



',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	3);
INSERT INTO S_SPARM
	VALUES ("aa7926d3-539a-418f-8238-fbe545b1af3d",
	"87d2721c-bba7-4bd8-9672-3582a1ad7fe3",
	'Unsupported_Test_Number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("379d1749-d21c-48b6-bf2c-036a8c54b6db",
	"87d2721c-bba7-4bd8-9672-3582a1ad7fe3",
	'Unsupported_Domain_Number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"aa7926d3-539a-418f-8238-fbe545b1af3d",
	'');
INSERT INTO PE_PE
	VALUES ("87d2721c-bba7-4bd8-9672-3582a1ad7fe3",
	1,
	"8bfe8730-fb62-48fc-80a1-3100065ac9b7",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bf8d4763-7c75-4b55-8bc5-e97d3ae1e365",
	"00000000-0000-0000-0000-000000000000",
	'Test_Description',
	'',
	'#match_found = FALSE

the_domain = Write_Invoker_Domain_Name

the_test_number = Write_Test_Number

the_purpose = Write_Test_Purpose

the_object = Write_Object

the_requid = Write_Requid

the_domain_number = Write_Invoker_Domain_Number

The_Domain_Details = find-one Domain_Details where Domain_Number = the_domain_number


Found_The_Test_Details = FALSE

if The_Domain_Details != UNDEFINED then
  
   # Have we already got this Test Details?

   {Set_Of_Already_Reported_Test_Details} = The_Domain_Details -> R8.Test_Details

   for Each_Known_Test_Detail in {Set_Of_Already_Reported_Test_Details} do

      if Each_Known_Test_Detail.The_Test_No = the_test_number then

         Found_The_Test_Details = TRUE

         # Got another test details for this test
         [] = RP9::Test_Anomalous_Behaviour[the_test_number, "Duplicated test details received"]

      endif

   endfor


   # Haven''t already got this one
   if Found_The_Test_Details = FALSE then


      The_Test_Details = create Test_Details with \
          Test_Purpose  = the_purpose &\
          Tested_Object = the_object  &\
          The_Test_No   = the_test_number &\
          Result_Found  = FALSE

      # Create new requirement identifier for test object and link it.

      New_Requid_For_Test = create Requirement_Identifier_For_Test with requid = the_requid

      link The_Domain_Details R8 The_Test_Details

      link The_Test_Details R7 New_Requid_For_Test

      # Stash the requirement identifier so it can be checked off against the specified
      # requirements for this test run.

      [] = RP10::Specify_Requid[the_domain_number, the_test_number, the_requid]


      $INLINE
       fprintf(stderr, " \n");
       fprintf(stderr,"***************************************************************************\n");
       fprintf(stderr, "Test Number           : %d\n", the_test_number);
       fprintf(stderr, "Requirment identifier : %s\n", the_requid);
       fprintf(stderr, "Domain                : %s\n", the_domain);
       fprintf(stderr, "Invoker object        : %s\n", the_object);
       fprintf(stderr, "Testing for           : %s\n", the_purpose);
       fprintf(stderr, " \n");
      $ENDINLINE

   endif

else

   # Got another test details for this test
   [] = RP7::Report_Run_Time_Error["No domain details reported"]

endif',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	4);
INSERT INTO S_SPARM
	VALUES ("eacfd93c-9ac9-4009-b2bc-66acc79a74e0",
	"bf8d4763-7c75-4b55-8bc5-e97d3ae1e365",
	'Write_Test_Number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f4961618-580d-45fe-abba-1cee005b0a0e",
	"bf8d4763-7c75-4b55-8bc5-e97d3ae1e365",
	'Write_Requid',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"eacfd93c-9ac9-4009-b2bc-66acc79a74e0",
	'');
INSERT INTO S_SPARM
	VALUES ("f447466a-dd3f-4505-97e3-8807f33a91e3",
	"bf8d4763-7c75-4b55-8bc5-e97d3ae1e365",
	'Write_Invoker_Domain_Name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f4961618-580d-45fe-abba-1cee005b0a0e",
	'');
INSERT INTO S_SPARM
	VALUES ("75f2e50c-51d6-44e8-aa35-d0ecd5d05a10",
	"bf8d4763-7c75-4b55-8bc5-e97d3ae1e365",
	'Write_Object',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f447466a-dd3f-4505-97e3-8807f33a91e3",
	'');
INSERT INTO S_SPARM
	VALUES ("704d62f5-1ea9-48d2-aea6-7a98db2a21c5",
	"bf8d4763-7c75-4b55-8bc5-e97d3ae1e365",
	'Write_Test_Purpose',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"75f2e50c-51d6-44e8-aa35-d0ecd5d05a10",
	'');
INSERT INTO S_SPARM
	VALUES ("a30369ba-b817-45f7-9d84-6fdd7c21fb4a",
	"bf8d4763-7c75-4b55-8bc5-e97d3ae1e365",
	'Write_Invoker_Domain_Number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"704d62f5-1ea9-48d2-aea6-7a98db2a21c5",
	'');
INSERT INTO PE_PE
	VALUES ("bf8d4763-7c75-4b55-8bc5-e97d3ae1e365",
	1,
	"8bfe8730-fb62-48fc-80a1-3100065ac9b7",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bc911a1e-85d3-44bd-a726-e494659ab995",
	"00000000-0000-0000-0000-000000000000",
	'Test_Text',
	' Free form description for a test
',
	'the_test_number = Text_Test_Number
the_text        = Free_Text

This_Domain = find-one Domain_Details where Domain_Number = Domain_No

$INLINE
fprintf(stderr, " \n");
fprintf(stderr, "TEXT NOTE\n");
fprintf(stderr, "Test Number %d  %s\n", the_test_number, the_text);
fprintf(stderr, " \n");
$ENDINLINE

#$ADA_INLINE
# with Ada.Text_IO;
#
# -- Ada.Text_IO.New_Line(1);
# -- Ada.Text_IO.Put_Line("TEXT NOTE");
# -- Ada.Text_IO.Put_Line("Test Number "  & integer''image(integer(the_test_number)) );
# -- Ada.Text_IO.Put("  "  & the_text);
# -- Ada.Text_IO.New_Line(1);
#
#$END_ADAINLINE


{Matching_Test_Details_Set} = This_Domain -> R8.Test_Details
for The_Test in {Matching_Test_Details_Set} do
    breakif The_Test.The_Test_No = Domain_No
endfor

if The_Test != UNDEFINED then

   The_Domain_Details = The_Test -> R8.Domain_Details

   if The_Domain_Details != UNDEFINED then

      The_Supporting_Comment = create Supporting_Comments with Comment_ID  = Domain_No &\
                                                               The_Comment = the_text  &\
                                                               The_Test_No = the_test_number

         link The_Supporting_Comment R9 The_Domain_Details

   else
      [] = RP9::Test_Anomalous_Behaviour[Domain_No, "Domain and Test unlinked"]
   endif

else
   [] = RP9::Test_Anomalous_Behaviour[Domain_No, "Received a comment for unknown test"]
endif
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	5);
INSERT INTO S_SPARM
	VALUES ("e9b55e6c-0f6e-475a-ab2b-a5eb1769ebf9",
	"bc911a1e-85d3-44bd-a726-e494659ab995",
	'Domain_No',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("bbcf25f6-e335-4055-8889-d7feefb0f4ab",
	"bc911a1e-85d3-44bd-a726-e494659ab995",
	'Text_Test_Number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"e9b55e6c-0f6e-475a-ab2b-a5eb1769ebf9",
	'');
INSERT INTO S_SPARM
	VALUES ("3dedc47a-9bd8-400d-8a7d-fcd050750b32",
	"bc911a1e-85d3-44bd-a726-e494659ab995",
	'Free_Text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"bbcf25f6-e335-4055-8889-d7feefb0f4ab",
	'');
INSERT INTO PE_PE
	VALUES ("bc911a1e-85d3-44bd-a726-e494659ab995",
	1,
	"8bfe8730-fb62-48fc-80a1-3100065ac9b7",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("40ca858d-3e60-40dd-af6e-3a34d815700a",
	"00000000-0000-0000-0000-000000000000",
	'Create_New_Domain_Test',
	' This service shall create a unique object for reporting a test pass or fail.
 It shall report its'' own unique identifer to the invoking domain, returned via the bridge. This is so that the reporting domain can specify which object to report into. There can be more than one object in existance at any one time. THis is due to the way the event queue is asynchronous, and service invocations are sysnchronous.
 
',
	'
# Create new domain test

new_domain_test = create unique Domain_Details with \
   Domain_Name               = Invoker_Domain_Name &\
   Last_Reported_Test_Number = 0 &\
   Current_State             = ''Idle''

new_pass = create A_Test_That_Passed with \
    Passed_Counter = 0

new_fail = create A_Test_That_Failed with \
   Failed_Counter = 0

new_unsupported = create A_Test_That_Is_Unsupported with \
   Unsupported_Counter = 0

new_duplicated = create Duplicated_Result with \ 
   Duplicated_Test_Count = 0


# if the Test Suite object has been created, link it to this domain details
The_Test_Suite = find-one Test_Suite

if The_Test_Suite != UNDEFINED then
   link new_domain_test R10 The_Test_Suite 
endif

link new_domain_test R1 new_pass
link new_domain_test R2 new_fail
link new_domain_test R3 new_unsupported
link new_domain_test R4 new_duplicated


Unique_ID = new_domain_test.Domain_Number


Domain_Unique_Identifier = Unique_ID',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	6);
INSERT INTO S_SPARM
	VALUES ("441968ac-1820-4cb8-8a8f-6860e63ce60d",
	"40ca858d-3e60-40dd-af6e-3a34d815700a",
	'Invoker_Domain_Name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1aedc421-26c9-4066-98e3-0479a7ba91e1",
	"40ca858d-3e60-40dd-af6e-3a34d815700a",
	'Domain_Unique_Identifier',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'',
	"441968ac-1820-4cb8-8a8f-6860e63ce60d",
	'');
INSERT INTO PE_PE
	VALUES ("40ca858d-3e60-40dd-af6e-3a34d815700a",
	1,
	"8bfe8730-fb62-48fc-80a1-3100065ac9b7",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f4a68d01-8285-4f7e-bccf-1bf8509054b8",
	"00000000-0000-0000-0000-000000000000",
	'Report_Run_Time_Error',
	'',
	'the_detail = Detail



$INLINE
 fprintf(stderr, "\n");
 fprintf(stderr,"======================= RUN TIME ERROR ENCOUNTERED =======================\n");
 fprintf(stderr, "\n");
 fprintf(stderr, "Report : %s\n", the_detail);
 fprintf(stderr, " \n");
 fprintf(stderr,"======================= ************************** =======================\n");
 fprintf(stderr, "\n");
$ENDINLINE


#$ADA_INLINE
# with Ada.Text_IO;
# Ada.Text_IO.New_Line(1);
# Ada.Text_IO.Put_Line("======================= RUN TIME ERROR ENCOUNTERED =======================");
# Ada.Text_IO.New_Line(1);
# Ada.Text_IO.Put_Line("Report : "  & the_detail );
# Ada.Text_IO.New_Line(1);
# Ada.Text_IO.Put_Line("======================= ************************** =======================");
# Ada.Text_IO.New_Line(1);

#$END_ADAINLINE

',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	7);
INSERT INTO S_SPARM
	VALUES ("c960bac5-dade-4976-832b-ee4852fb6dfb",
	"f4a68d01-8285-4f7e-bccf-1bf8509054b8",
	'Detail',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("f4a68d01-8285-4f7e-bccf-1bf8509054b8",
	1,
	"8bfe8730-fb62-48fc-80a1-3100065ac9b7",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7945d23f-293b-423e-a338-b753bbc0a471",
	"00000000-0000-0000-0000-000000000000",
	'Domain_Tests_Have_Finished',
	'',
	'#Find the only domain currently in existence.

The_Domain_Details = find-one Domain_Details where Domain_Number = Domain_Identifer

if The_Domain_Details != UNDEFINED then

   if The_Domain_Details.Domain_Name = Completed_Domain_Name then

      generate DD1:Tests_Have_Finished() to The_Domain_Details

   else

      [] = RP7::Report_Run_Time_Error["Mismatched domains to report from"]


   endif


else

   [] = RP7::Report_Run_Time_Error["No domain found to report from"]

endif
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	8);
INSERT INTO S_SPARM
	VALUES ("6b6da0f7-a6cf-4b84-b15a-9d2b21975442",
	"7945d23f-293b-423e-a338-b753bbc0a471",
	'Completed_Domain_Name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("36aaa261-8073-4bc9-812a-ad1cf88e50f0",
	"7945d23f-293b-423e-a338-b753bbc0a471",
	'Domain_Identifer',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"6b6da0f7-a6cf-4b84-b15a-9d2b21975442",
	'');
INSERT INTO PE_PE
	VALUES ("7945d23f-293b-423e-a338-b753bbc0a471",
	1,
	"8bfe8730-fb62-48fc-80a1-3100065ac9b7",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0c1caceb-22bf-4ffe-ada7-08cf12ad0cfa",
	"00000000-0000-0000-0000-000000000000",
	'Test_Anomalous_Behaviour',
	'',
	'the_detail = Anomalous_Detail
the_test_number = Anomalous_Test_Number


$INLINE
 fprintf(stderr, "\n");
 fprintf(stderr,"ANOMALOUS BEHAVIOUR DETECTED \n");
 fprintf(stderr, "\n");
 fprintf(stderr, "Test Number %d Report : %s\n", the_test_number, the_detail );
 fprintf(stderr, " \n");
 fprintf(stderr,"**************************** \n");
 fprintf(stderr, "\n");
$ENDINLINE



# with Ada.Text_IO;
# Ada.Text_IO.New_Line(1);
# Ada.Text_IO.Put_Line("ANOMALOUS BEHAVIOUR DETECTED");
# Ada.Text_IO.New_Line(1);
# Ada.Text_IO.Put_Line("Test Number " & integer''image(integer(the_test_number)) & " Report : "  & the_detail );
# Ada.Text_IO.New_Line(1);
# Ada.Text_IO.Put_Line("****************************");
# Ada.Text_IO.New_Line(1);



',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	9);
INSERT INTO S_SPARM
	VALUES ("1ea64b4e-6579-4cbf-9eb4-417863c0142d",
	"0c1caceb-22bf-4ffe-ada7-08cf12ad0cfa",
	'Anomalous_Test_Number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("506a42fb-a5bd-4aaa-8e4f-631d600e0839",
	"0c1caceb-22bf-4ffe-ada7-08cf12ad0cfa",
	'Anomalous_Detail',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"1ea64b4e-6579-4cbf-9eb4-417863c0142d",
	'');
INSERT INTO PE_PE
	VALUES ("0c1caceb-22bf-4ffe-ada7-08cf12ad0cfa",
	1,
	"8bfe8730-fb62-48fc-80a1-3100065ac9b7",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4e672d92-7431-4454-a8ed-361c906a2e7d",
	"00000000-0000-0000-0000-000000000000",
	'Specify_Requid',
	' This service shall allow the calling domain specify a requirement identifier for a given domain and test.
',
	'# The Action for this domain synchronous service is simple.
# It requires that a test is already defined, i.e. start test has already been 
# sent.  Having established this, link in the new requirement identifier
# for that test. There can be many requids associated with a given test.

This_Domain = find-one Domain_Details where Domain_Number = Requid_Domain_Number

#The_Test = find-one Test_Details where Domain_Number = Requid_Domain_Number &\
#                                       The_Test_No   = Requid_Test_Number

{Matching_Test_Details_Set} = This_Domain -> R8.Test_Details
for The_Test in {Matching_Test_Details_Set} do
    breakif The_Test.The_Test_No = Requid_Test_Number
endfor


if The_Test != UNDEFINED then

   The_Domain_Details = The_Test -> R8.Domain_Details

   if The_Domain_Details != UNDEFINED then

      Requid_Domain_Name = The_Domain_Details.Domain_Name


      # ''tick off'' the requid against the listed requids through Test_Suite
      # and Requirements objects.

      Match = FALSE

      The_Test_Suite = find-one Test_Suite

      if The_Test_Suite != UNDEFINED then

         # Grab all the known requirments in this test run
         {Set_Of_Specified_Requids} = The_Test_Suite -> R11.All_Requirements_In_Test_Suite

         for A_Requirement in {Set_Of_Specified_Requids} do

            # If we find what we are looking for, update the test status
            if A_Requirement.REQUID = Requid_Identifier then

               # This is the first test in the test run to meet this requirement.
               # There may well be more.
               if A_Requirement.Requid_Test_Status = ''Not_Tested'' then

                  A_Requirement.Requid_Test_Status = ''Tested''

               endif

               # This requirement has already been met, but that is not to say
               # that this current tests doesn''t also meet the requirement.

               # Create a new instance of the requirment met object and link it
               # via a 1:M relationship to the All_Reqs. object

               new_requid_met = create unique Requirement_Met
        
               new_requid_met.Domain_Number       = Requid_Domain_Number
               new_requid_met.Domain_Name         = Requid_Domain_Name
               new_requid_met.Meeting_Test_Number = Requid_Test_Number
               new_requid_met.Requid_Test_Result  = ''Unknown''

               link new_requid_met R12 A_Requirement

               Match = TRUE

               #Found the requid
               break

            endif

         endfor

         if !Match then
            [] = RP7::Report_Run_Time_Error["Requirement identifier not specified for this run"] 
         endif

      endif

   else

      [] = RP9::Test_Anomalous_Behaviour[Requid_Test_Number, "Domain and Test unlinked"]

   endif

else

   [] = RP9::Test_Anomalous_Behaviour[Requid_Test_Number, "Received a requid for unknown test"]


endif
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	10);
INSERT INTO S_SPARM
	VALUES ("ef7adbfa-2ae6-46f9-b4f3-edb9fee78d4c",
	"4e672d92-7431-4454-a8ed-361c906a2e7d",
	'Requid_Domain_Number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("622d9051-3727-4d40-bb22-7e62d941a78f",
	"4e672d92-7431-4454-a8ed-361c906a2e7d",
	'Requid_Test_Number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"ef7adbfa-2ae6-46f9-b4f3-edb9fee78d4c",
	'');
INSERT INTO S_SPARM
	VALUES ("53c3aa1b-0485-42f6-9ba1-7a71cc42b258",
	"4e672d92-7431-4454-a8ed-361c906a2e7d",
	'Requid_Identifier',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"622d9051-3727-4d40-bb22-7e62d941a78f",
	'');
INSERT INTO PE_PE
	VALUES ("4e672d92-7431-4454-a8ed-361c906a2e7d",
	1,
	"8bfe8730-fb62-48fc-80a1-3100065ac9b7",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d2f20af9-6d2c-402c-9ecb-1ea645c5a056",
	"00000000-0000-0000-0000-000000000000",
	'Add_All_Requids',
	'',
	'# The idea here is that a new requid shall be for the full test suite, however
# many domains make it up.

# When a start test for a domain is received, it shall be compared against the 
# list of requirements for the full test suite.

# In this way all specified requirements for a test suite can be ''checked off''
# against the known list.

# This service allows the specification of a requirement for the test suite.

this_suite = find-one Test_Suite

if this_suite != UNDEFINED then

   new_requirement = create unique All_Requirements_In_Test_Suite with REQUID = New_Requid

   link this_suite R11 new_requirement

   $INLINE
   fprintf(stderr,"Adding the following requirement   %s\n", New_Requid);
   $ENDINLINE

endif',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	12);
INSERT INTO S_SPARM
	VALUES ("5cf1925e-7a35-4c9a-81f4-c1d3d9e22fb8",
	"d2f20af9-6d2c-402c-9ecb-1ea645c5a056",
	'New_Requid',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("d2f20af9-6d2c-402c-9ecb-1ea645c5a056",
	1,
	"8bfe8730-fb62-48fc-80a1-3100065ac9b7",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ca89eddc-5e44-4852-90ef-0cd9dffd836c",
	"00000000-0000-0000-0000-000000000000",
	'Requirement_Tracker',
	'',
	'Requid_Tracker = find-one Test_Suite

if Requid_Tracker != UNDEFINED then


   {The_Match} = find Requirement_Met where Domain_Number = Updated_Domain_ID &\
      Meeting_Test_Number = Updated_Test_Number

   if countof{The_Match} != 0 then

      for each_match in {The_Match} do

         if each_match.Requid_Test_Result = ''Unknown'' then

            each_match.Requid_Test_Result = Updated_Result

         else

            [] = RP7::Report_Run_Time_Error["Requirement already reported for this domain and test"]

         endif 
      endfor

 
#   The_Match = find-one Requirement_Met where Domain_Number = Updated_Domain_ID &\
#      Meeting_Test_Number = Updated_Test_Number

#   if The_Match != UNDEFINED then

#      if The_Match.Requid_Test_Result = ''Unknown'' then

#         The_Match.Requid_Test_Result = Updated_Result

#      else

#         [] = RP7::Report_Run_Time_Error["Requirement already reported for this domain and test"]

#      endif   

# Temporarily ignore this for the moment. Reinstate it later.
#   else
#      [] = RP7::Report_Run_Time_Error["Can''t find the matching requirement"]

   endif   



#else

   # If it is not here, then we are not tracking requirements in this
   # This is not an error condition, so ignore.



endif',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	13);
INSERT INTO S_SPARM
	VALUES ("1dc52700-69de-4f53-bca9-954a8e9d4c82",
	"ca89eddc-5e44-4852-90ef-0cd9dffd836c",
	'Updated_Domain_ID',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("862e53bc-84a5-40b6-b093-811af4e340b0",
	"ca89eddc-5e44-4852-90ef-0cd9dffd836c",
	'Updated_Test_Number',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"1dc52700-69de-4f53-bca9-954a8e9d4c82",
	'');
INSERT INTO S_SPARM
	VALUES ("dfda5190-2cb7-4fe9-9429-35b62506f307",
	"ca89eddc-5e44-4852-90ef-0cd9dffd836c",
	'Updated_Result',
	"42cfeec5-1af0-407b-a567-d164fa00f153",
	0,
	'',
	"862e53bc-84a5-40b6-b093-811af4e340b0",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("42cfeec5-1af0-407b-a567-d164fa00f153",
	"00000000-0000-0000-0000-000000000000",
	'Result_Type',
	'',
	'',
	'../../Shared/Shared.xtuml');
INSERT INTO PE_PE
	VALUES ("ca89eddc-5e44-4852-90ef-0cd9dffd836c",
	1,
	"8bfe8730-fb62-48fc-80a1-3100065ac9b7",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bda9bbba-82f0-438b-9953-b6d007534aac",
	"00000000-0000-0000-0000-000000000000",
	'Perform_Req_Analysis',
	'',
	'
$INLINE
fprintf(stderr,"Captured requirements analysis started\n");
$ENDINLINE

#$ADA_INLINE
#
#   with Test_Suite_Text_IO;
#
#   Test_Suite_Text_IO.Dump_String(Value => "Captured requirements analysis started");
#
#$END_ADAINLINE

The_Test_Suite = find-one Test_Suite

if The_Test_Suite != UNDEFINED then

   generate TS3:Go() to The_Test_Suite

else

   [] = RP7::Report_Run_Time_Error["Requirements capture not enabled, analysis impossible"]

endif',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	11);
INSERT INTO PE_PE
	VALUES ("bda9bbba-82f0-438b-9953-b6d007534aac",
	1,
	"8bfe8730-fb62-48fc-80a1-3100065ac9b7",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("8bfe8730-fb62-48fc-80a1-3100065ac9b7",
	1,
	"00000000-0000-0000-0000-000000000000",
	"b3b60ab3-8df9-44d5-bc0c-b383b509d633",
	7);
INSERT INTO C_C_PROXY
	VALUES ("b3b60ab3-8df9-44d5-bc0c-b383b509d633",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	'RP',
	' Consistent reports of test results
',
	0,
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Report',
	'../RP.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("4c08e6c8-a624-4053-85ee-05a06862b6c7",
	'RP',
	1,
	'../../../RP.xtuml');
