domain,RP,Report,,,,,,
object,All_Requirements_In_Test_Suite,,,,,,,
object,,,,,,,,
object,A_Test_That_Failed,,,,,,,
object,,,,,,,,
object,A_Test_That_Is_Unsupported,,,,,,,
object,,,,,,,,
object,A_Test_That_Passed,,,,,,,
object,,,,,,,,
object,Domain_Details,,,,,,,
object,,,,,,,,
object,Duplicated_Result,,,,,,,
object,,,,,,,,
object,Requirement_Identifier_For_Test,,,,,,,
object,,,,,,,,
object,Requirement_Met,,,,,,,
object,,,,,,,,
object,Results_Of_Tests,,,,,,,
object,,,,,,,,
object,Supporting_Comments,,,,,,,
object,,,,,,,,
object,Test_Details,,,,,,,
object,,,,,,,,
object,Test_Suite,,,,,,,
object,,,,,,,,
type,Requid_Status_Type,private,,,,,,
enumeration,Requid_Status_Type,,,,,,,
enumerator,Not_Tested,,,,,,,
enumerator,,,,,,,,
enumerator,Tested,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
type,,,,,,,,
type,Unsupported_Tests_Record_Type,private,,,,,,
structure,Unsupported_Tests_Record_Type,,,,,,,
member,Unsupported_By,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
member,Testing_For,,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
structure,,,,,,,,
type,,,,,,,,
type,Duplicated_Tests_Record_Type,private,,,,,,
structure,Duplicated_Tests_Record_Type,,,,,,,
member,Duplicated_Test_Number,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
member,Duplicated_Test_Count,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
structure,,,,,,,,
type,,,,,,,,
type,Failed_Tests_Record_Type,private,,,,,,
structure,Failed_Tests_Record_Type,,,,,,,
member,Failed_Test_Number,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
structure,,,,,,,,
description, Contains a record of all the failed test numbers.%0A,,,,,,,
type,,,,,,,,
type,Test_Result_Value_Type,private,integer,,,,,
description, Integer value indicating test result value%0A,,,,,,,
type,,,,,,,,
type,Invoker_Domain_Type,private,string,,,,,
description, Enumeration defineing the name of the invoking domain for the reporter domain.%0A,,,,,,,
type,,,,,,,,
type,Test_Result_Type,private,string,,,,,
description, Indication of the result%2C pass%2C fail or unsupported.%0A,,,,,,,
type,,,,,,,,
type,Test_Number_Type,private,integer,,,,,
description, Number of the test. Number must be greater than zero.%0A,,,,,,,
type,,,,,,,,
type,Result_Type,public,,,,,,
enumeration,Result_Type,,,,,,,
enumerator,Passed,,,,,,,
enumerator,,,,,,,,
enumerator,Failed,,,,,,,
enumerator,,,,,,,,
enumerator,Unsupported,,,,,,,
enumerator,,,,,,,,
enumerator,Unknown,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
type,,,,,,,,
routine,RP,,private,Start_Requirements_Capture,1,,,
codeblock,# Start testing. Call this only once for a test run. Otherwise..%0A# %0A%0A$INLINE%0Afprintf(stderr%2C"Requirements capture enabled\n");%0A$ENDINLINE%0A%0A#$ADA_INLINE%0A#%0A#   with Test_Suite_Text_IO;%0A#%0A#   Test_Suite_Text_IO.Dump_String(Value => "Requirements capture enabled");%0A#%0A#$END_ADAINLINE%0A%0A%0A# There can be only one (sounds like a film...)%0AExists = find-one Test_Suite%0A%0Aif Exists = UNDEFINED then%0A%0A   This_Test_Suite = create unique Test_Suite with Current_State = 'Idle'%0A%0Aelse%0A%0A   # In the middle of a run. Allow to continue%2C but without the %0A   # requirements traceability.%0A%0A   #Remove all links%0A%0A   {Requirements} = Exists ->R11.All_Requirements_In_Test_Suite%0A%0A   for requirement in {Requirements} do%0A%0A      # Go from the requirement to the test results that fulfill the requirement%0A      {Tests} = requirement -> R12.Requirement_Met%0A%0A      for test in {Tests} do%0A%0A         unlink requirement R12 test%0A%0A         delete test%0A%0A      endfor%0A%0A%0A      unlink Exists R11 requirement%0A%0A      delete requirement%0A%0A   endfor%0A%0A   {Domains} = Exists -> R10.Domain_Details%0A%0A   for domain in {Domains} do%0A%0A      unlink domain R10 Exists%0A%0A      # Don't delete the domain%2C let the test run finish%2C %0A      # but without traceability.%0A%0A   endfor%0A%0A   delete Exists%0A%0A   [] = RP7::Report_Run_Time_Error["Test Suite already running. Traceability Lost"]%0A%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,1,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Start Requirements Capture%0A,,,,,,,
routine,,,,,,,,
routine,RP,,private,Enable_Screen_Display,2,,,
codeblock,%0A$INLINE%0A   fprintf(stderr%2C"Turn screen display ON in ADA mode");%0A$ENDINLINE%0A%0A# Turn on screen reporting in an ada run.%0A%0A#$ADA_INLINE%0A#%0A#   with Test_Suite_Text_IO;%0A#%0A#   Test_Suite_Text_IO.Set_Output(Output_Is_On => TRUE);%0A#   Test_Suite_Text_IO.Dump_String(Value => "Writing to screen enabled.");%0A#%0A#$END_ADAINLINE%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,2,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Enable_Screen_Display%0A,,,,,,,
routine,,,,,,,,
routine,RP,,private,Disable_Screen_Display,3,,,
codeblock,$INLINE%0A   fprintf(stderr%2C"Turn screen display OFF in ADA mode");%0A$ENDINLINE%0A%0A# Turn off screen reporting in an ada run.%0A%0A#$ADA_INLINE%0A#%0A#   with Test_Suite_Text_IO;%0A#%0A#   Test_Suite_Text_IO.Dump_String(Value => "Writing to screen disabled.");%0A#   Test_Suite_Text_IO.Set_Output(Output_Is_On => FALSE);%0A#%0A#$END_ADAINLINE%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,3,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Disable_Screen_Display%0A,,,,,,,
routine,,,,,,,,
routine,RP,,private,Perform_Captured_Requirements_Analysis,4,,,
codeblock,%0A$INLINE%0Afprintf(stderr%2C"Captured requirements analysis started\n");%0A$ENDINLINE%0A%0A#$ADA_INLINE%0A#%0A#   with Test_Suite_Text_IO;%0A#%0A#   Test_Suite_Text_IO.Dump_String(Value => "Captured requirements analysis started");%0A#%0A#$END_ADAINLINE%0A%0AThe_Test_Suite = find-one Test_Suite%0A%0Aif The_Test_Suite != UNDEFINED then%0A%0A   generate TS3:Go() to The_Test_Suite%0A%0Aelse%0A%0A   [] = RP7::Report_Run_Time_Error["Requirements capture not enabled%2C analysis impossible"]%0A%0Aendif,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,4,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Perform Captured Requirements Analysis%0A,,,,,,,
routine,,,,,,,,
routine,RP,,private,Add_1241_Requirements,5,,,
codeblock,# Catch-all empty requirement tags. Should be ultimately replaced%0A# when requids are inserted into every individual test.%0A%0A[] = RP12::Add_All_Requids["Null Requid"]%0A%0A# Functional Requirements from document SR UR 1241%0A%0A# Specific Requirements%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0101"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0102"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0103"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0104"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0105"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0106"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0107"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0108"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0109"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0110"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0111"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0112"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0113"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0114"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0115"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0116"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0117"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0118"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0119"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0120"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0121"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0122"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0123"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0124"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0125"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0126"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0127"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0128"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0129"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0130"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0131"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0132"]%0A%0A# Object State Models%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0201"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0202"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0203"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0204"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0205"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0206"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0207"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0208"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0209"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0210"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0211"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0212"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0213"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0214"]%0A%0A# Event Generation%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0301"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0302"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0303"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0304"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0305"]%0A%0A# Event Reception%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0401"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0402"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0403"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0404"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0405"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0406"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0407"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0408"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0409"]%0A%0A# Event Processing%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0501"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0502"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0503"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0504"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0505"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0506"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0507"]%0A%0A# Relationships%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0601"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0602"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0603"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0604"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0605"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0606"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0607"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0608"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0609"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0610"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0611"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0612"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0613"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0614"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0615"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0616"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0617"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0618"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0619"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0620"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0621"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0622"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0623"]%0A%0A# Relationship Navigation%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0701"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0702"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0703"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0704"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0705"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0706"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0707"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0708"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0709"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0710"]%0A%0A# Synchronous Services%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0801"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0802"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0803"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0804"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0805"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0806"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0807"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0808"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0809"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0810"]%0A%0A# Timers%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0901"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0902"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0903"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0904"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0905"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0906"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0907"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0908"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0909"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0910"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0911"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0912"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0913"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0914"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0915"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0916"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0917"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0918"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0919"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0920"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0921"]%0A%0A# Domains%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-1001"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1002"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1003"]%0A%0A# Bridge Services%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-1101"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1102"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1103"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1104"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1105"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1106"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1107"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1108"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1109"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1110"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1111"]%0A%0A# ASL Support%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-1201"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1202"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1203"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1204"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1205"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1206"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1207"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1208"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1209"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1210"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1211"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1212"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1213"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1214"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1215"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1216"]%0A%0A# Debugging%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-1301"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1302"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1303"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1304"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1305"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1306"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1307"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1308"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1309"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1310"],,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,5,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Add 1241 Requirements%0A,,,,,,,
routine,,,,,,,,
routine,RP,,private,Relationship_Requirements,6,,,
codeblock,# Catch-all empty requirement tags. Should be ultimately replaced%0A# when requids are inserted into every individual test.%0A%0A[] = RP12::Add_All_Requids["Null Requid"]%0A%0A[] = RP12::Add_All_Requids["1103-0000-01-0611"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0612"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0621"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0622"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0631"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0632"]%0A%0A# Functional Requirements from document SR UR 1241%0A[] = RP12::Add_All_Requids["1241-0000-01-0101"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0102"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0121"]%0A%0A# Relationships%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0601"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0602"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0603"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0604"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0605"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0606"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0607"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0608"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0609"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0610"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0611"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0612"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0613"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0614"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0615"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0616"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0617"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0618"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0619"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0620"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0621"]%0A%0A# Relationship Navigation%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0701"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0702"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0703"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0704"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0705"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0706"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0707"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0708"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0709"]%0A%0A# ASL Support%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-1202"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1203"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1204"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1205"],,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,6,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Relationship Requirements%0A,,,,,,,
routine,,,,,,,,
routine,RP,,private,Add_1103_Requirements,7,,,
codeblock,[] = RP12::Add_All_Requids["Null Requid"]%0A%0A[] = RP12::Add_All_Requids["1103-0000-01-0111"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0112"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0113"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0211"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0212"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0311"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0312"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0313"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0411"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0421"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0422"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0431"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0432"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0441"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0451"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0452"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0511"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0521"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0522"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0531"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0532"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0541"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0542"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0543"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0544"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0545"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0546"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0547"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0611"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0612"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0621"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0622"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0631"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0632"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0711"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0811"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0812"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0813"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0814"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0815"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0911"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0912"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0913"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1011"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1021"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1031"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1111"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1112"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1113"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1121"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1122"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1211"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1212"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1311"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1411"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1511"]%0A%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,7,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Add 1103 Requirements%0A,,,,,,,
routine,,,,,,,,
routine,RP,,private,Events_Requirements,8,,,
codeblock,# Catch-all empty requirement tags. Should be ultimately replaced%0A# when requids are inserted into every individual test.%0A%0A[] = RP12::Add_All_Requids["Null Requid"]%0A%0A# Functional Requirements from document SR UR 1241%0A%0A# Specific Requirements%0A%0A[] = RP12::Add_All_Requids["1103-0000-01-0711"]%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0103"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0104"]%0A# Object State Models%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0201"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0202"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0203"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0204"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0205"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0206"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0207"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0208"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0209"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0210"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0211"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0212"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0213"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0214"]%0A%0A# Event Generation%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0301"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0302"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0303"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0304"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0305"]%0A%0A# Event Reception%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0401"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0402"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0403"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0404"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0405"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0406"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0407"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0408"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0409"]%0A%0A# Event Processing%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0501"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0502"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0503"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0504"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0505"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0506"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0507"]%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,8,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Events_Requirements%0A,,,,,,,
routine,,,,,,,,
routine,RP,,private,Find_And_Sets_Requirements,9,,,
codeblock,[] = RP12::Add_All_Requids["Null Requid"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0119"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0122"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0124"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0125"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0126"]%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-1206"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1207"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1208"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1209"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1210"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1211"]%0A%0A[] = RP12::Add_All_Requids["1103-0000-01-0541"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0542"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0543"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0544"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0545"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0546"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0547"]%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,9,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Find_And_Sets_Requirements%0A,,,,,,,
routine,,,,,,,,
routine,RP,,private,ASL_Mapping_Requirements,10,,,
codeblock,[] = RP12::Add_All_Requids["Null Requid"]%0A%0A# Specific Requirements%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0105"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0106"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0107"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0108"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0110"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0114"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0115"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0131"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1201"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1213"]%0A%0A[] = RP12::Add_All_Requids["1103-0000-01-0311"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0312"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0313"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0411"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0421"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0422"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0431"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0432"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0441"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0451"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0452"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0511"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0521"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0522"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0531"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0541"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0543"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0544"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0545"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0547"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0811"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0812"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0813"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0814"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0815"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0911"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0912"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0913"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1111"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1211"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1212"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1511"]%0A%0A[] = RP12::Add_All_Requids["1101-0000-01-0108"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0109"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0110"],,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,10,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, ASL Mapping Requirements%0A,,,,,,,
routine,,,,,,,,
routine,RP,,private,Function_Calls_Requirements,11,,,
codeblock,[] = RP12::Add_All_Requids["Null Requid"]%0A%0A# Synchronous Services%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0801"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0802"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0803"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0804"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0805"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0806"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0807"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0808"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0809"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0810"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1215"]%0A%0A[] = RP12::Add_All_Requids["1103-0000-01-1011"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1021"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1031"]%0A%0A[] = RP12::Add_All_Requids["1101-0000-01-0138"],,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,11,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Function Calls Requirements%0A,,,,,,,
routine,,,,,,,,
routine,RP,,private,Multi_Domain_Bridges_Requirements,12,,,
codeblock,%0A[] = RP12::Add_All_Requids["Null Requid"]%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0810"]%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-1101"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1102"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1103"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1104"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1105"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1106"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1107"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1108"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1109"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1110"]%0A%0A[] = RP12::Add_All_Requids["1103-0000-01-1311"]%0A%0A[] = RP12::Add_All_Requids["1103-0000-01-1021"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1311"]%0A%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,12,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Multi Domain Bridges Requirements%0A,,,,,,,
routine,,,,,,,,
routine,RP,,private,Creation_Deletion_Requirements,13,,,
codeblock,[] = RP12::Add_All_Requids["Null Requid"]%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0101"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0102"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0109"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0116"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0117"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0118"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0120"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0121"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0123"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0203"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0206"]%0A%0A[] = RP12::Add_All_Requids["1103-0000-01-0311"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0511"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0521"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0522"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0531"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0532"]%0A%0A[] = RP12::Add_All_Requids["1101-0000-01-0118"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0122"]%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,13,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Creation Deletion Requirements%0A,,,,,,,
routine,,,,,,,,
routine,RP,,private,Timer_Requirements,14,,,
codeblock,[] = RP12::Add_All_Requids["Null Requid"]%0A%0A# Timers%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0901"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0902"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0903"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0904"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0905"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0906"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0907"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0908"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0909"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0910"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0911"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0912"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0913"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0914"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0915"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0916"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0917"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0918"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0919"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0920"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0921"]%0A%0A[] = RP12::Add_All_Requids["1103-0000-01-1111"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1112"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1113"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1121"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1122"],,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,14,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Timer Requirements%0A,,,,,,,
routine,,,,,,,,
routine,RP,,private,All_Requirements,15,,,
codeblock,# Catch-all empty requirement tags. Should be ultimately replaced%0A# when requids are inserted into every individual test.%0A%0A[] = RP12::Add_All_Requids["Null Requid"]%0A[] = RP12::Add_All_Requids["null requid"]%0A%0A# Functional Requirements from document SR UR 1241%0A%0A# Specific Requirements%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0101"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0102"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0103"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0104"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0105"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0106"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0107"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0108"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0109"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0110"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0111"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0112"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0113"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0114"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0115"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0116"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0117"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0118"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0119"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0120"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0121"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0122"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0123"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0124"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0125"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0126"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0127"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0128"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0129"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0130"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0131"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0132"]%0A%0A# Object State Models%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0201"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0202"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0203"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0204"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0205"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0206"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0207"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0208"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0209"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0210"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0211"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0212"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0213"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0214"]%0A%0A# Event Generation%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0301"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0302"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0303"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0304"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0305"]%0A%0A# Event Reception%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0401"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0402"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0403"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0404"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0405"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0406"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0407"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0408"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0409"]%0A%0A# Event Processing%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0501"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0502"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0503"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0504"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0505"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0506"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0507"]%0A%0A# Relationships%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0601"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0602"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0603"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0604"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0605"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0606"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0607"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0608"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0609"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0610"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0611"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0612"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0613"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0614"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0615"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0616"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0617"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0618"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0619"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0620"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0621"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0622"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0623"]%0A%0A# Relationship Navigation%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0701"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0702"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0703"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0704"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0705"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0706"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0707"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0708"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0709"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0710"]%0A%0A# Synchronous Services%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0801"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0802"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0803"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0804"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0805"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0806"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0807"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0808"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0809"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0810"]%0A%0A# Timers%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0901"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0902"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0903"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0904"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0905"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0906"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0907"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0908"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0909"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0910"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0911"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0912"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0913"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0914"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0915"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0916"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0917"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0918"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0919"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0920"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0921"]%0A%0A# Domains%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-1001"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1002"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1003"]%0A%0A# Bridge Services%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-1101"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1102"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1103"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1104"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1105"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1106"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1107"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1108"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1109"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1110"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1111"]%0A%0A# ASL Support%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-1201"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1202"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1203"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1204"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1205"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1206"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1207"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1208"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1209"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1210"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1211"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1212"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1213"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1214"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1215"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1216"]%0A%0A# Debugging%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-1301"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1302"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1303"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1304"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1305"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1306"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1307"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1308"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1309"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1310"]%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-1401"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1402"]%0A%0A[] = RP12::Add_All_Requids["1103-0000-01-0111"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0112"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0113"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0211"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0212"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0311"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0312"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0313"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0411"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0421"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0422"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0431"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0432"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0441"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0451"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0452"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0511"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0521"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0522"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0531"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0532"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0541"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0542"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0543"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0544"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0545"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0546"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0547"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0611"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0612"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0621"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0622"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0631"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0632"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0711"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0811"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0812"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0813"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0814"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0815"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0911"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0912"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0913"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1011"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1021"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1031"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1111"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1112"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1113"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1121"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1122"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1211"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1212"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1311"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1411"]%0A[] = RP12::Add_All_Requids["1103-0000-01-1511"]%0A%0A[] = RP12::Add_All_Requids["1101-0000-01-0108"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0109"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0110"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0112"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0117"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0118"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0121"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0122"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0123"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0127"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0128"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0129"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0138"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0139"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0140"],,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,15,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, All Requirements%0A,,,,,,,
routine,,,,,,,,
routine,RP,,private,UDT_Requirements,16,,,
codeblock,# Catch-all empty requirement tags. Should be ultimately replaced%0A# when requids are inserted into every individual test.%0A%0A[] = RP12::Add_All_Requids["Null Requid"]%0A%0A# Functional Requirements from document SR UR 1241%0A%0A# Specific Requirements%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0111"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0112"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0113"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1214"]%0A[] = RP12::Add_All_Requids["1103-0000-01-0311"]%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,16,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, UDT Requirements%0A,,,,,,,
routine,,,,,,,,
routine,RP,,private,Tagging_Requirements,17,,,
codeblock,[] = RP12::Add_All_Requids["Null Requid"]%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0127"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0128"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0129"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0130"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0132"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1111"]%0A%0A[] = RP12::Add_All_Requids["1101-0000-01-0112"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0123"],,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,17,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Tagging Requirements%0A,,,,,,,
routine,,,,,,,,
routine,RP,,private,Structure_Requirements,18,,,
codeblock,[] = RP12::Add_All_Requids["Null Requid"]%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-1212"]%0A[] = RP12::Add_All_Requids["1241-0000-01-1216"]%0A%0A[] = RP12::Add_All_Requids["1101-0000-01-0117"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0121"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0140"],,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,18,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Structure Requirements%0A,,,,,,,
routine,,,,,,,,
routine,RP,,private,Counterpart_Requirements,19,,,
codeblock,[] = RP12::Add_All_Requids["Null Requid"]%0A%0A[] = RP12::Add_All_Requids["1241-0000-01-0622"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0623"]%0A[] = RP12::Add_All_Requids["1241-0000-01-0710"]%0A%0A[] = RP12::Add_All_Requids["1101-0000-01-0127"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0128"]%0A[] = RP12::Add_All_Requids["1101-0000-01-0129"],,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,19,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Counterpart Requirements%0A,,,,,,,
routine,,,,,,,,
routine,RP,,public,Test_Passed,1,,,
parameter,Passed_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Passed_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Passed_Test_Result_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Passed_Domain_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,Invoking_Domain_Number = Passed_Domain_Number%0A%0Athe_test = Passed_Test_Number%0A%0Athe_val  = Passed_Test_Result_Value%0A%0Athe_domain = Passed_Domain%0A%0A[] = DD1:A_Test_Has_Passed[the_test%2C Invoking_Domain_Number%2C the_val%2C the_domain]%0A%0A$INLINE%0Afprintf(stderr%2C "Test Number %25d %25s has PASSED with  %25d\n"%2C%0A        the_test%2C the_domain%2C the_val);%0A$ENDINLINE%0A%0A%0A# $ADA_INLINE%0A# with Ada.Text_IO;%0A#%0A# %0A# -- Ada.Text_IO.Put_Line("Object " & the_domain & %0A# --                     " Test Number " & integer'image(integer(the_test)) & %0A# --                     " has PASSED with " & integer'image(integer(the_val)));%0A#%0A# $END_ADAINLINE%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
description, Same function as domain based synch service.%0A,,,,,,,
routine,,,,,,,,
routine,RP,,public,Test_Failed,2,,,
parameter,Failed_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,the_test_no,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,the_test_value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Failed_Domain_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,the_test = the_test_no%0Athe_val = the_test_value%0A%0Athe_domain = Failed_Domain%0A%0Athe_domain_number = Failed_Domain_Number%0A%0A[] = DD2:A_Test_Has_Failed[the_test%2C the_domain_number%2C the_val%2C the_domain]%0A%0A$INLINE%0Afprintf(stderr%2C "Test Number %25d has **** FAILED **** with %25d\n"%2C%0A        the_test%2C the_val);%0A$ENDINLINE%0A%0A#$ADA_INLINE%0A# with Ada.Text_IO;%0A#%0A# -- Ada.Text_IO.New_Line(1);%0A# -- Ada.Text_IO.Put_Line("Object " & the_domain & %0A# --                    " Test Number " & integer'image(integer(the_test)) & %0A# --                    " has **** FAILED **** with " & integer'image(integer(the_val)));%0A# -- Ada.Text_IO.New_Line(1);%0A#$END_ADAINLINE%0A%0A%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,RP,,public,Test_Unsupported,3,,,
parameter,Unsupported_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Unsupported_Domain_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,the_test = Unsupported_Test_Number%0A%0Athe_domain = Unsupported_Domain_Number%0A%0A[] = DD3:A_Test_Is_Unsupported[the_test%2C the_domain]%0A%0A$INLINE%0Afprintf(stderr%2C "Test Number %25d is UNSUPPORTED\n"%2C%0A        the_test);%0A$ENDINLINE%0A%0A%0A#$ADA_INLINE%0A# with Ada.Text_IO;%0A#%0A# %0A# -- Ada.Text_IO.Put_Line("Test Number " & integer'image(integer(the_test)) & %0A# --                     " is UNSUPPORTED");%0A#%0A#$END_ADAINLINE%0A%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,RP,,public,Test_Description,4,,,
parameter,Write_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Write_Requid,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Write_Invoker_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Write_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Write_Test_Purpose,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Write_Invoker_Domain_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#match_found = FALSE%0A%0Athe_domain = Write_Invoker_Domain_Name%0A%0Athe_test_number = Write_Test_Number%0A%0Athe_purpose = Write_Test_Purpose%0A%0Athe_object = Write_Object%0A%0Athe_requid = Write_Requid%0A%0Athe_domain_number = Write_Invoker_Domain_Number%0A%0AThe_Domain_Details = find-one Domain_Details where Domain_Number = the_domain_number%0A%0A%0AFound_The_Test_Details = FALSE%0A%0Aif The_Domain_Details != UNDEFINED then%0A  %0A   # Have we already got this Test Details?%0A%0A   {Set_Of_Already_Reported_Test_Details} = The_Domain_Details -> R8.Test_Details%0A%0A   for Each_Known_Test_Detail in {Set_Of_Already_Reported_Test_Details} do%0A%0A      if Each_Known_Test_Detail.The_Test_No = the_test_number then%0A%0A         Found_The_Test_Details = TRUE%0A%0A         # Got another test details for this test%0A         [] = RP9::Test_Anomalous_Behaviour[the_test_number%2C "Duplicated test details received"]%0A%0A      endif%0A%0A   endfor%0A%0A%0A   # Haven't already got this one%0A   if Found_The_Test_Details = FALSE then%0A%0A%0A      The_Test_Details = create Test_Details with \%0A          Test_Purpose  = the_purpose &\%0A          Tested_Object = the_object  &\%0A          The_Test_No   = the_test_number &\%0A          Result_Found  = FALSE%0A%0A      # Create new requirement identifier for test object and link it.%0A%0A      New_Requid_For_Test = create Requirement_Identifier_For_Test with requid = the_requid%0A%0A      link The_Domain_Details R8 The_Test_Details%0A%0A      link The_Test_Details R7 New_Requid_For_Test%0A%0A      # Stash the requirement identifier so it can be checked off against the specified%0A      # requirements for this test run.%0A%0A      [] = RP10::Specify_Requid[the_domain_number%2C the_test_number%2C the_requid]%0A%0A%0A      $INLINE%0A       fprintf(stderr%2C " \n");%0A       fprintf(stderr%2C"***************************************************************************\n");%0A       fprintf(stderr%2C "Test Number           : %25d\n"%2C the_test_number);%0A       fprintf(stderr%2C "Requirment identifier : %25s\n"%2C the_requid);%0A       fprintf(stderr%2C "Domain                : %25s\n"%2C the_domain);%0A       fprintf(stderr%2C "Invoker object        : %25s\n"%2C the_object);%0A       fprintf(stderr%2C "Testing for           : %25s\n"%2C the_purpose);%0A       fprintf(stderr%2C " \n");%0A      $ENDINLINE%0A%0A   endif%0A%0Aelse%0A%0A   # Got another test details for this test%0A   [] = RP7::Report_Run_Time_Error["No domain details reported"]%0A%0Aendif,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,RP,,public,Test_Text,5,,,
parameter,Domain_No,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Text_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Free_Text,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,the_test_number = Text_Test_Number%0Athe_text        = Free_Text%0A%0AThis_Domain = find-one Domain_Details where Domain_Number = Domain_No%0A%0A$INLINE%0Afprintf(stderr%2C " \n");%0Afprintf(stderr%2C "TEXT NOTE\n");%0Afprintf(stderr%2C "Test Number %25d  %25s\n"%2C the_test_number%2C the_text);%0Afprintf(stderr%2C " \n");%0A$ENDINLINE%0A%0A#$ADA_INLINE%0A# with Ada.Text_IO;%0A#%0A# -- Ada.Text_IO.New_Line(1);%0A# -- Ada.Text_IO.Put_Line("TEXT NOTE");%0A# -- Ada.Text_IO.Put_Line("Test Number "  & integer'image(integer(the_test_number)) );%0A# -- Ada.Text_IO.Put("  "  & the_text);%0A# -- Ada.Text_IO.New_Line(1);%0A#%0A#$END_ADAINLINE%0A%0A%0A{Matching_Test_Details_Set} = This_Domain -> R8.Test_Details%0Afor The_Test in {Matching_Test_Details_Set} do%0A    breakif The_Test.The_Test_No = Domain_No%0Aendfor%0A%0Aif The_Test != UNDEFINED then%0A%0A   The_Domain_Details = The_Test -> R8.Domain_Details%0A%0A   if The_Domain_Details != UNDEFINED then%0A%0A      The_Supporting_Comment = create Supporting_Comments with Comment_ID  = Domain_No &\%0A                                                               The_Comment = the_text  &\%0A                                                               The_Test_No = the_test_number%0A%0A         link The_Supporting_Comment R9 The_Domain_Details%0A%0A   else%0A      [] = RP9::Test_Anomalous_Behaviour[Domain_No%2C "Domain and Test unlinked"]%0A   endif%0A%0Aelse%0A   [] = RP9::Test_Anomalous_Behaviour[Domain_No%2C "Received a comment for unknown test"]%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
description, Free form description for a test%0A,,,,,,,
routine,,,,,,,,
routine,RP,,public,Create_New_Domain_Test,6,,,
parameter,Invoker_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Domain_Unique_Identifier,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,%0A# Create new domain test%0A%0Anew_domain_test = create unique Domain_Details with \%0A   Domain_Name               = Invoker_Domain_Name &\%0A   Last_Reported_Test_Number = 0 &\%0A   Current_State             = 'Idle'%0A%0Anew_pass = create A_Test_That_Passed with \%0A    Passed_Counter = 0%0A%0Anew_fail = create A_Test_That_Failed with \%0A   Failed_Counter = 0%0A%0Anew_unsupported = create A_Test_That_Is_Unsupported with \%0A   Unsupported_Counter = 0%0A%0Anew_duplicated = create Duplicated_Result with \ %0A   Duplicated_Test_Count = 0%0A%0A%0A# if the Test Suite object has been created%2C link it to this domain details%0AThe_Test_Suite = find-one Test_Suite%0A%0Aif The_Test_Suite != UNDEFINED then%0A   link new_domain_test R10 The_Test_Suite %0Aendif%0A%0Alink new_domain_test R1 new_pass%0Alink new_domain_test R2 new_fail%0Alink new_domain_test R3 new_unsupported%0Alink new_domain_test R4 new_duplicated%0A%0A%0AUnique_ID = new_domain_test.Domain_Number%0A%0A%0ADomain_Unique_Identifier = Unique_ID,,,,,,,
codeblock,,,,,,,,
description, This service shall create a unique object for reporting a test pass or fail.%0A It shall report its' own unique identifer to the invoking domain%2C returned via the bridge. This is so that the reporting domain can specify which object to report into. There can be more than one object in existance at any one time. THis is due to the way the event queue is asynchronous%2C and service invocations are sysnchronous.%0A %0A,,,,,,,
routine,,,,,,,,
routine,RP,,public,Report_Run_Time_Error,7,,,
parameter,Detail,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,the_detail = Detail%0A%0A%0A%0A$INLINE%0A fprintf(stderr%2C "\n");%0A fprintf(stderr%2C"======================= RUN TIME ERROR ENCOUNTERED =======================\n");%0A fprintf(stderr%2C "\n");%0A fprintf(stderr%2C "Report : %25s\n"%2C the_detail);%0A fprintf(stderr%2C " \n");%0A fprintf(stderr%2C"======================= ************************** =======================\n");%0A fprintf(stderr%2C "\n");%0A$ENDINLINE%0A%0A%0A#$ADA_INLINE%0A# with Ada.Text_IO;%0A# Ada.Text_IO.New_Line(1);%0A# Ada.Text_IO.Put_Line("======================= RUN TIME ERROR ENCOUNTERED =======================");%0A# Ada.Text_IO.New_Line(1);%0A# Ada.Text_IO.Put_Line("Report : "  & the_detail );%0A# Ada.Text_IO.New_Line(1);%0A# Ada.Text_IO.Put_Line("======================= ************************** =======================");%0A# Ada.Text_IO.New_Line(1);%0A%0A#$END_ADAINLINE%0A%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,RP,,public,Domain_Tests_Have_Finished,8,,,
parameter,Completed_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Domain_Identifer,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#Find the only domain currently in existence.%0A%0AThe_Domain_Details = find-one Domain_Details where Domain_Number = Domain_Identifer%0A%0Aif The_Domain_Details != UNDEFINED then%0A%0A   if The_Domain_Details.Domain_Name = Completed_Domain_Name then%0A%0A      generate DD1:Tests_Have_Finished() to The_Domain_Details%0A%0A   else%0A%0A      [] = RP7::Report_Run_Time_Error["Mismatched domains to report from"]%0A%0A%0A   endif%0A%0A%0Aelse%0A%0A   [] = RP7::Report_Run_Time_Error["No domain found to report from"]%0A%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,RP,,public,Test_Anomalous_Behaviour,9,,,
parameter,Anomalous_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Anomalous_Detail,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,the_detail = Anomalous_Detail%0Athe_test_number = Anomalous_Test_Number%0A%0A%0A$INLINE%0A fprintf(stderr%2C "\n");%0A fprintf(stderr%2C"ANOMALOUS BEHAVIOUR DETECTED \n");%0A fprintf(stderr%2C "\n");%0A fprintf(stderr%2C "Test Number %25d Report : %25s\n"%2C the_test_number%2C the_detail );%0A fprintf(stderr%2C " \n");%0A fprintf(stderr%2C"**************************** \n");%0A fprintf(stderr%2C "\n");%0A$ENDINLINE%0A%0A%0A%0A# with Ada.Text_IO;%0A# Ada.Text_IO.New_Line(1);%0A# Ada.Text_IO.Put_Line("ANOMALOUS BEHAVIOUR DETECTED");%0A# Ada.Text_IO.New_Line(1);%0A# Ada.Text_IO.Put_Line("Test Number " & integer'image(integer(the_test_number)) & " Report : "  & the_detail );%0A# Ada.Text_IO.New_Line(1);%0A# Ada.Text_IO.Put_Line("****************************");%0A# Ada.Text_IO.New_Line(1);%0A%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,RP,,public,Specify_Requid,10,,,
parameter,Requid_Domain_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Requid_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Requid_Identifier,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,# The Action for this domain synchronous service is simple.%0A# It requires that a test is already defined%2C i.e. start test has already been %0A# sent.  Having established this%2C link in the new requirement identifier%0A# for that test. There can be many requids associated with a given test.%0A%0AThis_Domain = find-one Domain_Details where Domain_Number = Requid_Domain_Number%0A%0A#The_Test = find-one Test_Details where Domain_Number = Requid_Domain_Number &\%0A#                                       The_Test_No   = Requid_Test_Number%0A%0A{Matching_Test_Details_Set} = This_Domain -> R8.Test_Details%0Afor The_Test in {Matching_Test_Details_Set} do%0A    breakif The_Test.The_Test_No = Requid_Test_Number%0Aendfor%0A%0A%0Aif The_Test != UNDEFINED then%0A%0A   The_Domain_Details = The_Test -> R8.Domain_Details%0A%0A   if The_Domain_Details != UNDEFINED then%0A%0A      Requid_Domain_Name = The_Domain_Details.Domain_Name%0A%0A%0A      # 'tick off' the requid against the listed requids through Test_Suite%0A      # and Requirements objects.%0A%0A      Match = FALSE%0A%0A      The_Test_Suite = find-one Test_Suite%0A%0A      if The_Test_Suite != UNDEFINED then%0A%0A         # Grab all the known requirments in this test run%0A         {Set_Of_Specified_Requids} = The_Test_Suite -> R11.All_Requirements_In_Test_Suite%0A%0A         for A_Requirement in {Set_Of_Specified_Requids} do%0A%0A            # If we find what we are looking for%2C update the test status%0A            if A_Requirement.REQUID = Requid_Identifier then%0A%0A               # This is the first test in the test run to meet this requirement.%0A               # There may well be more.%0A               if A_Requirement.Requid_Test_Status = 'Not_Tested' then%0A%0A                  A_Requirement.Requid_Test_Status = 'Tested'%0A%0A               endif%0A%0A               # This requirement has already been met%2C but that is not to say%0A               # that this current tests doesn't also meet the requirement.%0A%0A               # Create a new instance of the requirment met object and link it%0A               # via a 1:M relationship to the All_Reqs. object%0A%0A               new_requid_met = create unique Requirement_Met%0A        %0A               new_requid_met.Domain_Number       = Requid_Domain_Number%0A               new_requid_met.Domain_Name         = Requid_Domain_Name%0A               new_requid_met.Meeting_Test_Number = Requid_Test_Number%0A               new_requid_met.Requid_Test_Result  = 'Unknown'%0A%0A               link new_requid_met R12 A_Requirement%0A%0A               Match = TRUE%0A%0A               #Found the requid%0A               break%0A%0A            endif%0A%0A         endfor%0A%0A         if !Match then%0A            [] = RP7::Report_Run_Time_Error["Requirement identifier not specified for this run"] %0A         endif%0A%0A      endif%0A%0A   else%0A%0A      [] = RP9::Test_Anomalous_Behaviour[Requid_Test_Number%2C "Domain and Test unlinked"]%0A%0A   endif%0A%0Aelse%0A%0A   [] = RP9::Test_Anomalous_Behaviour[Requid_Test_Number%2C "Received a requid for unknown test"]%0A%0A%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
description, This service shall allow the calling domain specify a requirement identifier for a given domain and test.%0A,,,,,,,
routine,,,,,,,,
routine,RP,,public,Add_All_Requids,12,,,
parameter,New_Requid,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,# The idea here is that a new requid shall be for the full test suite%2C however%0A# many domains make it up.%0A%0A# When a start test for a domain is received%2C it shall be compared against the %0A# list of requirements for the full test suite.%0A%0A# In this way all specified requirements for a test suite can be 'checked off'%0A# against the known list.%0A%0A# This service allows the specification of a requirement for the test suite.%0A%0Athis_suite = find-one Test_Suite%0A%0Aif this_suite != UNDEFINED then%0A%0A   new_requirement = create unique All_Requirements_In_Test_Suite with REQUID = New_Requid%0A%0A   link this_suite R11 new_requirement%0A%0A   $INLINE%0A   fprintf(stderr%2C"Adding the following requirement   %25s\n"%2C New_Requid);%0A   $ENDINLINE%0A%0Aendif,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,RP,,public,Requirement_Tracker,13,,,
parameter,Updated_Domain_ID,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Updated_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Updated_Result,in,,,,,,
typeref,Result_Type,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,Requid_Tracker = find-one Test_Suite%0A%0Aif Requid_Tracker != UNDEFINED then%0A%0A%0A   {The_Match} = find Requirement_Met where Domain_Number = Updated_Domain_ID &\%0A      Meeting_Test_Number = Updated_Test_Number%0A%0A   if countof{The_Match} != 0 then%0A%0A      for each_match in {The_Match} do%0A%0A         if each_match.Requid_Test_Result = 'Unknown' then%0A%0A            each_match.Requid_Test_Result = Updated_Result%0A%0A         else%0A%0A            [] = RP7::Report_Run_Time_Error["Requirement already reported for this domain and test"]%0A%0A         endif %0A      endfor%0A%0A %0A#   The_Match = find-one Requirement_Met where Domain_Number = Updated_Domain_ID &\%0A#      Meeting_Test_Number = Updated_Test_Number%0A%0A#   if The_Match != UNDEFINED then%0A%0A#      if The_Match.Requid_Test_Result = 'Unknown' then%0A%0A#         The_Match.Requid_Test_Result = Updated_Result%0A%0A#      else%0A%0A#         [] = RP7::Report_Run_Time_Error["Requirement already reported for this domain and test"]%0A%0A#      endif   %0A%0A# Temporarily ignore this for the moment. Reinstate it later.%0A#   else%0A#      [] = RP7::Report_Run_Time_Error["Can't find the matching requirement"]%0A%0A   endif   %0A%0A%0A%0A#else%0A%0A   # If it is not here%2C then we are not tracking requirements in this%0A   # This is not an error condition%2C so ignore.%0A%0A%0A%0Aendif,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,RP,,public,Perform_Req_Analysis,11,,,
codeblock,%0A$INLINE%0Afprintf(stderr%2C"Captured requirements analysis started\n");%0A$ENDINLINE%0A%0A#$ADA_INLINE%0A#%0A#   with Test_Suite_Text_IO;%0A#%0A#   Test_Suite_Text_IO.Dump_String(Value => "Captured requirements analysis started");%0A#%0A#$END_ADAINLINE%0A%0AThe_Test_Suite = find-one Test_Suite%0A%0Aif The_Test_Suite != UNDEFINED then%0A%0A   generate TS3:Go() to The_Test_Suite%0A%0Aelse%0A%0A   [] = RP7::Report_Run_Time_Error["Requirements capture not enabled%2C analysis impossible"]%0A%0Aendif,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
regularrel,R1,,,,,,,
participation,RP,Domain_Details,has,unconditionally,one,RP,A_Test_That_Passed,
participation,RP,A_Test_That_Passed,has,unconditionally,one,RP,Domain_Details,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"A_Test_That_Passed",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Domain_Details",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R2,,,,,,,
participation,RP,Domain_Details,has,unconditionally,one,RP,A_Test_That_Failed,
participation,RP,A_Test_That_Failed,has,unconditionally,one,RP,Domain_Details,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"A_Test_That_Failed",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Domain_Details",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R3,,,,,,,
participation,RP,Domain_Details,has,unconditionally,one,RP,A_Test_That_Is_Unsupported,
participation,RP,A_Test_That_Is_Unsupported,has,unconditionally,one,RP,Domain_Details,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"A_Test_That_Is_Unsupported",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Domain_Details",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R4,,,,,,,
participation,RP,Domain_Details,May_Have_Some,conditionally,many,RP,Duplicated_Result,
participation,RP,Duplicated_Result,must_have_one,unconditionally,one,RP,Domain_Details,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Duplicated_Result",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Domain_Details",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R5,,,,,,,
participation,RP,Duplicated_Result,Has_one,conditionally,one,RP,Duplicated_Result,
participation,RP,Duplicated_Result,Has_some,conditionally,many,RP,Duplicated_Result,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Duplicated_Result",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Duplicated_Result",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R8,,,,,,,
participation,RP,Domain_Details,has,unconditionally,many,RP,Test_Details,
participation,RP,Test_Details,has,unconditionally,one,RP,Domain_Details,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Test_Details",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Domain_Details",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R6,,,,,,,
participation,RP,Test_Details,has,unconditionally,one,RP,Results_Of_Tests,
participation,RP,Results_Of_Tests,has,unconditionally,one,RP,Test_Details,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Results_Of_Tests",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Test_Details",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R7,,,,,,,
participation,RP,Test_Details,May_have_one_or_more,conditionally,many,RP,Requirement_Identifier_For_Test,
participation,RP,Requirement_Identifier_For_Test,defines_test_requirement,conditionally,one,RP,Test_Details,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Requirement_Identifier_For_Test",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Test_Details",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R10,,,,,,,
participation,RP,Test_Suite,Contains_Many,unconditionally,many,RP,Domain_Details,
participation,RP,Domain_Details,Is_Contained_By,unconditionally,one,RP,Test_Suite,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Domain_Details",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Test_Suite",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R11,,,,,,,
participation,RP,Test_Suite,has,unconditionally,many,RP,All_Requirements_In_Test_Suite,
participation,RP,All_Requirements_In_Test_Suite,has,unconditionally,one,RP,Test_Suite,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Test_Suite",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"All_Requirements_In_Test_Suite",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R12,,,,,,,
participation,RP,All_Requirements_In_Test_Suite,May_have,conditionally,many,RP,Requirement_Met,
participation,RP,Requirement_Met,must_have,unconditionally,one,RP,All_Requirements_In_Test_Suite,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Requirement_Met",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"All_Requirements_In_Test_Suite",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R9,,,,,,,
participation,RP,Domain_Details,has,unconditionally,many,RP,Supporting_Comments,
participation,RP,Supporting_Comments,has,unconditionally,one,RP,Domain_Details,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Supporting_Comments",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Domain_Details",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
object,All_Requirements_In_Test_Suite,REQS,12,,,,,
attribute,Unique_REQS_ID,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,REQUID,,,Unique_REQS_ID,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Unique_TS_Identifier,,,REQUID,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R11,,has,Test_Suite,Unique_TS_Identifier,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Requid_Test_Status,,,Unique_TS_Identifier,,,,
typeref,Requid_Status_Type,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Requid_Text,,,Requid_Test_Status,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
description, THis object shall store all the requirements identifiers that must be met in this test suite domain.%0A,,,,,,,
object,,,,,,,,
object,A_Test_That_Failed,FAIL,3,,,,,
attribute,Domain_Number,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R2,,has,Domain_Details,Domain_Number,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Failed_Counter,,,Domain_Number,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,RP,A_Test_That_Failed,public,You_Goofed_Boy,,,1,
parameter,Invoker_Domain_IH,in,,,,,,
typeref,instance of Domain_Details,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,The_Failed_Instance = Invoker_Domain_IH -> R2.A_Test_That_Failed%0A%0Aif The_Failed_Instance != UNDEFINED then%0A%0A   local_increment = The_Failed_Instance.Failed_Counter%0A%0A   local_increment = local_increment + 1%0A%0A   The_Failed_Instance.Failed_Counter = local_increment%0A%0Aelse%0A%0A   [] = RP7::Report_Run_Time_Error["Can not find a failed instance associated with this domain"]%0A %0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
object,,,,,,,,
object,A_Test_That_Is_Unsupported,UNSUPPORTED,5,,,,,
attribute,Domain_Number,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R3,,has,Domain_Details,Domain_Number,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Unsupported_Counter,,,Domain_Number,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,RP,A_Test_That_Is_Unsupported,public,Not_Done_It_Yet,,,1,
parameter,Invoker_Domain_IH,in,,,,,,
typeref,instance of Domain_Details,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,The_Unsupported_Instance = Invoker_Domain_IH -> R3.A_Test_That_Is_Unsupported%0A%0Aif The_Unsupported_Instance != UNDEFINED then%0A%0A   local_increment = The_Unsupported_Instance.Unsupported_Counter%0A%0A   local_increment = local_increment + 1%0A%0A   The_Unsupported_Instance.Unsupported_Counter = local_increment%0A%0Aelse%0A%0A   [] = RP7::Report_Run_Time_Error["Can not find an unsupported instance associated with this domain"]%0A %0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
object,,,,,,,,
object,A_Test_That_Passed,PASS,2,,,,,
attribute,Domain_Number,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R1,,has,Domain_Details,Domain_Number,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Passed_Counter,,,Domain_Number,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,RP,A_Test_That_Passed,public,Got_One,,,1,
parameter,Invoker_Domain_IH,in,,,,,,
typeref,instance of Domain_Details,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,%0AThe_Passed_Instance = Invoker_Domain_IH -> R1.A_Test_That_Passed%0A%0Aif The_Passed_Instance != UNDEFINED then%0A%0A   local_increment = The_Passed_Instance.Passed_Counter%0A%0A   local_increment = local_increment + 1%0A%0A   The_Passed_Instance.Passed_Counter = local_increment%0A%0Aelse%0A%0A   [] = RP7::Report_Run_Time_Error["Can not find a passed instance associated with this domain"]%0A %0Aendif%0A,,,,,,,
codeblock,,,,,,,,
description, A test has passed%2C update the attribute accordingly.%0A,,,,,,,
operation,,,,,,,,
object,,,,,,,,
object,Domain_Details,DD,4,,,,,
attribute,Domain_Number,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Domain_Name,,,Domain_Number,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Last_Reported_Test_Number,,,Domain_Name,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Use this for the last test that was reported.%0A,,,,,,,
attribute,,,,,,,,
attribute,Unique_TS_Identifier,,,Last_Reported_Test_Number,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R10,,Is_Contained_By,Test_Suite,Unique_TS_Identifier,,,
referential,,,,,,,,
attribute,,,,,,,,
operation,RP,Domain_Details,public,A_Test_Has_Passed,,,1,
parameter,New_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Domain,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,New_Test_Result_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Details_Of_Test,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,%0Alocal_result_found  = FALSE%0Alocal_test_purpose  = " "%0Alocal_tested_object = " "%0Alocal_invoking_domain = Invoking_Domain%0Alocal_domain_test_details = Details_Of_Test%0Alocal_test_number = New_Test_Number%0A%0A# For requirement identifier tracking%2C update the requirement status%0A[] = RP13::Requirement_Tracker[local_invoking_domain%2C local_test_number%2C 'Passed']%0A%0AThe_Domain_IH = find-one Domain_Details where Domain_Number = local_invoking_domain%0A%0Aif The_Domain_IH != UNDEFINED then%0A      %0A   {Set_Of_Test_Details} = The_Domain_IH -> R8.Test_Details%0A%0A   for a_test in {Set_Of_Test_Details} do%0A      if a_test.The_Test_No  = New_Test_Number then%0A         a_test.Result_Found = TRUE%0A         local_result_found  = TRUE%0A         local_test_purpose  = a_test.Test_Purpose%0A         local_tested_object = a_test.Tested_Object%0A      endif%0A       %0A   endfor      %0A%0A   if New_Test_Number != The_Domain_IH.Last_Reported_Test_Number then      %0A%0A      # New stuff 24/04/01%0A      # Find the matching instance from the objects in the set returned from a navigation.%0A      # A simple find operation could return instances created for other domains!%0A%0A      {set_of_duplicated_results} = The_Domain_IH -> R4.Duplicated_Result%0A      for a_duplicated_result in {set_of_duplicated_results} do%0A%0A         if a_duplicated_result.Duplicated_Test_Number = The_Domain_IH.Last_Reported_Test_Number then%0A%0A            the_d_r_ih = a_duplicated_result%0A%0A         endif%0A%0A      endfor%0A%0A%0A      # New stuff 24/04/01%0A      # Use the navigation rather than find to make sure we get the instance%0A      # that we are expecting to see.%0A      {Local_Set_Of_Test_Details} = The_Domain_IH -> R8.Test_Details%0A      for a_test_detail in {Local_Set_Of_Test_Details} do%0A%0A         if  a_test_detail.The_Test_No = The_Domain_IH.Last_Reported_Test_Number then%0A%0A            the_old_results_ih = a_test_detail -> R6.Results_Of_Tests%0A%0A         endif%0A      endfor%0A%0A      if the_d_r_ih != UNDEFINED and the_old_results_ih != UNDEFINED then         %0A         the_old_results_ih.The_No_Of_Duplicated_Results = the_d_r_ih.Duplicated_Test_Count%0A      endif%0A%0A      [] = PASS1:Got_One[The_Domain_IH]%0A%0A      The_Domain_IH.Last_Reported_Test_Number = New_Test_Number%0A%0A      new_results_of_test_instance = create Results_Of_Tests with \%0A         The_Number_Of_Test           = New_Test_Number &\%0A         The_Name_Of_The_Domain       = The_Domain_IH.Domain_Name &\%0A         The_Result_Of_Test           = 'Passed' &\ %0A         The_Value_Of_The_Result      = New_Test_Result_Value &\        %0A         The_Purpose_Of_Test          = local_test_purpose &\%0A         The_No_Of_Duplicated_Results = 0 &\%0A         The_Result_Of_Object         = local_tested_object &\%0A         Domain_Test_Details          = local_domain_test_details%0A%0A      %0A      #find the test data that matches the test result%0A# Can't use referential attribute to find the Test_Details.%0A#      Matching_Test_Details = find-one Test_Details where The_Test_No = New_Test_Number and \%0A#                                 Domain_Number = local_invoking_domain%0A%0A      {Matching_Test_Details_Set} = The_Domain_IH -> R8.Test_Details%0A%0A      for Matching_Test_Details in {Matching_Test_Details_Set} do%0A%0A         breakif Matching_Test_Details.The_Test_No = New_Test_Number%0A%0A      endfor%0A%0A      # Link this report to the matching test details if it exists%0A%0A      if Matching_Test_Details != UNDEFINED then %0A%0A         link new_results_of_test_instance R6 Matching_Test_Details%0A      %0A      else%0A%0A         [] = RP9::Test_Anomalous_Behaviour[New_Test_Number%2C"Passed. No Test Details Found"]%0A%0A      endif%0A%0A   else%0A%0A      # Find the duplicated result IH that was linked in when duplication %0A      # was first seen.%0A %0A      # Duplicate report found.%0A%0A#      the_d_r_ih = find-one Duplicated_Result where \%0A#         Duplicated_Test_Number = New_Test_Number and \%0A#         Domain_Number = local_invoking_domain%0A%0A      {Duplicated_Reports} = The_Domain_IH -> R4.Duplicated_Result%0A%0A      for the_d_r_ih in {Duplicated_Reports} do%0A          breakif the_d_r_ih.Duplicated_Test_Number = New_Test_Number%0A      endfor%0A%0A%0A      if the_d_r_ih = UNDEFINED then%0A         new_duplicated_instance               = create Duplicated_Result with \%0A            Duplicated_Test_Number             = New_Test_Number &\%0A            Who_Reported_The_Duplicated_Result = 'Passed'        &\%0A            Duplicated_Test_Count              = 0%0A%0A         link new_duplicated_instance R4 The_Domain_IH%0A  %0A         the_d_r_ih = new_duplicated_instance%0A%0A      else%0A%0A         # Check to see if the reported result is the same! Passed then failed? We need to know.%0A%0A#         Previous_Reported_Result = find-one Results_Of_Tests where Domain_Number = local_invoking_domain &\%0A#                                       The_Number_Of_Test = New_Test_Number%0A%0A         {Matching_Test_Details_Set} = The_Domain_IH -> R8.Test_Details%0A%0A         for Matching_Test_Details in {Matching_Test_Details_Set} do%0A%0A            breakif Matching_Test_Details.The_Test_No = New_Test_Number%0A%0A         endfor%0A%0A         if Matching_Test_Details != UNDEFINED then%0A            Previous_Reported_Result = Matching_Test_Details -> R6.Results_Of_Tests       %0A         else%0A            [] = RP9::Test_Anomalous_Behaviour[New_Test_Number%2C"Duplicated Pass. No Test Details Found"]%0A         endif%0A%0A%0A         if Previous_Reported_Result != UNDEFINED then%0A%0A            if Previous_Reported_Result.The_Result_Of_Test != 'Passed' then%0A%0A               [] = RP9::Test_Anomalous_Behaviour[New_Test_Number%2C "Inconsistent duplicated pass result"]%0A%0A            endif%0A%0A         else%0A%0A            # Big problems%2C we thought this was duplicated%2C but it would appear not!%0A%0A            [] = RP9::Test_Anomalous_Behaviour[New_Test_Number%2C "Error in duplication of test passed result"]%0A%0A         endif%0A%0A      endif      %0A%0A%0A%0A      [] = DUPLICATED1:Duplicated_Result_Found[the_d_r_ih]       %0A      %0A      The_Domain_IH.Last_Reported_Test_Number = New_Test_Number%0A      %0A   endif%0A%0Aelse%0A%0A   [] = RP7::Report_Run_Time_Error["Test Passed undefined domain details IH"]%0A   %0Aendif,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,RP,Domain_Details,public,A_Test_Has_Failed,,,2,
parameter,New_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Domain,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,New_Test_Result_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Details_Of_Test,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,%0Alocal_result_found  = FALSE%0Alocal_test_purpose  = " "%0Alocal_tested_object = " "%0Alocal_invoking_domain = Invoking_Domain%0Alocal_domain_test_details = Details_Of_Test%0Alocal_new_test_number = New_Test_Number%0A%0A# For requirement identifier tracking%2C update the requirement status%0A[] = RP13::Requirement_Tracker[local_invoking_domain%2C local_new_test_number%2C 'Failed']%0A%0AThe_Domain_IH = find-one Domain_Details where Domain_Number = local_invoking_domain%0A%0Aif The_Domain_IH != UNDEFINED then%0A   %0A   {Matching_Test_Details_Set} = The_Domain_IH -> R8.Test_Details%0A   {Duplicated_Reports}        = The_Domain_IH -> R4.Duplicated_Result%0A%0A   for Matching_Test_Details in {Matching_Test_Details_Set} do%0A      breakif Matching_Test_Details.The_Test_No = local_new_test_number%0A   endfor%0A   %0A   if Matching_Test_Details != UNDEFINED then%0A      Matching_Test_Details.Result_Found = TRUE%0A      local_result_found  = TRUE%0A      local_test_purpose  = Matching_Test_Details.Test_Purpose%0A      local_tested_object = Matching_Test_Details.Tested_Object%0A   endif %0A%0A   # Not duplicated%2C so %0A   if New_Test_Number != The_Domain_IH.Last_Reported_Test_Number then      %0A%0A#      the_d_r_ih = find-one Duplicated_Result where Duplicated_Test_Number = The_Domain_IH.Last_Reported_Test_Number \%0A#                   and Domain_Number = local_invoking_domain%0A%0A      for the_d_r_ih in {Duplicated_Reports} do%0A          breakif the_d_r_ih.Duplicated_Test_Number = The_Domain_IH.Last_Reported_Test_Number%0A      endfor%0A%0A%0A#      the_results_ih = find-one Results_Of_Tests where The_Number_Of_Test = The_Domain_IH.Last_Reported_Test_Number \%0A#                   and Domain_Number = local_invoking_domain%0A%0A%0A      the_results_ih = Matching_Test_Details -> R6.Results_Of_Tests%0A%0A      for the_d_r_ih in {Duplicated_Reports} do%0A          breakif the_d_r_ih.Duplicated_Test_Number = New_Test_Number%0A      endfor%0A%0A%0A      if the_d_r_ih != UNDEFINED and the_results_ih != UNDEFINED then         %0A         the_results_ih.The_No_Of_Duplicated_Results = the_d_r_ih.Duplicated_Test_Count%0A      endif%0A%0A      [] = FAIL1:You_Goofed_Boy[The_Domain_IH]%0A%0A      The_Domain_IH.Last_Reported_Test_Number = New_Test_Number%0A%0A      new_results_of_test_instance = create Results_Of_Tests with \%0A         The_Number_Of_Test           = New_Test_Number &\%0A         The_Name_Of_The_Domain       = The_Domain_IH.Domain_Name &\%0A         The_Result_Of_Test           = 'Failed' &\ %0A         The_Value_Of_The_Result      = New_Test_Result_Value &\        %0A         The_Purpose_Of_Test          = local_test_purpose &\%0A         The_No_Of_Duplicated_Results = 0 &\%0A         The_Result_Of_Object         = local_tested_object &\%0A         Domain_Test_Details          = local_domain_test_details%0A     %0A%0A      #find the test data that matches the test result%0A#      Matching_Test_Details = find-one Test_Details where The_Test_No = New_Test_Number and \%0A#                                 Domain_Number = local_invoking_domain%0A%0A%0A      # Link this report to the matching test details if it exists%0A%0A      if Matching_Test_Details != UNDEFINED then %0A%0A         link new_results_of_test_instance R6 Matching_Test_Details%0A      %0A      else%0A%0A         [] = RP9::Test_Anomalous_Behaviour[New_Test_Number%2C"Failed. No Test Details Found"]%0A%0A      endif%0A%0A %0A   else%0A%0A      # Find the duplicated result IH that was linked in when duplication %0A      # was first seen.%0A %0A      # Duplicate report found.%0A%0A#      the_d_r_ih = find-one Duplicated_Result where \%0A#         Duplicated_Test_Number = New_Test_Number \%0A#         and Domain_Number = local_invoking_domain%0A%0A      for the_d_r_ih in {Duplicated_Reports} do%0A          breakif the_d_r_ih.Duplicated_Test_Number = New_Test_Number%0A      endfor%0A%0A      if the_d_r_ih = UNDEFINED then%0A%0A         # First time this duplication has been seen%0A%0A         new_duplicated_instance               = create Duplicated_Result with \%0A            Duplicated_Test_Number             = New_Test_Number &\%0A            Who_Reported_The_Duplicated_Result = 'Passed'        &\%0A            Duplicated_Test_Count              = 0%0A%0A         link new_duplicated_instance R4 The_Domain_IH%0A  %0A         the_d_r_ih = new_duplicated_instance%0A%0A     else%0A%0A         # Check to see if the reported result is the same! Passed then failed? We need to know.%0A%0A#         Previous_Reported_Result = find-one Results_Of_Tests where Domain_Number = local_invoking_domain &\%0A#                                       The_Number_Of_Test = New_Test_Number%0A%0A         Previous_Reported_Result = Matching_Test_Details -> R6.Results_Of_Tests%0A%0A         if Previous_Reported_Result != UNDEFINED then%0A%0A            if Previous_Reported_Result.The_Result_Of_Test != 'Failed' then%0A%0A               [] = RP9::Test_Anomalous_Behaviour[New_Test_Number%2C "Inconsistent duplicated fail result"]%0A%0A            endif%0A%0A         else%0A%0A            # Big problems%2C we thought this was duplicated%2C but it would appear not!%0A%0A            [] = RP9::Test_Anomalous_Behaviour[New_Test_Number%2C "Error in duplication of test failed result"]%0A%0A         endif%0A%0A%0A      endif      %0A%0A%0A%0A      [] = DUPLICATED1:Duplicated_Result_Found[the_d_r_ih]       %0A      %0A      The_Domain_IH.Last_Reported_Test_Number = New_Test_Number%0A      %0A   endif%0A%0Aelse%0A%0A   [] = RP7::Report_Run_Time_Error["Test Passed undefined domain details IH"]%0A   %0Aendif%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,RP,Domain_Details,public,A_Test_Is_Unsupported,,,3,
parameter,New_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Domain,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,local_result_found  = FALSE%0Alocal_test_purpose  = " "%0Alocal_tested_object = " "%0A%0Alocal_invoking_domain = Invoking_Domain%0Alocal_test_number     = New_Test_Number%0A%0A# For requirement identifier tracking%2C update the requirement status%0A[] = RP13::Requirement_Tracker[local_invoking_domain%2C local_test_number%2C 'Unsupported']%0A%0AThe_Domain_IH = find-one Domain_Details where Domain_Number = local_invoking_domain%0A%0Aif The_Domain_IH != UNDEFINED then%0A      %0A   {Set_Of_Test_Details} = The_Domain_IH -> R8.Test_Details%0A   {Duplicated_Reports}  = The_Domain_IH -> R4.Duplicated_Result%0A%0A   for Matching_Test_Details in {Set_Of_Test_Details} do%0A       breakif Matching_Test_Details.The_Test_No = New_Test_Number%0A   endfor%0A%0A   if Matching_Test_Details != UNDEFINED then%0A      Matching_Test_Details.Result_Found = TRUE%0A      local_result_found  = TRUE%0A      local_test_purpose  = Matching_Test_Details.Test_Purpose%0A      local_tested_object = Matching_Test_Details.Tested_Object%0A   endif %0A%0A %0A   if New_Test_Number != The_Domain_IH.Last_Reported_Test_Number then      %0A%0A#      the_d_r_ih = find-one Duplicated_Result where Duplicated_Test_Number = The_Domain_IH.Last_Reported_Test_Number%0A%0A      for the_d_r_ih in {Duplicated_Reports} do%0A          breakif the_d_r_ih.Duplicated_Test_Number = The_Domain_IH.Last_Reported_Test_Number%0A      endfor%0A%0A#      the_results_ih = find-one Results_Of_Tests where The_Number_Of_Test = The_Domain_IH.Last_Reported_Test_Number%0A      the_results_ih = Matching_Test_Details -> R6.Results_Of_Tests%0A%0A      if the_d_r_ih != UNDEFINED and the_results_ih != UNDEFINED then         %0A         the_results_ih.The_No_Of_Duplicated_Results = the_d_r_ih.Duplicated_Test_Count%0A      endif%0A%0A      [] = UNSUPPORTED1:Not_Done_It_Yet[The_Domain_IH]%0A%0A      The_Domain_IH.Last_Reported_Test_Number = New_Test_Number%0A%0A      new_results_of_test_instance = create Results_Of_Tests with \%0A         The_Number_Of_Test           = New_Test_Number &\%0A         The_Name_Of_The_Domain       = The_Domain_IH.Domain_Name &\%0A         The_Result_Of_Test           = 'Unsupported' &\ %0A         The_Value_Of_The_Result      = 0 &\        %0A         The_Purpose_Of_Test          = local_test_purpose &\%0A         The_No_Of_Duplicated_Results = 0 &\%0A         The_Result_Of_Object         = local_tested_object &\%0A         Domain_Test_Details          = " "%0A%0A      # Link this report to the matching test details if it exists%0A%0A      if Matching_Test_Details != UNDEFINED then %0A%0A         link new_results_of_test_instance R6 Matching_Test_Details%0A      %0A      else%0A%0A         [] = RP9::Test_Anomalous_Behaviour[New_Test_Number%2C"Unsupported. No Test Details Found"]%0A%0A      endif%0A%0A   else%0A%0A      # Find the duplicated result IH that was linked in when duplication %0A      # was first seen.%0A %0A      # Duplicate report found.%0A%0A#      the_d_r_ih = find-one Duplicated_Result where \%0A#         Duplicated_Test_Number = New_Test_Number%0A%0A      {Duplicated_Reports} = The_Domain_IH -> R4.Duplicated_Result%0A      for the_d_r_ih in {Duplicated_Reports} do%0A          breakif the_d_r_ih.Duplicated_Test_Number = New_Test_Number%0A      endfor%0A%0A%0A      if the_d_r_ih = UNDEFINED then%0A         new_duplicated_instance               = create Duplicated_Result with \%0A            Duplicated_Test_Number             = New_Test_Number &\%0A            Who_Reported_The_Duplicated_Result = 'Passed'        &\%0A            Duplicated_Test_Count              = 0%0A%0A         link new_duplicated_instance R4 The_Domain_IH%0A  %0A         the_d_r_ih = new_duplicated_instance%0A%0A     else%0A%0A         # Check to see if the reported result is the same! Passed then failed? We need to know.%0A%0A%0A         Previous_Reported_Result = Matching_Test_Details -> R6.Results_Of_Tests%0A%0A         if Previous_Reported_Result != UNDEFINED then%0A%0A            if Previous_Reported_Result.The_Result_Of_Test != 'Unsupported' then%0A%0A               [] = RP9::Test_Anomalous_Behaviour[New_Test_Number%2C "Inconsistent duplicated unsupported result"]%0A%0A            endif%0A%0A         else%0A%0A            # Big problems%2C we thought this was duplicated%2C but it would appear not!%0A%0A            [] = RP9::Test_Anomalous_Behaviour[New_Test_Number%2C "Error in duplication of test unsupported result"]%0A%0A         endif%0A%0A%0A%0A      endif      %0A%0A%0A%0A      [] = DUPLICATED1:Duplicated_Result_Found[the_d_r_ih]       %0A      %0A      The_Domain_IH.Last_Reported_Test_Number = New_Test_Number%0A      %0A   endif%0A%0Aelse%0A%0A   [] = RP7::Report_Run_Time_Error["Test Passed undefined domain details IH"]%0A   %0Aendif%0A%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,RP,Domain_Details,public,End_Of_Test,,,4,
parameter,The_Domain,in,,,,,,
typeref,instance of Domain_Details,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,%0A%0Aif The_Domain != UNDEFINED then%0A%0A   {Failed_Data} is Failed_Tests_Record_Type%0A%0A   {Unsupported_Data} is Unsupported_Tests_Record_Type%0A%0A   {Duplicated_Data} is Duplicated_Tests_Record_Type%0A%0A   # find the objects detailing the pass/fail & unsupported data%0A   Tell_Me_About_The_Passes        = The_Domain -> R1.A_Test_That_Passed%0A   Tell_Me_About_The_Failures      = The_Domain -> R2.A_Test_That_Failed%0A   Tell_Me_About_The_Unsupported   = The_Domain -> R3.A_Test_That_Is_Unsupported%0A   {Tell_Me_About_The_Duplicated}  = The_Domain -> R4.Duplicated_Result%0A   {Tell_Me_About_The_Tests}       = The_Domain -> R8.Test_Details%0A   {Tell_Me_About_The_Comments}    = The_Domain -> R9.Supporting_Comments%0A%0A   Local_Total_Duplicated_Count = 0%0A%0A   # Dump out the details%0A   Local_Passed          = Tell_Me_About_The_Passes.Passed_Counter%0A   Local_Failed          = Tell_Me_About_The_Failures.Failed_Counter%0A   Local_Unsupported     = Tell_Me_About_The_Unsupported.Unsupported_Counter%0A   Local_The_Domain_Name = The_Domain.Domain_Name%0A%0A   local_next_test_number = 0%0A   local_all_test_results_dumped = FALSE%0A   local_match_found = FALSE%0A%0A   domain_name_for_file_handling = The_Domain.Domain_Name%0A   domain_number_for_file_handling = The_Domain.Domain_Number%0A%0A%0A   # Open a new output file for writing the results to. This will only be done for ADA runs.%0A   #%0A%0A%0A#$ADA_INLINE%0A#with Test_Suite_Text_IO;%0A#Test_Suite_Text_IO.Open_File_For_Writing(%0A   #    Name_Of_File             => domain_name_for_file_handling%2C%0A   #    Unique_Domain_Identifier => domain_number_for_file_handling);%0A#$END_ADAINLINE%0A%0A%0A   # Loop through all of the tests until all of the tests results have been dumped%0A   loop%0A%0A      # Get the next test number %0A      local_next_test_number = local_next_test_number + 1%0A      local_match_found = FALSE%0A%0A      # Obtain a single instance of the test details and obtain the results for that instance%0A      for Each_Test_Result in {Tell_Me_About_The_Tests} do     %0A%0A         Tell_Me_About_The_Results = Each_Test_Result -> R6.Results_Of_Tests%0A%0A         # Sitting in this loop is a good place to now retrieve the%0A         # requirement identifiers that may be associated with this test.%0A%0A         {All_The_Requirements} = Each_Test_Result -> R7.Requirement_Identifier_For_Test%0A%0A         How_Many_Requirements = countof {All_The_Requirements}%0A%0A%0A         # If results have been found for the current instance %0A         if Tell_Me_About_The_Results != UNDEFINED then%0A%0A            # If the reult of the current instance = the current test to be dumped obtain the reults data%0A            if Tell_Me_About_The_Results.The_Number_Of_Test = local_next_test_number then%0A               local_match_found             = TRUE%0A               Local_Test_Number             = Tell_Me_About_The_Results.The_Number_Of_Test%0A               Local_Test_Domain_Name        = Tell_Me_About_The_Results.The_Name_Of_The_Domain %0A               Local_Duplicated_Result_Count = Tell_Me_About_The_Results.The_No_Of_Duplicated_Results%0A               Local_The_Object              = Tell_Me_About_The_Results.The_Result_Of_Object%0A               Local_Result_Value            = Tell_Me_About_The_Results.The_Value_Of_The_Result%0A               Local_Test_Details            = Tell_Me_About_The_Results.Domain_Test_Details%0A%0A               Local_Test_Purpose     = Tell_Me_About_The_Results.The_Purpose_Of_Test%0A%0A               {Local_Comments}    = find Supporting_Comments where The_Test_No = local_next_test_number & Comment_ID = The_Domain.Domain_Number%0A%0A%0A               # If the test passed set the test result to passed%0A               if Tell_Me_About_The_Results.The_Result_Of_Test = 'Passed' then  %0A%0A                  Local_Test_Result      = "PASSED"%0A%0A               else%0A   %0A                  # If the test failed set the test result to failed%0A                  if Tell_Me_About_The_Results.The_Result_Of_Test = 'Failed' then  %0A%0A                     Local_Test_Result      = "** ** FAILED ** **"%0A                     # Stash the failed test number to dump out later.%0A                     append [Local_Test_Number] to {Failed_Data}%0A%0A                  else%0A                    %0A                     # If the test failed set the test result to unsupported%0A                     if Tell_Me_About_The_Results.The_Result_Of_Test = 'Unsupported' then%0A%0A                        Local_Test_Result = "UNSUPPORTED"%0A                        #stash the unsupported test number to dump out later%0A                        append [Local_Test_Number%2C Local_Test_Purpose] to {Unsupported_Data}%0A%0A                     else%0A%0A                        # Neither fish nor fowl%2C should NEVER happen.%0A                        Local_Test_Result = "UNKNOWN"%0A                        [] = RP9::Test_Anomalous_Behaviour[Local_Test_Number%2C "UNKNOWN result"]%0A %0A                     endif%0A%0A                  endif%0A%0A               endif%0A %0A%0A               Local_Total_Duplicated_Count = Local_Total_Duplicated_Count + Local_Duplicated_Result_Count%0A %0A               #stash the duplicated count for this test%0A               if Local_Duplicated_Result_Count > 0 then%0A                  append [Local_Test_Number%2C Local_Duplicated_Result_Count ] to {Duplicated_Data}%0A               endif%0A%0A               $INLINE%0A%0A                  fprintf(stderr%2C " \n");%0A                  fprintf(stderr%2C "---------------------------------------------------------------------------\n");%0A                  fprintf(stderr%2C "Domain                      %25s\n"%2C Local_Test_Domain_Name);%0A                  fprintf(stderr%2C "Test Number                 %25d\n"%2C Local_Test_Number);%0A                  fprintf(stderr%2C "Object                      %25s\n"%2C Local_The_Object);%0A                  fprintf(stderr%2C "Duplicated Results          %25d\n"%2C Local_Duplicated_Result_Count);%0A                  fprintf(stderr%2C "Test Purpose                %25s\n"%2C Local_Test_Purpose);%0A                  %0A               $ENDINLINE%0A%0A               for Next_Comment in {Local_Comments} do%0A                  A_Comment = Next_Comment.The_Comment%0A                  $INLINE%0A                     fprintf(stderr%2C "Comments -                  %25s\n"%2C A_Comment);%0A                  $ENDINLINE%0A               endfor%0A%0A               #$ADA_INLINE%0A%0A                  # Test_Suite_Text_IO.Dump_String("");%0A                  # Test_Suite_Text_IO.Dump_String("---------------------------------------------------------------------------");%0A                  # Test_Suite_Text_IO.Dump_String("Domain                       " & Local_Test_Domain_Name);%0A                  # Test_Suite_Text_IO.Dump_String("Object                       " & Local_The_Object);%0A                  # Test_Suite_Text_IO.Dump_String("Test Number                  " & integer'image(integer(Local_Test_Number )) );%0A                  # Test_Suite_Text_IO.Dump_String("Duplicated Tests For Domain  " & integer'image(integer(Local_Duplicated_Result_Count )) );%0A                  # Test_Suite_Text_IO.Dump_String("Test Purpose                 " & Local_Test_Purpose);%0A%0A%0A               #$END_ADAINLINE%0A%0A               for each_comment in {Local_Comments} do%0A                  A_Comment = each_comment.The_Comment%0A                  #$ADA_INLINE%0A                     # Test_Suite_Text_IO.Dump_String("Comments -                   " & A_Comment);%0A                  #$END_ADAINLINE%0A               endfor%0A%0A               # Dump out any other specified requirement identifiers.%0A               if How_Many_Requirements > 0 then%0A%0A                  First_Time_Through = TRUE%0A%0A                  for Individual_Requid in {All_The_Requirements} do%0A                      Local_Test_Req_ID = Individual_Requid.requid%0A%0A                      if First_Time_Through = TRUE then%0A%0A                         $INLINE%0A                           fprintf(stderr%2C "Requirement Identifier(s)   %25s\n"%2C Local_Test_Req_ID );%0A                         $ENDINLINE%0A%0A                         %0A                         #$ADA_INLINE%0A                            #Test_Suite_Text_IO.Display_Requid ("Requirement Identifier(s)    " %2C %0A                            #    Local_Test_Req_ID);%0A                         #$END_ADAINLINE%0A%0A                      else%0A                         $INLINE%0A                           fprintf(stderr%2C "                            %25s\n"%2C Local_Test_Req_ID );%0A                         $ENDINLINE%0A%0A                         %0A                         #$ADA_INLINE%0A                            #Test_Suite_Text_IO.Display_Requid ("                              " %2C %0A                            #    Specific_Requid => Local_Test_Req_ID);%0A                         #$END_ADAINLINE%0A%0A                      endif%0A%0A%0A                     First_Time_Through = FALSE%0A%0A                  endfor%0A               endif%0A%0A               $INLINE%0A                  fprintf(stderr%2C "\n");%0A                  fprintf(stderr%2C "Result data                 %25s\n"%2C Local_Test_Details );%0A                  fprintf(stderr%2C "Test Result                 %25s with %25d\n"%2C Local_Test_Result%2C Local_Result_Value);%0A               $ENDINLINE%0A %0A               #$ADA_INLINE%0A                  #Test_Suite_Text_IO.Dump_String("");%0A                  #Test_Suite_Text_IO.Dump_String("Result data                  " & Local_Test_Details);%0A                  #Test_Suite_Text_IO.Dump_String("Test Result                  " & Local_Test_Result & "with " &  %0A                  #    integer'image(integer(Local_Result_Value ))  );%0A               #$END_ADAINLINE%0A%0A%0A            endif%0A         %0A            # If all of the tests have been dumped then set the all results dumped flag to TRUE%0A            if local_next_test_number >= countof {Tell_Me_About_The_Tests} then%0A               local_all_test_results_dumped = TRUE%0A            endif%0A      %0A%0A         else%0A            # Not found a result for this test%0A            [] = RP9::Test_Anomalous_Behaviour[Each_Test_Result.The_Test_No%2C "One or More Results Were Not Found"]%0A%0A         endif%0A%0A         # If a match between the result test number and required test number has been found then break out of the for loop%0A         breakif local_match_found = TRUE%0A%0A      endfor%0A%0A      # If all of the reults have been dumped then break out of the loop%0A      breakif local_all_test_results_dumped = TRUE %0A%0A   endloop%0A%0A   # If there was some failures found during the run%0A%0A   Total_Number_Of_Tests_Attempted = Local_Passed + Local_Failed + Local_Unsupported%0A%0A   $INLINE%0A      fprintf(stderr%2C " \n");%0A      fprintf(stderr%2C"***************************************************************************\n");%0A      fprintf(stderr%2C"***************************************************************************\n");%0A      fprintf(stderr%2C " \n");%0A      fprintf(stderr%2C "Overall Results for domain      %25s\n"%2C Local_The_Domain_Name);%0A      fprintf(stderr%2C "Total  Tests      %25d\n"%2C Total_Number_Of_Tests_Attempted);%0A      fprintf(stderr%2C "Passed Tests      %25d\n"%2C Local_Passed);%0A      fprintf(stderr%2C "Failed Tests      %25d\n"%2C Local_Failed);%0A   $ENDINLINE%0A%0A   #$ADA_INLINE%0A      #Test_Suite_Text_IO.Dump_String("");%0A      #Test_Suite_Text_IO.Dump_String("***************************************************************************");%0A      #Test_Suite_Text_IO.Dump_String("***************************************************************************");%0A      #Test_Suite_Text_IO.Dump_String("");%0A      #Test_Suite_Text_IO.Dump_String("Overall Results for domain " & Local_The_Domain_Name);%0A      #Test_Suite_Text_IO.Dump_String("Total Tests       " & integer'image(integer(Total_Number_Of_Tests_Attempted )) );%0A      #Test_Suite_Text_IO.Dump_String("Passed Tests      " & integer'image(integer(Local_Passed )) );%0A      #Test_Suite_Text_IO.Dump_String("Failed Tests      " & integer'image(integer(Local_Failed )) );%0A   #$END_ADAINLINE%0A%0A   if Local_Failed != 0 then%0A      for [Local_Failed_Test_Number] in {Failed_Data} do%0A%0A         $INLINE%0A            fprintf(stderr%2C " failure found in test %25d\n"%2C Local_Failed_Test_Number);%0A         $ENDINLINE%0A%0A         #$ADA_INLINE%0A            #Test_Suite_Text_IO.Dump_String(" failure found in test " & %0A            #    integer'image(integer( Local_Failed_Test_Number )) );%0A         #$END_ADAINLINE%0A%0A      endfor%0A   endif%0A%0A   $INLINE%0A   fprintf(stderr%2C "Unsupported Tests %25d\n"%2C Local_Unsupported);%0A   $ENDINLINE%0A%0A   #$ADA_INLINE%0A   #Test_Suite_Text_IO.Dump_String("Unsupported Tests " & %0A   #    integer'image(integer( Local_Unsupported )) );%0A   #$END_ADAINLINE%0A%0A   if countof {Unsupported_Data} != 0 then%0A%0A      for [This_Unsupported_Test_Number%2C This_Test_Details_Text] in {Unsupported_Data} do%0A%0A         $INLINE%0A            fprintf(stderr%2C " test %25d was testing for %25s\n"%2C This_Unsupported_Test_Number%2C This_Test_Details_Text  );%0A         $ENDINLINE%0A%0A         #$ADA_INLINE%0A            #Test_Suite_Text_IO.Dump_String(" test " & integer'image(integer( This_Unsupported_Test_Number )) & %0A            # " was testing for " & This_Test_Details_Text );%0A         #$END_ADAINLINE%0A%0A      endfor%0A%0A   endif%0A%0A%0A   $INLINE%0A      fprintf(stderr%2C "Total Duplicated Tests  %25d\n"%2C Local_Total_Duplicated_Count);%0A   $ENDINLINE%0A%0A   #$ADA_INLINE%0A   #Test_Suite_Text_IO.Dump_String("Total Duplicated Tests  " & %0A   #    integer'image(integer( Local_Total_Duplicated_Count )) );%0A   #$END_ADAINLINE%0A%0A%0A   if countof {Duplicated_Data} != 0 then%0A%0A      for [This_Duplicated_Test_Number%2C Number_Of_Duplicated_Results] in {Duplicated_Data} do%0A%0A         if Number_Of_Duplicated_Results > 1 then%0A            $INLINE%0A               fprintf(stderr%2C " test %25d had %25d duplicated results\n"%2C This_Duplicated_Test_Number%2C Number_Of_Duplicated_Results );%0A            $ENDINLINE%0A%0A            #$ADA_INLINE%0A               #Test_Suite_Text_IO.Dump_String(" test " & integer'image(integer( This_Duplicated_Test_Number )) & " had " & %0A               #    integer'image(integer(Number_Of_Duplicated_Results)) & " duplicated results" );%0A            #$END_ADAINLINE%0A%0A         else%0A            $INLINE%0A               fprintf(stderr%2C " test %25d had %25d duplicated result\n"%2C This_Duplicated_Test_Number%2C Number_Of_Duplicated_Results );%0A            $ENDINLINE%0A%0A            #$ADA_INLINE%0A               #Test_Suite_Text_IO.Dump_String(" test " & integer'image(integer( This_Duplicated_Test_Number )) & " had " & %0A               #    integer'image(integer(Number_Of_Duplicated_Results)) & " duplicated result" );%0A            #$END_ADAINLINE%0A%0A         endif%0A%0A      endfor%0A%0A   endif%0A%0A%0A   $INLINE%0A      fprintf(stderr%2C " \n");%0A      fprintf(stderr%2C"***************************************************************************\n");%0A      fprintf(stderr%2C"***************************************************************************\n");%0A      fprintf(stderr%2C " \n");%0A   $ENDINLINE%0A%0A%0A   #$ADA_INLINE%0A      #Test_Suite_Text_IO.Dump_String("");%0A      #Test_Suite_Text_IO.Dump_String("***************************************************************************");%0A      #Test_Suite_Text_IO.Dump_String("***************************************************************************");%0A      #Test_Suite_Text_IO.Dump_String("");%0A   #$END_ADAINLINE%0A%0A%0A %0A%0A   # Unlink R1%2C R2 & R3%0A   unlink The_Domain R1 Tell_Me_About_The_Passes%0A   delete Tell_Me_About_The_Passes%0A%0A   unlink The_Domain R2 Tell_Me_About_The_Failures%0A   delete Tell_Me_About_The_Failures%0A%0A   unlink The_Domain R3 Tell_Me_About_The_Unsupported%0A   delete Tell_Me_About_The_Unsupported%0A   %0A   # Unlink and delete each instance of the duplicated results%0A   for each_duplicated_set in {Tell_Me_About_The_Duplicated} do%0A      unlink The_Domain R4 each_duplicated_set%0A      delete each_duplicated_set%0A   endfor%0A   %0A   for inst_of_comment in {Tell_Me_About_The_Comments} do%0A      unlink The_Domain R9 inst_of_comment%0A      delete inst_of_comment%0A   endfor%0A%0A%0A   # Obtain each instance of the test details unlink and delete the results of the %0A   # instance then unlink and delete the test details instance%0A%0A   no_more_results = FALSE%0A%0A%0A   {All_Of_The_Tests} = The_Domain -> R8.Test_Details   %0A%0A   for Each_Test in {All_Of_The_Tests} do%0A      %0A      if Each_Test != UNDEFINED then%0A         %0A         res = Each_Test -> R6.Results_Of_Tests%0A%0A        if res != UNDEFINED then%0A           unlink Each_Test R6 res%0A           delete res%0A%0A        else%0A%0A           # Couldn't find the results for this test%0A           [] = RP9::Test_Anomalous_Behaviour[Each_Test.The_Test_No%2C "One or More Results Were Not Found"]%0A%0A        endif  %0A%0A        unlink Each_Test R8 The_Domain%0A%0A        # any left%0A        still_res = Each_Test -> R6.Results_Of_Tests%0A        if still_res != UNDEFINED then%0A           # This is technically an error condition%0A           # all outstanding relationships should already have been unlinked%0A           # but they haven't%0A           unlink Each_Test R6 still_res%0A           delete still_res%0A        endif%0A%0A        # Now sort out the linked in requirement identifier object.%0A%0A        {set_of_requids} = Each_Test -> R7.Requirement_Identifier_For_Test%0A        for each_requid in {set_of_requids} do%0A           unlink Each_Test R7 each_requid%0A           delete each_requid%0A        endfor%0A%0A        delete Each_Test%0A%0A      else%0A%0A         # Couldn't find the Test_Details for this test%0A           [] = RP7::Report_Run_Time_Error["One Or More Test Details Were Not Found"]%0A%0A      endif%0A%0A   endfor%0A%0A%0A   # closes the open ada file%0A%0A   #$ADA_INLINE%0A   #Test_Suite_Text_IO.Close_File_For_Writing(%0A      #    Name_Of_File             => domain_name_for_file_handling%2C%0A      #    Unique_Domain_Identifier => domain_number_for_file_handling);%0A   #$END_ADAINLINE%0A%0A%0A   #If the Test Suite object exists%2C initiate requirements analysis.%0A   # .... and if the current state is 'Waiting'%2C ie. it has been triggered from the%0A   # idle state into Waiting by the Scenario 4 being called at the end of a test run.%0A%0A   The_Requirements_Object = find-one Test_Suite%0A%0A   if The_Requirements_Object != UNDEFINED then %0A%0A      if The_Requirements_Object.Current_State = 'Waiting' then%0A         generate TS1:Perform_Analysis() to The_Requirements_Object%0A      endif%0A%0A   endif%0A%0Aelse%0A%0A   [] = RP7::Report_Run_Time_Error["Undefined Domain"]%0A%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
state,,Domain_Details,Idle,,1,,,
state,,,,,,,,
state,,Domain_Details,Report_Your_Findings,,2,,,
codeblock,%0A [] = DD4:End_Of_Test[this]%0A%0A generate DD2:Commit_Hari_Kiri() to this,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,Domain_Details,Kill_Yourself,terminal,3,,,
codeblock,# Check to see if all instances of objects linked to this object%0A# have been removed.%0A%0AA_Pass = this -> R1.A_Test_That_Passed%0AA_Fail = this -> R2.A_Test_That_Failed%0ASupp   = this -> R3.A_Test_That_Is_Unsupported%0A%0A{Set_Of_Dupes} = this -> R4.Duplicated_Result%0A{Set_Of_Tests} = this -> R8.Test_Details%0A%0A# If we are collecting Traceability data for this domain%2C unlink it%0A# but DO NOT delete it%2C otherwise all data would be lost.%0A%0ATraceability = this -> R10.Test_Suite%0A%0Aif Traceability != UNDEFINED then%0A%0A   unlink this R10 Traceability%0A%0Aendif%0A%0A%0Aif A_Pass != UNDEFINED then%0A%0A   [] = RP7::Report_Run_Time_Error["Pass result instance still exists"]%0A%0Aelse%0A%0A   if A_Fail != UNDEFINED then%0A%0A      [] = RP7::Report_Run_Time_Error["Fail result instance still exists"]%0A%0A   else%0A%0A      if Supp != UNDEFINED then%0A%0A         [] = RP7::Report_Run_Time_Error["Unsupported result instance still exists"]%0A%0A       else%0A%0A          if countof {Set_Of_Dupes} != 0 then%0A%0A             [] = RP7::Report_Run_Time_Error["Duplicated result instance still exists"]%0A%0A          else%0A%0A             if countof {Set_Of_Tests} != 0 then%0A%0A                 [] = RP7::Report_Run_Time_Error["Results instance still exists"]%0A%0A             else%0A%0A                delete this%0A%0A             endif%0A          endif%0A       endif%0A   endif%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
event,Tests_Have_Finished,,1,,,,,
event,,,,,,,,
event,Commit_Hari_Kiri,,2,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,Tests_Have_Finished,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Commit_Hari_Kiri,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Tests_Have_Finished,Report_Your_Findings,,,
transition,,,,,,,,
transition,Idle,,,Commit_Hari_Kiri,Cannot_Happen,,,
transition,,,,,,,,
transition,Report_Your_Findings,,,Tests_Have_Finished,Cannot_Happen,,,
transition,,,,,,,,
transition,Report_Your_Findings,,,Commit_Hari_Kiri,Kill_Yourself,,,
transition,,,,,,,,
transition,Kill_Yourself,,,Tests_Have_Finished,Cannot_Happen,,,
transition,,,,,,,,
transition,Kill_Yourself,,,Commit_Hari_Kiri,Cannot_Happen,,,
transition,,,,,,,,
transitiontable,,,,,,,,
object,,,,,,,,
object,Duplicated_Result,DUPLICATED,6,,,,,
attribute,Domain_Number,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R4,,must_have_one,Domain_Details,Domain_Number,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Who_Reported_The_Duplicated_Result,,,Domain_Number,,,,
typeref,Result_Type,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Duplicated_Test_Count,,,Who_Reported_The_Duplicated_Result,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Duplicated_Test_Number,,,Duplicated_Test_Count,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Which_Test_Number,,,Duplicated_Test_Number,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,RP,Duplicated_Result,public,Duplicated_Result_Found,,,1,
parameter,Invoker_Domain_IH,in,,,,,,
typeref,instance of Duplicated_Result,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,%0Aif Invoker_Domain_IH != UNDEFINED then%0A%0A    local_increment = Invoker_Domain_IH.Duplicated_Test_Count%0A %0A    local_increment = local_increment + 1%0A%0A    Invoker_Domain_IH.Duplicated_Test_Count = local_increment%0A%0Aelse%0A%0A   [] = RP7::Report_Run_Time_Error["Can not find a duplicated instance associated with this domain"]%0A %0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
object,,,,,,,,
object,Requirement_Identifier_For_Test,RI,9,,,,,
attribute,requid,,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Domain_Number,,,requid,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R7,,defines_test_requirement,Test_Details,Domain_Number,,,
referential,,,,,,,,
attribute,,,,,,,,
description, This object shall store all the requirement identifiers associated with a specific test.%0A,,,,,,,
object,,,,,,,,
object,Requirement_Met,RM,13,,,,,
attribute,Unique_Req_Met_ID,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Unique_REQS_ID,,,Unique_Req_Met_ID,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R12,,must_have,All_Requirements_In_Test_Suite,Unique_REQS_ID,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Domain_Name,,,Unique_REQS_ID,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
description, Unique domain number of the test that met the requirement.%0A,,,,,,,
attribute,,,,,,,,
attribute,Meeting_Test_Number,,,Domain_Name,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Number of the test that met the requirement.%0A,,,,,,,
attribute,,,,,,,,
attribute,Requid_Test_Result,,,Meeting_Test_Number,,,,
typeref,Result_Type,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Domain_Number,,,Requid_Test_Result,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Results_Of_Tests,RESULTS,7,,,,,
attribute,The_Number_Of_Test,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, The number of the test  %0A,,,,,,,
attribute,,,,,,,,
attribute,The_Name_Of_The_Domain,,,The_Number_Of_Test,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
description, The name of the domain tested%0A,,,,,,,
attribute,,,,,,,,
attribute,The_Result_Of_Test,,,The_Name_Of_The_Domain,,,,
typeref,Result_Type,,,,,,,
typeref,,,,,,,,
description, The result of the test perfomed. i.e. PASSED%2C FAILED%2C UNSUPPORTED%0A,,,,,,,
attribute,,,,,,,,
attribute,The_Value_Of_The_Result,,,The_Result_Of_Test,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,The_Purpose_Of_Test,,,The_Value_Of_The_Result,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,The_No_Of_Duplicated_Results,,,The_Purpose_Of_Test,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Number of duplicated results in the test%0A,,,,,,,
attribute,,,,,,,,
attribute,The_Result_Of_Object,,,The_No_Of_Duplicated_Results,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Domain_Number,,,The_Result_Of_Object,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R6,,has,Test_Details,Domain_Number,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Domain_Test_Details,,,Domain_Number,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
description, Stores all of the results from the test made so that they may then be displayed once all the tests have been completed.%0A,,,,,,,
object,,,,,,,,
object,Supporting_Comments,SC,10,,,,,
attribute,Domain_Number,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R9,,has,Domain_Details,Domain_Number,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,The_Comment,,,Domain_Number,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,The_Test_No,,,The_Comment,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Comment_ID,,,The_Test_No,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Test_Details,TD,8,,,,,
attribute,Domain_Number,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R8,,has,Domain_Details,Domain_Number,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Test_Purpose,,,Domain_Number,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Tested_Object,,,Test_Purpose,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,The_Test_No,,,Tested_Object,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Result_Found,,,The_Test_No,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Test_Suite,TS,11,,,,,
attribute,Unique_TS_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,RP,Test_Suite,public,Add_Requirement,,,1,
parameter,New_Requid,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,New_Requid_Text,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,# Specify a requirement identifier that must be met by this test suite%0A%0AExists = find-one All_Requirements_In_Test_Suite where REQUID = New_Requid%0A%0AMe = find-one Test_Suite%0A%0Aif Me != UNDEFINED then%0A%0A  [] = RP7::Report_Run_Time_Error["Test Suite not configured for requid capture"]%0A%0Aelse%0A%0A%0A   if Exists != UNDEFINED then%0A%0A      [] = RP7::Report_Run_Time_Error["Requid already specified"]%0A%0A   else%0A%0A      The_New_Requirement_id = create unique All_Requirements_In_Test_Suite with REQUID = New_Requid &\%0A         Requid_Test_Status = 'Not_Tested' & Requid_Text = New_Requid_Text%0A%0A      link Me R11 The_New_Requirement_id%0A%0A   endif%0A%0Aendif,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
state,,Test_Suite,Waiting,,1,,,
state,,,,,,,,
state,,Test_Suite,Trace_Requirements,,2,,,
codeblock,%0A# Open up a file in the ADA run time system to stash results into.%0A%0A%0A#$ADA_INLINE%0A   #with Test_Suite_Text_IO;%0A   #Test_Suite_Text_IO.Open_File_For_Writing(%0A      #    Name_Of_File             => "Requirements_Analysis"%2C%0A      #    Unique_Domain_Identifier => 999);%0A#$END_ADAINLINE%0A%0A%0A%0A# Navigate to all the reported requirements%0A%0A{All_Requirements} = this -> R11.All_Requirements_In_Test_Suite%0A%0AHow_Many_Requirements = countof {All_Requirements}%0A%0ACurrent_Reqid = " "%0AThe_Domain = " "%0AThe_Test   = 0%0AThe_Result of Result_Type = 'Unknown'%0A%0Aif How_Many_Requirements > 0 then%0A%0A   # Step through each reqirement%2C navigating across to the set of%0A   # test results that test that requirement.%0A%0A   for A_Requirement in {All_Requirements} do%0A%0A      Current_Reqid = A_Requirement.REQUID%0A      Local_Requid_Text   = A_Requirement.Requid_Text%0A      Requid_Status = A_Requirement.Requid_Test_Status%0A%0A      $INLINE%0A         fprintf(stderr%2C"------------------------------------------------------------\n");%0A         fprintf(stderr%2C"Requirement  %25s has "%2C Current_Reqid ); %0A      $ENDINLINE%0A%0A%0A%0A%0A      if Requid_Status = 'Tested' then%0A%0A         $INLINE%0A            fprintf(stderr%2C"been tested by the following \n" );%0A         $ENDINLINE%0A%0A%0A%0A         #$ADA_INLINE%0A            # Test_Suite_Text_IO.Dump_String("Requirement " & Current_Reqid & "has been tested by the following ");%0A         #$END_ADAINLINE%0A%0A%0A%0A         # Navigate to the set containing the domain and test details that met this requirement%0A         {Satisfying_Tests} = A_Requirement -> R12.Requirement_Met%0A%0A         for A_Test in {Satisfying_Tests} do%0A%0A            # Dump out the requirements and the tests that prove them%0A%0A            The_Domain = A_Test.Domain_Name%0A            The_Test   = A_Test.Meeting_Test_Number%0A            The_Result = A_Test.Requid_Test_Result%0A%0A            $INLINE%0A               fprintf(stderr%2C"Domain %25s Test Number %25d "%2C The_Domain%2C The_Test );%0A            $ENDINLINE%0A%0A%0A            if The_Result = 'Passed' then%0A               $INLINE%0A                  fprintf(stderr%2C"Passed\n");%0A               $ENDINLINE%0A%0A               #$ADA_INLINE%0A                  # Test_Suite_Text_IO.Dump_String("Domain " & The_Domain & "Test Number " & Application_Types.Base_Integer_Type'image(The_Test) & "%2C Passed" );%0A               #$END_ADAINLINE%0A%0A%0A            else%0A               if The_Result = 'Failed' then%0A                  $INLINE%0A                     fprintf(stderr%2C"Failed\n");%0A                  $ENDINLINE%0A%0A                  #$ADA_INLINE%0A                     # Test_Suite_Text_IO.Dump_String("Domain " & The_Domain & "Test Number " & Application_Types.Base_Integer_Type'image(The_Test) & "%2C Failed" );%0A                  #$END_ADAINLINE%0A%0A%0A               else%0A                  if The_Result = 'Unsupported' then%0A                     $INLINE%0A                        fprintf(stderr%2C"was Unsupported\n");%0A                     $ENDINLINE%0A%0A%0A                     #$ADA_INLINE%0A                        # Test_Suite_Text_IO.Dump_String("Domain " & The_Domain & "Test Number " & Application_Types.Base_Integer_Type'image(The_Test) & "%2C Unsupported" );%0A                     #$END_ADAINLINE%0A%0A                  else%0A                     $INLINE%0A                        fprintf(stderr%2C"has an Unknown result reported\n");%0A                     $ENDINLINE%0A%0A                     #$ADA_INLINE%0A                        # Test_Suite_Text_IO.Dump_String("Domain " & The_Domain & "Test Number " & Application_Types.Base_Integer_Type'image(The_Test) & "%2C Unknown" );%0A                     #$END_ADAINLINE%0A%0A%0A                     [] = RP7::Report_Run_Time_Error["Requirement has an UNKNOWN result"]%0A                  endif%0A %0A               endif%0A            endif%0A%0A         endfor%0A%0A      else%0A%0A         # Requirement has not been tested.%0A%0A         $INLINE%0A            fprintf(stderr%2C"not been tested in this run\n" );%0A         $ENDINLINE%0A%0A%0A         #$ADA_INLINE%0A            # Test_Suite_Text_IO.Dump_String("Requirement " & Current_Reqid & "has been not been tested in this run");%0A         #$END_ADAINLINE%0A%0A      endif%0A%0A      $INLINE%0A         fprintf(stderr%2C"------------------------------------------------------------\n");%0A      $ENDINLINE%0A%0A      #$ADA_INLINE%0A         # Test_Suite_Text_IO.Dump_String("------------------------------------------------------------");%0A      #$END_ADAINLINE%0A%0A %0A   endfor%0A%0A%0Aelse%0A%0A   # No reported requirements found%0A%0A   [] = RP7::Report_Run_Time_Error["No requirements found"]%0A%0A   #$ADA_INLINE%0A      # Test_Suite_Text_IO.Dump_String("No requirements identifiers specified");%0A   #$END_ADAINLINE%0A%0Aendif%0A%0A#$ADA_INLINE%0A   #Test_Suite_Text_IO.Close_File_For_Writing(%0A      #    Name_Of_File             => "Requirements_Analysis"%2C%0A      #    Unique_Domain_Identifier => 999);%0A#$END_ADAINLINE%0A%0A%0A# Terminate and tidy up.%0Agenerate TS2:Terminate_Analysis() to this,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,Test_Suite,Complete_Analysis,terminal,3,,,
codeblock,# 1 Close down analysis of requirements.%0A# 2 Unlink and delete from the requirements results%0A# 3 Delete self%0A%0A# In the middle of a run. Allow to continue%2C but without the %0A# requirements traceability.%0A%0A#Remove all links%0A%0A{Requirements} = this ->R11.All_Requirements_In_Test_Suite%0A%0Afor requirement in {Requirements} do%0A%0A%0A   # Go from the requirement to the test results that fulfill the requirement%0A   {Tests} = requirement -> R12.Requirement_Met%0A%0A   for test in {Tests} do%0A%0A      unlink requirement R12 test%0A      delete test%0A%0A   endfor%0A%0A   unlink this R11 requirement%0A%0A   delete requirement%0A%0Aendfor%0A%0A{Domains} = this -> R10.Domain_Details%0A%0A# Only loop round if there are some domains still existing.%0AHow_Many_Left = countof{Domains}%0A%0Aif How_Many_Left != 0 then%0A%0A   for domain in {Domains} do%0A%0A      unlink domain R10 this%0A%0A   endfor%0A%0A   [] = RP7::Report_Run_Time_Error["Domains still exist"]%0A%0Aendif%0A%0Adelete this%0A,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,Test_Suite,Idle,,4,,,
state,,,,,,,,
event,Perform_Analysis,,1,,,,,
event,,,,,,,,
event,Terminate_Analysis,,2,,,,,
event,,,,,,,,
event,Go,,3,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,Perform_Analysis,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Terminate_Analysis,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Go,Cannot_Happen,,,
transition,,,,,,,,
transition,Waiting,,,Perform_Analysis,Trace_Requirements,,,
transition,,,,,,,,
transition,Waiting,,,Terminate_Analysis,Cannot_Happen,,,
transition,,,,,,,,
transition,Waiting,,,Go,Ignore,,,
transition,,,,,,,,
transition,Trace_Requirements,,,Perform_Analysis,Ignore,,,
transition,,,,,,,,
transition,Trace_Requirements,,,Terminate_Analysis,Complete_Analysis,,,
transition,,,,,,,,
transition,Trace_Requirements,,,Go,Ignore,,,
transition,,,,,,,,
transition,Complete_Analysis,,,Perform_Analysis,Cannot_Happen,,,
transition,,,,,,,,
transition,Complete_Analysis,,,Terminate_Analysis,Cannot_Happen,,,
transition,,,,,,,,
transition,Complete_Analysis,,,Go,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Perform_Analysis,Ignore,,,
transition,,,,,,,,
transition,Idle,,,Terminate_Analysis,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Go,Waiting,,,
transition,,,,,,,,
transitiontable,,,,,,,,
object,,,,,,,,
pragma,version,,,,,,,
pragmaitem,9,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Consistent reports of test results%0A,,,,,,,
domain,,,,,,,,
