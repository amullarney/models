domain,Creation_Deletion,Creation_Deletion,,,,,,
object,Coloured_Object,,,,,,,
object,,,,,,,,
object,Creation_State,,,,,,,
object,,,,,,,,
object,Doctor,,,,,,,
object,,,,,,,,
object,Doctors_Enemy,,,,,,,
object,,,,,,,,
object,Enemy,,,,,,,
object,,,,,,,,
object,Flavoured_Object,,,,,,,
object,,,,,,,,
object,Flavour_and_Colour,,,,,,,
object,,,,,,,,
object,Object_A,,,,,,,
object,,,,,,,,
object,Object_B,,,,,,,
object,,,,,,,,
object,Object_C,,,,,,,
object,,,,,,,,
object,Object_D,,,,,,,
object,,,,,,,,
object,Report_Data,,,,,,,
object,,,,,,,,
object,Termination_State,,,,,,,
object,,,,,,,,
type,battlefield_arena_type,private,,,,,,
enumeration,battlefield_arena_type,,,,,,,
enumerator,Earth,,,,,,,
enumerator,,,,,,,,
enumerator,Gallifrey,,,,,,,
enumerator,,,,,,,,
enumerator,Skarros,,,,,,,
enumerator,,,,,,,,
enumerator,Wheelchair,,,,,,,
enumerator,,,,,,,,
enumerator,Underwater,,,,,,,
enumerator,,,,,,,,
enumerator,Venus,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
type,,,,,,,,
type,actors_who_have_played_the_doctor,private,,,,,,
enumeration,actors_who_have_played_the_doctor,,,,,,,
enumerator,Tom_Baker,,,,,,,
enumerator,,,,,,,,
enumerator,Jon_Pertwee,,,,,,,
enumerator,,,,,,,,
enumerator,Patrick_Troughton,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
type,,,,,,,,
type,Flavoured_Type,private,,,,,,
enumeration,Flavoured_Type,,,,,,,
enumerator,chicken,,,,,,,
enumerator,,,,,,,,
enumerator,fish,,,,,,,
enumerator,,,,,,,,
enumerator,coffee,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
type,,,,,,,,
type,Coloured_Type,private,,,,,,
enumeration,Coloured_Type,,,,,,,
enumerator,red,,,,,,,
enumerator,,,,,,,,
enumerator,blue,,,,,,,
enumerator,,,,,,,,
enumerator,green,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
type,,,,,,,,
type,Base_Colour,private,,,,,,
enumeration,Base_Colour,,,,,,,
enumerator,Red,,,,,,,
enumerator,,,,,,,,
enumerator,Green,,,,,,,
enumerator,,,,,,,,
enumerator,Blue,,,,,,,
enumerator,,,,,,,,
enumerator,Black,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
description, This attribute is used to verify that an object instance can be created%2C when the data type uses enumeration.%0A,,,,,,,
type,,,,,,,,
type,Test_Enum_Type,public,,,,,,
enumeration,Test_Enum_Type,,,,,,,
enumerator,Sly,,,,,,,
enumerator,,,,,,,,
enumerator,Sandy,,,,,,,
enumerator,,,,,,,,
enumerator,Wes,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
type,,,,,,,,
routine,Creation_Deletion,,private,Perform_Creation_Deletion_Tests,1,,,
codeblock,#-------------------------------------------------------------------------------------------#%0A# This scenario is basically the externals 1..8 incorporated in one scenario. This is done %0A# as externals are not supported by the current SWA.%0A#-------------------------------------------------------------------------------------------#%0A%0A   # Create all objects to be used in these tests.%0A %0A   Test = 1%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0123"%2C "Creation Deletion"%2C "Scenario"%2C "Create instances in scenario"]%0A  %0A   testObjA = create Object_A with ReferenceA = 0      &\ %0A                                   IntegerA   = 1      &\%0A                                   TextA      = "Test" &\%0A                                   BooleanA   = TRUE   &\%0A                                   ColourA    = 'Red'%0A%0A   testObjB = create Object_B with ReferenceB = 0   &\%0A                                   IntegerA   = 100%0A%0A   if testObjA.ReferenceA = 0 then%0A%0A      if testObjA.IntegerA = 1 then%0A%0A         if testObjB.IntegerA = 100 then%0A %0A            if testObjA.TextA = "Test" then%0A%0A               if testObjA.BooleanA = TRUE then%0A%0A                  if testObjA.ColourA = 'Red' then%0A                     [] = RPT2:Test_Passed["Instance in scenario"%2C Test%2C 0]%0A                  else%0A                     [] = RPT3:Test_Failed["Instance in scenario"%2C Test%2C -10]%0A                  endif%0A%0A               else%0A                  [] = RPT3:Test_Failed["Instance in scenario"%2C Test%2C -20]%0A               endif%0A%0A            else%0A               [] = RPT3:Test_Failed["Instance in scenario"%2C Test%2C -30]%0A            endif%0A%0A         else%0A            [] = RPT3:Test_Failed["Instance in scenario"%2C Test%2C -40]%0A         endif%0A%0A      else%0A         [] = RPT3:Test_Failed["Instance in scenario"%2C Test%2C -50]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Instance in scenario"%2C Test%2C -60]%0A   endif%0A%0A   # delete the two newly created instances%0A   delete testObjA%0A   delete testObjB%0A%0A#-------------------------------------------------------------------------------------------#%0A%0A   # Create all objects to be used in these tests.%0A%0A   Test = 2%0A   Returned_Test_Number = 2%0A%0A   [Returned_Test_Number] = objA1:do_sync_create[Test]%0A%0A   Test = Returned_Test_Number + 1%0A%0A   [Returned_Test_Number] = objB1:do_sync_create_unique[Test]%0A%0A   Test = Returned_Test_Number + 1%0A%0A   [Returned_Test_Number] = objC1:do_create_unique_mult[Test]%0A  %0A#-------------------------------------------------------------------------------------------#%0A# Creation State tests.%0A# These shall prove that a queue is handled in a correct manner.%0A# This event should be placed on the queue%2C and the subsequent generation from within %0A# this object placed directly afterwards.%0A# The second test in the sequence should prove that this has happened as it should start %0A# after the first has reported pass/fail.%0A#-------------------------------------------------------------------------------------------#%0A%0A   Test = Returned_Test_Number + 1%0A%0A   # Creation Events are unsupported in WACA.%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0203"%2C "Creation Deletion"%2C "objCS"%2C "Generate Creation events"]%0A   [] = RPT5:Test_Text [Test%2C "Creation States are unsopported"]%0A%0A   # Start the test%0A   # generate objCS1:StartA(Test)%0A%0A   # Find out how many tests are performed in objCS1:StartA%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   # Test = Test + 1%0A%0A   # Start the test%0A   # generate objCS1:StartA(Test)%0A%0A#-------------------------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A   Returned_Test_Number = 0%0A%0A   # Perform deletion tests%0A %0A   [Returned_Test_Number] = objD1:do_deletion_tests[Test]%0A%0A#-------------------------------------------------------------------------------------------#%0A%0A   Test = Returned_Test_Number + 1%0A%0A   Returned_Test_Number = 0%0A%0A   # Perform multiple deletion tests%2C ie. delete more than one instance at a time%0A   [Returned_Test_Number] = objD2:do_multiple_deletion_tests[Test]%0A%0A#-------------------------------------------------------------------------------------------#%0A# Start termination state tests%0A#-------------------------------------------------------------------------------------------#%0A%0A   Test = Returned_Test_Number + 1%0A%0A   Returned_Test_Number = 0%0A%0A   has_failed = FALSE%0A%0A   # Create an instance to delete%0A   newTS = create Termination_State with ReferenceTS   = Test     &\%0A                                         Current_State = 'Idle'%0A%0A   # Start test%0A   generate objTS3:StartA() to newTS%0A%0A   Test = Test + 1%0A%0A#-------------------------------------------------------------------------------------------#%0A%0A   # Create an instance to delete%0A   newTS = create Termination_State with ReferenceTS   = Test     &\%0A                                         Current_State = 'Idle'%0A %0A   generate objTS3:StartA() to newTS%0A%0A   Test = Test + 1 %0A%0A#-------------------------------------------------------------------------------------------#%0A# Perform further creation tests%2C specifying attributes then attempt to delete the many to %0A# many relationship with associated object %0A#-------------------------------------------------------------------------------------------#%0A%0A   Returned_Test_Number = 0%0A%0A   [Returned_Test_Number] = coloured1:Colourize_It[Test]%0A%0A#-------------------------------------------------------------------------------------------#%0A# Perform regression tests to clarify a discrepancy between find-all returning instance %0A# handle set and a navigate to a set of instance handles.%0A#-------------------------------------------------------------------------------------------#%0A%0A   Test = Returned_Test_Number%0A   Returned_Test_Number = 0%0A%0A   [Returned_Test_Number] = coloured2:Regression_Tests[Test]%0A%0A#-------------------------------------------------------------------------------------------#%0A# Perform further creation tests%2C using Dr.Who%2C several enemies and the odd battle or two%0A# as meaningful objects.%0A#-------------------------------------------------------------------------------------------#%0A%0ATest = Returned_Test_Number%0AReturned_Test_Number = 0%0A%0A[Returned_Test_Number] = dr1:Test_the_Doctors_Mettle[Test]%0A%0A#-------------------------------------------------------------------------------------------#%0A%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,1,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Perform Creation Deletion Tests%0A,,,,,,,
routine,,,,,,,,
routine,Creation_Deletion,,private,Start_Creation_Deletion_Tests,2,,,
codeblock,[] = Creation_Deletion1::Create_Report_Object[]%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,2,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Start Creation Deletion Tests%0A,,,,,,,
routine,,,,,,,,
routine,Creation_Deletion,,private,Finish_Creation_Deletion_Tests,3,,,
codeblock,%0A[] = Creation_Deletion2::Delete_Report_Object[]%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,3,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Finish Creation Deletion Tests%0A,,,,,,,
routine,,,,,,,,
routine,Creation_Deletion,,public,Create_Report_Object,1,,,
codeblock,# Find out of there already is one of these.%0A# It is not inconceivable that a report object still exists from a previous run.%0A# Report objects are not deleted at the end of a run%2C as certain events may%0A# still be en-queued.%0A%0Aold_report = find-one Report_Data%0A%0Aif old_report != UNDEFINED then%0A   delete old_report%0Aendif%0A%0AMy_Report = create unique Report_Data with Reported_Domain_Number = 0%0A%0A[] = RPT6:Domain_Test_Start["Creation Deletion"]%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Creation_Deletion,,public,Delete_Report_Object,2,,,
codeblock,%0AThis_Report = find-one Report_Data%0A%0Aif This_Report != UNDEFINED then%0A%0A   This_Domain_Identifier = This_Report.Reported_Domain_Number%0A%0Aelse%0A%0A   This_Domain_Identifier = -1%0A%0Aendif%0A%0A[] = RPT7:Domain_Test_Finished["Creation Deletion"%2C This_Domain_Identifier]%0A%0A# Do not delete the Report_Data object%2C as there may be still events in%0A# the queue.,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Creation_Deletion,,public,Check_Enum,3,,,
parameter,The_Input_Value,in,,,,,,
typeref,Test_Enum_Type,,,,,,,
typeref,,,,,,,,
parameter,The_Return_Value,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,switch The_Input_Value%0A%0A   case 'Sly'%0A      The_Return_Value = 31%0A   case 'Sandy'%0A      The_Return_Value = 32%0A   case 'Wes'%0A      The_Return_Value = 33%0A   default%0A      The_Return_Value = -31%0Aendswitch,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,Report_Terminator,RPT,,,,,,
routine,Creation_Deletion,,public,Start_Test,1,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Requid,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Purpose,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Creation_Deletion,,public,Test_Passed,2,,,
parameter,Test_Object_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Creation_Deletion,,public,Test_Failed,3,,,
parameter,Failed_Domain_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Failed_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Failed_Test_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Creation_Deletion,,public,Test_Unsupported,4,,,
parameter,Unsupported_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Creation_Deletion,,public,Test_Text,5,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Free_Text,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Creation_Deletion,,public,Domain_Test_Start,6,,,
parameter,This_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Creation_Deletion,,public,Domain_Test_Finished,7,,,
parameter,This_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,This_Domain_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Creation_Deletion,,public,Specify_Requid,8,,,
parameter,Requid_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,The_Requid_Itself,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
terminator,Enumeration_Terminator,ENUM,,,,,,
routine,Creation_Deletion,,public,Big_Bridge_Test,1,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
associative,R1,Creation_Deletion,Flavour_and_Colour,,,,,
participation,Creation_Deletion,Coloured_Object,has,conditionally,many,Creation_Deletion,Flavoured_Object,
participation,Creation_Deletion,Flavoured_Object,has,conditionally,many,Creation_Deletion,Coloured_Object,
participation,,,,,,,,
associative,R1,Creation_Deletion,Flavour_and_Colour,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Flavoured_Object",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Coloured_Object",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
associative,,,,,,,,
associative,R2,Creation_Deletion,Doctors_Enemy,,,,,
participation,Creation_Deletion,Doctor,is_afraid_of,unconditionally,many,Creation_Deletion,Enemy,
participation,Creation_Deletion,Enemy,wants_to_kill,unconditionally,one,Creation_Deletion,Doctor,
participation,,,,,,,,
associative,R2,Creation_Deletion,Doctors_Enemy,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Enemy",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Doctor",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
associative,,,,,,,,
object,Coloured_Object,coloured,5,,,,,
attribute,Coloured,preferred,,,,,,
typeref,Coloured_Type,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Intensity,,,Coloured,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,Creation_Deletion,Coloured_Object,public,Colourize_It,,,1,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Returned_Number,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# Colouize_It Object Sync Service%0A#------------------------------------------------------------------------#%0A%0A   Test = Test_Number%0A%0A#------------------------------------------------------------------------#%0A# Test 1 - Create MtoM assoc specify attributes%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0511"%2C "Creation Deletion"%2C "Coloured_Object"%2C "Create MtoM assoc specify attributes"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0521"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0522"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0102"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0101"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0116"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0117"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0122"]%0A%0A   a_chicken_flavour = create Flavoured_Object   with Flavoured   = 'chicken'%0A   a_red_colour      = create Coloured_Object    with Coloured    = 'red'%0A   a_red_chicken     = create Flavour_and_Colour with Dish_Number = 201%0A%0A   # Set attribute using instance handle%0A   a_chicken_flavour.How_Spicy = 2%0A%0A   # Set attribute using object specification%0A   # Unsupported.%0A   # Coloured_Object.Intensity = 2 where Coloured = red%0A%0A   a_red_colour.Intensity = 2%0A%0A   # Check that attributes have been set correctly%0A   Has_Failed = FALSE%0A%0A   if a_red_chicken.Dish_Number = 201 then%0A%0A      if a_chicken_flavour.How_Spicy = 2 then%0A %0A         if a_red_colour.Intensity != 2 then%0A            Has_Failed   = TRUE  %0A            Failure_Code = -10%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -30%0A   endif%0A%0A   if !Has_Failed then%0A      [] = RPT2:Test_Passed["Coloured"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Coloured"%2C Test%2C Failure_Code]%0A   endif%0A%0A   delete a_chicken_flavour%0A   delete a_red_colour%0A   delete a_red_chicken%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A# Test 2 - %0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0511"%2C "Creation Deletion"%2C "Coloured_Object"%2C "Setup and link m to m"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0521"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0522"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0122"]%0A%0A   coffee_flavour  = create Flavoured_Object with Flavoured = 'coffee'%0A   fish_flavour    = create Flavoured_Object with Flavoured = 'fish'%0A   chicken_flavour = create Flavoured_Object with Flavoured = 'chicken' & How_Spicy = 1 %0A   coffee_flavour  = create Flavoured_Object with Flavoured = 'coffee'  & How_Spicy = 2 %0A   fish_flavour    = create Flavoured_Object with Flavoured = 'fish'    & How_Spicy = 3 %0A%0A   blue_colour  = create Coloured_Object with Coloured = 'blue'  & Intensity = 1%0A   red_colour   = create Coloured_Object with Coloured = 'red'   & Intensity = 2%0A   green_colour = create Coloured_Object with Coloured = 'green' & Intensity = 3%0A%0A   the_blue_chicken_dish = 101%0A   the_blue_coffee_dish  = 102%0A   the_blue_fish_dish    = 103%0A%0A   the_red_chicken_dish = 201%0A   the_red_coffee_dish  = 202 %0A   the_red_fish_dish    = 203%0A%0A   the_green_chicken_dish = 301%0A   the_green_coffee_dish  = 302%0A   the_green_fish_dish    = 303%0A%0A%0A   # Create associative objects to use when linking flavoured and coloured objects%0A   blue_chicken   = create Flavour_and_Colour with Dish_Number = the_blue_chicken_dish%0A   red_chicken    = create Flavour_and_Colour with Dish_Number = the_red_chicken_dish%0A   green_chicken  = create Flavour_and_Colour with Dish_Number = the_green_chicken_dish%0A   blue_coffee    = create Flavour_and_Colour with Dish_Number = the_blue_coffee_dish%0A   red_coffee     = create Flavour_and_Colour with Dish_Number = the_red_coffee_dish%0A   green_coffee   = create Flavour_and_Colour with Dish_Number = the_green_coffee_dish%0A   blue_fish      = create Flavour_and_Colour with Dish_Number = the_blue_fish_dish%0A   red_fish       = create Flavour_and_Colour with Dish_Number = the_red_fish_dish%0A   green_fish     = create Flavour_and_Colour with Dish_Number = the_green_fish_dish%0A%0A   # many to many%0A   link chicken_flavour R1 blue_colour  using blue_chicken%0A   link chicken_flavour R1 red_colour   using red_chicken%0A   link chicken_flavour R1 green_colour using green_chicken%0A%0A   link coffee_flavour R1 blue_colour  using blue_coffee%0A   link coffee_flavour R1 red_colour   using red_coffee%0A   link coffee_flavour R1 green_colour using green_coffee%0A%0A   link fish_flavour R1 blue_colour  using blue_fish%0A   link fish_flavour R1 red_colour   using red_fish%0A   link fish_flavour R1 green_colour using green_fish%0A %0A   {set_of_associated_instances} = find-all Flavour_and_Colour %0A   {red_things}          = find Coloured_Object where Coloured = 'red'%0A   {blue_things}         = find Coloured_Object where Coloured = 'blue'%0A   {green_things}        = find Coloured_Object where Coloured = 'green'%0A   {coloured_things}     = find-all Coloured_Object%0A%0A   {chicken_things}      = find Flavoured_Object where Flavoured = 'chicken'%0A   {coffee_things}       = find Flavoured_Object where Flavoured = 'coffee'%0A   {fish_things}         = find Flavoured_Object where Flavoured = 'fish'%0A   {flavoured_things}    = find-all Flavoured_Object%0A%0A   # Coloured things in all their glory%0A   number_of_red_things      = countof {red_things}%0A   number_of_blue_things     = countof {blue_things}%0A   number_of_green_things    = countof {green_things}%0A   number_of_coloured_things = countof{coloured_things}%0A%0A   # Flavoured things in their entirety.%0A   number_of_chicken_things = countof {chicken_things}%0A   number_of_fish_things = countof {fish_things}%0A   number_of_coffee_things = countof {coffee_things}%0A   number_of_flavoured_things = countof{flavoured_things}%0A%0A   number_of_associated_instances = countof {set_of_associated_instances}%0A%0A   The_Test_Has_Passed = FALSE%0A%0A   if number_of_associated_instances = 9 then%0A      %0A      if number_of_flavoured_things = 5 then%0A%0A         if number_of_coloured_things = 3 then%0A            # Test has passed%0A            The_Test_Has_Passed = TRUE%0A         endif%0A%0A      endif%0A %0A   endif%0A%0A   if The_Test_Has_Passed = TRUE then%0A      [] = RPT2:Test_Passed["coloured"%2C Test%2C number_of_associated_instances]%0A   else%0A      [] = RPT3:Test_Failed["coloured"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#------------------------------------------------------------------------#%0A# Test 3 - Navigate from coloured object to associated object%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "Coloured_Object"%2C "Navigate from coloured object to assoc"]%0A%0A   Test_Passed_Counter = 0%0A%0A   for coloured_thing in {coloured_things} do%0A%0A      The_Test_Has_Passed = FALSE%0A%0A      # Debug start%0A      my_colour = coloured_thing.Coloured%0A%0A      if my_colour = 'red' then%0A         colour_string = "Red"%0A      endif%0A%0A      if my_colour = 'green' then%0A         colour_string = "Green"%0A      endif%0A%0A      if my_colour = 'blue' then%0A         colour_string = "Blue"%0A      endif%0A%0A      # debug end%0A%0A      {associated_instances} = coloured_thing -> R1.Flavour_and_Colour%0A      number_of_assoc_instances = countof{associated_instances}%0A%0A      The_Test_Has_Passed = FALSE%0A%0A      for assoc_instance in {associated_instances} do%0A         the_dish = assoc_instance.Dish_Number%0A%0A         # Use of referential attributes is not permitted.%0A         # the_assoc_flavour = assoc_instance.Flavoured%0A         this_flavoured_object = assoc_instance -> R1.Flavoured_Object%0A         the_assoc_flavour = this_flavoured_object.Flavoured%0A%0A         the_colour = coloured_thing.Coloured%0A      %0A         switch the_colour%0A%0A         case 'red'%0A%0A            switch the_assoc_flavour%0A%0A            case 'chicken'%0A               if the_dish = the_red_chicken_dish then%0A                  The_Test_Has_Passed = TRUE%0A               endif%0A%0A            case 'fish'%0A               if the_dish = the_red_fish_dish then%0A                  The_Test_Has_Passed = TRUE%0A               endif%0A%0A             case 'coffee'%0A                if the_dish = the_red_coffee_dish then%0A                   The_Test_Has_Passed = TRUE%0A                endif%0A%0A             default%0A                The_Test_Has_Passed = FALSE%0A             endswitch%0A %0A         case 'blue'%0A%0A            switch the_assoc_flavour%0A%0A            case 'chicken'%0A               if the_dish = the_blue_chicken_dish then%0A                  The_Test_Has_Passed = TRUE%0A               endif%0A%0A            case 'fish'%0A               if the_dish = the_blue_fish_dish then%0A                  The_Test_Has_Passed = TRUE%0A               endif%0A%0A             case 'coffee'%0A                if the_dish = the_blue_coffee_dish then%0A                   The_Test_Has_Passed = TRUE%0A                endif%0A%0A             default%0A                The_Test_Has_Passed = FALSE%0A             endswitch%0A %0A%0A         case 'green'%0A            switch the_assoc_flavour%0A%0A            case 'chicken'%0A               if the_dish = the_green_chicken_dish then%0A                  The_Test_Has_Passed = TRUE%0A               endif%0A%0A            case 'fish'%0A               if the_dish = the_green_fish_dish then%0A                  The_Test_Has_Passed = TRUE%0A               endif%0A%0A             case 'coffee'%0A                if the_dish = the_green_coffee_dish then%0A                   The_Test_Has_Passed = TRUE%0A                endif%0A%0A             default%0A                The_Test_Has_Passed = FALSE%0A             endswitch%0A %0A%0A         default%0A%0A            The_Test_Has_Passed = FALSE%0A%0A         endswitch%0A%0A         if The_Test_Has_Passed = TRUE then%0A            Test_Passed_Counter = Test_Passed_Counter + 1%0A         else%0A            Test_Passed_Counter = Test_Passed_Counter - 1%0A         endif%0A%0A      endfor%0A%0A   endfor%0A%0A   if Test_Passed_Counter = 9 then%0A      [] = RPT2:Test_Passed["coloured"%2C Test%2C Test_Passed_Counter]%0A   else%0A      [] = RPT3:Test_Failed["coloured"%2C Test%2C Test_Passed_Counter]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#------------------------------------------------------------------------#%0A# Test 4 - Navigate from flavoured object to associated object%0A#------------------------------------------------------------------------#%0A   %0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "Coloured_Object"%2C "Navigate from flavoured object to assoc"]%0A%0A   Test_Passed_Counter = 0%0A%0A   for flavoured_thing in {flavoured_things} do%0A%0A      The_Test_Has_Passed = FALSE%0A%0A      {associated_instances} = flavoured_thing -> R1.Flavour_and_Colour%0A      number_of_assoc_instances = countof{associated_instances}%0A%0A      if number_of_associated_instances = 0 then%0A         [] = RPT3:Test_Failed["coloured"%2C Test%2C -2]%0A      else%0A%0A         for assoc_instance in {associated_instances} do%0A%0A            the_dish = assoc_instance.Dish_Number%0A%0A            # Navigate to the coloured object from the assoc object.%0A%0A            this_colour = assoc_instance -> R1.Coloured_Object%0A%0A            if this_colour != UNDEFINED then%0A               the_assoc_colour = this_colour.Coloured%0A            endif%0A%0A            the_flavour = flavoured_thing.Flavoured%0A      %0A            switch the_flavour%0A%0A            case 'chicken'%0A%0A               switch the_assoc_colour%0A%0A               case 'green'%0A                  if the_dish = the_green_chicken_dish then%0A                     The_Test_Has_Passed = TRUE%0A                  endif%0A%0A               case 'blue'%0A                  if the_dish = the_blue_chicken_dish then%0A                     The_Test_Has_Passed = TRUE%0A                  endif%0A%0A                case 'red'%0A                   if the_dish = the_red_chicken_dish then%0A                      The_Test_Has_Passed = TRUE%0A                   endif%0A%0A                default%0A                   The_Test_Has_Passed = FALSE%0A                endswitch%0A %0A            case 'fish'%0A%0A               switch the_assoc_colour%0A%0A               case 'green'%0A                  if the_dish = the_green_fish_dish then%0A                     The_Test_Has_Passed = TRUE%0A                  endif%0A%0A               case 'blue'%0A                  if the_dish = the_blue_fish_dish then%0A                     The_Test_Has_Passed = TRUE%0A                  endif%0A%0A               case 'red'%0A                  if the_dish = the_red_fish_dish then%0A                     The_Test_Has_Passed = TRUE%0A                   endif%0A%0A               default%0A                  The_Test_Has_Passed = FALSE%0A               endswitch%0A %0A            case 'coffee'%0A%0A               switch the_assoc_colour%0A%0A               case 'green'%0A                  if the_dish = the_green_coffee_dish then%0A                     The_Test_Has_Passed = TRUE%0A                  endif%0A%0A               case 'blue'%0A                  if the_dish = the_blue_coffee_dish then%0A                     The_Test_Has_Passed = TRUE%0A                  endif%0A%0A               case 'red'%0A                  if the_dish = the_red_coffee_dish then%0A                     The_Test_Has_Passed = TRUE%0A                  endif%0A%0A               default%0A                  The_Test_Has_Passed = FALSE%0A               endswitch%0A       %0A            default %0A  %0A               The_Test_Has_Passed = FALSE%0A%0A            endswitch%0A      %0A%0A            if The_Test_Has_Passed = TRUE then%0A               Test_Passed_Counter = Test_Passed_Counter + 1%0A            else%0A               Test_Passed_Counter = Test_Passed_Counter - 1%0A            endif%0A%0A         endfor%0A%0A      endif%0A%0A   endfor%0A%0A   if Test_Passed_Counter = 9 then%0A      [] = RPT2:Test_Passed["flavoured"%2C Test%2C Test_Passed_Counter]%0A   else%0A      [] = RPT3:Test_Failed["flavoured"%2C Test%2C Test_Passed_Counter]%0A   endif %0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A#------------------------------------------------------------------------#%0A# Test 5 - Navigate from flavoured object to associated object%0A#------------------------------------------------------------------------#%0A%0A   chicken_count = 0%0A   fish_count    = 0%0A   coffee_count  = 0%0A%0A   # Navigate from flavoured object to associated object%0A%0A   The_Test_Has_Passed = FALSE%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "Coloured_Object"%2C "Navigate from assoc object to flavoured"]%0A%0A   for assoc_thing in {set_of_associated_instances} do%0A%0A      flavoured_instance = assoc_thing -> R1.Flavoured_Object%0A%0A      the_flavour = flavoured_instance.Flavoured%0A%0A      if the_flavour = 'chicken' then%0A         chicken_count = chicken_count + 1%0A      else%0A%0A         if the_flavour = 'fish' then%0A            fish_count = fish_count + 1%0A         else%0A%0A            if the_flavour = 'coffee' then%0A               coffee_count = coffee_count + 1%0A            else%0A               The_Test_Has_Passed = FALSE%0A            endif%0A%0A         endif%0A%0A      endif%0A%0A   endfor%0A%0A   if coffee_count = 3 & \%0A      chicken_count = 3 & \%0A      fish_count = 3 then%0A      The_Test_Has_Passed = TRUE%0A   endif%0A%0A   if The_Test_Has_Passed = TRUE then%0A      [] = RPT2:Test_Passed["coloured"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["coloured"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A#------------------------------------------------------------------------#%0A# Test 6 - Navigate from assoc object to coloured%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "Coloured_Object"%2C "Navigate from assoc object to coloured"]%0A%0A   red_count   = 0%0A   blue_count  = 0%0A   green_count = 0%0A%0A   The_Test_Has_Passed = FALSE%0A%0A   # Navigate from assoc object to coloured object%0A   for assoc_thing in {set_of_associated_instances} do%0A%0A      coloured_instance = assoc_thing -> R1.Coloured_Object%0A%0A      the_colour = coloured_instance.Coloured%0A%0A      if the_colour = 'red' then%0A         red_count = red_count + 1%0A      else%0A%0A         if the_colour = 'blue' then%0A            blue_count = blue_count + 1%0A         else%0A%0A            if the_colour = 'green' then%0A               green_count = green_count + 1%0A            else%0A               The_Test_Has_Passed = FALSE%0A            endif%0A%0A         endif%0A%0A      endif%0A  %0A   endfor%0A%0A   if red_count = 3 & \%0A      blue_count = 3 & \%0A      green_count = 3 then%0A      The_Test_Has_Passed = TRUE%0A   endif%0A%0A   if The_Test_Has_Passed = TRUE then%0A      [] = RPT2:Test_Passed["coloured"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["coloured"%2C Test%2C -1]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 6%0A%0A#------------------------------------------------------------------------#%0A# Test 7 - Unnassociate assoc object%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "Coloured_Object"%2C "Unnassociate assoc object"]%0A%0A   Failure_Code = -3%0A%0A   # Attempt deletion of assoc object and others %0A   red_chicken = find-one Flavour_and_Colour where Dish_Number = 201%0A%0A   # Found exactly one red chicken with a dish number of 201%0A   # Find the colour and flavour%2C it should be red and chicken flavoured.%0A   a_chicken = red_chicken -> R1.Flavoured_Object%0A   a_red     = red_chicken -> R1.Coloured_Object%0A%0A   # Stash this value%2C it's used in the next test%2C but unlink and unassociate%0A   # are inextricably linked and testing them separately can cause differences%0A   # between WACA and ISIM.%0A   {before_red_chickens} = a_red -> R1.Flavoured_Object%0A%0A   # Unassociate the assoc object from the m to m relationship%0A   unassociate a_chicken R1 a_red from red_chicken %0A%0A   # Attempt the navigation again%0A   an_illegal_chicken = red_chicken -> R1.Flavoured_Object%0A%0A   if an_illegal_chicken = UNDEFINED then %0A      The_Test_Has_Passed = TRUE%0A      Failure_Code = Failure_Code + 1%0A   endif%0A%0A   an_illegal_red = red_chicken -> R1.Coloured_Object%0A%0A   if an_illegal_red = UNDEFINED then %0A      The_Test_Has_Passed = TRUE%0A      Failure_Code = Failure_Code + 2%0A   endif%0A%0A   if The_Test_Has_Passed = TRUE then%0A      [] = RPT2:Test_Passed["coloured"%2C Test%2C Failure_Code]%0A   else%0A      [] = RPT3:Test_Failed["coloured"%2C Test%2C Failure_Code]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 7%0A%0A#------------------------------------------------------------------------#%0A# Test 8 - Unlink assoc object%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "Coloured_Object"%2C "Unlink assoc object"]%0A%0A   Failure_Code = -1%0A%0A   The_Test_Has_Passed = FALSE%0A%0A   number_of_red_chickens_before = countof{before_red_chickens}%0A%0A   # Unlink two instances%0A   unlink a_chicken R1 a_red%0A%0A   # Attempt to navigate down remaining links%0A   {after_red_chickens} = a_red -> R1.Flavoured_Object%0A%0A   number_of_red_chickens_after = countof{after_red_chickens}%0A%0A   if number_of_red_chickens_before != number_of_red_chickens_after then %0A      The_Test_Has_Passed = TRUE%0A      Failure_Code = Failure_Code + 1%0A   endif%0A%0A   if The_Test_Has_Passed = TRUE then%0A      [] = RPT2:Test_Passed["coloured"%2C Test%2C Failure_Code]%0A   else%0A      [] = RPT3:Test_Failed["coloured"%2C Test%2C Failure_Code]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 8%0A%0A#------------------------------------------------------------------------#%0A# Test 9 - Delete assoc object%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0121"%2C "Creation Deletion"%2C "Coloured_Object"%2C "Delete assoc object"]%0A   [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0531"]%0A%0A   # a_chicken is still associated with some other coloured_objects%0A   # also a_red is still associated with some other flavoured_objects%0A   # but red_chicken isn't%0A%0A   delete red_chicken%0A%0A   # Now try and re-aquire them%0A   assoc_object = find-one Flavour_and_Colour where Dish_Number = 201%0A%0A   # Left and right objects are still linked and associated with other instances%0A   left_object  = find-one Flavoured_Object   where Flavoured = 'chicken'%0A   right_object = find-one Coloured_Object    where Coloured = 'red'%0A%0A   The_Test_Has_Passed = FALSE%0A%0A   if left_object != UNDEFINED then%0A%0A      if right_object != UNDEFINED then%0A%0A         if assoc_object = UNDEFINED then%0A            The_Test_Has_Passed = TRUE%0A         endif%0A%0A      endif%0A   %0A   endif%0A%0A   if The_Test_Has_Passed = TRUE then%0A      [] = RPT2:Test_Passed["coloured"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["coloured"%2C Test%2C -1]%0A   endif %0A%0A   Test = Test + 1%0A%0A# End Test 9%0A%0A#------------------------------------------------------------------------#%0A# Test 10 - Tidy up and delete all instances.%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0121"%2C "Creation Deletion"%2C "Coloured_Object"%2C "Delete everything"]%0A   [] = RPT8:Specify_Requid [Test%2C "1103-0000-01-0531"]%0A%0A   {set_of_assoc} = find-all Flavour_and_Colour%0A%0A   for each_assoc in {set_of_assoc} do%0A%0A      # Navigate up the relationship to the two instances%0A      a_colour  = each_assoc -> R1.Coloured_Object%0A      a_flavour = each_assoc -> R1.Flavoured_Object%0A%0A      unassociate a_flavour R1 a_colour from each_assoc%0A%0A      unlink a_colour R1 a_flavour%0A%0A      # Get rid of the assoc instance as it is no longer linked to anything.%0A      delete each_assoc%0A%0A   endfor%0A%0A   {set_of_colour} = find-all Coloured_Object%0A%0A   for each_colour in {set_of_colour} do%0A      # Navigate up the relationship to the two instances%0A      {some_flavours} = each_colour -> R1.Flavoured_Object%0A%0A      for a_flavour in {some_flavours} do%0A         unlink each_colour R1 a_flavour%0A      endfor%0A%0A      # Get rid of the colour instance as it is no longer linked to anything.%0A      delete each_colour%0A%0A   endfor%0A%0A   {set_of_flavour} = find-all Flavoured_Object%0A%0A   for each_flavour in {set_of_flavour} do%0A      # Navigate up the relationship to the two instances%0A      #   a_colour = each_flavour -> R1.Coloured_Object%0A      #   unlink each_flavour R1 a_colour%0A%0A      # Get rid of the flavour instance as it is no longer linked to anything.%0A      delete each_flavour%0A   endfor%0A%0A   a_flavour = find-one Flavoured_Object%0A   a_colour  = find-one Coloured_Object%0A   assoc     = find-one Flavour_and_Colour%0A%0A   if a_flavour = UNDEFINED then %0A%0A      if a_colour  = UNDEFINED then %0A%0A         if assoc     = UNDEFINED then%0A            [] = RPT2:Test_Passed["coloured "%2C Test%2C 0]%0A         else%0A            [] = RPT3:Test_Failed["coloured assoc"%2C Test%2C -1]%0A         endif%0A%0A      else%0A         [] = RPT3:Test_Failed["coloured a_colour"%2C Test%2C -2]  %0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["coloured a_flavour"%2C Test%2C -3]%0A   endif%0A%0A# End Test 10%0A%0A#------------------------------------------------------------------------#%0A%0AReturned_Number = Test + 1,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Creation_Deletion,Coloured_Object,public,Regression_Tests,,,2,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Returned_Test_Number,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,Test = Test_Number%0A%0A#------------------------------------------------------------------------#%0A# Test 1 - Create Many to Many assoc specify attributes%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0511"%2C "Creation Deletion"%2C "Coloured_Object"%2C "Create MtoM assoc specify attributes"]%0A   [] = RPT8:Specify_Requid [Test%2C"1103-0000-01-0521"]%0A   [] = RPT8:Specify_Requid [Test%2C"1103-0000-01-0522"]%0A   [] = RPT8:Specify_Requid [Test%2C"1103-0000-01-0531"]%0A%0A   a_chicken_flavour = create Flavoured_Object   with Flavoured   = 'chicken'%0A   a_red_colour      = create Coloured_Object    with Coloured    = 'red'%0A   a_red_chicken     = create Flavour_and_Colour with Dish_Number = 201%0A%0A   # Set attribute using instance handle%0A   a_chicken_flavour.How_Spicy = 2%0A%0A   a_red_colour.Intensity = 2%0A%0A   # Check that attributes have been set correctly%0A   Has_Failed = FALSE%0A%0A   if a_red_chicken.Dish_Number = 201 then%0A%0A      if a_chicken_flavour.How_Spicy = 2 then%0A%0A         if a_red_colour.Intensity != 2 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -10%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -30%0A   endif%0A%0A   if !Has_Failed then%0A      [] = RPT2:Test_Passed["Coloured"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Coloured"%2C Test%2C Failure_Code]%0A   endif%0A%0A   delete a_chicken_flavour%0A   delete a_red_colour%0A   delete a_red_chicken%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A# Test 2 - Full delete of all instances%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0531"%2C "Creation Deletion"%2C "Coloured_Object"%2C "Full delete of all instances"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0121"]%0A%0A   # All flavours and colours and associated instances should now be in the%0A   # bin%2C mouldering quietly.%0A%0A   # Prove it.%0A%0A   {faded_set_of_colours}       = find-all Coloured_Object%0A   {mouldering_set_of_flavours} = find-all Flavoured_Object%0A   {mouldered_and_faded}        = find-all Flavour_and_Colour%0A%0A   no_of_faded               = countof {faded_set_of_colours}%0A   no_of_mouldered           = countof {mouldering_set_of_flavours}%0A   no_of_mouldered_and_faded = countof {mouldered_and_faded}%0A%0A   if no_of_faded = 0 then%0A%0A      if no_of_mouldered = 0 then%0A%0A        if no_of_mouldered_and_faded = 0 then%0A           [] = RPT2:Test_Passed["Full Delete"%2C Test%2C 0]     %0A         else%0A            [] = RPT3:Test_Failed["Mouldered And Faded"%2C Test%2C no_of_mouldered_and_faded]%0A         endif%0A%0A      else%0A         [] = RPT3:Test_Failed["Mouldered Still Exists"%2C Test%2C no_of_mouldered]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Faded Still Exists"%2C Test%2C no_of_faded]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#------------------------------------------------------------------------#%0A# Test 3 - Link new instances%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "Coloured_Object"%2C "Link new instances"]%0A%0A   # Having established that in the previous test these appear to have been deleted%2C %0A   # create a new flavour%2C colour%2C flavoured_and_coloured situation and see%0A   # if the link has been really freshly created%2C or is there some baggage?%0A%0A   a_new_blue_colour  = create Coloured_Object    with Coloured    = 'blue' & Intensity = 1%0A   a_new_fish_flavour = create Flavoured_Object   with Flavoured   = 'fish' & How_Spicy = 1%0A   a_new_blue_fish    = create Flavour_and_Colour with Dish_Number = 202%0A%0A   # link the relationship%0A   link a_new_fish_flavour R1 a_new_blue_colour using a_new_blue_fish%0A%0A   # Navigate from the blue colour to the set of associated instances. Don't rely%0A   # on a find for the instance handle for the blue object%2C we already know it.%0A%0A   {new_associated_instances} = a_new_blue_colour -> R1.Flavour_and_Colour%0A%0A   # There should only be one blue fish associated instance handle in the set%0A%0A   no_of_new_associated_instances = countof {new_associated_instances}%0A%0A   if no_of_new_associated_instances = 1 then%0A      [] = RPT2:Test_Passed["Link new instance"%2C Test%2C 0]%0A   else%0A%0A      # There is more of these than there should be. Schlepper off down the %0A      # link and see what is on the other side. If the dish number is either 201 %0A      # or 202%2C then it means that the data is still visible%2C and not just some%0A      # hyperspace value.%0A%0A      for unwanted_instance in {new_associated_instances} do%0A         [] = RPT5:Test_Text[unwanted_instance.Dish_Number%2C "found this assoc instance"]%0A      endfor%0A%0A      [] = RPT3:Test_Failed["Link new instance"%2C Test%2C no_of_new_associated_instances]%0A   endif%0A%0A   # Get rid of the latest instances.%0A%0A   unassociate a_new_fish_flavour R1 a_new_blue_colour from a_new_blue_fish%0A   unlink a_new_fish_flavour R1 a_new_blue_colour%0A   delete a_new_fish_flavour%0A   delete a_new_blue_colour%0A   delete a_new_blue_fish%0A%0A   # We know that these may still exist%2C and so cause a future test to fail.%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#------------------------------------------------------------------------#%0A# Test 4 - Setup and link m to m%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "Coloured_Object"%2C "Setup and link m to m"]%0A%0A   chicken_flavour = create Flavoured_Object with Flavoured = 'chicken' & How_Spicy = 1 %0A   coffee_flavour  = create Flavoured_Object with Flavoured = 'coffee'  & How_Spicy = 2 %0A   fish_flavour    = create Flavoured_Object with Flavoured = 'fish'    & How_Spicy = 3 %0A%0A   blue_colour  = create Coloured_Object with Coloured = 'blue'  & Intensity = 1%0A   red_colour   = create Coloured_Object with Coloured = 'red'   & Intensity = 2%0A   green_colour = create Coloured_Object with Coloured = 'green' & Intensity = 3%0A%0A   the_blue_chicken_dish = 101%0A   the_blue_coffee_dish  = 102%0A   the_blue_fish_dish    = 103%0A%0A   the_red_chicken_dish = 201%0A   the_red_coffee_dish  = 202%0A   the_red_fish_dish    = 203%0A%0A   the_green_chicken_dish = 301%0A   the_green_coffee_dish  = 302%0A   the_green_fish_dish    = 303%0A%0A%0A   # Create associative objects to use when linking flavoured and coloured objects%0A%0A   blue_chicken  = create Flavour_and_Colour with Dish_Number = the_blue_chicken_dish%0A   red_chicken   = create Flavour_and_Colour with Dish_Number = the_red_chicken_dish%0A   green_chicken = create Flavour_and_Colour with Dish_Number = the_green_chicken_dish%0A%0A   blue_coffee  = create Flavour_and_Colour with Dish_Number = the_blue_coffee_dish%0A   red_coffee   = create Flavour_and_Colour with Dish_Number = the_red_coffee_dish%0A   green_coffee = create Flavour_and_Colour with Dish_Number = the_green_coffee_dish%0A%0A   blue_fish  = create Flavour_and_Colour with Dish_Number = the_blue_fish_dish%0A   red_fish   = create Flavour_and_Colour with Dish_Number = the_red_fish_dish%0A   green_fish = create Flavour_and_Colour with Dish_Number = the_green_fish_dish%0A%0A   # many to many%0A   link chicken_flavour R1 blue_colour  using blue_chicken%0A   link chicken_flavour R1 red_colour   using red_chicken%0A   link chicken_flavour R1 green_colour using green_chicken%0A%0A   link coffee_flavour R1 blue_colour  using blue_coffee%0A   link coffee_flavour R1 red_colour   using red_coffee%0A   link coffee_flavour R1 green_colour using green_coffee%0A%0A   link fish_flavour R1 blue_colour  using blue_fish%0A   link fish_flavour R1 red_colour   using red_fish%0A   link fish_flavour R1 green_colour using green_fish%0A%0A   {set_of_associated_instances} = find-all Flavour_and_Colour %0A%0A   {red_things}          = find Coloured_Object where Coloured = 'red'%0A   {blue_things}         = find Coloured_Object where Coloured = 'blue'%0A   {green_things}        = find Coloured_Object where Coloured = 'green'%0A%0A   {chicken_things}      = find Flavoured_Object where Flavoured = 'chicken'%0A   {coffee_things}       = find Flavoured_Object where Flavoured = 'coffee'%0A   {fish_things}         = find Flavoured_Object where Flavoured = 'fish'%0A%0A   {flavoured_things}    = find-all Flavoured_Object%0A   {coloured_things}     = find-all Coloured_Object%0A%0A   number_of_red_things           = countof {red_things}%0A   number_of_blue_things          = countof {blue_things}%0A   number_of_green_things         = countof {green_things}%0A   number_of_coloured_things      = countof {coloured_things}%0A   number_of_chicken_things       = countof {chicken_things}%0A   number_of_fish_things          = countof {fish_things}%0A   number_of_coffee_things        = countof {coffee_things}%0A   number_of_flavoured_things     = countof {flavoured_things}%0A   number_of_associated_instances = countof {set_of_associated_instances}%0A%0A   Has_Failed = FALSE%0A%0A   if number_of_associated_instances = 9 then%0A%0A      if number_of_flavoured_things = 3 then%0A%0A         if number_of_coloured_things != 3 then%0A            Has_Failed   = TRUE%0A            Failure_Code = -10%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -30%0A   endif%0A%0A   if !Has_Failed then%0A      [] = RPT2:Test_Passed["coloured"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["coloured"%2C Test%2C Failure_Code]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A#------------------------------------------------------------------------#%0A# Test 5 - Navigate from coloured object to associated object%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "Coloured_Object"%2C "Navigate from coloured object to assoc"]%0A%0A   Test_Passed_Counter = 0%0A%0A   for coloured_thing in {coloured_things} do%0A%0A      The_Test_Has_Passed = FALSE%0A%0A      my_colour = coloured_thing.Coloured%0A%0A      # Perform the navigation to find the set of associated instances.%0A      {associated_instances} = coloured_thing -> R1.Flavour_and_Colour%0A      number_of_assoc_instances = countof{associated_instances}%0A%0A      The_Test_Has_Passed = FALSE%0A%0A      for assoc_instance in {associated_instances} do%0A%0A         the_dish = assoc_instance.Dish_Number%0A%0A         this_flavour = assoc_instance -> R1.Flavoured_Object%0A%0A         if this_flavour != UNDEFINED then%0A            the_assoc_flavour = this_flavour.Flavoured%0A         endif%0A%0A         the_colour = coloured_thing.Coloured%0A      %0A         switch the_colour%0A%0A            case 'red'%0A%0A               switch the_assoc_flavour%0A%0A                  case 'chicken'%0A%0A                     if the_dish = the_red_chicken_dish then%0A                        The_Test_Has_Passed = TRUE%0A                     endif%0A%0A                  case 'fish'%0A%0A                     if the_dish = the_red_fish_dish then%0A                        The_Test_Has_Passed = TRUE%0A                     endif%0A%0A                  case 'coffee'%0A%0A                     if the_dish = the_red_coffee_dish then%0A                        The_Test_Has_Passed = TRUE%0A                     endif%0A%0A                  default%0A%0A                     The_Test_Has_Passed = FALSE%0A               endswitch%0A %0A            case 'blue'%0A%0A               switch the_assoc_flavour%0A%0A                  case 'chicken'%0A%0A                     if the_dish = the_blue_chicken_dish then%0A                        The_Test_Has_Passed = TRUE%0A                     endif%0A%0A                  case 'fish'%0A%0A                     if the_dish = the_blue_fish_dish then%0A                        The_Test_Has_Passed = TRUE%0A                     endif%0A%0A                  case 'coffee'%0A%0A                     if the_dish = the_blue_coffee_dish then%0A                        The_Test_Has_Passed = TRUE%0A                     endif%0A%0A                  default%0A                     The_Test_Has_Passed = FALSE%0A               endswitch%0A %0A            case 'green'%0A%0A               switch the_assoc_flavour%0A%0A                  case 'chicken'%0A%0A                     if the_dish = the_green_chicken_dish then%0A                        The_Test_Has_Passed = TRUE%0A                     endif%0A%0A                  case 'fish'%0A%0A                     if the_dish = the_green_fish_dish then%0A                        The_Test_Has_Passed = TRUE%0A                     endif%0A%0A                  case 'coffee'%0A%0A                     if the_dish = the_green_coffee_dish then%0A                        The_Test_Has_Passed = TRUE%0A                     endif%0A%0A                  default%0A                     The_Test_Has_Passed = FALSE%0A               endswitch%0A %0A%0A            default%0A               The_Test_Has_Passed = FALSE%0A         endswitch%0A%0A         if The_Test_Has_Passed = TRUE then%0A            Test_Passed_Counter = Test_Passed_Counter + 1%0A         else%0A            Test_Passed_Counter = Test_Passed_Counter - 1%0A         endif%0A%0A      endfor%0A %0A   endfor%0A%0A   if Test_Passed_Counter = 9 then%0A      [] = RPT2:Test_Passed["coloured"%2C Test%2C Test_Passed_Counter]%0A   else%0A      [] = RPT3:Test_Failed["coloured"%2C Test%2C Test_Passed_Counter]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A#------------------------------------------------------------------------#%0A# Test 6 - Tidy up and delete all instances.%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0531"%2C "Creation Deletion"%2C "Coloured_Object"%2C "Delete everything"]%0A   [] = RPT8:Specify_Requid [Test%2C "1241-0000-01-0121"]%0A   {set_of_assoc} = find-all Flavour_and_Colour%0A%0A   for each_assoc in {set_of_assoc} do%0A%0A      # Navigate up the relationship to the two instances%0A      a_colour  = each_assoc -> R1.Coloured_Object%0A      a_flavour = each_assoc -> R1.Flavoured_Object%0A%0A      unassociate a_flavour R1 a_colour from each_assoc%0A%0A      unlink a_colour R1 a_flavour%0A%0A      # Get rid of the assoc instance as it is no longer linked to anything.%0A      delete each_assoc%0A%0A      {any_more_flavours} = a_colour -> R1.Flavoured_Object%0A      {any_more_colours}  = a_flavour -> R1.Coloured_Object%0A%0A      if countof {any_more_flavours} = 0 then%0A         # This instance of colour is not linked to any more flavours.%0A         delete a_colour%0A      endif%0A%0A      if countof {any_more_colours} = 0 then%0A         # This instance of flavour is not linked to any more colours.%0A         delete a_flavour%0A      endif%0A%0A   endfor%0A%0A   a_flavour = find-one Flavoured_Object%0A   a_colour  = find-one Coloured_Object%0A   assoc     = find-one Flavour_and_Colour%0A%0A   if a_flavour = UNDEFINED then%0A%0A      if a_colour  = UNDEFINED then%0A%0A         if assoc != UNDEFINED then%0A            [] = RPT3:Test_Failed["Coloured"%2C Test%2C -10]%0A         else%0A            [] = RPT2:Test_Passed["Coloured"%2C Test%2C 0]%0A         endif%0A%0A      else%0A         [] = RPT3:Test_Failed["Coloured"%2C Test%2C -20]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Coloured"%2C Test%2C -30]%0A   endif%0A%0A#------------------------------------------------------------------------#%0A%0AReturned_Test_Number = Test + 1,,,,,,,
codeblock,,,,,,,,
description, There is a problem in version 2.0.2 of WACA. This service will attempt to clarify what is going wrong.%0A,,,,,,,
operation,,,,,,,,
object,,,,,,,,
object,Creation_State,objCS,8,,,,,
attribute,ReferenceCS,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultCS,,,ReferenceCS,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicate that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
state,,Creation_State,Instance_creation,creation,1,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,%0A#------------------------------------------------------------------------#%0A%0A#Creation state%0A%0A#------------------------------------------------------------------------#%0A%0A#Creation of an instance in a creation state%0A%0A[] = RPT1:Start_Test[Test%2C "null requid"%2C "Creation Deletion"%2C "objCS"%2C "Creation State"]%0A%0A#Create an instance of an object%0AnewCS = create Creation_State with ReferenceCS = Test &\%0A                                   ResultCS = 0%0A%0A%0Agenerate objCS4:StartB(Test) to newCS%0A%0A%0A#End Test 1%0A%0A#------------------------------------------------------------------------#,,,,,,,
codeblock,,,,,,,,
description, This state verifies the following:%0A %0A 	[1] Instance creation in a creation state.%0A,,,,,,,
state,,,,,,,,
state,,Creation_State,Verify_instance_creation,,3,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,%0A#------------------------------------------------------------------------#%0A%0A#Verify instance creation%0A%0A#------------------------------------------------------------------------#%0A%0A#Set the fault flag%2C set to TRUE if a fault has been identified%0AFault_Flag = FALSE%0A%0A#------------------------------------------------------------------------#%0A%0A[] = RPT5:Test_Text[Test%2C"Verify instance creation"]%0A%0A%0A   #Check that the instance that was created%0A   an_instanceCS = find-one Creation_State where ReferenceCS = Test%0A%0A   if an_instanceCS = UNDEFINED then%0A      Fault_Flag = TRUE%0A   else%0A      this.ResultCS = Test%0A   endif%0A%0A%0A%0A   #------------------------------------------------------------------------#%0A%0A   #Test complete%0A   if Fault_Flag = FALSE then%0A		         	    %0A      [] = RPT2:Test_Passed["objCS"%2C Test%2C 0]%0A%0A      generate objCS5:It_passed() to this%0A%0A   else%0A		         	    %0A      [] = RPT3:Test_Failed["objCS"%2C Test%2C -1]%0A%0A      generate objCS3:Fault() to this%0A%0A   endif%0A%0A%0A#------------------------------------------------------------------------#%0A,,,,,,,
codeblock,,,,,,,,
description, This state verifies that instance creation within%0A a creation state is successful.%0A,,,,,,,
state,,,,,,,,
state,,Creation_State,Fail,,4,,,
codeblock,###### There is no ASL for this state ######,,,,,,,
codeblock,,,,,,,,
description, An instance current state is changed to fail%0A if the test failed.%0A,,,,,,,
state,,,,,,,,
state,,Creation_State,Passed,,5,,,
state,,,,,,,,
event,StartA,creation,1,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,Creation_Complete,,2,,,,,
event,,,,,,,,
event,Fault,,3,,,,,
event,,,,,,,,
event,StartB,,4,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,It_passed,,5,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,StartA,Instance_creation,,,
transition,,,,,,,,
transition,Non_Existent,,,Creation_Complete,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Fault,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,StartB,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,It_passed,Cannot_Happen,,,
transition,,,,,,,,
transition,Instance_creation,,,StartA,Cannot_Happen,,,
transition,,,,,,,,
transition,Instance_creation,,,Creation_Complete,Cannot_Happen,,,
transition,,,,,,,,
transition,Instance_creation,,,Fault,Cannot_Happen,,,
transition,,,,,,,,
transition,Instance_creation,,,StartB,Verify_instance_creation,,,
transition,,,,,,,,
transition,Instance_creation,,,It_passed,Cannot_Happen,,,
transition,,,,,,,,
transition,Verify_instance_creation,,,StartA,Cannot_Happen,,,
transition,,,,,,,,
transition,Verify_instance_creation,,,Creation_Complete,Cannot_Happen,,,
transition,,,,,,,,
transition,Verify_instance_creation,,,Fault,Fail,,,
transition,,,,,,,,
transition,Verify_instance_creation,,,StartB,Cannot_Happen,,,
transition,,,,,,,,
transition,Verify_instance_creation,,,It_passed,Passed,,,
transition,,,,,,,,
transition,Fail,,,StartA,Cannot_Happen,,,
transition,,,,,,,,
transition,Fail,,,Creation_Complete,Cannot_Happen,,,
transition,,,,,,,,
transition,Fail,,,Fault,Cannot_Happen,,,
transition,,,,,,,,
transition,Fail,,,StartB,Cannot_Happen,,,
transition,,,,,,,,
transition,Fail,,,It_passed,Cannot_Happen,,,
transition,,,,,,,,
transition,Passed,,,StartA,Cannot_Happen,,,
transition,,,,,,,,
transition,Passed,,,Creation_Complete,Cannot_Happen,,,
transition,,,,,,,,
transition,Passed,,,Fault,Ignore,,,
transition,,,,,,,,
transition,Passed,,,StartB,Ignore,,,
transition,,,,,,,,
transition,Passed,,,It_passed,Ignore,,,
transition,,,,,,,,
transitiontable,,,,,,,,
description, This object verifies the creation of object instances.%0A,,,,,,,
object,,,,,,,,
object,Doctor,dr,10,,,,,
attribute,Actor,preferred,,,,,,
typeref,actors_who_have_played_the_doctor,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,length_of_scarf,,,Actor,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,Creation_Deletion,Doctor,public,Test_the_Doctors_Mettle,,,1,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Returned_Test_Number,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# Test The Doctors Metal Object Sync Service%0A#------------------------------------------------------------------------#%0A%0A   Test = Test_Number%0A%0A#------------------------------------------------------------------------#%0A# Test 1 - Test the creation and deletion of one to many associated %0A#          relationships%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0511"%2C "Creation Deletion"%2C "Doctor"%2C "1 to Many associative"]%0A%0A   # Define the doctor.%0A   the_doctor_ih = create Doctor with Actor = 'Tom_Baker'   and length_of_scarf = 20%0A   the_doctor_ih = create Doctor with Actor = 'Jon_Pertwee' and length_of_scarf = 10%0A%0A   # Define some bad guys to test him%0A   cybermen_ih   = create Enemy with Humanoid = TRUE  & can_climb_stairs = TRUE%0A   daleks_ih     = create Enemy with Humanoid = FALSE & can_climb_stairs = FALSE%0A   the_master_ih = create Enemy with Humanoid = TRUE  & can_climb_stairs = TRUE%0A%0A   # Define the associated instance which captures the spirit of the battle %0A   cybermen_vs_the_doctor_ih     = create Doctors_Enemy with battlefield_arena = 'Earth' %0A   daleks_vs_the_doctor_ih       = create Doctors_Enemy with battlefield_arena = 'Skarros' %0A   the_master_vs_the_doctor_ih   = create Doctors_Enemy with battlefield_arena = 'Gallifrey' %0A%0A   tom_as_the_doctor = find-one Doctor where Actor = 'Tom_Baker'%0A   jon_as_the_doctor = find-one Doctor where Actor = 'Jon_Pertwee'%0A%0A   # link using specific ih of tom as the doctor.%0A   link tom_as_the_doctor R2 cybermen_ih   using cybermen_vs_the_doctor_ih%0A   link tom_as_the_doctor R2 daleks_ih     using daleks_vs_the_doctor_ih%0A   link tom_as_the_doctor R2 the_master_ih using the_master_vs_the_doctor_ih%0A%0A   # Find out how many enemies the doctor has%0A   {toms_enemies} = tom_as_the_doctor -> R2.Enemy%0A   {jons_enemies} = jon_as_the_doctor -> R2.Enemy%0A%0A   number_of_toms_enemies = countof{toms_enemies}%0A   number_of_jons_enemies = countof{jons_enemies}%0A%0A   if number_of_toms_enemies = 3 then%0A%0A      if number_of_jons_enemies = 0 then%0A         [] = RPT2:Test_Passed["Doctor"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["Doctor"%2C Test%2C number_of_jons_enemies]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Doctor"%2C Test%2C number_of_jons_enemies]%0A   endif %0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A# Test 2 - Do it again%2C this time using the doctor ih to link%2C and see %0A#          which one it uses.%0A#%0A#          This can not be checked for WACA version 5.0.0 as referential %0A#          attributes are no longer supported.%0A#          check that assoc.Actor = the_doctor_ih.Actor%0A# %0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0511"%2C "Creation Deletion"%2C "Doctor"%2C "Create assoc not specifying attributes"]%0A%0A   sea_devils_ih = create Enemy with Humanoid = FALSE & can_climb_stairs = FALSE%0A   davros_ih     = create Enemy with Humanoid = TRUE  & can_climb_stairs = FALSE%0A   silurians_ih  = create Enemy with Humanoid = FALSE & can_climb_stairs = TRUE%0A%0A   sea_devils_vs_the_doctor_ih = create Doctors_Enemy with battlefield_arena = 'Underwater' %0A   davros_vs_the_doctor_ih     = create Doctors_Enemy with battlefield_arena = 'Wheelchair' %0A   silurians_vs_the_doctor_ih  = create Doctors_Enemy with battlefield_arena = 'Venus' %0A%0A   # link using doctor ih of the doctor. This should have picked up%0A   # Jon Pertwee as the doctor%2C since this was the most recent creation.%0A   link the_doctor_ih R2 sea_devils_ih using sea_devils_vs_the_doctor_ih%0A   link the_doctor_ih R2 davros_ih     using davros_vs_the_doctor_ih%0A   link the_doctor_ih R2 silurians_ih  using silurians_vs_the_doctor_ih%0A%0A   # However%2C the Actor attribute set in the assoc creation will be different%0A   # from that of the Actor attribute set up with Jon Pertwee's version%0A   # of the doctor. The Humanoid attribute will be different%2C too.%0A%0A   # Let's see what happens.%0A%0A   Has_Failed = FALSE%0A%0A   Failure_Code = 0%0A%0A   # Hijack this test to prove that we can still get to the attributes that were referential%0A   # for the associative object%2C via the R2 relationship. So in real terms%2C this information%0A   # is still accessable%2C just a little more awkward.%0A   {enemies_vs_jon_the_doctor} = find Doctors_Enemy where battlefield_arena != 'Underwater'%0A%0Afor enemy_of_jon in {enemies_vs_jon_the_doctor} do%0A%0Aif enemy_of_jon != UNDEFINED then%0A%0A   which_doctor = enemy_of_jon -> R2.Doctor%0A   which_enemy  = enemy_of_jon -> R2.Enemy%0A%0A   if which_doctor != UNDEFINED &\%0A      which_enemy  != UNDEFINED then%0A%0A      if which_doctor.Actor   = 'Jon_Pertwee' & \%0A         which_enemy.Humanoid = TRUE then %0A%0A         # This should only find one instance relationship where the doctor is Jon Pertwee%0A         # the enemy is Davros and the battlefield upon which they fought was not underwater.%0A%0A         Failure_Code = Failure_Code + 1%0A%0A      endif%0A%0A   endif%0A%0A%0Aendif%0A%0Aendfor%0A%0A%0A   if Failure_Code = 1 then%0A      [] = RPT2:Test_Passed["Doctor"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Doctor"%2C Test%2C Failure_Code]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A%0A%0A#------------------------------------------------------------------------#%0A# Test 4 - Create assoc specifying attributes%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "Doctor"%2C "Create assoc specifying attributes"]%0A%0A   # Continuing on using the previous theme%2C let's see if the many side of R2%0A   # can be found.%0A%0A   [] = RPT5:Test_Text[Test%2C "create assoc specifying attributes"]%0A%0A   {bad_guys} = find-all Enemy%0A%0A   # Using the criteria that only davros%2C cybermen and the master are humanoid as %0A   # defined at creation of the enemy instance. The definition of the associated %0A   # instance is the opposite%2C ie davros%2C cybermen and the master are NOT humanoid.%0A   # This should prove that the associated instance does not take-on the 'many'%0A   # definition of the attribute. Basically%2C it is the same as the previous test%2C%0A   # only more complicated.%0A%0A   # The_Test_Has_Passed = TRUE%0A   # Failure_Code = 0%0A   # for bad_guy in {bad_guys} do%0A      # Navigate from bad guy to associated doctors enemy%0A      # the_doctors_enemy = bad_guy -> R2.Doctors_Enemy%0A      #   if bad_guy.Humanoid = TRUE then %0A      #      The_Test_Has_Passed = FALSE%0A      #      Failure_Code = Failure_Code - 1%0A      #      switch the_doctors_enemy.battlefield_arena%0A      #      case 'Earth'%0A#         [] = RPT5:Test_Text[Test%2C "ERROR  cybermen are masquerading as non humanoid"]%0A#      case 'Underwater'%0A#         [] = RPT5:Test_Text[Test%2C "ERROR  sea devils is masquerading as humanoid"]%0A#      case 'Wheelchair'%0A#         [] = RPT5:Test_Text[Test%2C "ERROR  Davros is masquerading as non humanoid"]%0A#      case 'Skarros'%0A#         [] = RPT5:Test_Text[Test%2C "ERROR  Daleks are masquerading as humanoid"]%0A#      case 'Venus'%0A#         [] = RPT5:Test_Text[Test%2C "ERROR  Silurians are masquerading as humanoid"]%0A#      case 'Gallifrey'%0A#         [] = RPT5:Test_Text[Test%2C "ERROR  The Master is masquerading as non humanoid"]%0A#      default%0A#         [] = RPT5:Test_Text[Test%2C "ERROR  something else is masquerading as an unknown instance"]%0A#      endswitch%0A#   endif%0A#endfor%0A#if The_Test_Has_Passed = TRUE then%0A#   [] = RPT2:Test_Passed["Doctor"%2C Test%2C 0]%0A#else%0A#   [] = RPT3:Test_Failed["Doctor"%2C Test%2C Failure_Code]%0A#endif%0A%0A[] = RPT4:Test_Unsupported[Test]%0A%0ATest = Test + 1%0A%0A# End Test 4%0A%0A#------------------------------------------------------------------------#%0A# Test 5 - %0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "Doctor"%2C "1 to Many associative "]%0A%0A   # create some more associative instances%2C but this time%2C don't attempt to%0A   # specify any attributes.%0A %0A   [] = RPT5:Test_Text[Test%2C "create assoc but do not specify attributes"]%0A%0A   # create a new doctor%0A   patrick_the_doctor = create Doctor with Actor           = 'Patrick_Troughton' &\%0A                                           length_of_scarf = 1%0A%0A   # The Brigadier wasn't really an enemy%2C but I've run out of bad guys%0A   skeksis       = create Enemy with Humanoid = TRUE & can_climb_stairs = FALSE%0A   the_brigadier = create Enemy with Humanoid = TRUE & can_climb_stairs = TRUE%0A   # and the Skeksis were in The Dark Crystal%2C but hey%2C it's only a model.%0A%0A   skeksis_vs_the_doctor       = create Doctors_Enemy with battlefield_arena = 'Gallifrey' %0A   the_brigadier_vs_the_doctor = create Doctors_Enemy with battlefield_arena = 'Earth'%0A%0A   The_Test_Has_Passed = TRUE%0A   Failure_Code = -36%0A%0A   link patrick_the_doctor R2 skeksis       using skeksis_vs_the_doctor%0A   link patrick_the_doctor R2 the_brigadier using the_brigadier_vs_the_doctor%0A%0A   # Navigating from the doctor to the doctors_enemy%0A   {the_doctors_enemies} = patrick_the_doctor -> R2.Doctors_Enemy%0A%0A   # Navigating from a set of enemies to the doctor_enemy%0A   skeksis_are_the_enemies_of_the_doctor    = skeksis -> R2.Doctors_Enemy%0A   the_brigadier_is_the_enemy_of_the_doctor = the_brigadier -> R2.Doctors_Enemy%0A%0A   if skeksis_are_the_enemies_of_the_doctor != UNDEFINED & \%0A      the_brigadier_is_the_enemy_of_the_doctor != UNDEFINED then%0A%0A      if skeksis_are_the_enemies_of_the_doctor.battlefield_arena != \%0A         the_brigadier_is_the_enemy_of_the_doctor.battlefield_arena then%0A%0A         if countof{the_doctors_enemies} = 2 then%0A%0A            for the_doctors_enemy in {the_doctors_enemies} do%0A               this_doctor = the_doctors_enemy -> R2.Doctor%0A   %0A               if this_doctor.Actor = 'Patrick_Troughton' then%0A                  The_Test_Has_Passed = TRUE%0A                  Failure_Code = 0%0A               else%0A                  The_Test_Has_Passed = FALSE%0A                  Failure_Code = -4%0A               endif%0A%0A            endfor%0A      %0A         else%0A            The_Test_Has_Passed = FALSE%0A            Failure_Code = -3%0A         endif%0A%0A      else%0A         The_Test_Has_Passed = FALSE%0A         Failure_Code = -2%0A      endif%0A%0A   else%0A      The_Test_Has_Passed = FALSE%0A      Failure_Code = -1%0A   endif%0A%0A%0A#for the_doctors_enemy in {the_doctors_enemies} do%0A#   if the_doctors_enemy.Actor = patrick_the_doctor.Actor then%0A      # The associated attributes have been set by the architecture%2C illegally.%0A#      Failure_Code =  Failure_Code + 1%0A#      The_Test_Has_Passed = FALSE%0A#   endif%0A#endfor%0A%0A# ###############################################################################%0A#%0A# The following statements were an attempt to show that a referential attribute%0A# had been set by the architecture. This can neither be proven or not.%0A# Referential attributes can not read from or written to. So..... we can't tell!%0A#%0A# ###############################################################################%0A%0A%0A# Humanoid attribute has been written into the associated object attribute%0A#if skeksis_are_the_enemies_of_the_doctor.Humanoid = skeksis.Humanoid then%0A#   Failure_Code = Failure_Code + 10%0A#   The_Test_Has_Passed = FALSE%0A#endif%0A%0A# Humanoid attribute has been written into the associated object attribute%0A#if the_brigadier_is_the_enemy_of_the_doctor.Humanoid = the_brigadier.Humanoid then %0A#   Failure_Code = Failure_Code + 20%0A#   The_Test_Has_Passed = FALSE%0A#endif%0A%0A%0Aif The_Test_Has_Passed = TRUE then%0A   [] = RPT2:Test_Passed["Doctor"%2C Test%2C 0]%0Aelse%0A   [] = RPT3:Test_Failed["Doctor"%2C Test%2C Failure_Code]%0Aendif%0A%0A%0ATest = Test + 1%0A%0A# End Test 5%0A%0A#------------------------------------------------------------------------#%0A# Test 6 - %0A#------------------------------------------------------------------------#%0A  %0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "Doctor"%2C "Delete assoc instances"]%0A   [] = RPT5:Test_Text[Test%2C"Delete last enemy leaving first one"]%0A%0A   The_Test_Has_Passed = TRUE%0A%0A{patricks_enemies} = patrick_the_doctor -> R2.Enemy%0A%0Anumber_of_enemies_before = countof{patricks_enemies}%0A%0Aunassociate patrick_the_doctor R2 the_brigadier from the_brigadier_vs_the_doctor%0A%0Aunlink patrick_the_doctor R2 the_brigadier%0A%0Adelete the_brigadier%0A%0Adelete the_brigadier_vs_the_doctor%0A%0A# There should only be one enemy for patrick the doctor now.%0A%0A{patricks_enemies} = patrick_the_doctor -> R2.Enemy%0A%0Anumber_of_enemies_after = countof{patricks_enemies}%0A%0Aif number_of_enemies_after = number_of_enemies_before then%0A%0A   The_Test_Has_Passed = FALSE%0A   Failure_Code = number_of_enemies_after %0A%0Aendif%0A%0Aif The_Test_Has_Passed = TRUE then%0A   [] = RPT2:Test_Passed["Doctor"%2C Test%2C 0]%0Aelse%0A   [] = RPT3:Test_Failed["Doctor"%2C Test%2C Failure_Code]%0Aendif%0A%0A%0A# ##############################################################################%0A%0ATest = Test + 1%0A[] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "Doctor"%2C "Delete assoc instances"]%0A%0A[] = RPT5:Test_Text[Test%2C"Prove that delete worked"]%0A%0AThe_Test_Has_Passed = TRUE%0AFailure_Code = -15%0A%0A# The brigadier should have been demoted.%0Aif the_brigadier != UNDEFINED then%0A%0A   The_Test_Has_Passed = FALSE%0A   Failure_Code = Failure_Code + 1%0A%0Aendif%0A%0A# The associated instance of the brigadier vs the doctor should be no more.%0Aif the_brigadier_vs_the_doctor != UNDEFINED then%0A   The_Test_Has_Passed = FALSE%0A   Failure_Code = Failure_Code + 2%0A%0Aendif%0A%0A# Skeksis should still be around causing the doctor some problems.%0Aif skeksis = UNDEFINED then %0A   The_Test_Has_Passed = FALSE%0A   Failure_Code = Failure_Code + 3%0A%0Aendif%0A%0A# Get rid of the remaining bad guys%2C the assoc instance and Patrick Troughton%0A%0Aunassociate patrick_the_doctor R2 skeksis from skeksis_vs_the_doctor%0A%0Aunlink patrick_the_doctor R2 skeksis%0A%0Adelete skeksis_vs_the_doctor%0Adelete skeksis%0Adelete patrick_the_doctor%0A%0Aif skeksis               != UNDEFINED &\%0A   skeksis_vs_the_doctor != UNDEFINED &\%0A   patrick_the_doctor    != UNDEFINED then %0A%0A   The_Test_Has_Passed = FALSE%0A   Failure_Code = Failure_Code + 7%0A%0Aendif%0A%0Aif The_Test_Has_Passed = TRUE then%0A   [] = RPT2:Test_Passed["Doctor"%2C Test%2C 0]%0Aelse%0A   [] = RPT3:Test_Failed["Doctor"%2C Test%2C Failure_Code]%0Aendif%0A%0A%0A%0A# ##############################################################################%0A%0ATest = Test + 1%0A%0A[] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "Doctor"%2C "Delete assoc instances"]%0A%0A[] = RPT5:Test_Text[Test%2C"delete first element from a list of three"]%0A%0AThe_Test_Has_Passed = TRUE%0AFailure_Code = -4%0A%0A#Tom Baker's enemies numbered three. Cybermen%2C Daleks and The Master%0A%0A{toms_enemies_before} = tom_as_the_doctor -> R2.Enemy%0A%0Anumber_of_toms_enemies_before = countof {toms_enemies_before}%0A%0Aunassociate tom_as_the_doctor R2 cybermen_ih from cybermen_vs_the_doctor_ih%0A%0Aunlink tom_as_the_doctor R2 cybermen_ih%0A%0Adelete cybermen_vs_the_doctor_ih%0A%0Adelete cybermen_ih%0A%0A# They now number two%2C Daleks and the Master%0A%0A{toms_enemies_after} = tom_as_the_doctor -> R2.Enemy%0A%0Anumber_of_toms_enemies_after = countof {toms_enemies_after}%0A%0Aif number_of_toms_enemies_after = number_of_toms_enemies_before then%0A   The_Test_Has_Passed = FALSE%0A   Failure_Code = Failure_Code + 1%0Aendif%0A%0A# Attempt to navigate from the doctor to the second (daleks) enemy%0A%0Adaleks = find-one Enemy where Humanoid = FALSE & can_climb_stairs = FALSE%0Aif daleks = UNDEFINED then%0A   The_Test_Has_Passed = FALSE%0A   Failure_Code = Failure_Code + 2%0Aendif%0A%0Aif The_Test_Has_Passed = TRUE then%0A   [] = RPT2:Test_Passed["Doctor"%2C Test%2C 0]%0Aelse%0A   [] = RPT3:Test_Failed["Doctor"%2C Test%2C Failure_Code]%0Aendif%0A%0A%0A# ##############################################################################%0A%0ATest = Test + 1%0A[] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "Doctor"%2C "Delete assoc instances"]%0A%0A[] = RPT5:Test_Text[Test%2C"delete middle element from a list"]%0A%0AThe_Test_Has_Passed = TRUE%0AFailure_Code = -15%0A%0A#Tom Baker's enemies numbered two. Daleks and The Master%0A%0A{toms_enemies_before} = tom_as_the_doctor -> R2.Enemy%0A%0Anumber_of_toms_enemies_before = countof {toms_enemies_before}%0A%0Aunassociate tom_as_the_doctor R2 daleks_ih from daleks_vs_the_doctor_ih%0A%0Aunlink tom_as_the_doctor R2 daleks_ih%0A%0Adelete daleks_vs_the_doctor_ih%0A%0Adelete daleks_ih%0A%0A# They now number one.%0A%0A{toms_enemies_after} = tom_as_the_doctor -> R2.Enemy%0A%0Anumber_of_toms_enemies_after = countof {toms_enemies_after}%0A%0Aif number_of_toms_enemies_after = number_of_toms_enemies_before then%0A   The_Test_Has_Passed = FALSE%0A   Failure_Code = Failure_Code + 1%0Aendif%0A%0Aif daleks_ih != UNDEFINED then%0A   The_Test_Has_Passed = FALSE%0A   Failure_Code = Failure_Code + 2%0Aendif%0A%0Aif the_master_ih = UNDEFINED then%0A   The_Test_Has_Passed = FALSE%0A   Failure_Code = Failure_Code + 4%0Aendif%0A%0Aif tom_as_the_doctor = UNDEFINED then%0A   The_Test_Has_Passed = FALSE%0A   Failure_Code = Failure_Code + 8%0Aendif%0A%0Aif The_Test_Has_Passed = TRUE then%0A   [] = RPT2:Test_Passed["Doctor"%2C Test%2C 0]%0Aelse%0A   [] = RPT3:Test_Failed["Doctor"%2C Test%2C Failure_Code]%0Aendif%0A%0A%0A# ##############################################################################%0A%0ATest = Test + 1%0A%0A[] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "Doctor"%2C "Delete assoc instances"]%0A%0A[] = RPT5:Test_Text[Test%2C"delete final element in list"]%0A%0AThe_Test_Has_Passed = TRUE%0AFailure_Code = -4%0A%0Aunassociate tom_as_the_doctor R2 the_master_ih from the_master_vs_the_doctor_ih%0A%0Aunlink tom_as_the_doctor R2 the_master_ih%0A%0Adelete the_master_vs_the_doctor_ih%0Adelete the_master_ih%0A%0Aif the_master_ih != UNDEFINED then%0A   The_Test_Has_Passed = FALSE%0A   Failure_Code = Failure_Code + 1%0Aendif%0A%0Aif tom_as_the_doctor = UNDEFINED then%0A   The_Test_Has_Passed = FALSE%0A   Failure_Code = Failure_Code + 2%0Aendif%0A%0Aif The_Test_Has_Passed = TRUE then%0A   [] = RPT2:Test_Passed["Doctor"%2C Test%2C 0]%0Aelse%0A   [] = RPT3:Test_Failed["Doctor"%2C Test%2C Failure_Code]%0Aendif%0A%0A%0A%0A# ##############################################################################%0A%0ATest = Test + 1%0A[] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "Doctor"%2C "Delete assoc instances"]%0A%0A[] = RPT5:Test_Text[Test%2C"delete 1 of many instance"]%0A%0AFailure_Code = -2%0A%0Adelete tom_as_the_doctor%0A%0Aif tom_as_the_doctor != UNDEFINED then%0A   The_Test_Has_Passed = FALSE%0A   Failure_Code = Failure_Code + 1%0Aendif%0A%0Aif The_Test_Has_Passed = TRUE then%0A   [] = RPT2:Test_Passed["Doctor"%2C Test%2C 0]%0Aelse%0A   [] = RPT3:Test_Failed["Doctor"%2C Test%2C Failure_Code]%0Aendif%0A%0A%0A%0A# ##############################################################################%0A%0ATest = Test + 1%0A%0A# Delete all of Jon Pertwee's enemies%2C leaving the universe free of bad guys%0A%0AThe_Test_Has_Passed = TRUE%0AFailure_Code = -4%0A%0A[] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "Doctor"%2C "Delete assoc instances"]%0A%0A[] = RPT5:Test_Text[Test%2C"delete remaining instances in a set"]%0A%0A{remaining_enemies}         = find-all Enemy%0A{remaining_doctors_enemies} = find-all Doctors_Enemy%0A{remaining_doctors}         = find-all Doctor%0A%0A# Need to unassociate each associated instance from the 1 to M relationship%0A# Can't do it in a set%0A%0Afor remaining_doctors_enemy in {remaining_doctors_enemies} do%0A%0A   an_enemy   = remaining_doctors_enemy -> R2.Enemy%0A   the_doctor = remaining_doctors_enemy -> R2.Doctor%0A%0A   unassociate the_doctor R2 an_enemy from remaining_doctors_enemy%0A%0A   unlink the_doctor R2 an_enemy%0A%0A   delete remaining_doctors_enemy%0A   delete an_enemy%0A %0A   #if the doctor has no more enemies%2C it is safe to delete him%0A   {any_more_enemies} = the_doctor -> R2.Enemy%0A%0A   number_of_more_enemies = countof{any_more_enemies}%0A%0A   # Kill off the doctor finally. There should be no more doctors to worry about%0A   # Regeneration is not something this doctor can do!%0A%0A   if number_of_more_enemies = 0 then%0A      delete the_doctor%0A   endif%0A%0Aendfor%0A%0A# delete the set of doctors (should be 1)%2C%0A# the set of enemies (should be 3)%0A# and the set of associated enemies (should be 3)%0A%0A# This is unsupported at issue 2.0.1%0A%0A# delete {remaining_doctors_enemies}%0A# delete {remaining_enemies}%0A# delete {remaining_doctors}%0A%0Aempty_enemy       = find-one Enemy%0Aempty_doctor      = find-one Doctor%0Aempty_assoc_enemy = find-one Doctors_Enemy%0A%0A%0Aif empty_enemy != UNDEFINED then%0A   The_Test_Has_Passed = FALSE%0A   Failure_Code = Failure_Code + 1%0Aendif%0A%0A%0Aif empty_assoc_enemy != UNDEFINED then%0A   The_Test_Has_Passed = FALSE%0A   Failure_Code = Failure_Code + 2%0Aendif%0A%0Aif empty_doctor != UNDEFINED then%0A   The_Test_Has_Passed = FALSE%0A   Failure_Code = Failure_Code + 4%0Aendif%0A%0A%0Aif The_Test_Has_Passed = TRUE then%0A   [] = RPT2:Test_Passed["Doctor"%2C Test%2C 0]%0Aelse%0A   [] = RPT3:Test_Failed["Doctor"%2C Test%2C Failure_Code]%0Aendif%0A%0A%0A%0A# ##############################################################################%0A%0A%0A%0AReturned_Test_Number = Test,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
object,,,,,,,,
object,Doctors_Enemy,drenemy,13,,,,,
attribute,Humanoid,preferred,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
referential,R2,,is_afraid_of,Enemy,Humanoid,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Actor,,,Humanoid,,,,
typeref,actors_who_have_played_the_doctor,,,,,,,
typeref,,,,,,,,
referential,R2,,wants_to_kill,Doctor,Actor,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,battlefield_arena,,,Actor,,,,
typeref,battlefield_arena_type,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Enemy,enemy,12,,,,,
attribute,Humanoid,preferred,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,can_climb_stairs,,,Humanoid,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Flavoured_Object,flavoured,7,,,,,
attribute,Flavoured,preferred,,,,,,
typeref,Flavoured_Type,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,How_Spicy,,,Flavoured,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Flavour_and_Colour,fandc,9,,,,,
attribute,Coloured,preferred,,,,,,
typeref,Coloured_Type,,,,,,,
typeref,,,,,,,,
referential,R1,,has,Coloured_Object,Coloured,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Flavoured,preferred,,Coloured,,,,
typeref,Flavoured_Type,,,,,,,
typeref,,,,,,,,
referential,R1,,has,Flavoured_Object,Flavoured,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Dish_Number,,,Flavoured,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Object_A,objA,2,,,,,
attribute,ReferenceA,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,IntegerA,,,ReferenceA,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, An integer%0A,,,,,,,
attribute,,,,,,,,
attribute,TextA,,,IntegerA,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
description, Some text.%0A,,,,,,,
attribute,,,,,,,,
attribute,BooleanA,,,TextA,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
description, Boolean%0A,,,,,,,
attribute,,,,,,,,
attribute,ColourA,,,BooleanA,,,,
typeref,Base_Colour,,,,,,,
typeref,,,,,,,,
description, User defined type%0A,,,,,,,
attribute,,,,,,,,
operation,Creation_Deletion,Object_A,public,do_sync_create,,,1,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Returned_Test_Number,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# Do Sync Create%0A#%0A# The ASL translator shall support the following base types for attributes%0A# of objects%2C parameters and local variables:%0A# Real%2C Integer%2C Boolean%2C Text%2C Instance Handles and set of instance %0A# handles%0A# 1103-0000-01-0311%0A#%0A# The ASL <create ... with> statement to create an instance of an object%0A# with attributes shall be supported%0A# 1103-0000-01-0511%0A#%0A#------------------------------------------------------------------------#%0A%0A   # Set the Has_Failed flag%2C TRUE if a fault has been identified%0A   Has_Failed = FALSE%0A%0A#------------------------------------------------------------------------#%0A# Test 1 - Create%2C specifing all attributes%0A#------------------------------------------------------------------------#%0A%0A   Test = Test_Number%0A%0A   # Invoke terminator to call report domain%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0511"%2C "Creation Deletion"%2C "objA"%2C "Do_sync_create specifying all attibutes"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0101"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0102"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0109"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0118"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0311"]%0A%0A   # NB. Absolute time is not supported.%0A   #     Neither is date.%0A%0A   # Perform creation%0A   new_instanceA = create Object_A with ReferenceA = Test     &\%0A                                        IntegerA   = 1        &\%0A                                        TextA      = "Verify" &\%0A                                        ColourA    = 'Red'%0A%0A   # Check that the instance contains the correct data%0A   InstA = find-one Object_A where ReferenceA = Test%0A%0A   if InstA != UNDEFINED then %0A%0A      if InstA.ReferenceA = Test then%0A%0A         if InstA.TextA = "Verify" then%0A%0A            if InstA.ColourA != 'Red' then%0A               Has_Failed   = TRUE%0A               Failure_Code = -10%0A            endif%0A%0A         else%0A            Has_Failed   = TRUE%0A            Failure_Code = -20%0A         endif%0A%0A      else%0A         Has_Failed   = TRUE  %0A         Failure_Code = -30%0A      endif%0A%0A   else%0A      Has_Failed   = TRUE%0A      Failure_Code = -40%0A   endif%0A%0A%0A   if !Has_Failed then%0A      [] = RPT2:Test_Passed["objA"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objA"%2C Test%2C Failure_Code]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A# Test 2 - Create%2C specifing all attributes%0A#------------------------------------------------------------------------#%0A%0A   # Invoke terminator to call report domain%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "objA"%2C "Sync Create multi attribute write"]%0A%0A%0A   # Fault_Flag = FALSE%0A%0A   # Perform creation%0A   #   new_instanceA = create Object_A with ReferenceA = Test  &\%0A   #                                        IntegerA = 1       &\%0A   #                                        TextA = "Verify"   &\%0A   #                                        ColourA = 'Red'%0A%0A   # Check that the instance contains the correct data%0A   #   an_instanceA = find-one Object_A where ReferenceA = Test%0A%0A%0A   # Multiple attribute write%0A   #   xI = 2%0A   #   xR = Test%0A   #   xS = "Test 2 A"%0A   #   xC = 'Green'   %0A%0A   #   an_instanceA.[ReferenceA%2C IntegerA%2C TextA%2C ColourA] = [xR%2C xI%2C xS%2C xC]%0A   #   an_instanceA.[ReferenceA%2C IntegerA%2C TextA%2C ColourA] = [xR%2C xI%2C xS%2C 'Green']%0A%0A%0A   #   aID = an_instanceA.ReferenceA%0A   #   anI = an_instanceA.IntegerA%0A   #   aS  = an_instanceA.TextA%0A   #   aC  = an_instanceA.ColourA%0A%0A   #   if aID = Test then%0A   #      if anI = 2 then%0A   #         if aS = "Test 2 A" then%0A   #            if aC != 'Green' then%0A   #               Fault_Flag = TRUE%0A   #            endif%0A   #         else%0A   #            Fault_Flag = TRUE%0A   #         endif%0A   #      else%0A   #         Fault_Flag = TRUE%0A   #      endif%0A   #   else%0A   #      Fault_Flag = TRUE%0A   #   endif%0A%0A   #if !Fault_Flag then%0A   #   [] = RPT2:Test_Passed["objA"%2C Test%2C 0]%0A   #else%0A   #   [] = RPT3:Test_Failed["objA"%2C Test%2C -20]%0A   #endif%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#------------------------------------------------------------------------#%0A# Test 3 - Create%2C Only specifing the preferred identifier%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0511"%2C "Creation Deletion"%2C "objA"%2C "Sync create specifying only preferred id"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0101"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0102"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0109"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0118"]%0A%0A   # Perform creation%0A   new_instanceA = create Object_A with ReferenceA = Test%0A%0A   # Check that the instance contains the correct data%0A   InstA = find-one Object_A where ReferenceA = Test%0A%0A   if InstA.ReferenceA != Test then%0A      [] = RPT3:Test_Failed["objA"%2C Test%2C -10]%0A   else%0A      [] = RPT2:Test_Passed["objA"%2C Test%2C 0]%0A   endif%0A%0A# End Test 3%0A%0A#------------------------------------------------------------------------#%0A%0AReturned_Test_Number = Test%0A%0A,,,,,,,
codeblock,,,,,,,,
description, Perform object service to test synchronous create operation.%0A,,,,,,,
operation,,,,,,,,
description, Object_A is manipulated by object 'Instance_Creation'.%0A,,,,,,,
object,,,,,,,,
object,Object_B,objB,3,,,,,
attribute,ReferenceB,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,IntegerA,,,ReferenceB,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, An integer.%0A,,,,,,,
attribute,,,,,,,,
operation,Creation_Deletion,Object_B,public,do_sync_create_unique,,,1,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Returned_Test_Number,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# Create unique%2C without specifing preferred identifier%0A#------------------------------------------------------------------------#%0A%0A   Test = Test_Number%0A%0A#------------------------------------------------------------------------#%0A# Test 1%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0511"%2C "Creation Deletion"%2C "objB"%2C "Create unique no preferred id"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0311"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0101"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0102"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0118"]%0A%0A   Has_Failed = FALSE%0A%0A   Failure_Code = -1%0A%0A   # create two initial instances%0A   count = 0%0A   %0A   loop%0A     count = count + 1%0A     new_B = create unique Object_B%0A     breakif count >= 2%0A   endloop%0A%0A   # Create a set of instances to check for uniqueness of the new instance%0A   {beforeB} = find-all Object_B%0A%0A   # Perform creation%0A   new_instanceB = create unique Object_B with IntegerA = Test %0A %0A   # this will be the third instance%0A%0A   # Find the newly created instance%0A   an_instanceB = find-one Object_B where IntegerA = Test%0A%0A   # Check that it was created and is unique%0A   if an_instanceB = UNDEFINED then%0A      Has_Failed   = TRUE%0A      Failure_Code = -10 %0A   else%0A      # Check that its was created with the correct data%0A      if an_instanceB.IntegerA != Test then%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A      endif%0A%0A      # Check that the identifier is unique%0A      for each_beforeB in {beforeB} do%0A%0A         if each_beforeB.ReferenceB = new_instanceB.ReferenceB then%0A            Has_Failed   = TRUE%0A            Failure_Code = -30%0A         endif%0A%0A      endfor%0A%0A   endif%0A%0A   if !Has_Failed then%0A      [] = RPT2:Test_Passed["objB"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objB"%2C Test%2C Failure_Code]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A# Test 2 - Create unique%2C specifing the preferred identifier%0A#          THIS TEST SHOULD CAUSE A COMPILE TIME ERROR%2C SINCE THE %0A#          PREFERRED IDENTIFIER HAS BEEN GIVEN IN THE 'CREATE UNIQUE'%0A#          STATEMENT%0A#------------------------------------------------------------------------#%0A%0A   Failure_Code = -1%0A   Has_Failed   = FALSE%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0511"%2C "Creation Deletion"%2C "objB"%2C "Create unique incorrectly specifying pref id"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0101"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0102"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0118"]%0A%0A   #Create a set of instances to check for uniqueness of the new instance%0A   {beforeB} = find-all Object_B %0A%0A   # There should be 3 instances in this set check that this is the case.%0A   number_in_B = countof{beforeB}%0A%0A   if number_in_B !=3 then%0A      Has_Failed   = TRUE%0A      Failure_Code = -10%0A   endif%0A%0A   # There is a possibility that this will create an instance with a %0A   # non-unique instance%2C so fix ReferenceB such that it shouldn't%0A   # have the same identifier as any future test.%0A%0A   # Obviously%2C we can't guarantee this%2C but let's have a damn good try.%0A%0A   Reference_B = Test * Test%0A%0A   # Perform creation%0A   new_instanceB = create unique Object_B with ReferenceB = Reference_B &\%0A                                               IntegerA   = Test%0A%0A   # Find the newly created instance%0A   an_instanceB = find-one Object_B where IntegerA = Test%0A%0A   # Check that it was created and is unique%0A   if an_instanceB = UNDEFINED then%0A        Has_Failed   = TRUE%0A        Failure_Code = -20%0A   else%0A%0A      # Check that its was created with the correct data%0A      if an_instanceB.IntegerA != Test then%0A         Has_Failed   = TRUE%0A         Failure_Code = -30%0A      endif%0A%0A      #Check that the identifier is unique%0A      for each_beforeB in {beforeB} do%0A%0A         if each_beforeB.ReferenceB = new_instanceB.ReferenceB then%0A            Has_Failed   = TRUE%0A            Failure_Code = -40%0A         endif%0A%0A      endfor%0A%0A   endif%0A%0A   if !Has_Failed then%0A      [] = RPT2:Test_Passed["objB"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objB"%2C Test%2C Failure_Code]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#------------------------------------------------------------------------#%0A# Test 3 - Create two unique%2C check for unique id's%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0511"%2C "Creation Deletion"%2C "objB"%2C "Create two unique no attributes"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0101"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0102"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0118"]%0A%0A   Has_Failed   = FALSE%0A   Failure_Code = -1%0A%0A   # Create a set of instances to check for uniqueness of the new instance%0A   {beforeB} = find-all Object_B%0A%0A   # Perform creation%0A   new_instanceB         = create unique Object_B%0A   another_new_instanceB = create unique Object_B%0A%0A   # Check that it was created and is unique%0A   if new_instanceB = UNDEFINED  then%0A      Has_Failed   = TRUE%0A      Failure_Code = -10%0A   else%0A%0A      if another_new_instanceB = UNDEFINED then%0A         Has_Failed   = TRUE%0A         Failure_Code = -20%0A      else%0A%0A         # Check that the identifier is unique%0A%0A         # Note that this isn't always a failure of the I-OOA or%0A         # WACA. A previous test had tried to specify the preferred%0A         # identifier during a create unique. This is against the rule%0A         # of SM OOA%2C but can be done. So if this fails here%2C have a look%0A         # at the preferred identifier being the same in the earlier test.%0A%0A         for each_beforeB in {beforeB} do%0A%0A            if each_beforeB.ReferenceB = new_instanceB.ReferenceB then%0A               Has_Failed   = TRUE%0A               Failure_Code = -30%0A            endif%0A%0A            if each_beforeB.ReferenceB = another_new_instanceB.ReferenceB then%0A               Has_Failed   = TRUE%0A               Failure_Code = -40%0A            endif%0A%0A         endfor%0A%0A         # But of it fails here%2C it definately IS a problem.%0A%0A         if another_new_instanceB.ReferenceB = new_instanceB.ReferenceB then%0A            Has_Failed   = TRUE%0A            Failure_Code = -50%0A         endif  %0A%0A      endif%0A%0A   endif%0A%0A   if !Has_Failed then%0A      [] = RPT2:Test_Passed["objB"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objB"%2C Test%2C Failure_Code]%0A   endif%0A%0A# End Test 3%0A%0A#------------------------------------------------------------------------#%0A%0AReturned_Test_Number = Test,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
description, Object_B is manipulated by object 'Instance Creation'.%0A,,,,,,,
object,,,,,,,,
object,Object_C,objC,4,,,,,
attribute,Reference1C,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,Reference2C,preferred,,Reference1C,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Referential attribute.%0A,,,,,,,
attribute,,,,,,,,
operation,Creation_Deletion,Object_C,public,do_create_unique_mult,,,1,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Returned_Test_Number,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# Create unique state where the object has multiple preferred identifiers%0A#------------------------------------------------------------------------#%0A%0A   Test = Test_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "objC"%2C "Create unique using multiple ids"]%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   Returned_Test_Number = Test%0A%0A#------------------------------------------------------------------------#%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
description, Object_C is manipulated by object 'Instance_Creation'.%0A,,,,,,,
object,,,,,,,,
object,Object_D,objD,6,,,,,
attribute,ReferenceD,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,IntegerA,,,ReferenceD,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, An integer.%0A,,,,,,,
attribute,,,,,,,,
operation,Creation_Deletion,Object_D,public,do_deletion_tests,,,1,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Returned_Test_Number,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# do deletion tests%0A#------------------------------------------------------------------------#%0A%0A   Test = Test_Number%0A%0A   # Preparation for instance deletion%0A%0A   count = 8%0A%0A   loop%0A      find_and_delete_D = create Object_D with ReferenceD = count &\%0A                                               IntegerA   = count%0A      count = count - 1%0A      breakif count = 0%0A   endloop%0A%0A#------------------------------------------------------------------------#%0A# Test 1 - Attempt to delete an instance of Object_D where the condition %0A#          is unfulfilled%2C NO INSTANCE DELETED%0A#%0A#          FOR THE PURPOSES OF THIS TEST%2C ONLY A SINGLE INSTANCE DELETION %0A#          IS REQUIRED.%0A#%0A# Note : The ISIM seems to have a problem attempting to delete an instance%0A#        that isn't there. So there must be a check performed for the%0A#        existance of an instance before squashing it.%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "objD find and delete"%2C "A is False"]%0A   has_failed = FALSE%0A%0A   # Establish how many instances already exist%0A   {before_setD} = find-all Object_D%0A%0A   an_instanceD = find-one Object_D where ReferenceD > 100%0A%0A   if an_instanceD != UNDEFINED then%0A      delete an_instanceD%0A      has_failed = TRUE%0A   endif%0A%0A   # Check that no instance have been deleted%0A   {after_setD} = find-all Object_D%0A%0A   if countof {before_setD} != countof {after_setD} then%0A     has_failed = TRUE%0A   endif%0A%0A   if !has_failed then%0A      [] = RPT2:Test_Passed["objD"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["objD"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A# Test 2 - Attempt to delete an instance of Object_D where only one of the%0A#          conditions are fulfilled%2C NO INSTANCE DELETED%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "objD find and delete"%2C "A and B is False"]%0A%0A   has_failed = FALSE%0A%0A   Failure_Code = (-2)%0A%0A   # Establish how many instances already exist%0A   {before_setD} = find-all Object_D%0A%0A   # Perform a find where before deleting the instance of Object_D (TB)%0A   an_instanceD = find-one Object_D where ReferenceD = 1 & IntegerA = 30%0A%0A   # There must be a check to prevent attempted deletion of%0A   # an instance that doesn't exist.%0A%0A   if an_instanceD != UNDEFINED then%0A      delete an_instanceD%0A      Failure_Code = Failure_Code + 1%0A   endif%0A%0A   # Check that no instance have been deleted%0A   {after_setD} = find-all Object_D%0A%0A   if countof {before_setD} != countof {after_setD} then%0A      [] = RPT3:Test_Failed["objD"%2C Test%2C Failure_Code]%0A   else%0A      [] = RPT2:Test_Passed["objD"%2C Test%2C 0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#------------------------------------------------------------------------#%0A# Test 3  - Attempt to delete an instance of Object_D where only one of %0A#           the 'and' conditions are fulfilled%2C NO INSTANCE DELETED%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C  "Creation Deletion"%2C "objD find and delete"%2C "A and  BorC is False"]%0A%0A   has_failed = FALSE%0A   Failure_Code = (-2)%0A%0A   # Establish how many instances already exist%0A   {before_setD} = find-all Object_D%0A%0A   # Perform test%0A   an_instanceD = find-one Object_D where IntegerA = 30 & (ReferenceD = 1 | ReferenceD = 2)%0A%0A   if an_instanceD != UNDEFINED then%0A      # Try and delete the instance. This is a failure%2C as the find should %0A      # not have actually found an instance.%0A      delete an_instanceD%0A      Failure_Code = Failure_Code + 1%0A   endif%0A%0A   # Check that no instance have been deleted%0A   {after_setD} = find-all Object_D%0A%0A   if countof{before_setD} != countof{after_setD} then%0A      [] = RPT3:Test_Failed["objD"%2C Test%2C Failure_Code]%0A   else%0A      [] = RPT2:Test_Passed["objD"%2C Test%2C 0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A %0A#------------------------------------------------------------------------#%0A# Test 4 - Delete single instance%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0531"%2C "Creation Deletion"%2C "ObjD find and delete"%2C "Delete single instance"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0121"]%0A%0A   Failure_Code = (-5)%0A%0A   # Find the instance using only one attribute.%0A   an_instanceD = find-one Object_D where ReferenceD = 1%0A%0A   # Find all instances in the set before any deletions take place.%0A   {Before_Deletion} = find-all Object_D%0A%0A   if an_instanceD = UNDEFINED then%0A      Failure_Code = Failure_Code + 1%0A   else%0A      # Delete the instance found%2C which does exist.%0A      delete an_instanceD%0A%0A      # Check that it has been deleted%2C by checking first against the%0A      # used attribute; ReferenceD%2C and then by the unused attribute; IntegerA.%0A      an_instanceD = find-one Object_D where ReferenceD = 1%0A%0A      if an_instanceD = UNDEFINED then%0A         an_instanceAD = find-one Object_D where IntegerA = 1%0A%0A         if an_instanceAD = UNDEFINED then%0A            # Use the find operation on the set to prove that the instance has gone%0A            # from within the set.%0A%0A            {After_Deletion} = find-all Object_D%0A%0A            if countof {Before_Deletion} != countof {After_Deletion} then%0A               Failure_Code = 0%0A            else%0A               Failure_Code = Failure_Code + 2%0A            endif%0A%0A         else%0A            Failure_Code = Failure_Code + 3%0A         endif%0A%0A      else%0A         Failure_Code = Failure_Code + 4%0A      endif%0A%0A   endif%0A%0A   if Failure_Code = 0 then%0A      [] = RPT2:Test_Passed["objD"%2C Test%2C Failure_Code]%0A   else%0A      [] = RPT3:Test_Failed["objD"%2C Test%2C Failure_Code]%0A   endif%0A%0A   Test=Test + 1%0A%0A# End Test 4%0A%0A#------------------------------------------------------------------------#%0A# Test 5 -Delete instance of Object_D where multiple condition are%0A#         fulfilled%0A#         ONE INSTANCE IS DELETED%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0121"%2C "Creation Deletion"%2C "ObjD find and delete"%2C "single instance multiple conditions met"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-0531"]%0A%0A   has_failed = FALSE%0A%0A   # Establish how many instances already exist%0A   {before_setD} = find-all Object_D%0A%0A   #Find an instanceD using find where before attempting to delete. (TB)%0A   an_instanceD = find-one Object_D where ReferenceD = 2 & IntegerA = 2%0A%0A   if an_instanceD != UNDEFINED then%0A      delete an_instanceD%0A   endif%0A%0A   # We are more concerened that the instance in question has actually been deleted%2C rather%0A   # than an instance has been deleted from the set. To this end%2C we shall check that%0A   # the specific instance in question really has bitten the dust.%0A   Should_Be_Deleted = find-one Object_D where ReferenceD = 2 & IntegerA = 2%0A%0A   if Should_Be_Deleted != UNDEFINED then%0A      [] = RPT3:Test_Failed["objD"%2C Test%2C -8]%0A      has_failed = TRUE%0A   endif%0A	%0A   {after_setD} = find-all Object_D%0A%0A   if countof {before_setD} = countof {after_setD} then%0A      [] = RPT3:Test_Failed["objD"%2C Test%2C -9]%0A      has_failed = TRUE%0A   endif%0A%0A   #Ensure that the correct instance was deleted%0A   for each_instanceD in {after_setD} do%0A      if each_instanceD.ReferenceD = 2 then%0A		         	    %0A         [] = RPT3:Test_Failed["objD"%2C Test%2C -10]%0A         has_failed = TRUE%0A%0A      endif%0A%0A   endfor%0A%0A   if !has_failed then%0A      [] = RPT2:Test_Passed["objD"%2C Test%2C0]%0A   endif%0A%0A   Test=Test + 1%0A%0A#End Test 5%0A%0A#------------------------------------------------------------------------#%0A# Test 6 - Delete instance of Object_D where multiple condition are %0A#          fulfilled%0A#          ONE INSTANCE IS DELETED%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0532"%2C "Creation Deletion"%2C "objD find and delete"%2C"delete 1 instance where multiple conditions fulfilled"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0121"]%0A%0A   has_failed = FALSE%0A%0A   # Establish how many instances already exist%0A   {before_setD} = find-all Object_D%0A%0A   # Not currently supported by code gen.%0A   #   delete Object_D where ReferenceD = 7 & (IntegerA = 30 | IntegerA = 7)%0A   # Neither is this%0A   delete Object_D where ReferenceD = 7 & IntegerA = 30%0A   delete Object_D where ReferenceD = 7 & IntegerA = 7%0A%0A   # Check that no instance have been deleted%0A   {after_setD} = find-all Object_D%0A   size_after = (countof {after_setD}) + 1%0A%0A   if countof {before_setD} = countof {after_setD} then%0A       [] = RPT3:Test_Failed["objD"%2C Test%2C -13]%0A       has_failed = TRUE%0A   endif%0A%0A   #Ensure that the correct instance was deleted%0A   for each_instanceD in {after_setD} do%0A%0A      if each_instanceD.ReferenceD = 7 then%0A          [] = RPT3:Test_Failed["objD"%2C Test%2C -14]%0A          has_failed = TRUE%0A      endif%0A%0A   endfor%0A%0A   if !has_failed then%0A      [] = RPT2:Test_Passed["objD"%2C Test%2C0]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 6%0A%0A#------------------------------------------------------------------------#%0A# Test 7 - Delete an instance of Object_D%0A#          ONE INSTANCE IS DELETED%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "objD find and delete"%2C "Deletion of one instance"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0121"]%0A%0A   has_failed = FALSE%0A%0A   # Establish how many instances already exist%0A   {before_setD} = find-all Object_D%0A%0A   # Find an instance to delete%0A   an_instanceD = find-one Object_D where ReferenceD = 8%0A%0A   # Perform test%0A   if an_instanceD !=UNDEFINED then%0A      delete an_instanceD%0A   endif%0A%0A   # Check that no instance have been deleted%0A   {after_setD} = find-all Object_D%0A   size_after = (countof {after_setD}) + 1%0A%0A   if countof {before_setD} != size_after then%0A%0A      [] = RPT3:Test_Failed["objD"%2C Test%2C-15]%0A      has_failed = TRUE%0A%0A   endif%0A%0A   # Ensure that the correct instance was deleted%0A   for each_instanceD in {after_setD} do%0A%0A      if each_instanceD.ReferenceD = 8 then%0A         [] = RPT3:Test_Failed["objD"%2C Test%2C -16]%0A         has_failed = TRUE%0A      endif%0A%0A   endfor%0A%0A   if !has_failed then%0A      [] = RPT2:Test_Passed["objD"%2C Test%2C 0]%0A   endif%0A%0A# End Test 7%0A%0A#------------------------------------------------------------------------#%0A# Preparation for instance deletion%0A#------------------------------------------------------------------------#%0A%0Acount = 8%0Aloop%0A   find_and_delete_D = create Object_D with ReferenceD = count &\%0A                               IntegerA = count%0A   count = count - 1%0A   breakif count = 0%0Aendloop%0A%0A#------------------------------------------------------------------------#%0A# Test 8%0A# Attempt to delete an instance of Object_D where the condition is%0A# unfulfilled%2C NO INSTANCE DELETED%0A#%0A# FOR THE PURPOSES OF THIS TEST%2C ONLY A SINGLE INSTANCE DELETION IS %0A# REQUIRED.%0A#%0A# Note : The ISIM seems to have a problem attempting to delete an instance%0A#        that isn't there. So there must be a check performed for the%0A#        existance of an instance before squashing it.%0A#------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0532"%2C "Creation Deletion"%2C "delete where"%2C "A is False"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0121"]%0A%0A   has_failed = FALSE%0A%0A   # Establish how many instances already exist%0A   {before_setD} = find-all Object_D%0A%0A   # Perform test%0A   delete Object_D where ReferenceD > 100%0A%0A   # Check that no instance have been deleted%0A   {after_setD} = find-all Object_D%0A   if countof {before_setD} != countof {after_setD} then%0A     [] = RPT3:Test_Failed["objD"%2C Test%2C -1]%0A     has_failed = TRUE%0A   endif%0A%0A   if !has_failed then%0A      [] = RPT2:Test_Passed["objD"%2C Test%2C 0]%0A   endif%0A%0A#End Test 8%0A%0A#------------------------------------------------------------------------#%0A# Test 9 - Attempt to delete an instance of Object_D where only one of the%0A#          conditions are fulfilled%2C NO INSTANCE DELETED%0A#------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "objD delete where"%2C "A and B is False"]%0A%0A   has_failed = FALSE%0A%0A   Failure_Code = (-2)%0A%0A   # Establish how many instances already exist%0A   {before_setD} = find-all Object_D%0A%0A   # Perform test%0A   delete Object_D where ReferenceD = 1 & IntegerA = 30%0A%0A   # Check that no instance have been deleted%0A   {after_setD} = find-all Object_D%0A%0A   if countof {before_setD} != countof {after_setD} then%0A      [] = RPT3:Test_Failed["objD"%2C Test%2C Failure_Code]%0A   else%0A      [] = RPT2:Test_Passed["objD"%2C Test%2C 0]%0A   endif%0A%0A#End Test 9%0A%0A#------------------------------------------------------------------------#%0A# Test 10 - Attempt to delete an instance of Object_D where only one of %0A#          the 'and' conditions are fulfilled%2C NO INSTANCE DELETED%0A#------------------------------------------------------------------------#%0A%0A   Test= Test + 1%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C  "Creation Deletion"%2C "delete where"%2C "A and BorC is False"]%0A%0A   has_failed = FALSE%0A   Failure_Code = (-2)%0A%0A   # Establish how many instances already exist%0A   {before_setD} = find-all Object_D%0A%0A   # Perform test%0A   delete Object_D where IntegerA = 30 & (ReferenceD = 1 | ReferenceD = 2)%0A%0A   # Check that no instance have been deleted%0A   {after_setD} = find-all Object_D%0A%0A   # Also this will prove that the function count-of can be used like this%0A   # without having recourse to a local temp variable or two. It is the only%0A   # function so far that can be used like this.%0A%0A   if countof{before_setD} != countof{after_setD} then%0A      [] = RPT3:Test_Failed["objD"%2C Test%2C Failure_Code]%0A   else%0A      [] = RPT2:Test_Passed["objD"%2C Test%2C 0]%0A   endif%0A%0A# End Test 10%0A %0A#------------------------------------------------------------------------#%0A# Test 11%0A#------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0532"%2C "Creation Deletion"%2C "ObjD delete where"%2C "delete single instance"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0121"]%0A%0A   Failure_Code = (-5)%0A%0A   # Find all instances in the set before any deletions take place.%0A   {Before_Deletion} = find-all Object_D%0A%0A   # Delete the instance found%2C which does exist.%0A   delete Object_D where ReferenceD = 1%0A%0A   # Check that it has been deleted%2C by checking first against the%0A   # used attribute; ReferenceD%2C and then by the unused attribute; IntegerA.%0A   an_instanceD = find-one Object_D where ReferenceD = 1%0A%0A   if an_instanceD = UNDEFINED then%0A      an_instanceAD = find-one Object_D where IntegerA = 1%0A%0A      if an_instanceAD = UNDEFINED then%0A         # Use the find operation on the set to prove that the instance has gone%0A         # from within the set.%0A         {After_Deletion} = find-all Object_D%0A%0A         if countof {Before_Deletion} != countof {After_Deletion} then%0A            Failure_Code = 0%0A         else%0A            Failure_Code = Failure_Code + 2%0A         endif%0A%0A      else%0A         Failure_Code = Failure_Code + 3%0A      endif%0A%0A   else%0A      Failure_Code = Failure_Code + 4%0A   endif%0A%0A   if Failure_Code = 0 then%0A      [] = RPT2:Test_Passed["objD"%2C Test%2C Failure_Code]%0A   else%0A      [] = RPT3:Test_Failed["objD"%2C Test%2C Failure_Code]%0A   endif%0A%0A# End Test 11%0A#------------------------------------------------------------------------#%0A# Test 12 - Delete instance of Object_D where multiple condition are %0A#           fulfilled%0A#           ONE INSTANCE IS DELETED%0A#------------------------------------------------------------------------#%0A%0A   Test=Test + 1%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0532"%2C "Creation Deletion"%2C "ObjD delete where"%2C "single instance multiple conditions met"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0121"]%0A%0A   has_failed = FALSE%0A%0A   # Establish how many instances already exist%0A   {before_setD} = find-all Object_D%0A%0A   # Perform test%0A   # Find an instanceD using find where before attempting to delete. (TB)%0A   delete Object_D where ReferenceD = 2 & IntegerA = 2%0A%0A   # We are more concerened that the instance in question has actually been deleted%2C rather%0A   # than an instance has been deleted from the set. To this end%2C we shall check that%0A   # the specific instance in question really has bitten the dust.%0A%0A   Should_Be_Deleted = find-one Object_D where ReferenceD = 2 & IntegerA = 2%0A%0A   if Should_Be_Deleted != UNDEFINED then%0A      [] = RPT3:Test_Failed["objD"%2C Test%2C -8]%0A      has_failed = TRUE%0A   endif%0A	%0A   {after_setD} = find-all Object_D%0A%0A   if countof {before_setD} = countof {after_setD} then%0A      [] = RPT3:Test_Failed["objD"%2C Test%2C -9]%0A      has_failed = TRUE%0A   endif%0A%0A   #Ensure that the correct instance was deleted%0A   for each_instanceD in {after_setD} do%0A%0A      if each_instanceD.ReferenceD = 2 then%0A         [] = RPT3:Test_Failed["objD"%2C Test%2C -10]%0A         has_failed = TRUE%0A      endif%0A%0A   endfor%0A%0A   if !has_failed then%0A      [] = RPT2:Test_Passed["objD"%2C Test%2C0]%0A   endif%0A%0A# End Test 12%0A%0A#------------------------------------------------------------------------#%0A# Test 13 - Delete instance of Object_D where multiple condition are %0A#           fulfilled%0A#           ONE INSTANCE IS DELETED%0A#------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0532"%2C "Creation Deletion"%2C "objD delete where "%2C"single instance deleted"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0121"]%0A%0A   has_failed = FALSE%0A%0A   # Establish how many instances already exist%0A   {before_setD} = find-all Object_D%0A%0A   #Perform test%0A   delete Object_D where ReferenceD = 7 & (IntegerA = 30 | IntegerA = 7)%0A%0A   # Check that no instance have been deleted%0A   {after_setD} = find-all Object_D%0A%0A   if countof {before_setD} = countof {after_setD} then%0A       [] = RPT3:Test_Failed["objD"%2C Test%2C -13]%0A       has_failed = TRUE%0A   endif%0A%0A   #Ensure that the correct instance was deleted%0A   for each_instanceD in {after_setD} do%0A%0A      if each_instanceD.ReferenceD = 7 then%0A          [] = RPT3:Test_Failed["objD"%2C Test%2C -14]%0A          has_failed = TRUE%0A      endif%0A%0A   endfor%0A%0A   if !has_failed then%0A      [] = RPT2:Test_Passed["objD"%2C Test%2C0]%0A   endif%0A%0A# End Test 13%0A%0A#------------------------------------------------------------------------#%0A# Test 14 - Delete an instance of Object_D%0A#           ONE INSTANCE IS DELETED%0A#------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0532"%2C "Creation Deletion"%2C "objD delete where"%2C "Deletion of one instance"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0121"]%0A%0A   has_failed = FALSE%0A%0A   # Establish how many instances already exist%0A   {before_setD} = find-all Object_D%0A%0A   # Find an instance to delete%0A   delete Object_D where ReferenceD = 8%0A%0A   # Check that no instance have been deleted%0A   {after_setD} = find-all Object_D%0A%0A   if countof {before_setD} = countof {after_setD} then%0A      [] = RPT3:Test_Failed["objD"%2C Test%2C-15]%0A      has_failed = TRUE%0A   endif%0A%0A   # Ensure that the correct instance was deleted%0A   for each_instanceD in {after_setD} do%0A%0A      if each_instanceD.ReferenceD = 8 then%0A         [] = RPT3:Test_Failed["objD"%2C Test%2C -16]%0A         has_failed = TRUE%0A      endif%0A%0A   endfor%0A%0A   if !has_failed then%0A      [] = RPT2:Test_Passed["objD"%2C Test%2C 0]%0A   endif%0A%0A# End Test 14%0A%0A#------------------------------------------------------------------------#%0A# Test 15 - Deletion of all remaining instances.%0A#------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A   %0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0532"%2C "Creation Deletion"%2C "objD delete"%2C "All remaining instance handles"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0121"]%0A%0A   {before_operation} = find-all Object_D%0A%0A   # Use for making sure that all remaining instances have actually been deleted.%0A   what_we_want = 0%0A%0A   has_failed = FALSE%0A%0A   Failure_Code = 0%0A%0A   # Delete all remaining instances. Or at least all thise whose ReferencD%0A   # attribute is less than 100. This should be all of them.%0A   delete Object_D where ReferenceD < 100%0A%0A   {after_operation} = find-all Object_D%0A%0A   # None have been deleted%0A   if countof {before_operation} = countof {after_operation} then%0A      has_failed = TRUE%0A      Failure_Code = (-1)%0A   else%0A      # Try and find any instance%2C doesn't matter what it's attributes are.%0A      any_instance = find-one Object_D%0A%0A      # The instance is still defined.%0A      if any_instance != UNDEFINED then%0A         Failure_Code = (-2)%0A         has_failed = TRUE%0A      else%0A         # An instance has been found.%0A         if what_we_want != countof {after_operation} then%0A            Failure_Code = (-3)%0A            has_failed = TRUE%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A   if has_failed = TRUE then%0A      [] = RPT3:Test_Failed["ObjD"%2C Test%2C Failure_Code]%0A   else%0A      [] = RPT2:Test_Passed["ObjD"%2C Test%2C Failure_Code]%0A   endif%0A%0A# End Test 15%0A%0A#------------------------------------------------------------------------#%0A# Test 16 - Deallocation of instance handles%0A#------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0120"%2C "Creation Deletion"%2C "objD delete"%2C "Deallocation of instance handles"]%0A   [] = RPT5:Test_Text[Test%2C "Deallocation of instance handles is unsupported"]%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A#------------------------------------------------------------------------#%0A%0AReturned_Test_Number = Test %0A%0A#Tests Complete%0A%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Creation_Deletion,Object_D,public,do_multiple_deletion_tests,,,2,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Returned_Test_Number,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# do multiple deletion tests%0A#------------------------------------------------------------------------#%0A%0A   Test = Test_Number%0A%0A   # Preparation for instance deletion%0A   count = 10%0A%0A   loop%0A      find_and_delete_D = create Object_D with ReferenceD = count &\%0A                                               IntegerA = count%0A      count = count - 1%0A      breakif count = 0%0A   endloop%0A%0A#------------------------------------------------------------------------#%0A# Test 1 - Fully specify both instances%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0532"%2C "Creation Deletion"%2C "objD multiple delete"%2C "Fully specify both instances"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0121"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0122"]%0A%0A   # Delete two instances that meet the search criteria%0A   {before_operation} = find-all Object_D%0A%0A   # Use for making sure that only two instances have actually been deleted.%0A   what_we_want = countof {before_operation}%0A   what_we_want = what_we_want - 2%0A%0A   has_failed = FALSE%0A  %0A   failure_code = 0%0A%0A   # Delete two instances where both attributes for both instances are specified.%0A   delete Object_D where (ReferenceD = 1 & IntegerA = 1) | (ReferenceD = 2 & IntegerA = 2)%0A%0A   {after_operation} = find-all Object_D%0A%0A   # None have been deleted%0A   if countof {before_operation} = countof {after_operation} then%0A      has_failed = TRUE%0A      failure_code = (-1)%0A   else%0A      # Try and find the instances directly%0A      first_instance  = find-one Object_D where ReferenceD = 1 & IntegerA = 1%0A      second_instance = find-one Object_D where ReferenceD = 2 & IntegerA = 2%0A%0A      if first_instance != UNDEFINED then%0A         failure_code = (-2)%0A         has_failed = TRUE%0A      else%0A%0A         if second_instance != UNDEFINED then%0A            failure_code = (-3)%0A            has_failed = TRUE%0A         else%0A            # More or less than two instances have been deleted%0A            if what_we_want != countof {after_operation} then%0A               failure_code = (-4)%0A               has_failed = TRUE%0A            endif%0A   %0A         endif%0A%0A      endif%0A%0A   endif%0A%0A   if has_failed = TRUE then%0A      [] = RPT3:Test_Failed["ObjD"%2C Test%2C failure_code]%0A   else%0A      [] = RPT2:Test_Passed["ObjD"%2C Test%2C failure_code]%0A   endif%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A# Test 2%0A#------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0532"%2C "Creation Deletion"%2C "objD multiple delete"%2C "Diff attributes diff instances"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0121"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0122"]%0A%0A   # Delete two instances that meet the search criteria%0A   {before_operation} = find-all Object_D%0A%0A   # Use for making sure that only two instances have actually been deleted.%0A   what_we_want = countof {before_operation}%0A   what_we_want = what_we_want - 2%0A%0A   has_failed = FALSE%0A%0A   failure_code = 0%0A%0A   # Delete two instances where one attribute for both instances are specified.%0A   delete Object_D where ReferenceD = 3 | IntegerA = 4%0A%0A   {after_operation} = find-all Object_D%0A%0A   # None have been deleted%0A   if countof {before_operation} = countof {after_operation} then%0A      has_failed = TRUE%0A      failure_code = (-1)%0A   else%0A      # Try and find the instances directly%0A      third_instance  = find-one Object_D where ReferenceD = 3 & IntegerA = 3%0A      fourth_instance = find-one Object_D where ReferenceD = 4 & IntegerA = 4%0A%0A      if third_instance != UNDEFINED then%0A         failure_code = (-2)%0A         has_failed = TRUE%0A      else%0A%0A         if fourth_instance != UNDEFINED then%0A            failure_code = (-3)%0A            has_failed = TRUE%0A         else%0A            what_we_got = countof {after_operation}%0A%0A            # More or less than two instances have been deleted%0A            if what_we_want != what_we_got then%0A               failure_code = (-4)%0A               has_failed = TRUE%0A            endif%0A%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A   if has_failed = TRUE then%0A      [] = RPT3:Test_Failed["ObjD"%2C Test%2C failure_code]%0A   else%0A      [] = RPT2:Test_Passed["ObjD"%2C Test%2C failure_code]%0A   endif%0A%0A# End Test 2%0A%0A#------------------------------------------------------------------------#%0A# Test 3%0A#------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0532"%2C "Creation Deletion"%2C "objD multiple delete"%2C "Same attribute diff instances"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0121"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0122"]%0A%0A   # Delete two instances that meet the search criteria%0A   {before_operation} = find-all Object_D%0A%0A   # Use for making sure that only two instances have actually been deleted.%0A   what_we_want = countof {before_operation}%0A   what_we_want = what_we_want - 2%0A%0A   has_failed = FALSE%0A%0A   failure_code = 0%0A%0A   # Delete two instances where the same attribute for both instances are specified separately.%0A   delete Object_D where ReferenceD = 5 | ReferenceD = 6%0A%0A   {after_operation} = find-all Object_D%0A%0A   # None have been deleted%0A   if countof {before_operation} = countof {after_operation} then%0A      has_failed = TRUE%0A      failure_code = (-1)%0A   else%0A      # Try and find the instances directly%0A      fifth_instance = find-one Object_D where ReferenceD = 5 & IntegerA = 5%0A      sixth_instance = find-one Object_D where ReferenceD = 6 & IntegerA = 6%0A%0A      if fifth_instance != UNDEFINED then%0A         failure_code = (-2)%0A         has_failed = TRUE%0A      else%0A%0A         if sixth_instance != UNDEFINED then%0A            failure_code = (-3)%0A            has_failed = TRUE%0A         else%0A            what_we_got = countof {after_operation}%0A%0A            # More or less than two instances have been deleted%0A            if what_we_want != what_we_got then%0A               failure_code = what_we_got - what_we_want%0A               has_failed = TRUE%0A            endif%0A%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A   if has_failed = TRUE then%0A      [] = RPT3:Test_Failed["ObjD"%2C Test%2C failure_code]%0A   else %0A      [] = RPT2:Test_Passed["ObjD"%2C Test%2C failure_code]%0A   endif%0A%0A# End Test 3%0A%0A#------------------------------------------------------------------------#%0A# Test 4%0A#------------------------------------------------------------------------#%0A%0A   # Deletion of set of instance handles is unsupported.%0A   Test = Test + 1%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Creation Deletion"%2C "objD multiple delete"%2C "Set of instance handles"]%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A# End Test 4%0A%0A#------------------------------------------------------------------------#%0A# Test 5%0A#------------------------------------------------------------------------#%0A%0A   # Deletion of all remaining instances.%0A%0A   Test = Test + 1%0A%0A   [] = RPT1:Start_Test[Test%2C "1103-0000-01-0532"%2C "Creation Deletion"%2C "objD multiple delete"%2C "All remaining instance handles"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0121"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0122"]%0A   {before_operation} = find-all Object_D%0A%0A   # Use for making sure that all remaining instances have actually been deleted.%0A   what_we_want = 0%0A%0A   has_failed = FALSE%0A%0A   failure_code = 0%0A%0A   # Delete all remaining instances where ReferenceD is less than 100%2C %0A   # should be all of them.%0A   delete Object_D where ReferenceD < 100%0A%0A   {after_operation} = find-all Object_D%0A%0A   # None have been deleted%0A   if countof {before_operation} = countof {after_operation} then%0A      has_failed = TRUE%0A      failure_code = (-1)%0A   else%0A      # Try and find any instance%2C doesn't matter what it's attributes are.%0A      any_instance = find-one Object_D%0A%0A       # The instance is still defined.%0A      if any_instance != UNDEFINED then%0A         failure_code = (-2)%0A         has_failed = TRUE%0A      else%0A         # An instance has been found.%0A         if what_we_want != countof {after_operation} then%0A            failure_code = (-3)%0A            has_failed = TRUE%0A         endif%0A%0A      endif%0A%0A   endif%0A%0A   if has_failed = TRUE then%0A      [] = RPT3:Test_Failed["ObjD"%2C Test%2C failure_code]%0A   else%0A      [] = RPT2:Test_Passed["ObjD"%2C Test%2C failure_code]%0A   endif%0A%0A# End Test 5%0A%0A#------------------------------------------------------------------------#%0A%0AReturned_Test_Number = Test %0A%0A#Tests Complete%0A%0A,,,,,,,
codeblock,,,,,,,,
description, This service shall prove that deletion of multiple instances from a%0A set is correct.%0A,,,,,,,
operation,,,,,,,,
description, Object_D is manipulated by object 'Instance_Deletion'.%0A,,,,,,,
object,,,,,,,,
object,Report_Data,RD,14,,,,,
attribute,Report_Data_Unique_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Reported_Domain_Number,,,Report_Data_Unique_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Unique identifer for this domain as foar as the Reporter domain is concerned.%0A,,,,,,,
attribute,,,,,,,,
description, This object shall be replicated in all domains existing within the Software Architecture Test Suite that use the Reporter Domain.%0A,,,,,,,
object,,,,,,,,
object,Termination_State,objTS,11,,,,,
attribute,ReferenceTS,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
operation,Creation_Deletion,Termination_State,public,verify_deletion,,,1,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# Verify instance deletion%0A#------------------------------------------------------------------------#%0A%0A# Set the fault flag%2C set to TRUE if a fault has been identified%0A%0A#------------------------------------------------------------------------#%0A# Test 1%0A#------------------------------------------------------------------------#%0A%0A   # Attempt to find the deleted instance%0A   an_instanceTS = find-one Termination_State where ReferenceTS = Test%0A%0A   # Check that the instance was deleted%0A   if an_instanceTS != UNDEFINED then		         	    %0A      [] = RPT3:Test_Failed["objTS"%2C Test%2C -1]%0A   else     %0A      [] = RPT2:Test_Passed["objTS"%2C Test%2C 0]%0A   endif%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A%0A# Test complete%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
state,,Termination_State,Idle,,1,,,
codeblock,###### There is no ASL for this state ######,,,,,,,
codeblock,,,,,,,,
description, Idle state.%0A No action taken.%0A,,,,,,,
state,,,,,,,,
state,,Termination_State,Deletion_in_a_terminal_state,terminal,2,,,
codeblock,#------------------------------------------------------------------------#%0A# Deletion in a termination state%0A#------------------------------------------------------------------------#%0A%0A   # The following ASL is valid for all tests%0A   Test = this.ReferenceTS%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0206"%2C "Creation Deletion"%2C "Termination State"%2C "Deletion test"]%0A%0A   # Delete the current instance%0A   delete this%0A%0A   # verify the deletion was sucessful%0A   [] = objTS1:verify_deletion[Test]%0A%0A#------------------------------------------------------------------------#,,,,,,,
codeblock,,,,,,,,
description, This state verifies the following:%0A %0A 	[1] Deletion of own instance%0A 	%0A,,,,,,,
state,,,,,,,,
event,StartA,,3,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,StartA,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,StartA,Deletion_in_a_terminal_state,,,
transition,,,,,,,,
transition,Deletion_in_a_terminal_state,,,StartA,Cannot_Happen,,,
transition,,,,,,,,
transitiontable,,,,,,,,
description, This object verifies the deletion of object instances.%0A,,,,,,,
object,,,,,,,,
pragma,version,,,,,,,
pragmaitem,15,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, This domain deals with instance creation and deletion. It check both synchronous and asynchronous creation and deletion.%0A,,,,,,,
domain,,,,,,,,
