domain,DomainA,DomainA,,,,,,
object,Domain_A_Object_SubA,,,,,,,
object,,,,,,,,
object,Domain_A_Object_SubB,,,,,,,
object,,,,,,,,
object,Domain_A_Object_Super,,,,,,,
object,,,,,,,,
object,Many_To_Many_Associative,,,,,,,
object,,,,,,,,
object,Many_To_Many_Left_Side,,,,,,,
object,,,,,,,,
object,Many_To_Many_Right_Side,,,,,,,
object,,,,,,,,
object,Object_A,,,,,,,
object,,,,,,,,
object,One_To_Many_Left_Side,,,,,,,
object,,,,,,,,
object,One_To_Many_Right_Side,,,,,,,
object,,,,,,,,
object,One_To_One_Left_Side,,,,,,,
object,,,,,,,,
object,One_To_One_Right_Side,,,,,,,
object,,,,,,,,
object,Report_Data,,,,,,,
object,,,,,,,,
object,Test_Data,,,,,,,
object,,,,,,,,
type,Test_Enum_Type,public,,,,,,
enumeration,Test_Enum_Type,,,,,,,
enumerator,Sly,,,,,,,
enumerator,,,,,,,,
enumerator,Sandy,,,,,,,
enumerator,,,,,,,,
enumerator,Wes,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
type,,,,,,,,
routine,DomainA,,private,Domain_A_setup,1,,,
codeblock,%0A%0Amy_test = create Test_Data with This_Test_Number = 1%0A%0A#Create several instances of Object_A%0Acount = 5%0Aloop%0A%0A   newA = create Object_A with idA = count &\%0A                               ResultA = 0 &\%0A                               Current_State  = 'Idle'%0A   count = count - 1%0A   breakif count = 0%0Aendloop%0A%0ASuper1 = create Domain_A_Object_Super with idSUPER = 1%0ASub_A1 = create Domain_A_Object_SubA with SubA_Attribute = 1 & A_Text = "Sub A1"%0ASub_B1 = create Domain_A_Object_SubB with SubB_Attribute = 1 & B_Text = "Sub B1"%0A%0Alink Super1 R4 Sub_A1%0A%0ASuper2 = create Domain_A_Object_Super with idSUPER = 2%0ASub_A2 = create Domain_A_Object_SubA with SubA_Attribute = 2 & A_Text = "Sub A2"%0ASub_B2 = create Domain_A_Object_SubB with SubB_Attribute = 2 & B_Text = "Sub B2"%0A%0Alink Super2 R4 Sub_B2,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,1,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Domain A setup%0A,,,,,,,
routine,,,,,,,,
routine,DomainA,,private,Sync_to_event,3,,,
codeblock,#-------------------------------------------------------------------%0A# Sync service invocation to an event%0A#-------------------------------------------------------------------%0A%0A   my_test = find-one Test_Data%0A   Test    = my_test.This_Test_Number%0A%0A   has_failed = FALSE%0A%0A   # Initiate the test%0A   an_instanceA = find-one Object_A where idA = 2%0A%0A   if an_instanceA != NULL then%0A      generate objA6:StartB(Test) to an_instanceA%0A   else%0A      # Null instance detected.%0A      [] = RPT5:Test_Text[Test%2C "DomainA setup scenario not run"]%0A   endif%0A%0A   Test = Test + 1%0A%0A   inputA = 1%0A   inputB = 2%0A%0A#-------------------------------------------------------------------%0A# Test 1%0A#-------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C"1241-0000-01-1110"%2C "DomainA"%2C "Domain A to B"%2C "synch 4 service call"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1103"]%0A%0A   [outputA%2C outputB] = termA4:Sync4A[inputA%2C inputB%2C Test]%0A%0A   if outputA = 3 and outputB = 4 then%0A      [] = RPT2:Test_Passed["DomainA"%2C Test%2C outputB]%0A   else%0A      [] = RPT3:Test_Failed["DomainA"%2C Test%2C outputA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#-------------------------------------------------------------------%0A%0A   my_test.This_Test_Number = Test%0A%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,3,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Sync to event%0A,,,,,,,
routine,,,,,,,,
routine,DomainA,,private,Sync_to_sync,2,,,
codeblock,#-------------------------------------------------------------------%0A#Sync service invocation to sync service%0A#-------------------------------------------------------------------%0A%0A   my_test = find-one Test_Data%0A%0A   # Initiate the test%0A   Test = my_test.This_Test_Number%0A%0A   has_failed = FALSE%0A%0A   inputA = 3%0A   inputB = 4%0A%0A#-------------------------------------------------------------------%0A# Test 1%0A#-------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C"1241-0000-01-1110"%2C "DomainA"%2C "Domain A to B"%2C "synch 3 service call"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1101"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1104"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1105"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0810"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1103"]%0A%0A   [outputA%2C outputB] = termA3:Sync3A[inputA%2C inputB%2C Test]%0A%0A   if outputA = 5 and outputB = 6 then%0A      [] = RPT2:Test_Passed["DomainA"%2C Test%2C outputB]%0A   else%0A      [] = RPT3:Test_Failed["DomainA"%2C Test%2C outputA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#-------------------------------------------------------------------%0A# Test 2%0A#-------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C"1241-0000-01-1110"%2C "DomainA"%2C "Domain A to B"%2C "synch 2 service call"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1101"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1104"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1105"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0810"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1103"]%0A%0A   [outputA%2C outputB] = termA2:Sync2A[inputA%2C inputB%2C Test]%0A%0A   if outputA = 5 and outputB = 6 then%0A      [] = RPT2:Test_Passed["DomainA"%2C Test%2C outputB]%0A   else%0A      [] = RPT3:Test_Failed["DomainA"%2C Test%2C outputA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#-------------------------------------------------------------------%0A# Test 3%0A#-------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C"1241-0000-01-1110"%2C "DomainA"%2C "Domain A to B"%2C "synch 1 service call"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1104"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1104"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1105"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0810"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-1103"]%0A%0A   inputA = 1%0A   inputB = 2%0A%0A   [outputA%2C outputB] = termA1:Sync1A[inputA%2C inputB%2C Test]%0A%0A   if outputA = 3 and outputB = 4 then%0A      [] = RPT2:Test_Passed["DomainA"%2C Test%2C outputB]%0A   else%0A      [] = RPT3:Test_Failed["DomainA"%2C Test%2C outputA]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#-------------------------------------------------------------------%0A# Test 4%0A#-------------------------------------------------------------------%0A%0A   an_instanceA = find-one Object_A where idA = 1%0A %0A   if an_instanceA != NULL then%0A      generate objA3:StartA(Test) to an_instanceA%0A   else%0A      # Null instance detected.%0A      [] = RPT5:Test_Text[Test%2C "Can not find object A domainA scenario2"]%0A      [] = RPT4:Test_Unsupported[Test]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A#-------------------------------------------------------------------%0A%0A   my_test.This_Test_Number = Test%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,2,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Sync to sync%0A,,,,,,,
routine,,,,,,,,
routine,DomainA,,private,single_bridge_test,4,,,
codeblock,#------------------------------------------------------------------------#%0A# Call bridge service that will perform navigation in domain B%0A#------------------------------------------------------------------------#%0A%0Amy_test = find-one Test_Data%0ATest    = my_test.This_Test_Number%0A%0A[] = NAV1:Single_Bridge_Navigate[Test]%0A%0ATest = Test + 1%0A%0Amy_test.This_Test_Number = Test%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,4,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, single bridge test%0A,,,,,,,
routine,,,,,,,,
routine,DomainA,,private,shared_bridge_test,5,,,
codeblock,#------------------------------------------------------------------------#%0A# Call shared bridge to perform navigation in domain B.%0A#------------------------------------------------------------------------#%0A%0Amy_test = find-one Test_Data%0ATest    = my_test.This_Test_Number%0A%0A[] = NAV2:Shared_Bridge_Navigate[Test]%0A%0ATest = Test + 1%0A%0Amy_test.This_Test_Number = Test%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,5,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, shared bridge test%0A,,,,,,,
routine,,,,,,,,
routine,DomainA,,private,one_to_one_navigation,6,,,
codeblock,my_test = find-one Test_Data%0ATest    = my_test.This_Test_Number%0A%0A#------------------------------------------------------------------------#%0A# Create five instances of left and right parts of the one to one relationship.%0A#------------------------------------------------------------------------#%0A%0A   Termination_Condition = Test + 5%0A%0A   loop_counter = Test%0A%0A   loop%0A      left  = create One_To_One_Left_Side with otols_id  = loop_counter%0A      right = create One_To_One_Right_Side with otors_id = loop_counter%0A%0A      link left R1 right%0A%0A      loop_counter = loop_counter + 1%0A%0A      breakif loop_counter = Termination_Condition%0A%0A   endloop%0A%0A   # Call bridge service to see if we can navigate from one side to the other%0A%0A   loop %0A      [] = NAV3:One_to_One_Navigate[Test]%0A      Test = Test + 1%0A      breakif Test = Termination_Condition%0A   endloop%0A%0A#------------------------------------------------------------------------#%0A%0Amy_test.This_Test_Number = Test%0A%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,6,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, one_to_one_navigation%0A,,,,,,,
routine,,,,,,,,
routine,DomainA,,private,one_to_many_navigation,7,,,
codeblock,my_test = find-one Test_Data%0A%0A#------------------------------------------------------------------------#%0A# Create five instances of left part of the one to many relationship.%0A#------------------------------------------------------------------------#%0A%0A   number_of_instances = 5%0A%0A   Test = my_test.This_Test_Number%0A%0A   loop_counter = Test%0A%0A   terminate_condition = number_of_instances + Test + 1%0A%0A   loop%0A      left  = create One_To_Many_Left_Side with otmls_id = loop_counter%0A%0A      inner_loop_counter = loop_counter%0A      break_condition    = loop_counter + 3%0A%0A      # Make three instances of the right side of the naviagtion to link to%0A      # a single instance of the left%0A      loop%0A         right = create One_To_Many_Right_Side with otmrs_id = inner_loop_counter%0A%0A         link left R2 right%0A%0A         inner_loop_counter = inner_loop_counter + 1%0A%0A         breakif inner_loop_counter = break_condition%0A %0A      endloop%0A%0A      loop_counter = loop_counter + 1%0A%0A      breakif loop_counter = terminate_condition%0A%0A   endloop%0A%0A   # Call bridge service to see if we can navigate from one side to the other%0A   loop %0A      [] = NAV4:One_to_Many_Navigate[Test]%0A      Test = Test + 1%0A      breakif Test = terminate_condition%0A   endloop%0A%0A#------------------------------------------------------------------------#%0A%0Amy_test.This_Test_Number = Test%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,7,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, one_to_many_navigation%0A,,,,,,,
routine,,,,,,,,
routine,DomainA,,private,many_to_many_navigation,8,,,
codeblock,my_test = find-one Test_Data%0ATest    = my_test.This_Test_Number%0A%0A#------------------------------------------------------------------------#%0A# Create five instances of left and right parts of the many to many relationship.%0A#------------------------------------------------------------------------#%0A%0A   number_of_tests = 5%0A   loop_counter    = Test%0A%0A   terminate_condition = number_of_tests + Test + 1%0A%0A   loop%0A      left  = create Many_To_Many_Left_Side with mtmls_id = loop_counter%0A%0A      inner_loop_counter = loop_counter%0A      break_condition    = loop_counter + 3%0A%0A      # Make three instances of the right side of the navigation to link to%0A      # a single instance of the left%0A%0A      loop%0A         right = create Many_To_Many_Right_Side with mtmrs_id   = loop_counter%0A         assoc = create Many_To_Many_Associative with mtma_data = loop_counter%0A %0A         link left R3 right using assoc%0A%0A         inner_loop_counter = inner_loop_counter + 1%0A%0A         breakif inner_loop_counter = break_condition%0A%0A      endloop%0A%0A      loop_counter = loop_counter + 1%0A%0A      breakif loop_counter = terminate_condition%0A%0A   endloop%0A%0A   # Call bridge service to see if we can navigate from one side to the other%0A%0A   loop %0A      [] = NAV5:Many_to_Many_Navigate[Test]%0A      Test = Test + 1%0A      breakif Test = terminate_condition%0A   endloop%0A%0A#------------------------------------------------------------------------#%0A%0Amy_test.This_Test_Number = Test,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,8,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, many_to_many_navigation%0A,,,,,,,
routine,,,,,,,,
routine,DomainA,,private,invoke_misc_calls,9,,,
codeblock,%0Amy_test = find-one Test_Data%0ATest    = my_test.This_Test_Number%0A%0A#------------------------------------------------------------------------#%0A%0A   [] = NAV6:Misc_Calls[Test]%0A%0A   Test        = Test + 1%0A   local_fail  = FALSE%0A   local_value = 0%0A%0A   my_test.This_Test_Number = Test%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "DomainA"%2C "Misc calls"%2C "Common objects"]%0A%0A   # Domain B should have executed seven tests by now%2C so the next test shown in the TEST_DATA%0A   # object should be 8%2C that is is this is an ISIM environment. However%2C if this is WACA then%0A   # domain B will only have executed four tests so far.%0A%0A   [local_fail%2C local_value] = termA5:Common_Named_Object_Usage [Test]%0A%0A   if local_fail = TRUE then%0A      [] = RPT3:Test_Failed["DomainA"%2C Test%2C local_value]%0A   else%0A      [] = RPT2:Test_Passed["DomainA"%2C Test%2C local_value]%0A   endif%0A%0A#------------------------------------------------------------------------#%0A%0ATest = Test + 1%0Amy_test.This_Test_Number = Test%0A%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,9,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, invoke misc calls%0A,,,,,,,
routine,,,,,,,,
routine,DomainA,,private,Start_DomainA_Tests,10,,,
codeblock,[] = DomainA1::Create_Report_Object[]%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,10,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Start DomainA Tests%0A,,,,,,,
routine,,,,,,,,
routine,DomainA,,private,Finish_DomainA_Tests,11,,,
codeblock,%0A[] = DomainA2::Delete_Report_Object[],,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,11,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Finish DomainA Tests%0A,,,,,,,
routine,,,,,,,,
routine,DomainA,,private,Enumeration_Across_Bridge_Check,12,,,
codeblock,#------------------------------------------------------------------------#%0A# Pass an enumerated type through a bridge to see if it gets correctly%0A# picked up%0A#------------------------------------------------------------------------#%0A%0A   my_test = find-one Test_Data%0A   Test    = my_test.This_Test_Number%0A%0A   [] = NAV7:Enum_Test[Test%2C 'Sly']%0A%0A   Test = Test + 1%0A   my_test.This_Test_Number = Test%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,12,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Enumeration Across Bridge Check%0A,,,,,,,
routine,,,,,,,,
routine,DomainA,,private,Enumeration_Across_Lots_Of_Bridges,13,,,
codeblock,# Call bridge service that will perform navigation in domain B%0A%0Amy_test = find-one Test_Data%0A%0ATest = my_test.This_Test_Number%0A%0A[] = NAV8:Big_Bridge_Navigation[Test%2C 'Sandy']%0A%0ATest = Test + 1%0A%0Amy_test.This_Test_Number = Test%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,13,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Enumeration_Across_Lots_Of_Bridges%0A,,,,,,,
routine,,,,,,,,
routine,DomainA,,private,Passing_IH,14,,,
codeblock,#------------------------------------------------------------------------#%0A# Pass an instance handle through a bridge to see if it gets correctly%0A# picked up%0A#------------------------------------------------------------------------#%0A%0A   my_test = find-one Test_Data%0A   Test    = my_test.This_Test_Number%0A%0A   IH_To_Be_Passed = create Object_A with idA           = 100 &\%0A                                          ResultA       = 100 &\ %0A                                          Current_State = 'Sync_service_invocation_to_event' %0A%0A   [] = NAV9:Pass_IH[Test%2C IH_To_Be_Passed]%0A%0A#------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A   my_test.This_Test_Number = Test,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,14,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Passing IH%0A,,,,,,,
routine,,,,,,,,
routine,DomainA,,private,Pass_Params,15,,,
codeblock,   my_test = find-one Test_Data%0A   Test    = my_test.This_Test_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-1106"%2C "DomainA"%2C "Misc calls"%2C "Param Passed through bridge"]%0A%0A   Local_Int = 999%0A   Local_Real = 99.9%0A   Local_Text = "Passed From Domain A"%0A   Local_Bool = TRUE%0A%0A   [The_Result] = DomainA4::Check_Service_Params[Local_Int%2C Local_Real%2C Local_Text%2C Local_Bool]%0A%0A   if The_Result = 10 then%0A      [] = RPT2:Test_Passed["Param Passed through bridge"%2C Test%2C The_Result]%0A   else%0A      [] = RPT3:Test_Failed["Param Passed through bridge"%2C Test%2C The_Result]%0A   endif%0A%0A#------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A   my_test.This_Test_Number = Test,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,15,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Pass_Params%0A,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Create_Report_Object,1,,,
codeblock,# Find out of there already is one of these.%0A# It is not inconceivable that a report object still exists from a previous run.%0A# Report objects are not deleted at the end of a run%2C as certain events may%0A# still be en-queued.%0A%0Aold_report = find-one Report_Data%0A%0Aif old_report != UNDEFINED then%0A   delete old_report%0Aendif%0A%0AMy_Report = create unique Report_Data with Reported_Domain_Number = 0%0A%0A[] = RPT6:Domain_Test_Start["Multi Domain A"]%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Delete_Report_Object,2,,,
codeblock,[] = RPT7:Domain_Test_Finished["Multi Domain A"]%0A%0A# Do not delete the Report_Data object%2C as there may be still events in%0A# the queue.,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Check_Enum,3,,,
parameter,The_Input_Value,in,,,,,,
typeref,Test_Enum_Type,,,,,,,
typeref,,,,,,,,
parameter,The_Return_Value,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,switch The_Input_Value%0A%0A   case 'Sly'%0A      The_Return_Value = 11%0A   case 'Sandy'%0A      The_Return_Value = 12%0A   case 'Wes'%0A      The_Return_Value = 13%0A   default%0A      The_Return_Value = -11%0Aendswitch,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Check_Service_Params,4,,,
parameter,Int_Input,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Real_Input,in,,,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
parameter,Text_Input,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Bool_Input,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,The_Returning_Val,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,   [The_Returning_Val] = NAV10:Pass_Parameters[Int_Input%2C Real_Input%2C Text_Input%2C Bool_Input]%0A%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,TerminatorA,termA,,,,,,
routine,DomainA,,public,Sync1A,1,,,
parameter,inputA,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,inputB,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,outputA,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,outputB,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,   if (inputA != 1)|(inputB != 2) then%0A      #Input values are incorrect%0A      outputA = 1%0A      outputB = 2%0A%0A      [] = RPT5:Test_Text[Test%2C"Term1A stub called with incorrect IO values"]%0A%0A   else%0A      #Input values are correct%0A      outputA = 3%0A      outputB = 4%0A%0A      [] = RPT5:Test_Text[Test%2C"Term1A stub called with correct IO values"]%0A%0A%0A   endif%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Sync2A,2,,,
parameter,inputA,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,inputB,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,outputA,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,outputB,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,   #In a single domain build just verify the synchronous service invocation%0A   if (inputA != 1)|(inputB != 2) then%0A%0A      #Input values are incorrect%0A      outputA = 1%0A      outputB = 2%0A%0A      [] = RPT5:Test_Text[Test%2C "Term2A STUB with incorrect IO values"]%0A%0A%0A   else%0A%0A      #Input values are correct%0A      outputA = 3%0A      outputB = 4%0A%0A      [] = RPT5:Test_Text[Test%2C "Term2A STUB with correct IO values"]%0A%0A%0A   endif%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Sync3A,3,,,
parameter,InputA,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,InputB,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,OutputA,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,OutputB,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Sync4A,4,,,
parameter,InputA,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,InputB,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,OutputA,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,OutputB,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Common_Named_Object_Usage,5,,,
parameter,Test_Number_Parameter,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,This_Test_Has_Failed,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,This_Test_Failure_Value,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
description, This terminator is project level defined and shall prove that two domains (A & B) can use a locally defined object within a $USE $ENDUSE section%2C where the local object has the same name in both domains.%0A,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
terminator,Report,RPT,,,,,,
routine,DomainA,,public,Start_Test,1,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Requid,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Purpose,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Test_Passed,2,,,
parameter,Test_Object_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Test_Failed,3,,,
parameter,Failed_Domain_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Failed_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Failed_Test_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Test_Unsupported,4,,,
parameter,Unsupported_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Test_Text,5,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Free_Text,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Domain_Test_Start,6,,,
parameter,This_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Domain_Test_Finished,7,,,
parameter,This_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Specify_Requid,8,,,
parameter,Requid_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,The_Requid_Itself,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
terminator,Navigate,NAV,,,,,,
routine,DomainA,,public,Single_Bridge_Navigate,1,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,[] = RPT5:Test_Text[Test%2C "single bridge navigate called in STUB"],,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Shared_Bridge_Navigate,2,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,[] = RPT5:Test_Text[Test%2C "Shared bridge called in STUB"],,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,One_to_One_Navigate,3,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,One_to_Many_Navigate,4,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Many_to_Many_Navigate,5,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Misc_Calls,6,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
description, Use this bridge as a catch-all to%0A hoover up tests that require%0A a bridge in one form or another.%0A,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Enum_Test,7,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Enum_Input,in,,,,,,
typeref,Test_Enum_Type,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Big_Bridge_Navigation,8,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Enum_Input,in,,,,,,
typeref,Test_Enum_Type,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
description, Navigate from Domain to all other Domains%0A,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Pass_IH,9,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,The_IH,in,,,,,,
typeref,instance of Object_A,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainA,,public,Pass_Parameters,10,,,
parameter,The_Int_Input,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,The_Real_Input,in,,,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
parameter,The_Text_Input,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,The_Bool_Input,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,The_Result,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
description, Bridge that will allow navigation of a relationship in the target domain.%0A,,,,,,,
terminator,,,,,,,,
regularrel,R1,,,,,,,
participation,DomainA,One_To_One_Right_Side,is_one_of,conditionally,one,DomainA,One_To_One_Left_Side,
participation,DomainA,One_To_One_Left_Side,has_one,conditionally,one,DomainA,One_To_One_Right_Side,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"One_To_One_Right_Side",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"One_To_One_Left_Side",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
regularrel,R2,,,,,,,
participation,DomainA,One_To_Many_Left_Side,has_many,unconditionally,many,DomainA,One_To_Many_Right_Side,
participation,DomainA,One_To_Many_Right_Side,has_one,unconditionally,one,DomainA,One_To_Many_Left_Side,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"One_To_Many_Right_Side",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"One_To_Many_Left_Side",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
associative,R3,DomainA,Many_To_Many_Associative,,,,,
participation,DomainA,Many_To_Many_Left_Side,has_many,unconditionally,many,DomainA,Many_To_Many_Right_Side,
participation,DomainA,Many_To_Many_Right_Side,has_many,unconditionally,many,DomainA,Many_To_Many_Left_Side,
participation,,,,,,,,
associative,R3,DomainA,Many_To_Many_Associative,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Many_To_Many_Right_Side",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Many_To_Many_Left_Side",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
associative,,,,,,,,
subsuper,R4,,,,,,,
participation,,Domain_A_Object_Super,,,,,,
participation,,Domain_A_Object_SubA,,,,,Domain_A_Object_Super,
participation,,Domain_A_Object_SubB,,,,,Domain_A_Object_Super,
participation,,,,,,,,
subsuper,,,,,,,,
object,Domain_A_Object_SubA,DOMAIN_A_SUBA,11,,,,,
attribute,idSUPER,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R4,,,,idSUPER,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,SubA_Attribute,,,idSUPER,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,A_Text,,,SubA_Attribute,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Domain_A_Object_SubB,DOMAIN_A_SUBB,12,,,,,
attribute,idSUPER,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R4,,,,idSUPER,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,SubB_Attribute,,,idSUPER,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,B_Text,,,SubB_Attribute,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Domain_A_Object_Super,DOMAIN_A_SUPER,10,,,,,
attribute,idSUPER,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Many_To_Many_Associative,mtma,9,,,,,
attribute,mtmls_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R3,,has_many,Many_To_Many_Left_Side,mtmls_id,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,mtmrs_id,preferred,,mtmls_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R3,,has_many,Many_To_Many_Right_Side,mtmrs_id,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,mtma_data,,,mtmrs_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Many_To_Many_Left_Side,mtmls,7,,,,,
attribute,mtmls_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Many_To_Many_Right_Side,mtmrs,8,,,,,
attribute,mtmrs_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Object_A,objA,2,,,,,
attribute,idA,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred indentifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,idA,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicate that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
operation,DomainA,Object_A,public,do_ptp_open,,,1,
codeblock,# create an instance to use for the test%0AnewA = create unique Object_A with ResultA = 0%0A%0Aan_int = 1%0Aa_real = 2.0%0Aa_text = "three"%0A%0A#[] = APTP1:Aptp_open_service[an_int%2Ca_real%2Ca_text] on newA,,,,,,,
codeblock,,,,,,,,
description, This function invokes an open contract peer to peer bridge implementation.%0A,,,,,,,
operation,,,,,,,,
operation,DomainA,Object_A,public,do_ptp_closed_blocking,,,2,
codeblock,# create an instance to use for the test%0AnewA = create unique Object_A with ResultA = 0%0A%0Aan_int = 1%0Aa_real = 2.0%0Aa_text = "three"%0A%0A#[a_status] = APTP2:Aptp_close_blocking_service[an_int%2Ca_real%2Ca_text] on newA%0A%0A# Not supported by SWA.%0A%0ATest = 8%0A%0A#if a_status = 10 then%0A#  [] = RPTR1:REPORT_RESULT["DomainA"%2C"objA"%2CTest%2C"do_ptp_closed_blocking"%2C"PASSED"%2Ca_status]%0A#else%0A#  [] = RPTR1:REPORT_RESULT["DomainA"%2C"objA"%2CTest%2C"do_ptp_closed_blocking"%2C"FAILED"%2Ca_status]%0A#endif%0A%0A#[] = RPTR1:REPORT_RESULT["DomainA"%2C"objA"%2CTest%2C"do_ptp_closed_blocking"%2C"Unsupported"%2C-1]%0A%0A[] = RPT4:Test_Unsupported[Test]%0A%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
state,,Object_A,Idle,,4,,,
codeblock,###### There is no ASL for this state ######,,,,,,,
codeblock,,,,,,,,
description, Idle state.%0A No action taken.%0A,,,,,,,
state,,,,,,,,
state,,Object_A,Sync_service_invocation_to_sync_service,,5,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# Synchronous service invocation to synchronous service%0A#------------------------------------------------------------------------#%0A%0A[] = RPT1:Start_Test[Test%2C "1241-0000-01-1110"%2C "Domain_A"%2C "objA"%2C "sync to sync invocation"]%0A%0A#Initialise the fault flag%0Ahas_failed = FALSE%0A%0A#------------------------------------------------------------------------#%0A# Invoke the DomainA synchronous service%0A#------------------------------------------------------------------------#%0A%0AinputA = 1%0AinputB = 2%0A%0A[outputA%2C outputB] = termA1:Sync1A[inputA%2C inputB%2C Test]%0A%0A#Check that the results are correct%0Aif (outputA != 3)|(outputB != 4) then%0A   has_failed = TRUE%0Aendif%0A%0A#------------------------------------------------------------------------#%0A# Test complete%0A#------------------------------------------------------------------------#%0A%0Aif has_failed = FALSE then%0A%0A   #Indicate that the test was successful and complete%0A   this.ResultA = 10%0A   [] = RPT2:Test_Passed["objA"%2C Test%2C this.ResultA]%0A%0A   generate objA2:Finished() to this%0A%0Aelse%0A   #Indicate that the test failed%0A   [] = RPT3:Test_Failed["objA"%2C Test%2C -1]%0A%0A   generate objA1:Fault() to this%0Aendif%0A%0A#------------------------------------------------------------------------#%0A,,,,,,,
codeblock,,,,,,,,
description, This state verifies a synchronous service in DomainA%0A can invoke a synchronous service in DomainB and%0A pass/receive parameters.%0A,,,,,,,
state,,,,,,,,
state,,Object_A,Sync_service_invocation_to_event,,6,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# Synchronous service invocation to an event%0A#------------------------------------------------------------------------#%0A%0A[] = RPT1:Start_Test[Test%2C "1241-0000-01-1110"%2C "Domain_A"%2C "objA"%2C "sync service to event"]%0A%0A#Initialise the fault flag%0Ahas_failed = FALSE%0A%0A#------------------------------------------------------------------------#%0A# Invoke the DomainA synchronous service%0A#------------------------------------------------------------------------#%0A%0AinputA = 3%0AinputB = 4%0A[outputA%2C outputB] = termA2:Sync2A[inputA%2C inputB%2C Test]%0A%0A#Check that the returned results are correct%0Aif (outputA != 5)|(outputB != 6) then%0A   has_failed = TRUE%0Aendif%0A%0A#------------------------------------------------------------------------#%0A#Test complete%0A#------------------------------------------------------------------------#%0A%0Aif has_failed = FALSE then%0A   #Indicate that the test was successful and complete%0A   this.ResultA = 20%0A%0A   [] = RPT2:Test_Passed["objA"%2C Test%2C this.ResultA]%0A%0A   generate objA2:Finished() to this%0Aelse%0A   #Indicate that the test failed%0A%0A   [] = RPT3:Test_Failed["objA"%2C Test%2C -1]%0A%0A   generate objA1:Fault() to this%0Aendif%0A%0A#------------------------------------------------------------------------#%0A,,,,,,,
codeblock,,,,,,,,
description, This state verifies that a synchronous service in DomainA%0A can invoke an event in DomainB.%0A,,,,,,,
state,,,,,,,,
state,,Object_A,Fail,,9,,,
codeblock,###### There is no ASL for this state ######,,,,,,,
codeblock,,,,,,,,
description, An instance current state is changed to fail%0A if the test failed.%0A,,,,,,,
state,,,,,,,,
event,Fault,,1,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
event,,,,,,,,
event,StartA,,3,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,StartB,,6,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,Fault,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Finished,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,StartA,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,StartB,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Fault,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Finished,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,StartA,Sync_service_invocation_to_sync_service,,,
transition,,,,,,,,
transition,Idle,,,StartB,Sync_service_invocation_to_event,,,
transition,,,,,,,,
transition,Sync_service_invocation_to_sync_service,,,Fault,Fail,,,
transition,,,,,,,,
transition,Sync_service_invocation_to_sync_service,,,Finished,Idle,,,
transition,,,,,,,,
transition,Sync_service_invocation_to_sync_service,,,StartA,Cannot_Happen,,,
transition,,,,,,,,
transition,Sync_service_invocation_to_sync_service,,,StartB,Cannot_Happen,,,
transition,,,,,,,,
transition,Sync_service_invocation_to_event,,,Fault,Fail,,,
transition,,,,,,,,
transition,Sync_service_invocation_to_event,,,Finished,Idle,,,
transition,,,,,,,,
transition,Sync_service_invocation_to_event,,,StartA,Cannot_Happen,,,
transition,,,,,,,,
transition,Sync_service_invocation_to_event,,,StartB,Cannot_Happen,,,
transition,,,,,,,,
transition,Fail,,,Fault,Cannot_Happen,,,
transition,,,,,,,,
transition,Fail,,,Finished,Cannot_Happen,,,
transition,,,,,,,,
transition,Fail,,,StartA,Cannot_Happen,,,
transition,,,,,,,,
transition,Fail,,,StartB,Cannot_Happen,,,
transition,,,,,,,,
transitiontable,,,,,,,,
description, Object_A is used to invoke the series of tests as specified in the domain mission statement.%0A %0A The tests are invoked through a series of events.%0A,,,,,,,
object,,,,,,,,
object,One_To_Many_Left_Side,otmls,5,,,,,
attribute,otmls_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,One_To_Many_Right_Side,otmrs,6,,,,,
attribute,otmrs_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,otmls_id,,,otmrs_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R2,,has_one,One_To_Many_Left_Side,otmls_id,,,
referential,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,One_To_One_Left_Side,otols,3,,,,,
attribute,otols_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,otors_id,,,otols_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R1,,has_one,One_To_One_Right_Side,otors_id,,,
referential,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,One_To_One_Right_Side,otors,4,,,,,
attribute,otors_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Report_Data,RD,13,,,,,
attribute,Report_Data_Unique_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Reported_Domain_Number,,,Report_Data_Unique_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Test_Data,TD,14,,,,,
attribute,This_Test_Number,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
pragma,version,,,,,,,
pragmaitem,12,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, For use in multiple domain builds%0A,,,,,,,
domain,,,,,,,,
