-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("211171ab-3b36-4869-b8c7-33f18ace682d",
	"00000000-0000-0000-0000-000000000000",
	"b52b4fed-0445-41e1-8e5b-971995c518cb",
	'scenarios',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("32477cdb-929a-4b88-8972-e2d079722d65",
	112,
	"211171ab-3b36-4869-b8c7-33f18ace682d",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'Function_Calls::Function_Calls::Function_Calls::scenarios');
INSERT INTO DIM_DIA
	VALUES ("32477cdb-929a-4b88-8972-e2d079722d65",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("40efd253-24b1-4b2e-82ca-1398760a9a25",
	"00000000-0000-0000-0000-000000000000",
	'Perform_Function_Calls_Tests',
	' Perform Function Calls Tests
',
	'my_test = find-one Test_Data

Test = my_test.The_Test_Number

[Host] = WAW1:What_Env[]

# Define all the objects in this domain, ten each for ObjectA and ObjectB

loop_counter = 1

loop

   newA = create Object_A with ReferenceA = loop_counter &\
                               ResultA = 0 &\
                               Current_State = ''Idle''

   newB = create Object_B with ReferenceB = loop_counter     &\
                               ResultA = 10           &\
                               Current_State = ''Idle''

   loop_counter = loop_counter + 1

   breakif loop_counter = 11

endloop

#------------------------------------------------------------------------#
# Loop again, but this time pass the active object IH into a synch service
# Don''t delete the object
#------------------------------------------------------------------------#

   loop_counter = 1

   loop

      a_tight_instance = create A_Tight_Object with Start_Value = Test and Increment_Value = 10 and Current_State = ''Idle''

      generate ATO1:Get_Going(FALSE) to a_tight_instance

      Test = Test + 1

      loop_counter = loop_counter + 1

      breakif loop_counter = 6

   endloop

#------------------------------------------------------------------------#
# Loop again, but this time generate to the active object IH 
# Cause the object to self delete
#------------------------------------------------------------------------#

   loop_counter = 1

   loop

      a_tight_instance = create A_Tight_Object with Start_Value = Test and Increment_Value = 10 and Current_State = ''Idle''

      generate ATO1:Get_Going(TRUE) to a_tight_instance

      Test = Test + 1

      loop_counter = loop_counter + 1

      breakif loop_counter = 6

   endloop


#------------------------------------------------------------------------#
# Tests one through four on ObjectA
#------------------------------------------------------------------------#

   loop_counter = 1

   loop

      an_instance_A = find-one Object_A where ReferenceA = loop_counter

      if an_instance_A != UNDEFINED then
         generate objA3:Start(Test, loop_counter) to an_instance_A
      else
         [] = RPT5:Test_Text[loop_counter,"Scenario object A Test not performed"]
      endif

      loop_counter = loop_counter + 1
      Test         = Test         + 1

      breakif loop_counter = 6

   endloop

#------------------------------------------------------------------------#
# Test five is a special case loop_counter is five, Test is also five.
#------------------------------------------------------------------------#

   an_instance_A = find-one Object_A where ReferenceA = loop_counter

   an_instance_B = find-one Object_B where ReferenceB = loop_counter


#if an_instance_A != UNDEFINED & \
#   an_instance_B != UNDEFINED then

#   generate objA3:Start (Test, loop_counter) to an_instance_A

#   Test = Test + 1

#   generate objB4:Verify(Test, loop_counter) to an_instance_B

#else

#   [] = RPT5:Test_Text[loop_counter,"Scenario object A and B Test not performed"]

#endif

#------------------------------------------------------------------------#
# Tests six through ten on objectB 
#------------------------------------------------------------------------#

   loop_counter = 1

   loop

      # Grab the 6..10 objects
      target = loop_counter + 5

      an_instance_B = find-one Object_B where ReferenceB = target

      if an_instance_B != UNDEFINED then
         generate objB4:Verify(Test, loop_counter) to an_instance_B
      else
         [] = RPT5:Test_Text[loop_counter,"Scenario object B Test not performed"]
      endif

      loop_counter = loop_counter + 1
      Test         = Test         + 1

      # Break out after five generates.
      breakif loop_counter = 6

   endloop


#------------------------------------------------------------------------#
# Loop again, but this time pass the object IH into a synch service
#------------------------------------------------------------------------#

   loop_counter = 1

   loop

      Tight_Return_Value = 0

      a_tight_instance = create A_Tight_Object with Start_Value = Test and Increment_Value = 10 and Current_State = ''Idle''

      [Tight_Return_Value] = Function_Calls4::Perform_Service_In_Tight_Loop [a_tight_instance, Test, "Tightly controlled IH" ]

      Expected_Result = Test + 10

      if Tight_Return_Value != Expected_Result then
         [] = RPT3:Test_Failed["Tightly controlled IH", Test, Tight_Return_Value]
      else
         [] = RPT2:Test_Passed["Tightly controlled IH", Test, Tight_Return_Value]
      endif

      Test         = Test         + 1
      loop_counter = loop_counter + 1

      breakif loop_counter = 6

   endloop


#------------------------------------------------------------------------#
# Receive an enumeration value into a service call by locally defined 
# variable
#------------------------------------------------------------------------#

   Local_Colour of Colour_Type = ''Red''

   [] = Function_Calls6::Receive_Enumeration[Test, Local_Colour, "Variable defined enumeral"]

#------------------------------------------------------------------------#
# Do the same test again, but this time, use hard coded value for enumeral.
#------------------------------------------------------------------------#

   Test = Test + 1

   [] = Function_Calls6::Receive_Enumeration[Test, ''Red'', "Hard coded enumeral"]

#------------------------------------------------------------------------#
# Check that a domain syncronous service can call itself
#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1241-0000-01-0808", "Function Calls", "Domain Sync Services", "Function Calls Iteslf"]
   [] = RPT8:Specify_Requid[Test, "1241-0000-01-0809"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1011"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1031"]

   [] = RPT5:Test_Text[Test, "Max 700"]

   Returned_Val = 0

   [Returned_Val] = Function_Calls8::Call_To_Self[0]

   if Host = "ISIM" then

      if Returned_Val = 5 then
         [] = RPT2:Test_Passed["Function Calls Iteslf", Test, Returned_Val]
      else
         [] = RPT3:Test_Failed["Function Calls Iteslf", Test, Returned_Val]
      endif

   else

      if Returned_Val = 700 then
         [] = RPT2:Test_Passed["Function Calls Iteslf", Test, Returned_Val]
      else
         [] = RPT3:Test_Failed["Function Calls Iteslf", Test, Returned_Val]
      endif

   endif

#------------------------------------------------------------------------#
# Check that a object syncronous service can call itself
#------------------------------------------------------------------------#

   Test = Test + 1

   NewInstA = create Object_A with ReferenceA    = 0 &\
                                  ResultA       = 0 &\
                                  Current_State = ''Idle''

   [] = RPT1:Start_Test[Test, "1241-0000-01-0808", "Function Calls", "Domain Sync Services", "Object sync service calls itself"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1011"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1031"]

   Returned_Val = 0

   [Returned_Val] = objA5:Call_To_Self[0]

   if Returned_Val = 2 then
      [] = RPT2:Test_Passed["Function Calls Iteslf", Test, Returned_Val]
   else
      [] = RPT3:Test_Failed["Function Calls Iteslf", Test, Returned_Val]
   endif

#------------------------------------------------------------------------#
# Call domain sync service from a bridge
#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1241-0000-01-0810", "Function Calls", "Domain Sync Services", "Call from bridge"]

   InputVal1 = 1
   InputVal2 = 2
   InputVal3 = 3

   [] = NTB2:Call_Domain_Sync_Service[Test, InputVal1, InputVal2, InputVal3]

#------------------------------------------------------------------------#
# Call object sync service from a bridge
#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1241-0000-01-0810", "Function Calls", "Object Sync Services", "Call from bridge"]

   The_Text = "From Bridge"
   The_Int  = 100
   The_Real = 99.9

   [] = NTB3:Call_Object_Sync_Service[Test, The_Text, The_Int, The_Real]

#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1241-0000-01-1215", "Function Calls", "Object Sync Services", "Check IH Parameters"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0138"]

   InstC = create Object_C with idC   = 100  &\
                                IntC  = 200  &\
                                RealC = 99.9

   [ReturnInst] = Function_Calls12::Test_IH_Params[InstC]

   if ReturnInst.idC = 1000 then

      if ReturnInst.IntC = 2000 then

         if ReturnInst.RealC = 999.9 then
            [] = RPT2:Test_Passed["Check IH Parameters", Test, 0]
         else
            [] = RPT3:Test_Failed["Check IH Parameters", Test, -10]      
         endif

      else
        [] = RPT3:Test_Failed["Check IH Parameters", Test, -2] 
      endif

   else
      [] = RPT3:Test_Failed["Check IH Parameters", Test, -30] 
   endif

#------------------------------------------------------------------------#

   Test = Test + 1

   [] = RPT1:Start_Test[Test, "1241-0000-01-0806", "Function Calls", "Domain Sync Services", "Check memory usage"]
   [] = RPT5:Test_Text[Test, "1000000 functions called"]

   [The_Result] = Function_Calls10::Call_A[0]

   if Host = "ISIM" then
      Total = 10
   else
      Total = 700
   endif

   if The_Result >= Total then
      [] = RPT2:Test_Passed["Mem usage", Test, The_Result]
   else
      [] = RPT3:Test_Failed["Mem usage", Test, The_Result]      
   endif

Test = Test + 1

my_test.The_Test_Number = Test
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	1);
INSERT INTO PE_PE
	VALUES ("40efd253-24b1-4b2e-82ca-1398760a9a25",
	1,
	"211171ab-3b36-4869-b8c7-33f18ace682d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d42476a7-749b-447a-b428-96b58f83a759",
	"00000000-0000-0000-0000-000000000000",
	'Start_Function_Calls_Tests',
	' Start Function Calls Tests
',
	'my_test = create Test_Data with The_Test_Number = 1

[] = Function_Calls2::Create_Report_Data[]
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	2);
INSERT INTO PE_PE
	VALUES ("d42476a7-749b-447a-b428-96b58f83a759",
	1,
	"211171ab-3b36-4869-b8c7-33f18ace682d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("095ac4aa-8796-41c2-821b-a04e8704246a",
	"00000000-0000-0000-0000-000000000000",
	'Finish_Function_Calls_Tests',
	' Finish Function Calls Tests
',
	'my_test = find-one Test_Data

if my_test != UNDEFINED then

   delete my_test

endif

# [] = Function_Calls3::Delete_Report_Data[]
',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	3);
INSERT INTO PE_PE
	VALUES ("095ac4aa-8796-41c2-821b-a04e8704246a",
	1,
	"211171ab-3b36-4869-b8c7-33f18ace682d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e9ac39a0-6724-4347-b4c5-57ec2ea40c05",
	"00000000-0000-0000-0000-000000000000",
	'Multiple_IH_Parameters_Scenario',
	' Multiple_IH_Parameters_Scenario
',
	'#------------------------------------------------------------------------#
# Test 1
#------------------------------------------------------------------------#

   {Set_Of_ObjectA} = find-all Object_A

   {A_Structure} is Structure_For_IH

   for individual_IH in {Set_Of_ObjectA} do
      append [individual_IH] to {A_Structure}
   endfor

   [] = Function_Calls5::Test_Set_Of_IH[{A_Structure}, FALSE, "Testing multi IH in service param"]

# End Test 1

#------------------------------------------------------------------------#
# Test 2
#------------------------------------------------------------------------#

   newA = create Object_A with ReferenceA    = 999   &\
                               ResultA       = 0     &\
                               Current_State = ''Idle''

   {Another_Structure} is Structure_For_IH

   append [newA] to {Another_Structure}

   [] = Function_Calls5::Test_Set_Of_IH[{Another_Structure}, TRUE, "Testing single IH in service param"]

# End Test 2

#------------------------------------------------------------------------#

   my_test = find-one Test_Data
   Test    = my_test.The_Test_Number

   # Pass up to eight instance handles into an object based synchronous service
   One   = create Object_One   with Attribute_One   = 1
   Two   = create Object_Two   with Attribute_Two   = 2
   Three = create Object_Three with Attribute_Three = 3
   Four  = create Object_Four  with Attribute_Four  = 4
   Five  = create Object_Five  with Attribute_Five  = 5
   Six   = create Object_Six   with Attribute_Six   = 6
   Seven = create Object_Seven with Attribute_Seven = 7
   Eight = create Object_Eight with Attribute_Eight = 8
   Nine  = create Object_Nine  with Attribute_Nine  = 9
   Ten   = create Object_Ten   with Attribute_Ten   = 10

   One_A = create Object_One with Attribute_One = 1
   One_B = create Object_One with Attribute_One = 2
   One_C = create Object_One with Attribute_One = 3
   One_D = create Object_One with Attribute_One = 4
   One_E = create Object_One with Attribute_One = 5
   One_F = create Object_One with Attribute_One = 6
   One_G = create Object_One with Attribute_One = 7
   One_H = create Object_One with Attribute_One = 8

   Pass_Them_In = create Big_Object with Big_Attribute = Test

#------------------------------------------------------------------------#
# Test 3
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0805", "Functions_Calls", "Multiple IH", "Pass in SIX same IH parameters"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1011"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1031"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0138"]

   [Result, Result_Value] = BO8:Have_SIX_Same_IH_Parameters [One_A, One_B, One_C, One_D, One_E, One_F]

   if Result = TRUE then
      [] = RPT2:Test_Passed["Pass in lots of IH parameters", Test, Result_Value]
   else
      [] = RPT3:Test_Failed["Pass in lots of IH parameters", Test, Result_Value]
   endif

   Test = Test + 1

# End Test 3

#------------------------------------------------------------------------#
# Test 4
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1101-0000-01-0138", "Functions_Calls", "Multiple IH", "Pass in SEVEN same IH parameters"]

   [Result, Result_Value] = BO11:Have_SEVEN_Same_IH_Parameters [One_A, One_B, One_C, One_D, One_E, One_F, One_G]

   if Result = TRUE then
      [] = RPT2:Test_Passed["Pass in lots of IH parameters", Test, Result_Value]
   else
      [] = RPT3:Test_Failed["Pass in lots of IH parameters", Test, Result_Value]
   endif

   Test = Test + 1

# End Test 4

#------------------------------------------------------------------------#
# Test 5 
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1101-0000-01-0138", "Functions_Calls", "Multiple IH", "Pass in EIGHT same IH parameters"]

   [Result, Result_Value] = BO12:Have_EIGHT_Same_IH_Parameters [One_A, One_B, One_C, One_D, One_E, One_F, One_G, One_H]

   if Result = TRUE then
      [] = RPT2:Test_Passed["Pass in lots of IH parameters", Test, Result_Value]
   else
      [] = RPT3:Test_Failed["Pass in lots of IH parameters", Test, Result_Value]
   endif
 
   Test = Test + 1

# End Test 5

#------------------------------------------------------------------------#
# Test 6 - Different Parameters...
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0805", "Functions_Calls", "Multiple IH", "Pass in two IH parameters"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1011"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1031"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0138"]

   [Result, Result_Value] = BO1:Have_Two_IH_Parameters[One, Two] 

   if Result = TRUE then
      [] = RPT2:Test_Passed["Pass in lots of IH parameters", Test, Result_Value]
   else
      [] = RPT3:Test_Failed["Pass in lots of IH parameters", Test, Result_Value]
   endif

   Test = Test + 1

# End Test 6

#------------------------------------------------------------------------#
# Test 7
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test,"1241-0000-01-0805", "Functions_Calls", "Multiple IH", "Pass in three IH parameters"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1011"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1031"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0138"]

   [Result, Result_Value] = BO2:Have_Three_IH_Parameters[One, Two, Three] 

   if Result = TRUE then
      [] = RPT2:Test_Passed["Pass in lots of IH parameters", Test, Result_Value]
   else
      [] = RPT3:Test_Failed["Pass in lots of IH parameters", Test, Result_Value]
   endif

   Test = Test + 1

# End Test 7

#------------------------------------------------------------------------#
# Test 8
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test,"1241-0000-01-0805", "Functions_Calls", "Multiple IH", "Pass in four IH parameters"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1011"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1031"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0138"]

   [Result, Result_Value] = BO3:Have_Four_IH_Parameters[One, Two, Three, Four] 

   if Result = TRUE then
      [] = RPT2:Test_Passed["Pass in lots of IH parameters", Test, Result_Value]
   else
      [] = RPT3:Test_Failed["Pass in lots of IH parameters", Test, Result_Value]
   endif

   Test = Test + 1

# End Test 8

#------------------------------------------------------------------------#
# Test 9
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test,"1241-0000-01-0805", "Functions_Calls", "Multiple IH", "Pass in five IH parameters"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1011"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1031"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0138"]

   [Result, Result_Value] = BO4:Have_Five_IH_Parameters[One, Two, Three, Four, Five] 

   if Result = TRUE then
      [] = RPT2:Test_Passed["Pass in lots of IH parameters", Test, Result_Value]
   else
      [] = RPT3:Test_Failed["Pass in lots of IH parameters", Test, Result_Value]
   endif

   Test = Test + 1

# End Test 9

#------------------------------------------------------------------------#
# Test 10
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test,"1241-0000-01-0805", "Functions_Calls", "Multiple IH", "Pass in six IH parameters"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1011"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1031"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0138"]

   [Result, Result_Value] = BO5:Have_Six_IH_Parameters[One, Two, Three, Four, Five, Six] 

   if Result = TRUE then
      [] = RPT2:Test_Passed["Pass in lots of IH parameters", Test, Result_Value]
   else
      [] = RPT3:Test_Failed["Pass in lots of IH parameters", Test, Result_Value]
   endif

   Test = Test + 1

# End Test 10

#------------------------------------------------------------------------#
# Test 11
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0805", "Functions_Calls", "Multiple IH", "Pass in seven IH parameters"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1011"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1031"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0138"]

   [Result, Result_Value] = BO6:Have_Seven_IH_Parameters[One, Two, Three, Four, Five, Six, Seven] 
   
   if Result = TRUE then
      [] = RPT2:Test_Passed["Pass in lots of IH parameters", Test, Result_Value]
   else
      [] = RPT3:Test_Failed["Pass in lots of IH parameters", Test, Result_Value]
   endif

   Test = Test + 1

# End Test 11

#------------------------------------------------------------------------#
# Test 12
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0805", "Functions_Calls", "Multiple IH", "Pass in eight IH parameters"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1011"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1031"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0138"]

   [Result, Result_Value] = BO7:Have_Eight_IH_Parameters[One, Two, Three, Four, Five, Six, Seven, Eight] 

   if Result = TRUE then
      [] = RPT2:Test_Passed["Pass in lots of IH parameters", Test, Result_Value]
   else
      [] = RPT3:Test_Failed["Pass in lots of IH parameters", Test, Result_Value]
   endif

   Test = Test + 1

# End Test 12

#------------------------------------------------------------------------#
# Test 13
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0805", "Functions_Calls", "Multiple IH", "Pass in 10 IH parameters"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1011"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1031"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0138"]

   [Result, Result_Value] = BO9:Have_Ten_IH_Parameters[One, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten] 

   if Result = TRUE then
      [] = RPT2:Test_Passed["Pass in lots of IH parameters", Test, Result_Value]
   else
      [] = RPT3:Test_Failed["Pass in lots of IH parameters", Test, Result_Value]
   endif

   Test = Test + 1

# End Test 13

#------------------------------------------------------------------------#
# Test 14
#------------------------------------------------------------------------#

   [] = RPT1:Start_Test[Test, "1241-0000-01-0805", "Functions_Calls", "Multiple IH", "Pass in 20 IH parameters"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1011"]
   [] = RPT8:Specify_Requid[Test, "1103-0000-01-1031"]
   [] = RPT8:Specify_Requid[Test, "1101-0000-01-0138"]

   [Result, Result_Value] = BO10:Have_Twenty_IH_Parameters[One, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, \
                                                           One, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten] 

   if Result = TRUE then
      [] = RPT2:Test_Passed["Pass in lots of IH parameters", Test, Result_Value]
   else
      [] = RPT3:Test_Failed["Pass in lots of IH parameters", Test, Result_Value]
   endif

   Test = Test + 1

# End Test 14

#------------------------------------------------------------------------#

   my_test.The_Test_Number = Test

',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	4);
INSERT INTO PE_PE
	VALUES ("e9ac39a0-6724-4347-b4c5-57ec2ea40c05",
	1,
	"211171ab-3b36-4869-b8c7-33f18ace682d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("af735241-9054-4762-bf9c-2356e9c87fc4",
	"00000000-0000-0000-0000-000000000000",
	'Test',
	' Test
',
	'my_test = find-one Test_Data

Test = my_test.The_Test_Number

   [] = RPT1:Start_Test[Test, "1241-0000-01-0806", "Function Calls", "Domain Sync Services", "Check memory usage"]

   [The_Result] = Function_Calls10::Call_A[0]

   if The_Result = 10 then
      [] = RPT2:Test_Passed["Mem usage", Test, The_Result]
   else
      [] = RPT3:Test_Failed["Mem usage", Test, The_Result]      
   endif

Test = Test + 1

my_test.The_Test_Number = Test',
	"ba5eda7a-def5-0000-0000-000000000000",
	3,
	'',
	2,
	5);
INSERT INTO PE_PE
	VALUES ("af735241-9054-4762-bf9c-2356e9c87fc4",
	1,
	"211171ab-3b36-4869-b8c7-33f18ace682d",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("211171ab-3b36-4869-b8c7-33f18ace682d",
	1,
	"00000000-0000-0000-0000-000000000000",
	"aa26aed6-5d11-43d7-b8f9-84084b942dee",
	7);
INSERT INTO C_C_PROXY
	VALUES ("aa26aed6-5d11-43d7-b8f9-84084b942dee",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	'Function_Calls',
	' Tests Domain, object and instance based functions.
',
	0,
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Function_Calls',
	'../Function_Calls.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("b52b4fed-0445-41e1-8e5b-971995c518cb",
	'Function_Calls',
	1,
	'../../../Function_Calls.xtuml');
