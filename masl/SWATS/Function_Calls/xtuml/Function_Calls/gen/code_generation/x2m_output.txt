domain,Function_Calls,Function_Calls,,,,,,
object,A_Tight_Object,,,,,,,
object,,,,,,,,
object,Big_Object,,,,,,,
object,,,,,,,,
object,Object_A,,,,,,,
object,,,,,,,,
object,Object_B,,,,,,,
object,,,,,,,,
object,Object_C,,,,,,,
object,,,,,,,,
object,Object_Eight,,,,,,,
object,,,,,,,,
object,Object_Five,,,,,,,
object,,,,,,,,
object,Object_Four,,,,,,,
object,,,,,,,,
object,Object_Nine,,,,,,,
object,,,,,,,,
object,Object_One,,,,,,,
object,,,,,,,,
object,Object_Seven,,,,,,,
object,,,,,,,,
object,Object_Six,,,,,,,
object,,,,,,,,
object,Object_Ten,,,,,,,
object,,,,,,,,
object,Object_Three,,,,,,,
object,,,,,,,,
object,Object_Two,,,,,,,
object,,,,,,,,
object,Report_Data,,,,,,,
object,,,,,,,,
object,Test_Data,,,,,,,
object,,,,,,,,
type,ross_type,private,integer,,,,,
type,,,,,,,,
type,Return_Enum_Type,public,,,,,,
enumeration,Return_Enum_Type,,,,,,,
enumerator,Slys_Mum,,,,,,,
enumerator,,,,,,,,
enumerator,Sandys_Mum,,,,,,,
enumerator,,,,,,,,
enumerator,Wes_Mum,,,,,,,
enumerator,,,,,,,,
enumerator,Nobodys_Mum,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
type,,,,,,,,
type,New_Enum_Type,public,,,,,,
enumeration,New_Enum_Type,,,,,,,
enumerator,Sly,,,,,,,
enumerator,,,,,,,,
enumerator,Sandy,,,,,,,
enumerator,,,,,,,,
enumerator,Wes,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
type,,,,,,,,
type,Colour_Type,public,,,,,,
enumeration,Colour_Type,,,,,,,
enumerator,Green,,,,,,,
enumerator,,,,,,,,
enumerator,Blue,,,,,,,
enumerator,,,,,,,,
enumerator,Red,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
type,,,,,,,,
type,Structure_For_IH,public,,,,,,
structure,Structure_For_IH,,,,,,,
member,An_Instance_Handle,,,,,,,
typeref,instance of Object_A,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
structure,,,,,,,,
description, This is unsupported at version 4.0.0.%0A The type should be typed IH for Object_A%0A,,,,,,,
type,,,,,,,,
routine,Function_Calls,,private,Perform_Function_Calls_Tests,1,,,
codeblock,my_test = find-one Test_Data%0A%0ATest = my_test.The_Test_Number%0A%0A[Host] = WAW1:What_Env[]%0A%0A# Define all the objects in this domain%2C ten each for ObjectA and ObjectB%0A%0Aloop_counter = 1%0A%0Aloop%0A%0A   newA = create Object_A with ReferenceA = loop_counter &\%0A                               ResultA = 0 &\%0A                               Current_State = 'Idle'%0A%0A   newB = create Object_B with ReferenceB = loop_counter     &\%0A                               ResultA = 10           &\%0A                               Current_State = 'Idle'%0A%0A   loop_counter = loop_counter + 1%0A%0A   breakif loop_counter = 11%0A%0Aendloop%0A%0A#------------------------------------------------------------------------#%0A# Loop again%2C but this time pass the active object IH into a synch service%0A# Don't delete the object%0A#------------------------------------------------------------------------#%0A%0A   loop_counter = 1%0A%0A   loop%0A%0A      a_tight_instance = create A_Tight_Object with Start_Value = Test and Increment_Value = 10 and Current_State = 'Idle'%0A%0A      generate ATO1:Get_Going(FALSE) to a_tight_instance%0A%0A      Test = Test + 1%0A%0A      loop_counter = loop_counter + 1%0A%0A      breakif loop_counter = 6%0A%0A   endloop%0A%0A#------------------------------------------------------------------------#%0A# Loop again%2C but this time generate to the active object IH %0A# Cause the object to self delete%0A#------------------------------------------------------------------------#%0A%0A   loop_counter = 1%0A%0A   loop%0A%0A      a_tight_instance = create A_Tight_Object with Start_Value = Test and Increment_Value = 10 and Current_State = 'Idle'%0A%0A      generate ATO1:Get_Going(TRUE) to a_tight_instance%0A%0A      Test = Test + 1%0A%0A      loop_counter = loop_counter + 1%0A%0A      breakif loop_counter = 6%0A%0A   endloop%0A%0A%0A#------------------------------------------------------------------------#%0A# Tests one through four on ObjectA%0A#------------------------------------------------------------------------#%0A%0A   loop_counter = 1%0A%0A   loop%0A%0A      an_instance_A = find-one Object_A where ReferenceA = loop_counter%0A%0A      if an_instance_A != UNDEFINED then%0A         generate objA3:Start(Test%2C loop_counter) to an_instance_A%0A      else%0A         [] = RPT5:Test_Text[loop_counter%2C"Scenario object A Test not performed"]%0A      endif%0A%0A      loop_counter = loop_counter + 1%0A      Test         = Test         + 1%0A%0A      breakif loop_counter = 6%0A%0A   endloop%0A%0A#------------------------------------------------------------------------#%0A# Test five is a special case loop_counter is five%2C Test is also five.%0A#------------------------------------------------------------------------#%0A%0A   an_instance_A = find-one Object_A where ReferenceA = loop_counter%0A%0A   an_instance_B = find-one Object_B where ReferenceB = loop_counter%0A%0A%0A#if an_instance_A != UNDEFINED & \%0A#   an_instance_B != UNDEFINED then%0A%0A#   generate objA3:Start (Test%2C loop_counter) to an_instance_A%0A%0A#   Test = Test + 1%0A%0A#   generate objB4:Verify(Test%2C loop_counter) to an_instance_B%0A%0A#else%0A%0A#   [] = RPT5:Test_Text[loop_counter%2C"Scenario object A and B Test not performed"]%0A%0A#endif%0A%0A#------------------------------------------------------------------------#%0A# Tests six through ten on objectB %0A#------------------------------------------------------------------------#%0A%0A   loop_counter = 1%0A%0A   loop%0A%0A      # Grab the 6..10 objects%0A      target = loop_counter + 5%0A%0A      an_instance_B = find-one Object_B where ReferenceB = target%0A%0A      if an_instance_B != UNDEFINED then%0A         generate objB4:Verify(Test%2C loop_counter) to an_instance_B%0A      else%0A         [] = RPT5:Test_Text[loop_counter%2C"Scenario object B Test not performed"]%0A      endif%0A%0A      loop_counter = loop_counter + 1%0A      Test         = Test         + 1%0A%0A      # Break out after five generates.%0A      breakif loop_counter = 6%0A%0A   endloop%0A%0A%0A#------------------------------------------------------------------------#%0A# Loop again%2C but this time pass the object IH into a synch service%0A#------------------------------------------------------------------------#%0A%0A   loop_counter = 1%0A%0A   loop%0A%0A      Tight_Return_Value = 0%0A%0A      a_tight_instance = create A_Tight_Object with Start_Value = Test and Increment_Value = 10 and Current_State = 'Idle'%0A%0A      [Tight_Return_Value] = Function_Calls4::Perform_Service_In_Tight_Loop [a_tight_instance%2C Test%2C "Tightly controlled IH" ]%0A%0A      Expected_Result = Test + 10%0A%0A      if Tight_Return_Value != Expected_Result then%0A         [] = RPT3:Test_Failed["Tightly controlled IH"%2C Test%2C Tight_Return_Value]%0A      else%0A         [] = RPT2:Test_Passed["Tightly controlled IH"%2C Test%2C Tight_Return_Value]%0A      endif%0A%0A      Test         = Test         + 1%0A      loop_counter = loop_counter + 1%0A%0A      breakif loop_counter = 6%0A%0A   endloop%0A%0A%0A#------------------------------------------------------------------------#%0A# Receive an enumeration value into a service call by locally defined %0A# variable%0A#------------------------------------------------------------------------#%0A%0A   Local_Colour of Colour_Type = 'Red'%0A%0A   [] = Function_Calls6::Receive_Enumeration[Test%2C Local_Colour%2C "Variable defined enumeral"]%0A%0A#------------------------------------------------------------------------#%0A# Do the same test again%2C but this time%2C use hard coded value for enumeral.%0A#------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A%0A   [] = Function_Calls6::Receive_Enumeration[Test%2C 'Red'%2C "Hard coded enumeral"]%0A%0A#------------------------------------------------------------------------#%0A# Check that a domain syncronous service can call itself%0A#------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0808"%2C "Function Calls"%2C "Domain Sync Services"%2C "Function Calls Iteslf"]%0A   [] = RPT8:Specify_Requid[Test%2C "1241-0000-01-0809"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1011"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1031"]%0A%0A   [] = RPT5:Test_Text[Test%2C "Max 700"]%0A%0A   Returned_Val = 0%0A%0A   [Returned_Val] = Function_Calls8::Call_To_Self[0]%0A%0A   if Host = "ISIM" then%0A%0A      if Returned_Val = 5 then%0A         [] = RPT2:Test_Passed["Function Calls Iteslf"%2C Test%2C Returned_Val]%0A      else%0A         [] = RPT3:Test_Failed["Function Calls Iteslf"%2C Test%2C Returned_Val]%0A      endif%0A%0A   else%0A%0A      if Returned_Val = 700 then%0A         [] = RPT2:Test_Passed["Function Calls Iteslf"%2C Test%2C Returned_Val]%0A      else%0A         [] = RPT3:Test_Failed["Function Calls Iteslf"%2C Test%2C Returned_Val]%0A      endif%0A%0A   endif%0A%0A#------------------------------------------------------------------------#%0A# Check that a object syncronous service can call itself%0A#------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A%0A   NewInstA = create Object_A with ReferenceA    = 0 &\%0A                                  ResultA       = 0 &\%0A                                  Current_State = 'Idle'%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0808"%2C "Function Calls"%2C "Domain Sync Services"%2C "Object sync service calls itself"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1011"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1031"]%0A%0A   Returned_Val = 0%0A%0A   [Returned_Val] = objA5:Call_To_Self[0]%0A%0A   if Returned_Val = 2 then%0A      [] = RPT2:Test_Passed["Function Calls Iteslf"%2C Test%2C Returned_Val]%0A   else%0A      [] = RPT3:Test_Failed["Function Calls Iteslf"%2C Test%2C Returned_Val]%0A   endif%0A%0A#------------------------------------------------------------------------#%0A# Call domain sync service from a bridge%0A#------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0810"%2C "Function Calls"%2C "Domain Sync Services"%2C "Call from bridge"]%0A%0A   InputVal1 = 1%0A   InputVal2 = 2%0A   InputVal3 = 3%0A%0A   [] = NTB2:Call_Domain_Sync_Service[Test%2C InputVal1%2C InputVal2%2C InputVal3]%0A%0A#------------------------------------------------------------------------#%0A# Call object sync service from a bridge%0A#------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0810"%2C "Function Calls"%2C "Object Sync Services"%2C "Call from bridge"]%0A%0A   The_Text = "From Bridge"%0A   The_Int  = 100%0A   The_Real = 99.9%0A%0A   [] = NTB3:Call_Object_Sync_Service[Test%2C The_Text%2C The_Int%2C The_Real]%0A%0A#------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-1215"%2C "Function Calls"%2C "Object Sync Services"%2C "Check IH Parameters"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0138"]%0A%0A   InstC = create Object_C with idC   = 100  &\%0A                                IntC  = 200  &\%0A                                RealC = 99.9%0A%0A   [ReturnInst] = Function_Calls12::Test_IH_Params[InstC]%0A%0A   if ReturnInst.idC = 1000 then%0A%0A      if ReturnInst.IntC = 2000 then%0A%0A         if ReturnInst.RealC = 999.9 then%0A            [] = RPT2:Test_Passed["Check IH Parameters"%2C Test%2C 0]%0A         else%0A            [] = RPT3:Test_Failed["Check IH Parameters"%2C Test%2C -10]      %0A         endif%0A%0A      else%0A        [] = RPT3:Test_Failed["Check IH Parameters"%2C Test%2C -2] %0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Check IH Parameters"%2C Test%2C -30] %0A   endif%0A%0A#------------------------------------------------------------------------#%0A%0A   Test = Test + 1%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0806"%2C "Function Calls"%2C "Domain Sync Services"%2C "Check memory usage"]%0A   [] = RPT5:Test_Text[Test%2C "1000000 functions called"]%0A%0A   [The_Result] = Function_Calls10::Call_A[0]%0A%0A   if Host = "ISIM" then%0A      Total = 10%0A   else%0A      Total = 700%0A   endif%0A%0A   if The_Result >= Total then%0A      [] = RPT2:Test_Passed["Mem usage"%2C Test%2C The_Result]%0A   else%0A      [] = RPT3:Test_Failed["Mem usage"%2C Test%2C The_Result]      %0A   endif%0A%0ATest = Test + 1%0A%0Amy_test.The_Test_Number = Test%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,1,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Perform Function Calls Tests%0A,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,private,Start_Function_Calls_Tests,2,,,
codeblock,my_test = create Test_Data with The_Test_Number = 1%0A%0A[] = Function_Calls2::Create_Report_Data[]%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,2,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Start Function Calls Tests%0A,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,private,Finish_Function_Calls_Tests,3,,,
codeblock,my_test = find-one Test_Data%0A%0Aif my_test != UNDEFINED then%0A%0A   delete my_test%0A%0Aendif%0A%0A# [] = Function_Calls3::Delete_Report_Data[]%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,3,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Finish Function Calls Tests%0A,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,private,Multiple_IH_Parameters_Scenario,4,,,
codeblock,#------------------------------------------------------------------------#%0A# Test 1%0A#------------------------------------------------------------------------#%0A%0A   {Set_Of_ObjectA} = find-all Object_A%0A%0A   {A_Structure} is Structure_For_IH%0A%0A   for individual_IH in {Set_Of_ObjectA} do%0A      append [individual_IH] to {A_Structure}%0A   endfor%0A%0A   [] = Function_Calls5::Test_Set_Of_IH[{A_Structure}%2C FALSE%2C "Testing multi IH in service param"]%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A# Test 2%0A#------------------------------------------------------------------------#%0A%0A   newA = create Object_A with ReferenceA    = 999   &\%0A                               ResultA       = 0     &\%0A                               Current_State = 'Idle'%0A%0A   {Another_Structure} is Structure_For_IH%0A%0A   append [newA] to {Another_Structure}%0A%0A   [] = Function_Calls5::Test_Set_Of_IH[{Another_Structure}%2C TRUE%2C "Testing single IH in service param"]%0A%0A# End Test 2%0A%0A#------------------------------------------------------------------------#%0A%0A   my_test = find-one Test_Data%0A   Test    = my_test.The_Test_Number%0A%0A   # Pass up to eight instance handles into an object based synchronous service%0A   One   = create Object_One   with Attribute_One   = 1%0A   Two   = create Object_Two   with Attribute_Two   = 2%0A   Three = create Object_Three with Attribute_Three = 3%0A   Four  = create Object_Four  with Attribute_Four  = 4%0A   Five  = create Object_Five  with Attribute_Five  = 5%0A   Six   = create Object_Six   with Attribute_Six   = 6%0A   Seven = create Object_Seven with Attribute_Seven = 7%0A   Eight = create Object_Eight with Attribute_Eight = 8%0A   Nine  = create Object_Nine  with Attribute_Nine  = 9%0A   Ten   = create Object_Ten   with Attribute_Ten   = 10%0A%0A   One_A = create Object_One with Attribute_One = 1%0A   One_B = create Object_One with Attribute_One = 2%0A   One_C = create Object_One with Attribute_One = 3%0A   One_D = create Object_One with Attribute_One = 4%0A   One_E = create Object_One with Attribute_One = 5%0A   One_F = create Object_One with Attribute_One = 6%0A   One_G = create Object_One with Attribute_One = 7%0A   One_H = create Object_One with Attribute_One = 8%0A%0A   Pass_Them_In = create Big_Object with Big_Attribute = Test%0A%0A#------------------------------------------------------------------------#%0A# Test 3%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0805"%2C "Functions_Calls"%2C "Multiple IH"%2C "Pass in SIX same IH parameters"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1011"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1031"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0138"]%0A%0A   [Result%2C Result_Value] = BO8:Have_SIX_Same_IH_Parameters [One_A%2C One_B%2C One_C%2C One_D%2C One_E%2C One_F]%0A%0A   if Result = TRUE then%0A      [] = RPT2:Test_Passed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   else%0A      [] = RPT3:Test_Failed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#------------------------------------------------------------------------#%0A# Test 4%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1101-0000-01-0138"%2C "Functions_Calls"%2C "Multiple IH"%2C "Pass in SEVEN same IH parameters"]%0A%0A   [Result%2C Result_Value] = BO11:Have_SEVEN_Same_IH_Parameters [One_A%2C One_B%2C One_C%2C One_D%2C One_E%2C One_F%2C One_G]%0A%0A   if Result = TRUE then%0A      [] = RPT2:Test_Passed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   else%0A      [] = RPT3:Test_Failed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A#------------------------------------------------------------------------#%0A# Test 5 %0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1101-0000-01-0138"%2C "Functions_Calls"%2C "Multiple IH"%2C "Pass in EIGHT same IH parameters"]%0A%0A   [Result%2C Result_Value] = BO12:Have_EIGHT_Same_IH_Parameters [One_A%2C One_B%2C One_C%2C One_D%2C One_E%2C One_F%2C One_G%2C One_H]%0A%0A   if Result = TRUE then%0A      [] = RPT2:Test_Passed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   else%0A      [] = RPT3:Test_Failed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   endif%0A %0A   Test = Test + 1%0A%0A# End Test 5%0A%0A#------------------------------------------------------------------------#%0A# Test 6 - Different Parameters...%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0805"%2C "Functions_Calls"%2C "Multiple IH"%2C "Pass in two IH parameters"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1011"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1031"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0138"]%0A%0A   [Result%2C Result_Value] = BO1:Have_Two_IH_Parameters[One%2C Two] %0A%0A   if Result = TRUE then%0A      [] = RPT2:Test_Passed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   else%0A      [] = RPT3:Test_Failed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 6%0A%0A#------------------------------------------------------------------------#%0A# Test 7%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C"1241-0000-01-0805"%2C "Functions_Calls"%2C "Multiple IH"%2C "Pass in three IH parameters"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1011"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1031"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0138"]%0A%0A   [Result%2C Result_Value] = BO2:Have_Three_IH_Parameters[One%2C Two%2C Three] %0A%0A   if Result = TRUE then%0A      [] = RPT2:Test_Passed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   else%0A      [] = RPT3:Test_Failed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 7%0A%0A#------------------------------------------------------------------------#%0A# Test 8%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C"1241-0000-01-0805"%2C "Functions_Calls"%2C "Multiple IH"%2C "Pass in four IH parameters"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1011"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1031"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0138"]%0A%0A   [Result%2C Result_Value] = BO3:Have_Four_IH_Parameters[One%2C Two%2C Three%2C Four] %0A%0A   if Result = TRUE then%0A      [] = RPT2:Test_Passed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   else%0A      [] = RPT3:Test_Failed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 8%0A%0A#------------------------------------------------------------------------#%0A# Test 9%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C"1241-0000-01-0805"%2C "Functions_Calls"%2C "Multiple IH"%2C "Pass in five IH parameters"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1011"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1031"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0138"]%0A%0A   [Result%2C Result_Value] = BO4:Have_Five_IH_Parameters[One%2C Two%2C Three%2C Four%2C Five] %0A%0A   if Result = TRUE then%0A      [] = RPT2:Test_Passed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   else%0A      [] = RPT3:Test_Failed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 9%0A%0A#------------------------------------------------------------------------#%0A# Test 10%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C"1241-0000-01-0805"%2C "Functions_Calls"%2C "Multiple IH"%2C "Pass in six IH parameters"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1011"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1031"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0138"]%0A%0A   [Result%2C Result_Value] = BO5:Have_Six_IH_Parameters[One%2C Two%2C Three%2C Four%2C Five%2C Six] %0A%0A   if Result = TRUE then%0A      [] = RPT2:Test_Passed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   else%0A      [] = RPT3:Test_Failed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 10%0A%0A#------------------------------------------------------------------------#%0A# Test 11%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0805"%2C "Functions_Calls"%2C "Multiple IH"%2C "Pass in seven IH parameters"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1011"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1031"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0138"]%0A%0A   [Result%2C Result_Value] = BO6:Have_Seven_IH_Parameters[One%2C Two%2C Three%2C Four%2C Five%2C Six%2C Seven] %0A   %0A   if Result = TRUE then%0A      [] = RPT2:Test_Passed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   else%0A      [] = RPT3:Test_Failed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 11%0A%0A#------------------------------------------------------------------------#%0A# Test 12%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0805"%2C "Functions_Calls"%2C "Multiple IH"%2C "Pass in eight IH parameters"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1011"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1031"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0138"]%0A%0A   [Result%2C Result_Value] = BO7:Have_Eight_IH_Parameters[One%2C Two%2C Three%2C Four%2C Five%2C Six%2C Seven%2C Eight] %0A%0A   if Result = TRUE then%0A      [] = RPT2:Test_Passed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   else%0A      [] = RPT3:Test_Failed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 12%0A%0A#------------------------------------------------------------------------#%0A# Test 13%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0805"%2C "Functions_Calls"%2C "Multiple IH"%2C "Pass in 10 IH parameters"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1011"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1031"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0138"]%0A%0A   [Result%2C Result_Value] = BO9:Have_Ten_IH_Parameters[One%2C Two%2C Three%2C Four%2C Five%2C Six%2C Seven%2C Eight%2C Nine%2C Ten] %0A%0A   if Result = TRUE then%0A      [] = RPT2:Test_Passed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   else%0A      [] = RPT3:Test_Failed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 13%0A%0A#------------------------------------------------------------------------#%0A# Test 14%0A#------------------------------------------------------------------------#%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0805"%2C "Functions_Calls"%2C "Multiple IH"%2C "Pass in 20 IH parameters"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1011"]%0A   [] = RPT8:Specify_Requid[Test%2C "1103-0000-01-1031"]%0A   [] = RPT8:Specify_Requid[Test%2C "1101-0000-01-0138"]%0A%0A   [Result%2C Result_Value] = BO10:Have_Twenty_IH_Parameters[One%2C Two%2C Three%2C Four%2C Five%2C Six%2C Seven%2C Eight%2C Nine%2C Ten%2C \%0A                                                           One%2C Two%2C Three%2C Four%2C Five%2C Six%2C Seven%2C Eight%2C Nine%2C Ten] %0A%0A   if Result = TRUE then%0A      [] = RPT2:Test_Passed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   else%0A      [] = RPT3:Test_Failed["Pass in lots of IH parameters"%2C Test%2C Result_Value]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 14%0A%0A#------------------------------------------------------------------------#%0A%0A   my_test.The_Test_Number = Test%0A%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,4,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Multiple_IH_Parameters_Scenario%0A,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,private,Test,5,,,
codeblock,my_test = find-one Test_Data%0A%0ATest = my_test.The_Test_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0806"%2C "Function Calls"%2C "Domain Sync Services"%2C "Check memory usage"]%0A%0A   [The_Result] = Function_Calls10::Call_A[0]%0A%0A   if The_Result = 10 then%0A      [] = RPT2:Test_Passed["Mem usage"%2C Test%2C The_Result]%0A   else%0A      [] = RPT3:Test_Failed["Mem usage"%2C Test%2C The_Result]      %0A   endif%0A%0ATest = Test + 1%0A%0Amy_test.The_Test_Number = Test,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,5,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Test%0A,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Domain_FunctionA,1,,,
parameter,InputA,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,OutputA,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,   if InputA = 1 then%0A      OutputA = 1%0A   else%0A      OutputA = 2%0A   endif%0A,,,,,,,
codeblock,,,,,,,,
description, This function is accessible for the whole domain.%0A,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Create_Report_Data,2,,,
codeblock,# Find out of there already is one of these.%0A# It is not inconceivable that a report object still exists from a previous run.%0A# Report objects are not deleted at the end of a run%2C as certain events may%0A# still be en-queued.%0A%0Aold_report = find-one Report_Data%0A%0Aif old_report != UNDEFINED then%0A   delete old_report%0Aendif%0A%0AMy_Report = create unique Report_Data with Reported_Domain_Number = 0%0A%0A[] = RPT6:Domain_Test_Start["Function Calls"]%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Delete_Report_Data,3,,,
codeblock,%0A[] = RPT5:Test_Text[0%2C"Test Finished"]%0A%0A[] = RPT7:Domain_Test_Finished["Function Calls"]%0A%0A# Do not delete the Report_Data object%2C as there may be still events in%0A# the queue.,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Perform_Service_In_Tight_Loop,4,,,
parameter,A_Tight_Input_Parameter,in,,,,,,
typeref,instance of A_Tight_Object,,,,,,,
typeref,,,,,,,,
parameter,This_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Testing_For_What,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,A_Tight_Return_Parameter,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,# ---------------------------------------------------------------------------%0A# Start the test here%2C produce the pass/fail back in the scenario.%0A# ---------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[This_Test_Number%2C "1241-0000-01-0805"%2C "Function_Calls"%2C "Perform Services in tight loop"%2C Testing_For_What]%0A   [] = RPT8:Specify_Requid[This_Test_Number%2C "1241-0000-01-1215"]%0A   [] = RPT8:Specify_Requid[This_Test_Number%2C "1103-0000-01-1011"]%0A%0A   if A_Tight_Input_Parameter = UNDEFINED then%0A      A_Tight_Return_Parameter = -1%0A   else%0A      A_Tight_Return_Parameter = A_Tight_Input_Parameter.Start_Value + A_Tight_Input_Parameter.Increment_Value%0A   endif%0A%0A%0A   %0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Test_Set_Of_IH,5,,,
parameter,Set_Of_IH,in,,,,,,
typeref,Structure_For_IH,,,,,,,
typeref,,,,,,,,
parameter,Single,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,Testing_For_What,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,my_test_data = find-one Test_Data%0ATest_Number  = my_test_data.The_Test_Number%0A%0A# ---------------------------------------------------------------------------%0A# Param1 is set of structures contiaining an instance handle for Object_A.%0A# ---------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test_Number%2C "1241-0000-01-0807"%2C " Function Calls"%2C "Test IH set"%2C Testing_For_What]%0A   [] = RPT8:Specify_Requid[Test_Number%2C "1103-0000-01-1011"]%0A   [] = RPT8:Specify_Requid[Test_Number%2C "1101-0000-01-0138"]%0A%0A   The_Attribute = 1%0A  %0A   How_Many = countof {Set_Of_IH}%0A%0A   if How_Many = 1 then%0A%0A      # Single IH%2C not a set.%0A      for [Object_IH] in {Set_Of_IH} do%0A         The_Attribute = Object_IH.ReferenceA %0A      endfor%0A%0A      if Single = TRUE then%0A         [] = RPT2:Test_Passed["Single of IH received"%2C Test_Number%2C The_Attribute]%0A      else%0A         [] = RPT3:Test_Failed["Single IH expected"%2C Test_Number%2C -1]%0A      endif%0A%0A   else%0A%0A      # Set of IH%0A      if Single = FALSE then%0A         [] = RPT2:Test_Passed["Set of IH received"%2C Test_Number%2C How_Many]%0A      else%0A         [] = RPT3:Test_Failed["Set IH expected"%2C Test_Number%2C -1]%0A      endif%0A%0A   endif%0A%0A# ---------------------------------------------------------------------------%0A%0ATest_Number = Test_Number + 1%0Amy_test_data.The_Test_Number = Test_Number,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Receive_Enumeration,6,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,The_Colour,in,,,,,,
typeref,Colour_Type,,,,,,,
typeref,,,,,,,,
parameter,Testing_For,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,   [] = RPT1:Start_Test[Test_Number%2C "1241-0000-01-0804"%2C "Function Calls"%2C "Receive enumeration"%2C Testing_For]%0A   [] = RPT8:Specify_Requid[Test_Number%2C "1103-0000-01-1011"]%0A%0A   Target_Colour of Colour_Type = 'Red'%0A%0A   if The_Colour = Target_Colour then%0A      [] = RPT2:Test_Passed[Testing_For%2C Test_Number%2C 0]%0A   else%0A      [] = RPT3:Test_Failed[Testing_For%2C Test_Number%2C -1]%0A   endif%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Nav_Enum_Over_Bridge,7,,,
parameter,The_Input_Value,in,,,,,,
typeref,New_Enum_Type,,,,,,,
typeref,,,,,,,,
parameter,The_Return_Value,out,,,,,,
typeref,Return_Enum_Type,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,switch The_Input_Value%0A%0A   case 'Sly'%0A      The_Return_Value = 'Slys_Mum'%0A   case 'Sandy'%0A      The_Return_Value = 'Sandys_Mum'%0A   case 'Wes'%0A      The_Return_Value = 'Wes_Mum'%0A   default%0A      The_Return_Value = 'Nobodys_Mum'%0Aendswitch,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Call_To_Self,8,,,
parameter,The_Input_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,The_Output_Value,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,[Host] = WAW1:What_Env[]%0A%0Atemp = The_Input_Value%0Atemp = temp + 1%0A%0Aif Host = "ISIM" then%0A   Total = 5%0Aelse%0A   Total = 700%0Aendif%0A%0Aif temp = Total then%0A   The_Output_Value = temp%0Aelse%0A   The_Output_Value = temp%0A   [The_Output_Value] = Function_Calls8::Call_To_Self[temp]%0Aendif%0A%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Add_Values_From_Bridge,9,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Input1,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Input2,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Input3,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,   The_Total = Input1 + Input2 + Input3%0A   %0A   if The_Total = 6 then%0A      [] = RPT2:Test_Passed["Domain sync called from bridge"%2C Test%2C The_Total]%0A   else%0A      [] = RPT3:Test_Failed["Domain sync called from bridge"%2C Test%2C The_Total]%0A   endif,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Call_A,10,,,
parameter,Input_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Output_Value,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,[Host] = WAW1:What_Env[]%0A%0Atemp = Input_Value%0Atemp = temp + 1%0A%0A   if Host = "ISIM" then%0A      Total = 10%0A   else%0A      Total = 700%0A   endif%0A%0Aif temp >= Total then%0A   Output_Value = temp%0Aelse%0A   Output_Value = temp%0A   [Output_Value] = Function_Calls11::Call_B[temp]%0Aendif,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Call_B,11,,,
parameter,Input_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Output_Value,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,temp = Input_Value%0Atemp = temp + 1%0A%0A   Output_Value = temp%0A   [Output_Value] = Function_Calls10::Call_A[temp]%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Test_IH_Params,12,,,
parameter,Input_IH,in,,,,,,
typeref,instance of Object_C,,,,,,,
typeref,,,,,,,,
parameter,Return_IH,out,,,,,,
typeref,instance of Object_C,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,Inst_Of_C = find-one Object_C where idC = 100%0A%0Aif Input_IH.idC = 100 then%0A%0A   if Input_IH.IntC = 200 then%0A%0A      if Input_IH.RealC = 99.9 then%0A         Inst_Of_C.idC   = 1000%0A         Inst_Of_C.IntC  = 2000%0A         Inst_Of_C.RealC = 999.9%0A%0A         Return_IH = Inst_Of_C%0A      endif%0A%0A   endif%0A%0Aendif,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,Report,RPT,,,,,,
routine,Function_Calls,,public,Start_Test,1,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Requid,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Purpose,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Test_Passed,2,,,
parameter,Test_Object_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Test_Failed,3,,,
parameter,Failed_Domain_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Failed_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Failed_Test_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Test_Unsupported,4,,,
parameter,Unsupported_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Test_Text,5,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Free_Text,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Domain_Test_Start,6,,,
parameter,This_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Domain_Test_Finished,7,,,
parameter,This_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Specify_Requid,8,,,
parameter,Requid_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,The_Requid_Itself,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
terminator,Nav_To_Bridge,NTB,,,,,,
routine,Function_Calls,,public,Big_Bridge_Navigation,1,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Call_Domain_Sync_Service,2,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,InputValue1,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,InputValue2,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,InputValue3,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,Function_Calls,,public,Call_Object_Sync_Service,3,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Text_Input,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,The_Integer,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,The_Real,in,,,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
terminator,Where_Are_We,WAW,,,,,,
routine,Function_Calls,,public,What_Env,1,,,
parameter,Env_Text,out,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
object,A_Tight_Object,ATO,15,,,,,
attribute,Start_Value,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Increment_Value,,,Start_Value,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
state,,A_Tight_Object,Idle,,1,,,
state,,,,,,,,
state,,A_Tight_Object,Operations,,2,,,
parameter,Termination_Required,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,[] = RPT1:Start_Test[this.Start_Value%2C "Null Requid"%2C "Function_Calls"%2C "A Tight Object"%2C "Generate to active object"]%0A%0Aif Termination_Required = TRUE then%0A   generate ATO2:Die() to this%0Aelse%0A   [] = RPT2:Test_Passed["A tight object none terminated"%2C this.Start_Value%2C 0]%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,A_Tight_Object,Dead,terminal,3,,,
codeblock,[] = RPT2:Test_Passed["A tight object terminated"%2C this.Start_Value%2C 0]%0A%0A%0Adelete this,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
event,Get_Going,,1,,,,,
parameter,Termination_Required,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,Die,,2,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,Get_Going,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Die,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Get_Going,Operations,,,
transition,,,,,,,,
transition,Idle,,,Die,Ignore,,,
transition,,,,,,,,
transition,Operations,,,Get_Going,Ignore,,,
transition,,,,,,,,
transition,Operations,,,Die,Dead,,,
transition,,,,,,,,
transition,Dead,,,Get_Going,Cannot_Happen,,,
transition,,,,,,,,
transition,Dead,,,Die,Cannot_Happen,,,
transition,,,,,,,,
transitiontable,,,,,,,,
description, Object used for proving that passive objects created and passed into services in a tight loop are dealt with.%0A,,,,,,,
object,,,,,,,,
object,Big_Object,BO,14,,,,,
attribute,Big_Attribute,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,Function_Calls,Big_Object,public,Have_Two_IH_Parameters,,,1,
parameter,Param1,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param2,in,,,,,,
typeref,instance of Object_Two,,,,,,,
typeref,,,,,,,,
parameter,Has_It_Passed,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,What_With,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,if Param1.Attribute_One   = 1 &\%0A   Param2.Attribute_Two   = 2 then %0A%0A%0A%0A   Has_It_Passed = TRUE%0A   What_With = 0%0A%0Aelse%0A%0A   Has_It_Passed = FALSE%0A   What_With = Param1.Attribute_One%0A%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Function_Calls,Big_Object,public,Have_Three_IH_Parameters,,,2,
parameter,Param1,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param2,in,,,,,,
typeref,instance of Object_Two,,,,,,,
typeref,,,,,,,,
parameter,Param3,in,,,,,,
typeref,instance of Object_Three,,,,,,,
typeref,,,,,,,,
parameter,Has_It_Passed,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,What_With,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,if Param1.Attribute_One   = 1 &\%0A   Param2.Attribute_Two   = 2 &\%0A   Param3.Attribute_Three = 3 then%0A%0A%0A#   Param4.Attribute_Four  = 4 &\%0A#   Param5.Attribute_Five  = 5 &\%0A#   Param6.Attribute_Six   = 6 &\%0A#   Param7.Attribute_Seven = 7 &\%0A#   Param8.Attribute_Eight = 8 then %0A%0A   Has_It_Passed = TRUE%0A   What_With = 0%0A%0Aelse%0A%0A   Has_It_Passed = FALSE%0A   What_With = Param1.Attribute_One%0A%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Function_Calls,Big_Object,public,Have_Four_IH_Parameters,,,3,
parameter,Param1,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param2,in,,,,,,
typeref,instance of Object_Two,,,,,,,
typeref,,,,,,,,
parameter,Param3,in,,,,,,
typeref,instance of Object_Three,,,,,,,
typeref,,,,,,,,
parameter,Param4,in,,,,,,
typeref,instance of Object_Four,,,,,,,
typeref,,,,,,,,
parameter,Has_It_Passed,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,What_With,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,if Param1.Attribute_One   = 1 &\%0A   Param2.Attribute_Two   = 2 &\%0A   Param3.Attribute_Three = 3 &\%0A   Param4.Attribute_Four  = 4 then%0A%0A#   Param5.Attribute_Five  = 5 &\%0A#   Param6.Attribute_Six   = 6 &\%0A#   Param7.Attribute_Seven = 7 &\%0A#   Param8.Attribute_Eight = 8 then %0A%0A   Has_It_Passed = TRUE%0A   What_With = 0%0A%0Aelse%0A%0A   Has_It_Passed = FALSE%0A   What_With = Param1.Attribute_One%0A%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Function_Calls,Big_Object,public,Have_Five_IH_Parameters,,,4,
parameter,Param1,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param2,in,,,,,,
typeref,instance of Object_Two,,,,,,,
typeref,,,,,,,,
parameter,Param3,in,,,,,,
typeref,instance of Object_Three,,,,,,,
typeref,,,,,,,,
parameter,Param4,in,,,,,,
typeref,instance of Object_Four,,,,,,,
typeref,,,,,,,,
parameter,Param5,in,,,,,,
typeref,instance of Object_Five,,,,,,,
typeref,,,,,,,,
parameter,Has_It_Passed,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,What_With,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,if Param1.Attribute_One   = 1 &\%0A   Param2.Attribute_Two   = 2 &\%0A   Param3.Attribute_Three = 3 &\%0A   Param4.Attribute_Four  = 4 &\%0A   Param5.Attribute_Five  = 5 then%0A%0A#   Param6.Attribute_Six   = 6 &\%0A#   Param7.Attribute_Seven = 7 &\%0A#   Param8.Attribute_Eight = 8 then %0A%0A   Has_It_Passed = TRUE%0A   What_With = 0%0A%0Aelse%0A%0A   Has_It_Passed = FALSE%0A   What_With = Param1.Attribute_One%0A%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Function_Calls,Big_Object,public,Have_Six_IH_Parameters,,,5,
parameter,Param1,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param2,in,,,,,,
typeref,instance of Object_Two,,,,,,,
typeref,,,,,,,,
parameter,Param3,in,,,,,,
typeref,instance of Object_Three,,,,,,,
typeref,,,,,,,,
parameter,Param4,in,,,,,,
typeref,instance of Object_Four,,,,,,,
typeref,,,,,,,,
parameter,Param5,in,,,,,,
typeref,instance of Object_Five,,,,,,,
typeref,,,,,,,,
parameter,Param6,in,,,,,,
typeref,instance of Object_Six,,,,,,,
typeref,,,,,,,,
parameter,Has_It_Passed,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,What_With,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,if Param1.Attribute_One   = 1 &\%0A   Param2.Attribute_Two   = 2 &\%0A   Param3.Attribute_Three = 3 &\%0A   Param4.Attribute_Four  = 4 &\%0A   Param5.Attribute_Five  = 5 &\%0A   Param6.Attribute_Six   = 6 then%0A%0A#   Param7.Attribute_Seven = 7 &\%0A#   Param8.Attribute_Eight = 8 then %0A%0A   Has_It_Passed = TRUE%0A   What_With = 0%0A%0Aelse%0A%0A   Has_It_Passed = FALSE%0A   What_With = Param1.Attribute_One%0A%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Function_Calls,Big_Object,public,Have_SIX_Same_IH_Parameters,,,8,
parameter,Param1,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param2,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param3,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param4,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param5,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param6,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Has_It_Passed,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,What_With,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,if Param1.Attribute_One  = 1 &\%0A   Param2.Attribute_One  = 2 &\%0A   Param3.Attribute_One  = 3 &\%0A   Param4.Attribute_One  = 4 &\%0A   Param5.Attribute_One  = 5 &\%0A   Param6.Attribute_One  = 6 then%0A%0A   Has_It_Passed = TRUE%0A   What_With = 0%0A%0Aelse%0A   Has_It_Passed = FALSE%0A   What_With = Param1.Attribute_One%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Function_Calls,Big_Object,public,Have_Seven_IH_Parameters,,,6,
parameter,Param1,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param2,in,,,,,,
typeref,instance of Object_Two,,,,,,,
typeref,,,,,,,,
parameter,Param3,in,,,,,,
typeref,instance of Object_Three,,,,,,,
typeref,,,,,,,,
parameter,Param4,in,,,,,,
typeref,instance of Object_Four,,,,,,,
typeref,,,,,,,,
parameter,Param5,in,,,,,,
typeref,instance of Object_Five,,,,,,,
typeref,,,,,,,,
parameter,Param6,in,,,,,,
typeref,instance of Object_Six,,,,,,,
typeref,,,,,,,,
parameter,Param7,in,,,,,,
typeref,instance of Object_Seven,,,,,,,
typeref,,,,,,,,
parameter,Has_It_Passed,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,What_With,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,if Param1.Attribute_One   = 1 &\%0A   Param2.Attribute_Two   = 2 &\%0A   Param3.Attribute_Three = 3 &\%0A   Param4.Attribute_Four  = 4 &\%0A   Param5.Attribute_Five  = 5 &\%0A   Param6.Attribute_Six   = 6 &\%0A   Param7.Attribute_Seven = 7 then%0A%0A#   Param8.Attribute_Eight = 8 then %0A%0A   Has_It_Passed = TRUE%0A   What_With = 0%0A%0Aelse%0A%0A   Has_It_Passed = FALSE%0A   What_With = Param1.Attribute_One%0A%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Function_Calls,Big_Object,public,Have_Eight_IH_Parameters,,,7,
parameter,Param1,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param2,in,,,,,,
typeref,instance of Object_Two,,,,,,,
typeref,,,,,,,,
parameter,Param3,in,,,,,,
typeref,instance of Object_Three,,,,,,,
typeref,,,,,,,,
parameter,Param4,in,,,,,,
typeref,instance of Object_Four,,,,,,,
typeref,,,,,,,,
parameter,Param5,in,,,,,,
typeref,instance of Object_Five,,,,,,,
typeref,,,,,,,,
parameter,Param6,in,,,,,,
typeref,instance of Object_Six,,,,,,,
typeref,,,,,,,,
parameter,Param7,in,,,,,,
typeref,instance of Object_Seven,,,,,,,
typeref,,,,,,,,
parameter,Param8,in,,,,,,
typeref,instance of Object_Eight,,,,,,,
typeref,,,,,,,,
parameter,Has_It_Passed,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,What_With,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,if Param1.Attribute_One   = 1 &\%0A   Param2.Attribute_Two   = 2 &\%0A   Param3.Attribute_Three = 3 &\%0A   Param4.Attribute_Four  = 4 &\%0A   Param5.Attribute_Five  = 5 &\%0A   Param6.Attribute_Six   = 6 &\%0A   Param7.Attribute_Seven = 7 &\%0A   Param8.Attribute_Eight = 8 then %0A%0A   Has_It_Passed = TRUE%0A   What_With = 0%0A%0Aelse%0A%0A   Has_It_Passed = FALSE%0A   What_With = Param1.Attribute_One%0A%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Function_Calls,Big_Object,public,Have_Ten_IH_Parameters,,,9,
parameter,Param1,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param2,in,,,,,,
typeref,instance of Object_Two,,,,,,,
typeref,,,,,,,,
parameter,Param3,in,,,,,,
typeref,instance of Object_Three,,,,,,,
typeref,,,,,,,,
parameter,Param4,in,,,,,,
typeref,instance of Object_Four,,,,,,,
typeref,,,,,,,,
parameter,Param5,in,,,,,,
typeref,instance of Object_Five,,,,,,,
typeref,,,,,,,,
parameter,Param6,in,,,,,,
typeref,instance of Object_Six,,,,,,,
typeref,,,,,,,,
parameter,Param7,in,,,,,,
typeref,instance of Object_Seven,,,,,,,
typeref,,,,,,,,
parameter,Param8,in,,,,,,
typeref,instance of Object_Eight,,,,,,,
typeref,,,,,,,,
parameter,Param9,in,,,,,,
typeref,instance of Object_Nine,,,,,,,
typeref,,,,,,,,
parameter,Param10,in,,,,,,
typeref,instance of Object_Ten,,,,,,,
typeref,,,,,,,,
parameter,Has_It_Passed,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,What_With,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,if Param1.Attribute_One   = 1  &\%0A   Param2.Attribute_Two   = 2  &\%0A   Param3.Attribute_Three = 3  &\%0A   Param4.Attribute_Four  = 4  &\%0A   Param5.Attribute_Five  = 5  &\%0A   Param6.Attribute_Six   = 6  &\%0A   Param7.Attribute_Seven = 7  &\%0A   Param8.Attribute_Eight = 8  &\ %0A   Param9.Attribute_Nine  = 9  &\%0A   Param10.Attribute_Ten  = 10 then%0A   Has_It_Passed = TRUE%0A   What_With = 0%0A%0Aelse%0A%0A   Has_It_Passed = FALSE%0A   What_With = Param1.Attribute_One%0A%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Function_Calls,Big_Object,public,Have_Twenty_IH_Parameters,,,10,
parameter,Param1,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param2,in,,,,,,
typeref,instance of Object_Two,,,,,,,
typeref,,,,,,,,
parameter,Param3,in,,,,,,
typeref,instance of Object_Three,,,,,,,
typeref,,,,,,,,
parameter,Param4,in,,,,,,
typeref,instance of Object_Four,,,,,,,
typeref,,,,,,,,
parameter,Param5,in,,,,,,
typeref,instance of Object_Five,,,,,,,
typeref,,,,,,,,
parameter,Param6,in,,,,,,
typeref,instance of Object_Six,,,,,,,
typeref,,,,,,,,
parameter,Param7,in,,,,,,
typeref,instance of Object_Seven,,,,,,,
typeref,,,,,,,,
parameter,Param8,in,,,,,,
typeref,instance of Object_Eight,,,,,,,
typeref,,,,,,,,
parameter,Param9,in,,,,,,
typeref,instance of Object_Nine,,,,,,,
typeref,,,,,,,,
parameter,Param10,in,,,,,,
typeref,instance of Object_Ten,,,,,,,
typeref,,,,,,,,
parameter,Param11,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param12,in,,,,,,
typeref,instance of Object_Two,,,,,,,
typeref,,,,,,,,
parameter,Param13,in,,,,,,
typeref,instance of Object_Three,,,,,,,
typeref,,,,,,,,
parameter,Param14,in,,,,,,
typeref,instance of Object_Four,,,,,,,
typeref,,,,,,,,
parameter,Param15,in,,,,,,
typeref,instance of Object_Five,,,,,,,
typeref,,,,,,,,
parameter,Param16,in,,,,,,
typeref,instance of Object_Six,,,,,,,
typeref,,,,,,,,
parameter,Param17,in,,,,,,
typeref,instance of Object_Seven,,,,,,,
typeref,,,,,,,,
parameter,Param18,in,,,,,,
typeref,instance of Object_Eight,,,,,,,
typeref,,,,,,,,
parameter,Param19,in,,,,,,
typeref,instance of Object_Nine,,,,,,,
typeref,,,,,,,,
parameter,Param20,in,,,,,,
typeref,instance of Object_Ten,,,,,,,
typeref,,,,,,,,
parameter,Has_It_Passed,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,What_With,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,if Param1.Attribute_One    = 1  &\%0A   Param2.Attribute_Two    = 2  &\%0A   Param3.Attribute_Three  = 3  &\%0A   Param4.Attribute_Four   = 4  &\%0A   Param5.Attribute_Five   = 5  &\%0A   Param6.Attribute_Six    = 6  &\%0A   Param7.Attribute_Seven  = 7  &\%0A   Param8.Attribute_Eight  = 8  &\ %0A   Param9.Attribute_Nine   = 9  &\%0A   Param10.Attribute_Ten   = 10 &\%0A   Param11.Attribute_One   = 1  &\%0A   Param12.Attribute_Two   = 2  &\%0A   Param13.Attribute_Three = 3  &\%0A   Param14.Attribute_Four  = 4  &\%0A   Param15.Attribute_Five  = 5  &\%0A   Param16.Attribute_Six   = 6  &\%0A   Param17.Attribute_Seven = 7  &\%0A   Param18.Attribute_Eight = 8  &\ %0A   Param19.Attribute_Nine  = 9  &\%0A   Param20.Attribute_Ten   = 10 then%0A   Has_It_Passed = TRUE%0A   What_With = 0%0A%0Aelse%0A%0A   Has_It_Passed = FALSE%0A   What_With = Param1.Attribute_One%0A%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Function_Calls,Big_Object,public,Have_SEVEN_Same_IH_Parameters,,,11,
parameter,Param1,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param2,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param3,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param4,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param5,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param6,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param7,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Has_It_Passed,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,What_With,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,if Param1.Attribute_One  = 1 &\%0A   Param2.Attribute_One  = 2 &\%0A   Param3.Attribute_One  = 3 &\%0A   Param4.Attribute_One  = 4 &\%0A   Param5.Attribute_One  = 5 &\%0A   Param6.Attribute_One  = 6 &\%0A   Param7.Attribute_One  = 7 then%0A%0A   Has_It_Passed = TRUE%0A   What_With = 0%0A%0Aelse%0A   Has_It_Passed = FALSE%0A   What_With = Param1.Attribute_One%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Function_Calls,Big_Object,public,Have_EIGHT_Same_IH_Parameters,,,12,
parameter,Param1,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param2,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param3,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param4,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param5,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param6,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param7,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Param8,in,,,,,,
typeref,instance of Object_One,,,,,,,
typeref,,,,,,,,
parameter,Has_It_Passed,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,What_With,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,if Param1.Attribute_One  = 1 &\%0A   Param2.Attribute_One  = 2 &\%0A   Param3.Attribute_One  = 3 &\%0A   Param4.Attribute_One  = 4 &\%0A   Param5.Attribute_One  = 5 &\%0A   Param6.Attribute_One  = 6 &\%0A   Param7.Attribute_One  = 7 &\%0A   Param8.Attribute_One  = 8 then%0A%0A   Has_It_Passed = TRUE%0A   What_With = 0%0A%0Aelse%0A   Has_It_Passed = FALSE%0A   What_With = Param1.Attribute_One%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
object,,,,,,,,
object,Object_A,objA,2,,,,,
attribute,ReferenceA,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,ReferenceA,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicate that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
operation,Function_Calls,Object_A,public,FunctionA,,,1,
parameter,InputA,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,OutputA,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,   an_instance_A = find-one Object_A where ReferenceA = 1%0A   if InputA != 0 then%0A      generate objA1:Fault() to an_instance_A%0A   else%0A      temp = an_instance_A.ResultA + 10%0A      an_instance_A.ResultA = temp%0A   endif%0A   OutputA = InputA + 10%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Function_Calls,Object_A,public,FunctionB,,,2,
parameter,InputA,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,InputB,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,InputC,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,OutputA,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,   an_instance_A = find-one Object_A where ReferenceA = 2%0A   if ((InputA != 10)|(InputB != 20)|(InputC != 30)) then%0A      generate objA1:Fault() to an_instance_A%0A   else%0A      temp = an_instance_A.ResultA + 10%0A      an_instance_A.ResultA = temp%0A   endif%0A   OutputA = TRUE%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Function_Calls,Object_A,public,FunctionC,,,3,
parameter,InputA,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,OutputA,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,OutputB,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,OutputC,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,OutputD,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,   an_instance_A = find-one Object_A where ReferenceA = 3%0A   if (InputA != 10) then%0A      generate objA1:Fault() to an_instance_A%0A   else%0A      temp = an_instance_A.ResultA + 10%0A      an_instance_A.ResultA = temp%0A   endif%0A   OutputA = 10%0A   OutputB = TRUE%0A   OutputC = FALSE%0A   OutputD = 30%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Function_Calls,Object_A,public,FunctionD,,,4,
parameter,InputA,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,InputB,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,InputC,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,OutputA,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,OutputB,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,OutputC,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,   an_instance_A = find-one Object_A where ReferenceA = 4%0A   if ((InputA != 1)|(InputB != 2)|(InputC != 3)) then%0A      generate objA1:Fault() to an_instance_A%0A   else%0A      temp = an_instance_A.ResultA + 10%0A      an_instance_A.ResultA = temp%0A   endif%0A   OutputA = 1%0A   OutputB = 2%0A   OutputC = 3%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
operation,Function_Calls,Object_A,public,Call_To_Self,,,5,
parameter,The_Input_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,The_Output_Value,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,temp = The_Input_Value%0Atemp = temp + 1%0A%0Aif temp = 2 then%0A   The_Output_Value = temp%0Aelse%0A   [The_Output_Value] = objA5:Call_To_Self[temp]%0Aendif%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
state,,Object_A,Idle,,1,,,
codeblock,#None,,,,,,,
codeblock,,,,,,,,
description, Idle state.%0A No action taken.%0A,,,,,,,
state,,,,,,,,
state,,Object_A,Verification,,2,,,
parameter,Test_Case_ID,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Invocation,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,%0A#------------------------------------------------------------------------#%0A# Function calls from ObjectA%0A#------------------------------------------------------------------------#%0A%0A   has_failed = TRUE%0A%0A#------------------------------------------------------------------------#%0A# Test 1 - Function call to a function passing one parameter and receiving %0A#          one parameter.%0A#------------------------------------------------------------------------#%0A%0A   if Invocation = 1 then%0A%0A      IntegerB = 0%0A%0A      [] = RPT1:Start_Test[Test_Case_ID%2C "1241-0000-01-0802"%2C "Function Calls"%2C "objA"%2C "passing one and receiving one" ]%0A%0A      has_failed = FALSE%0A%0A      # Initialise a parameter to be passed to the function.%0A      tempA = 0%0A%0A      # Call the function.%0A      [IntegerB] = objA1:FunctionA[tempA]%0A%0A      # Check that the value returned from the function is correct.%0A      if IntegerB != 10 then%0A         [] = RPT3:Test_Failed["objA"%2C Test_Case_ID%2C -1]%0A         has_failed = TRUE%0A      else%0A         temp = this.ResultA + 10%0A         this.ResultA = temp%0A         [] = RPT2:Test_Passed["objA"%2C Test_Case_ID%2C temp]%0A      endif%0A%0A   endif%0A%0A# End Test 1%0A%0A#------------------------------------------------------------------------#%0A# Test 2 - Function call to a function passing many parameters and %0A#          receiving one parameter.%0A#------------------------------------------------------------------------#%0A%0A   if Invocation = 2 then%0A%0A      BooleanA = TRUE%0A%0A      [] = RPT1:Start_Test[Test_Case_ID%2C "1241-0000-01-0802"%2C "Function Calls"%2C "objA"%2C "many parameters and receiving one" ]%0A%0A      has_failed = FALSE%0A%0A      # Initialise parameters to be passed to the function.%0A      tempA = 10  %0A      tempB = 20%0A      tempC = 30%0A%0A      # Call the function.%0A      [BooleanA] = objA2:FunctionB[tempA%2C tempB%2C tempC]%0A%0A      # Check that the value returned from the function is correct.%0A      if BooleanA != TRUE then%0A         [] = RPT3:Test_Failed["objA"%2C Test_Case_ID%2C -2]%0A         has_failed = TRUE%0A      else%0A         temp = this.ResultA + 10%0A         this.ResultA = temp%0A         [] = RPT2:Test_Passed["objA"%2C Test_Case_ID%2C temp]%0A      endif%0A%0A   endif%0A%0A# End Test 2%0A%0A#------------------------------------------------------------------------#%0A# Test 3 - Function call to a function passing one parameters and %0A#          receiving many parameter.%0A#------------------------------------------------------------------------#%0A%0A   if Invocation = 3 then%0A%0A      [] = RPT1:Start_Test[Test_Case_ID%2C "1241-0000-01-0802"%2C "Function Calls"%2C "objA"%2C "passing one and receiving many" ]%0A%0A      has_failed = FALSE%0A%0A      IntegerA = 0%0A      BooleanA = FALSE%0A      BooleanB = FALSE%0A      IntegerB = 0%0A%0A      # Initialise a parameter to be passed to the function.%0A      tempA = 10%0A%0A      # Call the function.%0A      [IntegerA%2CBooleanA%2CBooleanB%2CIntegerB] = objA3:FunctionC[tempA]%0A%0A      # Check that the value returned from the function is correct.%0A      if ((IntegerA != 10)|(IntegerB != 30)|(BooleanA != TRUE)|(BooleanB != FALSE)) then%0A         [] = RPT3:Test_Failed["objA"%2C Test_Case_ID%2C -3]%0A         has_failed = TRUE%0A      else%0A         temp = this.ResultA + 10%0A         this.ResultA = temp%0A         [] = RPT2:Test_Passed["objA"%2C Test_Case_ID%2C temp]%0A      endif%0A%0A   endif%0A%0A# End Test 3%0A%0A#------------------------------------------------------------------------#%0A# Test 4 - Function call to a function passing many parameters and %0A#          receiving many parameter.%0A#------------------------------------------------------------------------#%0A%0A   if Invocation = 4 then%0A%0A      [] = RPT1:Start_Test[Test_Case_ID%2C "1241-0000-01-0802"%2C "Function Calls"%2C "objA"%2C "passing many and receiving many"]%0A      has_failed = FALSE%0A%0A      # Initialise parameters to be passed to the function.%0A      tempA = 1%0A      tempB = 2%0A      tempC = 3%0A%0A      IntegerA = 0%0A      IntegerB = 0%0A      IntegerC = 0%0A%0A      # Call the function.%0A      [IntegerA%2CIntegerB%2CIntegerC] = objA4:FunctionD[tempA%2C tempB%2C tempC]%0A%0A      # Check that the value returned from the function is correct.%0A      if ((IntegerA != 1)|(IntegerB != 2)|(IntegerC != 3)) then%0A         [] = RPT3:Test_Failed["objA"%2C Test_Case_ID%2C -4]%0A         has_failed = TRUE%0A      else%0A         temp = this.ResultA + 10%0A         this.ResultA = temp%0A         [] = RPT2:Test_Passed["objA"%2C Test_Case_ID%2C temp]%0A      endif%0A%0A   endif%0A%0A# End Test 4%0A%0A#------------------------------------------------------------------------#%0A# Test 5 - Call to a function that is accessible for the whole domain%0A#------------------------------------------------------------------------#%0A%0A   if Invocation = 5 then%0A%0A      Test=5%0A      [] = RPT1:Start_Test[Test_Case_ID%2C "1241-0000-01-0801"%2C "Function Calls"%2C "objA"%2C "function accessible to whole domain"]%0A%0A      has_failed = FALSE%0A%0A      # Initialise parameters to be passed to the function.%0A      tempA = 1%0A%0A      IntegerA = 0%0A%0A      # Call the function.%0A      [IntegerA] = Function_Calls1::Domain_FunctionA[tempA]%0A%0A      # Check that the value returned from the function is correct.%0A      if (IntegerA != 1) then%0A         [] = RPT3:Test_Failed["objA"%2C Test_Case_ID%2C -5]%0A         has_failed = TRUE%0A      else%0A         temp = this.ResultA + 10%0A         this.ResultA = temp	         	    %0A         [] = RPT2:Test_Passed["objA"%2C Test_Case_ID%2C temp]%0A      endif%0A%0A   endif%0A%0A# End Test 5%0A%0A#------------------------------------------------------------------------#%0A%0Aif !has_failed then%0A   generate objA2:Finished() to this%0Aelse%0A   generate objA1:Fault() to this%0Aendif%0A%0A#------------------------------------------------------------------------#%0A,,,,,,,
codeblock,,,,,,,,
description, This state verifies the following:%0A %0A [1] Passing one parameter/Receiving one parameter%0A [2] Passing many parameters/Receiving one parameter%0A [3] Passing one parameter/Receiving many parameters%0A [4] Passing many parameters/Receiving many parameters%0A [5] Function that is accessible by the whole domain%0A,,,,,,,
state,,,,,,,,
state,,Object_A,Fail,,3,,,
codeblock,#None,,,,,,,
codeblock,,,,,,,,
description, An instance current state is changed to fail%0A if the test failed.%0A,,,,,,,
state,,,,,,,,
event,Fault,,1,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
event,,,,,,,,
event,Start,,3,,,,,
parameter,Test_Case_ID,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Invocation,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,Fault,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Finished,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Start,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Fault,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Finished,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Start,Verification,,,
transition,,,,,,,,
transition,Verification,,,Fault,Fail,,,
transition,,,,,,,,
transition,Verification,,,Finished,Idle,,,
transition,,,,,,,,
transition,Verification,,,Start,Cannot_Happen,,,
transition,,,,,,,,
transition,Fail,,,Fault,Cannot_Happen,,,
transition,,,,,,,,
transition,Fail,,,Finished,Cannot_Happen,,,
transition,,,,,,,,
transition,Fail,,,Start,Cannot_Happen,,,
transition,,,,,,,,
transitiontable,,,,,,,,
description, This object verifies complex function calls.%0A,,,,,,,
object,,,,,,,,
object,Object_B,objB,3,,,,,
attribute,ReferenceB,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, Preferred identifier.%0A,,,,,,,
attribute,,,,,,,,
attribute,ResultA,,,ReferenceB,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, This attribute is manipulated to indicate that the required operation was successful.%0A,,,,,,,
attribute,,,,,,,,
operation,Function_Calls,Object_B,public,FunctionE,,,1,
parameter,InputA,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,OutputA,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,   if InputA = 1 then%0A      tempA = 2%0A      [IntegerA] = Function_Calls1::Domain_FunctionA[tempA]%0A      OutputA = IntegerA%0A   else%0A      OutputA = 3%0A   endif%0A,,,,,,,
codeblock,,,,,,,,
description, This function is used to call another function.%0A,,,,,,,
operation,,,,,,,,
operation,Function_Calls,Object_B,public,FunctionF,,,2,
parameter,OutputA,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,   OutputA = 3%0A,,,,,,,
codeblock,,,,,,,,
description, This function does not receive any input parameters.%0A,,,,,,,
operation,,,,,,,,
operation,Function_Calls,Object_B,public,FunctionG,,,3,
parameter,InputA,in,,,,,,
typeref,instance of Object_B,,,,,,,
typeref,,,,,,,,
parameter,InputB,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,   tempA = InputA%0A   tempB = InputB%0A   if tempA.ReferenceB != tempB then%0A      generate objB1:Fault() to tempA%0A   else%0A      # tempC = tempA.ResultA + 10%0A      tempC = 10%0A      tempA.ResultA = tempC%0A   endif%0A,,,,,,,
codeblock,,,,,,,,
description, This function receives an input parameter but does not return a parameter to the calling function.%0A,,,,,,,
operation,,,,,,,,
operation,Function_Calls,Object_B,public,FunctionH,,,4,
codeblock,   an_instance_B = find-one Object_B where ReferenceB = 9%0A    # tempA = an_instance_B.ResultA + 10%0A   tempA = 10%0A   an_instance_B.ResultA = tempA%0A,,,,,,,
codeblock,,,,,,,,
description, This function receives no parameters and returns no parameters.%0A,,,,,,,
operation,,,,,,,,
state,,Object_B,Idle,,1,,,
parameter,Test_Case_ID,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,%0A# No Action,,,,,,,
codeblock,,,,,,,,
description, Idle state.%0A No action taken.%0A,,,,,,,
state,,,,,,,,
state,,Object_B,Verification,,2,,,
parameter,Test_Case_ID,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Invocation,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# Function calls from ObjectB%0A#------------------------------------------------------------------------#%0A%0A   has_failed=FALSE%0A%0A#------------------------------------------------------------------------#%0A# Test 6 - Call to a function that is accessible for the whole domain%0A#------------------------------------------------------------------------#%0A%0A   if Invocation = 1 then%0A%0A      [] = RPT1:Start_Test[Test_Case_ID%2C "1241-0000-01-0803"%2C "Function Calls"%2C "objB"%2C "domain based function calls"]%0A      [] = RPT8:Specify_Requid[Test_Case_ID%2C "1241-0000-01-0801"]%0A      has_failed = FALSE%0A%0A      # Initialise parameters to be passed to the function.%0A      tempA = 1%0A%0A      # Call the function.%0A      [IntegerA] = Function_Calls1::Domain_FunctionA[tempA]%0A%0A      # Check that the value returned from the function is correct.%0A      if (IntegerA != 1) then%0A         [] = RPT3:Test_Failed["objB"%2C Test_Case_ID%2C  -1]%0A         has_failed = TRUE%0A         generate objB1:Fault() to this%0A      else%0A         temp = this.ResultA + 10%0A         this.ResultA = temp%0A         [] = RPT2:Test_Passed["objB"%2C Test_Case_ID%2C  temp]%0A         generate objB2:Finished(Test_Case_ID) to this%0A      endif%0A%0A   endif%0A%0A# End Test 6%0A%0A#------------------------------------------------------------------------#%0A# Test 7 - Call to a function that calls another function.%0A#------------------------------------------------------------------------#%0A%0A   if Invocation = 2 then%0A  %0A      [] = RPT1:Start_Test[Test_Case_ID%2C "1241-0000-01-0807"%2C "Function Calls"%2C "objB"%2C "Call to function that calls another function"]%0A      [] = RPT8:Specify_Requid[Test_Case_ID%2C "1241-0000-01-0801"]%0A      [] = RPT8:Specify_Requid[Test_Case_ID%2C "1241-0000-01-0802"]%0A      has_failed = FALSE%0A%0A      # Initialise parameters to be passed to the function.%0A      tempA = 1%0A%0A      # Call the function.%0A      [IntegerA] = objB1:FunctionE[tempA]%0A%0A      # Check that the value returned from the function is correct.%0A      if (IntegerA != 2) then%0A         [] = RPT3:Test_Failed["objB"%2C Test_Case_ID%2C  -2]                              %0A         has_failed = TRUE%0A         generate objB1:Fault() to this%0A      else%0A         temp = this.ResultA + 10%0A         this.ResultA = temp%0A         [] = RPT2:Test_Passed["objB"%2C Test_Case_ID%2C temp]%0A         generate objB2:Finished(Test_Case_ID) to this%0A      endif%0A%0A   endif%0A%0A# End Test 7%0A%0A#------------------------------------------------------------------------#%0A# Test 8 - Call a function but not parameters are passed to the function.%0A#------------------------------------------------------------------------#%0A%0A   if Invocation = 3 then%0A%0A      [] = RPT1:Start_Test[Test_Case_ID%2C "1241-0000-01-0802"%2C "Function Calls"%2C "objB"%2C"No input parameters"]%0A      has_failed = FALSE%0A%0A      # Initialise parameters to be passed to the function.%0A      tempA = 1%0A%0A      # Call the function.%0A      [IntegerA] = objB2:FunctionF[]%0A%0A      # Check that the value returned from the function is correct.%0A      if (IntegerA != 3) then%0A         [] = RPT3:Test_Failed["objB"%2C Test_Case_ID%2C -3]%0A         has_failed = TRUE%0A         generate objB1:Fault() to this%0A      else%0A         temp = this.ResultA + 10%0A         this.ResultA = temp%0A         [] = RPT2:Test_Passed["objB"%2C Test_Case_ID%2C temp]%0A         generate objB2:Finished(Test_Case_ID) to this%0A      endif%0A%0A   endif%0A%0A# End Test 8%0A%0A#------------------------------------------------------------------------#%0A# Test 9 - Call a function but not parameters are returned from the %0A#          function.%0A#------------------------------------------------------------------------#%0A%0A   if Invocation = 4 then%0A%0A      [] = RPT1:Start_Test[Test_Case_ID%2C "1241-0000-01-0802"%2C "Function Calls"%2C "objB" %2C "No output parameters"]%0A%0A      has_failed = FALSE%0A%0A      # Initialise parameters to be passed to the function.%0A      an_instance_B = find-one Object_B where ReferenceB = Invocation%0A%0A      # Call the function.%0A      [] = objB3:FunctionG[an_instance_B%2C Test_Case_ID]%0A%0A      # Check that the function performed its task correctly%0A      if (this.ResultA != 10) then%0A         [] = RPT3:Test_Failed["objB"%2C Test_Case_ID%2C -4]%0A         has_failed = TRUE%0A         generate objB1:Fault() to this%0A      else%0A         temp = this.ResultA + 10%0A         this.ResultA = temp%0A         [] = RPT2:Test_Passed["objB"%2C Test_Case_ID%2C temp]%0A         generate objB2:Finished(Test_Case_ID) to this%0A      endif%0A%0A   endif%0A%0A# End Test 9%0A%0A#------------------------------------------------------------------------#%0A# Test 10 - Call a function but pass no parameters and receive no %0A#           parameters from the function.%0A#------------------------------------------------------------------------#%0A%0A   if Invocation = 5 then%0A%0A      [] = RPT1:Start_Test[Test_Case_ID%2C "1241-0000-01-0802"%2C "Function Calls" %2C "objB"%2C "no input or output parameters"]%0A%0A      has_failed = FALSE%0A%0A      # Call the function.%0A      [] = objB4:FunctionH[]%0A%0A      # Check that the function performed its task correctly%0A      if (this.ResultA != 10) then%0A        [] = RPT3:Test_Failed["objB"%2C Test_Case_ID%2C -5]%0A        has_failed = TRUE%0A        generate objB1:Fault() to this%0A     else%0A        temp = this.ResultA + 10%0A        this.ResultA = temp%0A        [] = RPT2:Test_Passed["objB"%2C Test_Case_ID%2C temp]%0A        generate objB2:Finished(Test_Case_ID) to this%0A     endif%0A%0A     [] = Function_Calls3::Delete_Report_Data[]%0A%0A   endif%0A%0A# End Test 10%0A%0A#------------------------------------------------------------------------#,,,,,,,
codeblock,,,,,,,,
description, This object verifies the following:%0A %0A [1] Function that is accessible by the whole domain%0A [2] Function that calls another function%0A [3] Passing no parameters/Receiving some parameters%0A [4] Passing some parameters/Receiving no parameters%0A [5] Passing no parameters/Receiving no parameters%0A [6] Recursive function calls%0A,,,,,,,
state,,,,,,,,
state,,Object_B,Fail,,3,,,
codeblock,#None,,,,,,,
codeblock,,,,,,,,
description, An instance current state is changed to fail%0A if the test failed.%0A,,,,,,,
state,,,,,,,,
state,,Object_B,Initial,creation,8,,,
parameter,Test_Case_ID,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,%0A#an_instance_B = find-one Object_B where ReferenceB = Test_Case_ID%0A#generate objB3:Start(Test_Case_ID) to an_instance_B%0A%0A%0Anew_object_B = create Object_B with ReferenceB = Test_Case_ID & ResultA = 0%0A%0Agenerate objB6:Light_blue_touch_paper(Test_Case_ID) to new_object_B%0A%0A%0A#,,,,,,,
codeblock,,,,,,,,
description, Creation State.%0A,,,,,,,
state,,,,,,,,
event,Fault,,1,,,,,
event,,,,,,,,
event,Finished,,2,,,,,
parameter,Test_Case_ID,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,Start,creation,3,,,,,
parameter,Test_Case_ID,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,Verify,,4,,,,,
parameter,Test_Case_ID,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Invocation,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,Light_blue_touch_paper,,6,,,,,
parameter,Test_Case_ID,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,Fault,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Finished,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Start,Initial,,,
transition,,,,,,,,
transition,Non_Existent,,,Verify,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Light_blue_touch_paper,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Fault,Ignore,,,
transition,,,,,,,,
transition,Idle,,,Finished,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Start,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Verify,Verification,,,
transition,,,,,,,,
transition,Idle,,,Light_blue_touch_paper,Cannot_Happen,,,
transition,,,,,,,,
transition,Verification,,,Fault,Fail,,,
transition,,,,,,,,
transition,Verification,,,Finished,Idle,,,
transition,,,,,,,,
transition,Verification,,,Start,Cannot_Happen,,,
transition,,,,,,,,
transition,Verification,,,Verify,Cannot_Happen,,,
transition,,,,,,,,
transition,Verification,,,Light_blue_touch_paper,Cannot_Happen,,,
transition,,,,,,,,
transition,Fail,,,Fault,Ignore,,,
transition,,,,,,,,
transition,Fail,,,Finished,Cannot_Happen,,,
transition,,,,,,,,
transition,Fail,,,Start,Cannot_Happen,,,
transition,,,,,,,,
transition,Fail,,,Verify,Cannot_Happen,,,
transition,,,,,,,,
transition,Fail,,,Light_blue_touch_paper,Cannot_Happen,,,
transition,,,,,,,,
transition,Initial,,,Fault,Ignore,,,
transition,,,,,,,,
transition,Initial,,,Finished,Cannot_Happen,,,
transition,,,,,,,,
transition,Initial,,,Start,Cannot_Happen,,,
transition,,,,,,,,
transition,Initial,,,Verify,Cannot_Happen,,,
transition,,,,,,,,
transition,Initial,,,Light_blue_touch_paper,Idle,,,
transition,,,,,,,,
transitiontable,,,,,,,,
description, This object verifies the complex function calls.%0A,,,,,,,
object,,,,,,,,
object,Object_C,objC,18,,,,,
attribute,idC,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,IntC,,,idC,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,RealC,,,IntC,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Object_Eight,OBJEIGHT,13,,,,,
attribute,Attribute_Eight,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Object_Five,OBJFIVE,10,,,,,
attribute,Attribute_Five,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Object_Four,OBJFOUR,9,,,,,
attribute,Attribute_Four,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Object_Nine,OBJNINE,16,,,,,
attribute,Attribute_Nine,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Object_One,OBJONE,5,,,,,
attribute,Attribute_One,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,Function_Calls,Object_One,public,Get_From_Bridge,,,1,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Text_Input,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Integer_Input,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Real_Input,in,,,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,if Text_Input = "From Bridge" then%0A%0A   if Integer_Input = 100 then%0A%0A      if Real_Input = 99.9 then%0A         [] = RPT2:Test_Passed["Object Sync from bridge"%2C Test%2C 0]%0A      else%0A         [] = RPT3:Test_Failed["Object Sync from bridge"%2C Test%2C -10]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Object Sync from bridge"%2C Test%2C -20]%0A   endif%0A%0Aelse%0A   [] = RPT3:Test_Failed["Object Sync from bridge"%2C Test%2C -30]%0Aendif,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
object,,,,,,,,
object,Object_Seven,OBJSEVEN,12,,,,,
attribute,Attribute_Seven,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Object_Six,OBJSIX,11,,,,,
attribute,Attribute_Six,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Object_Ten,OBJTEN,17,,,,,
attribute,Attribute_Ten,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Object_Three,OBJTHREE,7,,,,,
attribute,Attribute_Three,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Object_Two,OBJTWO,6,,,,,
attribute,Attribute_Two,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Report_Data,RD,4,,,,,
attribute,Report_Data_Unique_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Reported_Domain_Number,,,Report_Data_Unique_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Test_Data,TD,8,,,,,
attribute,The_Test_Number,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
pragma,version,,,,,,,
pragmaitem,15,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Tests Domain%2C object and instance based functions.%0A,,,,,,,
domain,,,,,,,,
