define bridge  DomainB:NAV1:Navigate_One_to_One
input \
	Test:Base_Integer_Type 
output

#$DESCRIPTION
#$END_DESCRIPTION



#------------------------------------------------------------------------#
# Perform a navigation in domainA
#------------------------------------------------------------------------#

My_Report = find-one Report_Data

if My_Report = UNDEFINED then

   $USE RP
      [] = RP7::Report_Run_Time_Error["Calling domain has not created Report_Data"]
   $ENDUSE

else

   This_Domain_Number = My_Report.Reported_Domain_Number
   Bridge_Test_Passed = FALSE
   Passed_Value       = 0
   Failure_Value      = -1

   $USE DomainA

      left_side = find-one One_To_One_Left_Side 

      if left_side != UNDEFINED then

         a_right_side = left_side -> R1.One_To_One_Right_Side

         if a_right_side != UNDEFINED then
            Bridge_Test_Passed = TRUE
            Passed_Value       = a_right_side.otors_id
         endif

      else
         Failure_Value = -2
      endif

   $ENDUSE

   $USE RP
      [] = RP4::Test_Description[Test, "1241-0000-01-1102", "Domain_B", "DomainB DomainA", "one to one nav", This_Domain_Number]
         [] = RP10::Specify_Requid[This_Domain_Number, Test, "1241-0000-01-1104"]
         [] = RP10::Specify_Requid[This_Domain_Number, Test, "1241-0000-01-1105"]
         [] = RP10::Specify_Requid[This_Domain_Number, Test, "1241-0000-01-1109"]
         [] = RP10::Specify_Requid[This_Domain_Number, Test, "1103-0000-01-1311"]
      if Bridge_Test_Passed = TRUE then
         [] = RP1::Test_Passed["DomainB DomainA", Test, Passed_Value, This_Domain_Number]
      else
         [] = RP2::Test_Failed["DomainB DomainA", Test, Failure_Value, This_Domain_Number]
      endif

   $ENDUSE

endif


enddefine
