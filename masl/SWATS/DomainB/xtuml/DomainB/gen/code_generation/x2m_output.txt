domain,DomainB,DomainB,,,,,,
object,Domain_B_Object_SubA,,,,,,,
object,,,,,,,,
object,Domain_B_Object_SubB,,,,,,,
object,,,,,,,,
object,Domain_B_Object_Super,,,,,,,
object,,,,,,,,
object,Object_B,,,,,,,
object,,,,,,,,
object,Object_C,,,,,,,
object,,,,,,,,
object,Object_CD,,,,,,,
object,,,,,,,,
object,Object_D,,,,,,,
object,,,,,,,,
object,Report_Data,,,,,,,
object,,,,,,,,
object,Test_Data,,,,,,,
object,,,,,,,,
type,Test_Enum_Type,public,,,,,,
enumeration,Test_Enum_Type,,,,,,,
enumerator,Sly,,,,,,,
enumerator,,,,,,,,
enumerator,Sandy,,,,,,,
enumerator,,,,,,,,
enumerator,Wes,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
type,,,,,,,,
routine,DomainB,,private,Domain_B_setup,1,,,
codeblock,my_test = create Test_Data with This_Test_Number = 1%0A%0A#Create several instances of Object_B%0Acount = 5%0Aloop%0A   newB = create Object_B with idB = count &\%0A                               ResultB = 0 &\%0A                               Current_State  = 'Idle'%0A%0A   newC = create Object_C with idC = count & \%0A                               a_number = count %0A%0A   newD = create Object_D with idD = count & \%0A                               D_Number = count%0A%0A   newCD = create Object_CD with a_name = "fred"%0A%0A   link newC R1 newD using newCD%0A%0A   count = count - 1%0A   breakif count = 0%0Aendloop%0A%0A%0ASuper1 = create Domain_B_Object_Super with idSUPER_B = 1%0ASub_A1 = create Domain_B_Object_SubA with SubA_Attribute = 1 & A_Text = "Sub A1"%0ASub_B1 = create Domain_B_Object_SubB with SubB_Attribute = 1 & B_Text = "Sub B1"%0A%0Alink Super1 R4 Sub_A1%0A%0ASuper2 = create Domain_B_Object_Super with idSUPER_B = 2%0ASub_A2 = create Domain_B_Object_SubA with SubA_Attribute = 2 & A_Text = "Sub A2"%0ASub_B2 = create Domain_B_Object_SubB with SubB_Attribute = 2 & B_Text = "Sub B2"%0A%0Alink Super2 R4 Sub_B2,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,1,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Domain B setup%0A,,,,,,,
routine,,,,,,,,
routine,DomainB,,private,Perform_domain_B_nav_tests,2,,,
codeblock,#------------------------------------------------------------------------#%0A# Call the domain based synch service directly for navigation of %0A# relationships in DomainA.%0A#------------------------------------------------------------------------#%0A%0A[] = DomainB4::Perform_DomainA_Navigations[]%0A%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,2,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Perform domain B nav tests%0A,,,,,,,
routine,,,,,,,,
routine,DomainB,,private,Start_DomainB_Tests,3,,,
codeblock,[] = DomainB5::Create_Report_Data[]%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,3,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Start DomainB Tests%0A,,,,,,,
routine,,,,,,,,
routine,DomainB,,private,Finish_DomainB_Tests,4,,,
codeblock,# [] = DomainB6::Delete_Report_Data[]%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,4,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Finish DomainB Tests%0A,,,,,,,
routine,,,,,,,,
routine,DomainB,,private,Check_Enumeration_Across_Domain_B,5,,,
codeblock,#------------------------------------------------------------------------#%0A# Check that enumerated type are passed through bridges correctly%0A#------------------------------------------------------------------------#%0A%0A   my_test = find-one Test_Data%0A   Test    = my_test.This_Test_Number%0A%0A   [] = NAV5:Enum_Test[Test%2C 'Sandy']%0A%0A   Test = Test + 1%0A%0A   my_test.This_Test_Number = Test%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,5,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Check_Enumeration_Across_Domain_B%0A,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Sync1B,1,,,
parameter,inputA,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,inputB,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,outputA,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,outputB,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,my_test = find-one Test_Data%0A%0Alocal_test = my_test.This_Test_Number%0A%0A[] = RPT1:Start_Test[local_test%2C "1241-0000-01-1110"%2C "DomainB"%2C "DSS 1"%2C "sync service 1B called"]%0A%0A#Check that input parameters%0Aif (inputA != 1)|(inputB != 2) then%0A%0A   #Return incorrect values%2C because the input values where incorrect%0A   outputA = 1%0A   outputB = 2%0A%0A   [] = RPT3:Test_Failed["DSS 1B"%2C local_test%2C -1]%0A%0Aelse%0A%0A   #Return correct values%2C because the input values where correct%0A   outputA = 3%0A   outputB = 4%0A   #In DomainB indicate that a Sync service call was made%0A   an_instanceB = find-one Object_B where idB = 1%0A   an_instanceB.ResultB = 10%0A%0A   [] = RPT2:Test_Passed["DSS 1B"%2C local_test%2C an_instanceB.ResultB]%0A%0Aendif%0A%0Alocal_test = local_test + 1%0A%0Amy_test.This_Test_Number = local_test%0A%0A,,,,,,,
codeblock,,,,,,,,
description, This synchronous service is invoked by a synchronous service in DomainA.%0A,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Sync2B,2,,,
parameter,inputA,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,inputB,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,outputA,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,outputB,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,%0Amy_test = find-one Test_Data%0A%0Alocal_test = my_test.This_Test_Number%0A%0A[] = RPT1:Start_Test[local_test%2C "1241-0000-01-1110"%2C "DomainB"%2C "DSS 2"%2C "sync service sync2B called "]%0A%0A#Check the input parameters%0Aif (inputA != 3)|(inputB != 4) then%0A%0A   #Return incorrect parameters and don't affect the attribute 'ResultB'%0A   outputA = 1%0A   outputB = 2%0A%0A   [] = RPT3:Test_Failed["DSS 2"%2C local_test%2C -1]%0A%0Aelse%0A%0A   #Return correct parameters and affect the attribute 'ResultB'%0A   an_instanceB = find-one Object_B where idB = 4%0A   temp = an_instanceB.ResultB + 20%0A   an_instanceB.ResultB = temp%0A   outputA = 5%0A   outputB = 6%0A%0A   [] = RPT2:Test_Passed["DSS 2"%2C local_test%2C an_instanceB.ResultB]%0A%0Aendif%0A%0Alocal_test = local_test + 1%0A%0Amy_test.This_Test_Number = local_test%0A,,,,,,,
codeblock,,,,,,,,
description, This synchronous service is invoked by an event being sent to a terminator in DomainA%2C thus an 'Event invokes a Sync service in another domain'.%0A,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Sync3B,3,,,
parameter,inputA,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,inputB,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,outputA,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,outputB,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,my_test = find-one Test_Data%0A%0Alocal_test = my_test.This_Test_Number%0A%0A[] = RPT1:Start_Test[local_test%2C "1241-0000-01-1110"%2C "DomainB"%2C "DSS 3"%2C "sync service sync3B called "]%0A%0Aif inputA = 3 & inputB = 4 then%0A%0A   #Return correct values and indicates that correct values where received%0A   #by affecting the attribute 'ResultB'%0A   an_instanceB = find-one Object_B where idB = 5%0A   an_instanceB.ResultB = 50%0A   outputA = 5%0A   outputB = 6%0A%0A   [] = RPT2:Test_Passed["DSS 3"%2C local_test%2C an_instanceB.ResultB]%0A%0Aelse%0A%0A   #Return incorrect values%2C becaus ethe input values where incorrect%0A   outputA = 1%0A   outputB = 2%0A%0A   [] = RPT3:Test_Failed["DSS 3"%2C local_test%2C -1]%0A%0Aendif%0A%0Alocal_test = local_test + 1%0A%0Amy_test.This_Test_Number = local_test%0A%0A,,,,,,,
codeblock,,,,,,,,
description, This synchronous service is invoked by an event from DomainA%0A,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Perform_DomainA_Navigations,4,,,
codeblock,#------------------------------------------------------------------------#%0A# Call the bridge directly for navigation of relationships in%0A# DomainA.%0A#------------------------------------------------------------------------#%0A%0Amy_test = find-one Test_Data%0A%0A#------------------------------------------------------------------------#%0A%0ALocal_Test = my_test.This_Test_Number%0A%0A[] = NAV1:Navigate_One_to_One[Local_Test]%0A%0A#------------------------------------------------------------------------#%0A%0ALocal_Test = Local_Test + 1%0A%0A[] = NAV2:Navigate_One_to_Many[Local_Test]%0A%0A#------------------------------------------------------------------------#%0A%0ALocal_Test = Local_Test + 1%0A%0A[] = NAV3:Navigate_Many_to_Many[Local_Test]%0A%0A#------------------------------------------------------------------------#%0A%0ALocal_Test = Local_Test + 1%0A%0A[] = NAV4:Misc_Calls[Local_Test]%0A%0A#------------------------------------------------------------------------#%0A%0ALocal_Test = Local_Test + 1%0A%0Amy_test.This_Test_Number = Local_Test%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Create_Report_Data,5,,,
codeblock,# Find out of there already is one of these.%0A# It is not inconceivable that a report object still exists from a previous run.%0A# Report objects are not deleted at the end of a run%2C as certain events may%0A# still be en-queued.%0A%0Aold_report = find-one Report_Data%0A%0Aif old_report != UNDEFINED then%0A   delete old_report%0Aendif%0A%0AMy_Report = create unique Report_Data with Reported_Domain_Number = 0%0A%0A[] = RPT6:Domain_Test_Start["Domain B"]%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Delete_Report_Data,6,,,
codeblock,[] = RPT7:Domain_Test_Finished["Domain B"]%0A%0A# Do not delete the Report_Data object%2C as there may be still events in%0A# the queue.,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Check_Enum,7,,,
parameter,The_Input_Value,in,,,,,,
typeref,Test_Enum_Type,,,,,,,
typeref,,,,,,,,
parameter,The_Return_Value,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,switch The_Input_Value%0A%0A   case 'Sly'%0A      The_Return_Value = 21%0A   case 'Sandy'%0A      The_Return_Value = 22%0A   case 'Wes'%0A      The_Return_Value = 23%0A   default%0A      The_Return_Value = -21%0Aendswitch%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Service_Params,8,,,
parameter,Input_Int,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Input_Real,in,,,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
parameter,Input_Text,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Input_Bool,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,The_Return_Val,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,if Input_Int = 999 then%0A%0A   if Input_Real = 99.9 then%0A%0A      if Input_Text = "Passed From Domain A" then%0A%0A         if Input_Bool = TRUE then%0A            The_Return_Val = 10%0A         else%0A           The_Return_Val = -10%0A         endif%0A%0A      else%0A         The_Return_Val = -20%0A      endif%0A%0A   else%0A      The_Return_Val = -30%0A   endif%0A%0Aelse%0A   The_Return_Val = -40%0Aendif,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,TerminatorB,termB,,,,,,
terminator,,,,,,,,
terminator,Report,RPT,,,,,,
routine,DomainB,,public,Start_Test,1,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Requid,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Purpose,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Test_Passed,2,,,
parameter,Test_Object_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Test_Failed,3,,,
parameter,Failed_Domain_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Failed_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Failed_Test_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Test_Unsupported,4,,,
parameter,Unsupported_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Test_Text,5,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Free_Text,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Domain_Test_Start,6,,,
parameter,This_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Domain_Test_Finished,7,,,
parameter,This_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Specify_Requid,8,,,
parameter,Requid_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,The_Requid_Itself,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
terminator,Navigate,NAV,,,,,,
routine,DomainB,,public,Navigate_One_to_One,1,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Navigate_One_to_Many,2,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Navigate_Many_to_Many,3,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Misc_Calls,4,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,DomainB,,public,Enum_Test,5,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Enum_Input,in,,,,,,
typeref,Test_Enum_Type,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
description, Navigate relationships in domainA%0A,,,,,,,
terminator,,,,,,,,
associative,R1,DomainB,Object_CD,,,,,
participation,DomainB,Object_C,controls,conditionally,many,DomainB,Object_D,
participation,DomainB,Object_D,is_controlled_by,conditionally,many,DomainB,Object_C,
participation,,,,,,,,
associative,R1,DomainB,Object_CD,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Object_D",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Object_C",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
associative,,,,,,,,
subsuper,R4,,,,,,,
participation,,Domain_B_Object_Super,,,,,,
participation,,Domain_B_Object_SubA,,,,,Domain_B_Object_Super,
participation,,Domain_B_Object_SubB,,,,,Domain_B_Object_Super,
participation,,,,,,,,
subsuper,,,,,,,,
object,Domain_B_Object_SubA,DOMAIN_B_SUBA,7,,,,,
attribute,idSUPER_B,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R4,,,,idSUPER_B,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,SubA_Attribute,,,idSUPER_B,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,A_Text,,,SubA_Attribute,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Domain_B_Object_SubB,DOMAIN_B_SUBB,8,,,,,
attribute,idSUPER_B,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R4,,,,idSUPER_B,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,SubB_Attribute,,,idSUPER_B,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,B_Text,,,SubB_Attribute,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Domain_B_Object_Super,DOMAIN_B_SUPER,6,,,,,
attribute,idSUPER_B,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Object_B,objB,4,,,,,
attribute,idB,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,ResultB,,,idB,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
state,,Object_B,Idle,,1,,,
codeblock,###### There is no ASL for this state ######,,,,,,,
codeblock,,,,,,,,
description, Idle state.%0A No action taken.%0A,,,,,,,
state,,,,,,,,
state,,Object_B,Sync_service_DomainA_to_an_event_DomainB,,2,,,
parameter,paramA,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,paramB,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#------------------------------------------------------------------------#%0A# Synchronous service in DomainA invokes an event in DomainB%0A#------------------------------------------------------------------------#%0A%0A   my_test = find-one Test_Data%0A%0A   Local_Test = my_test.This_Test_Number%0A%0A   # Initialise the fault flag%0A   has_failed = FALSE%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1241-0000-01-1110"%2C "DomainB"%2C "objB"%2C "Rx sync call from domainA"]%0A%0A#------------------------------------------------------------------------#%0A# Check the event parameters%0A#------------------------------------------------------------------------#%0A%0A   if (paramA != 3)|(paramB != 4) then%0A      has_failed = TRUE%0A   endif%0A%0A#------------------------------------------------------------------------#%0A# Test complete %0A#------------------------------------------------------------------------#%0A%0A   if has_failed = FALSE then%0A      # Indicate that the test was successful and complete%0A      this.ResultB = 20%0A      [] = RPT2:Test_Passed["objB"%2C Local_Test%2C this.ResultB]%0A      generate objB3:Finished() to this%0A   else%0A      # Indicate that the test failed%0A      [] = RPT3:Test_Failed["objB"%2C Local_Test%2C paramA]%0A      generate objB2:Fault() to this%0A   endif%0A%0A#------------------------------------------------------------------------#%0A%0A   Local_Test = Local_Test + 1%0A%0A   my_test.This_Test_Number = Local_Test%0A%0A   # Bit of a hack%2C but this is the last test to be popped off the queue%2C so%0A   # tell the report domain that it's all over.%0A%0A   [] = DomainB6::Delete_Report_Data[],,,,,,,
codeblock,,,,,,,,
description, This state verifies that it is possible for a synchronous%0A service in DomainA to invoke an event into DomainB.%0A,,,,,,,
state,,,,,,,,
state,,Object_B,Fail,,3,,,
description, An instance current state is changed to fail%0A if the test failed and the attribute 'ResultB'%0A is not updated.%0A,,,,,,,
state,,,,,,,,
event,event1_from_DomainA,,1,,,,,
parameter,paramA,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,paramB,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,Fault,,2,,,,,
event,,,,,,,,
event,Finished,,3,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,event1_from_DomainA,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Fault,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Finished,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,event1_from_DomainA,Sync_service_DomainA_to_an_event_DomainB,,,
transition,,,,,,,,
transition,Idle,,,Fault,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Finished,Cannot_Happen,,,
transition,,,,,,,,
transition,Sync_service_DomainA_to_an_event_DomainB,,,event1_from_DomainA,Cannot_Happen,,,
transition,,,,,,,,
transition,Sync_service_DomainA_to_an_event_DomainB,,,Fault,Fail,,,
transition,,,,,,,,
transition,Sync_service_DomainA_to_an_event_DomainB,,,Finished,Idle,,,
transition,,,,,,,,
transition,Fail,,,event1_from_DomainA,Cannot_Happen,,,
transition,,,,,,,,
transition,Fail,,,Fault,Cannot_Happen,,,
transition,,,,,,,,
transition,Fail,,,Finished,Cannot_Happen,,,
transition,,,,,,,,
transitiontable,,,,,,,,
object,,,,,,,,
object,Object_C,objC,2,,,,,
attribute,idC,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,a_number,,,idC,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Object_CD,objCD,5,,,,,
attribute,idC,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R1,,is_controlled_by,Object_C,idC,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,idD,preferred,,idC,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R1,,controls,Object_D,idD,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,a_name,,,idD,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
description, Referential object for many to many relationships Object_C ObjectD%0A,,,,,,,
object,,,,,,,,
object,Object_D,objD,3,,,,,
attribute,idD,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,D_Number,,,idD,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Report_Data,RD,9,,,,,
attribute,Report_Data_Unique_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Reported_Domain_Number,,,Report_Data_Unique_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Test_Data,TD,10,,,,,
attribute,This_Test_Number,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
pragma,version,,,,,,,
pragmaitem,12,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, For use in multiple domain builds.%0A,,,,,,,
domain,,,,,,,,
