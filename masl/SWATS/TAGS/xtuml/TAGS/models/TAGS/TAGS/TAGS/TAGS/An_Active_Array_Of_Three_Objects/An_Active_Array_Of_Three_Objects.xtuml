-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("89d3600e-95f8-4c83-a3e5-b533f6572c33",
	'An_Active_Array_Of_Three_Objects',
	9,
	'AAAOTO',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("5e0f707f-5c61-4154-be1e-8fbd75374d47",
	"89d3600e-95f8-4c83-a3e5-b533f6572c33",
	'Do_Active_Many_Array_Tests',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'#-----------------------------------------------------------------------------
# The array of 1 should be treated exactly the same way as an object tagged
# SINGLETON.
#-----------------------------------------------------------------------------
# @@TAGS-01-0005
# Create first of the single active array objects.

my_test = find-one Test_Data

Test = my_test.Number
This_Environment = my_test.Environment

if This_Environment = ''WACA'' then 
   Supported = TRUE
else
   Supported = FALSE
endif

#-----------------------------------------------------------------------------
# Test 1 - Create first, second & third instances of the object
#          This will be an asynchronous test.
#-----------------------------------------------------------------------------

   First_Of_Three  = create unique An_Active_Array_Of_Three_Objects with Result = 0 & Current_State = ''Idle''
   Second_Of_Three = create unique An_Active_Array_Of_Three_Objects with Result = 0 & Current_State = ''Idle''
   Third_Of_Three  = create unique An_Active_Array_Of_Three_Objects with Result = 0 & Current_State = ''Idle''

   Value_To_Add = 10
   Expected_Result_Value = 10
  
   generate AAAOTO1:Start(Test, Value_To_Add, "Create first object", Expected_Result_Value) to First_Of_Three

   Test = Test + 1

# End Test 1
#-----------------------------------------------------------------------------
# Test 2
#-----------------------------------------------------------------------------

   generate AAAOTO1:Start(Test, Value_To_Add, "Create second object", Expected_Result_Value) to Second_Of_Three

   Test = Test + 1

# End Test 2

#-----------------------------------------------------------------------------
# Test 3
#-----------------------------------------------------------------------------

   generate AAAOTO1:Start(Test, Value_To_Add, "Create third object", Expected_Result_Value) to Third_Of_Three

   Test = Test + 1

# End Test 3

#-----------------------------------------------------------------------------
# Test 4 - This will be a synchronous test.
#-----------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test, "Null Requid", "Tagging", "Multiple Array Active Object", "Inhibit fourth instance"]

   # Fourth_Of_Three = create unique An_Active_Array_Of_Three_Objects with Result = 0 & Current_State = ''Idle''
   # {Set_Of_Multiple_Array} = find-all An_Active_Array_Of_Three_Objects
   # Number_Of_Multiple_Array = countof {Set_Of_Multiple_Array}
   # Should only be 3, but reporter widget expects a zero in the Failure field for a pass.
   # So if there are more than one instances found, this should be reported as an
   # error.
   # Failure_Value = Number_Of_Multiple_Array - 3
   # [] = TAGS5::Report_Now[Test, "Inhibit fourth instance", Failure_Value, Supported]

   [] = RPT4:Test_Unsupported[Test]

   Test = Test + 1

# End Test 4

#-----------------------------------------------------------------------------
# Test 5 - Prove that the instance handle for the second instance is UNDEFINED
#          , or in ada''s case, NULL.
#-----------------------------------------------------------------------------

   [] = RPT1:Start_Test[Test, "Null Requid", "Tagging", "Multiple Array Active Object", "Fourth instance is null"]


   # if Fourth_Of_Three = UNDEFINED then
   #   Failure_Value = 0
   # else
   #   Failure_Value = 1
   #   # It isn''t supposed to be here, so get rid of it.
   #   delete Fourth_Of_Three
   # endif
   # [] = TAGS5::Report_Now[Test, "Fourth instance is null", Failure_Value, Supported]

   [] = RPT4:Test_Unsupported[Test]

# End Test 5

#-----------------------------------------------------------------------------
# Test 6 - Perform some synchronous tests as a result of this asynchronous 
#          service.
#-----------------------------------------------------------------------------

   generate AAAOTO4:Do_More() to First_Of_Three
   generate AAAOTO4:Do_More() to Second_Of_Three
   generate AAAOTO4:Do_More() to Third_Of_Three

   # Prove that the first legal instance can be deleted and a new one created in it''s place.
   # This processing will be done when the event is unqueued. It shall effectively delete
   # First_Of_Three instance, and create a new one and generate an event to the new instance
   # to prove that it can execute its'' state machine correctly.

   # In the wrong hands, this could turn into a recursive call. If the Phoenix event was sent to
   # the new instance in the state machine by the deleted state machine, there would be no return. 
   # Ever.

   generate AAAOTO3:Phoenix() to First_Of_Three
   generate AAAOTO3:Phoenix() to Second_Of_Three
   generate AAAOTO3:Phoenix() to Third_Of_Three
 
   Test = Test + 1

# End Test 6

#-----------------------------------------------------------------------------
# Finally increment the test number to show the next available number.
#-----------------------------------------------------------------------------

my_test.Number = Test',
	3,
	'',
	"00000000-0000-0000-0000-000000000000",
	2,
	1);
INSERT INTO O_NBATTR
	VALUES ("815113a3-24fd-4bde-9b36-51dd781d6886",
	"89d3600e-95f8-4c83-a3e5-b533f6572c33");
INSERT INTO O_BATTR
	VALUES ("815113a3-24fd-4bde-9b36-51dd781d6886",
	"89d3600e-95f8-4c83-a3e5-b533f6572c33");
INSERT INTO O_ATTR
	VALUES ("815113a3-24fd-4bde-9b36-51dd781d6886",
	"89d3600e-95f8-4c83-a3e5-b533f6572c33",
	"00000000-0000-0000-0000-000000000000",
	'Unique_Identifier',
	'',
	'',
	'Unique_Identifier',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("08232f07-c5f4-42fd-9cea-16cdaa2701f0",
	"89d3600e-95f8-4c83-a3e5-b533f6572c33");
INSERT INTO O_BATTR
	VALUES ("08232f07-c5f4-42fd-9cea-16cdaa2701f0",
	"89d3600e-95f8-4c83-a3e5-b533f6572c33");
INSERT INTO O_ATTR
	VALUES ("08232f07-c5f4-42fd-9cea-16cdaa2701f0",
	"89d3600e-95f8-4c83-a3e5-b533f6572c33",
	"815113a3-24fd-4bde-9b36-51dd781d6886",
	'Result',
	'',
	'',
	'Result',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("9e7981bf-c3cd-4fb2-8ff8-671d2f8d700b",
	"89d3600e-95f8-4c83-a3e5-b533f6572c33");
INSERT INTO O_BATTR
	VALUES ("9e7981bf-c3cd-4fb2-8ff8-671d2f8d700b",
	"89d3600e-95f8-4c83-a3e5-b533f6572c33");
INSERT INTO O_ATTR
	VALUES ("9e7981bf-c3cd-4fb2-8ff8-671d2f8d700b",
	"89d3600e-95f8-4c83-a3e5-b533f6572c33",
	"08232f07-c5f4-42fd-9cea-16cdaa2701f0",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"89d3600e-95f8-4c83-a3e5-b533f6572c33");
INSERT INTO O_OIDA
	VALUES ("815113a3-24fd-4bde-9b36-51dd781d6886",
	"89d3600e-95f8-4c83-a3e5-b533f6572c33",
	0,
	'Unique_Identifier');
INSERT INTO O_ID
	VALUES (1,
	"89d3600e-95f8-4c83-a3e5-b533f6572c33");
INSERT INTO O_ID
	VALUES (2,
	"89d3600e-95f8-4c83-a3e5-b533f6572c33");
INSERT INTO PE_PE
	VALUES ("89d3600e-95f8-4c83-a3e5-b533f6572c33",
	1,
	"97ccba9b-7830-4d11-b941-6163c0feb8f6",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("97ccba9b-7830-4d11-b941-6163c0feb8f6",
	"00000000-0000-0000-0000-000000000000",
	"a542633e-604c-4486-989d-46d152510a33",
	'TAGS',
	'',
	0,
	'../TAGS.xtuml');
