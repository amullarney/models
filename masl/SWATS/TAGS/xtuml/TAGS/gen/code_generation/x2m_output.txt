domain,TAGS,Tagging,,,,,,
object,Active_Tagged_Many_Left,,,,,,,
object,,,,,,,,
object,Active_Tagged_Many_Objects,,,,,,,
object,,,,,,,,
object,Active_Tagged_Many_Right,,,,,,,
object,,,,,,,,
object,Active_Tagged_Single_Assoc,,,,,,,
object,,,,,,,,
object,Active_Tagged_Single_Object,,,,,,,
object,,,,,,,,
object,Active_Tagged_Subtype_One,,,,,,,
object,,,,,,,,
object,Active_Tagged_Subtype_Three,,,,,,,
object,,,,,,,,
object,Active_Tagged_Subtype_Two,,,,,,,
object,,,,,,,,
object,Active_Tagged_Supertype,,,,,,,
object,,,,,,,,
object,An_Active_Array_Of_One_Object,,,,,,,
object,,,,,,,,
object,An_Active_Array_Of_Three_Objects,,,,,,,
object,,,,,,,,
object,An_Active_Object,,,,,,,
object,,,,,,,,
object,A_Multiple_Static_Object,,,,,,,
object,,,,,,,,
object,A_Passive_Array_Of_One_Object,,,,,,,
object,,,,,,,,
object,A_Passive_Array_Of_Three_Objects,,,,,,,
object,,,,,,,,
object,A_Passive_Static_Object,,,,,,,
object,,,,,,,,
object,A_Single_Static_Object,,,,,,,
object,,,,,,,,
object,A_Static_Object,,,,,,,
object,,,,,,,,
object,Check_On_Active_Object,,,,,,,
object,,,,,,,,
object,Just_Multiple,,,,,,,
object,,,,,,,,
object,Many_Tagged_Objects,,,,,,,
object,,,,,,,,
object,Multiplicity_Glitch_Recovery,,,,,,,
object,,,,,,,,
object,Multiplicity_Single_Glitch_Recovery_Object,,,,,,,
object,,,,,,,,
object,Report_Data,,,,,,,
object,,,,,,,,
object,Singleton_Glitch_Recovery,,,,,,,
object,,,,,,,,
object,Single_Tagged_Object,,,,,,,
object,,,,,,,,
object,Subtype_1,,,,,,,
object,,,,,,,,
object,Subtype_2,,,,,,,
object,,,,,,,,
object,Tagged_Many_Left,,,,,,,
object,,,,,,,,
object,Tagged_Many_Right,,,,,,,
object,,,,,,,,
object,Tagged_Many_Supertype,,,,,,,
object,,,,,,,,
object,Tagged_Single_Assoc,,,,,,,
object,,,,,,,,
object,Test_Data,,,,,,,
object,,,,,,,,
type,Environment_Type,private,,,,,,
enumeration,Environment_Type,,,,,,,
enumerator,WACA,,,,,,,
enumerator,,,,,,,,
enumerator,ISIM,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
description, @@TAGS-01-0009%0A,,,,,,,
type,,,,,,,,
type,A_Tagged_Integer_Type,private,integer,,,,,
range,1,100,,,,,,
range,,,,,,,,
description, a tagged integer with range 1 to 100%0A,,,,,,,
type,,,,,,,,
routine,TAGS,,private,Start_TAGGED_Tests,1,,,
codeblock,[] = TAGS2::Create_Report_Data[]%0A%0A# Find the test details. If they already exist%2C it's because an external%0A# created them%2C and this must be an I-SIM environment.%0A%0Amy_test = find-one Test_Data%0A%0Aif my_test = UNDEFINED then%0A%0A   # Stick a 'C' insert here to attempt to set an attribute.%0A   Test_Details = create unique Test_Data with Number = 0 & Environment = 'WACA' & Current_State = 'Idle'%0A%0A   # Use this function to set the test number to 1 using a 'C' insert%0A   # if it returns set%2C then this must be I-SIM else WACA.%0A   [Test_Details] = TAGS6::Set_Environment[Test_Details]%0A%0A   if Test_Details.Number = 1 then%0A      Test_Details.Environment = 'ISIM'%0A   else%0A      Test_Details.Number      = 1%0A      Test_Details.Environment = 'WACA'%0A   endif%0A %0Aendif,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,1,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Start_TAGGED_Tests%0A,,,,,,,
routine,,,,,,,,
routine,TAGS,,private,Perform_Passive_Static_Tests,2,,,
codeblock,my_test = find-one Test_Data%0A%0ATest      = my_test.Number%0ALast_Test = 0%0A%0A#--------------------------------------------------------------------------%0A# Test 1%0A#--------------------------------------------------------------------------%0A%0A   [Last_Test] = TAGS1::Perform_Unique_Passive_Singleton_Object_Tests[Test]%0A%0A   Test = Last_Test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2%0A#--------------------------------------------------------------------------%0A%0A   [Last_Test]  = TAGS4::Perform_Passive_Singleton_Object_Tests[Test]%0A%0A   Test = Last_Test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A%0Amy_test.Number = Test,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,2,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Perform_Passive_Static_Tests%0A,,,,,,,
routine,,,,,,,,
routine,TAGS,,private,Perform_Active_Object_Tests,3,,,
codeblock,#--------------------------------------------------------------------------%0A# This scenario should always be called last%2C and the Test value be updated %0A# with the next available test number.%0A#--------------------------------------------------------------------------%0A%0Amy_test = find-one Test_Data%0A%0ATest = my_test.Number%0A%0ARestart_Check_Object = TRUE%0AFinish_Check_Object  = FALSE%0A%0AFind_It = TRUE%0ALose_It = FALSE%0A%0A# Create object for checking the results of the actions on the active object%0AHow_Was_It_For_You = create unique Check_On_Active_Object with Current_State = 'Idle'%0A%0A#--------------------------------------------------------------------------%0A# Test 1 - Create an active object tagged as singleton.%0A#--------------------------------------------------------------------------%0A%0A   Create_And_Delete_Active_Object = create unique An_Active_Object with Current_State = 'Idle'%0A%0A   delete Create_And_Delete_Active_Object%0A%0A   Expected_Result = 0%0A%0A   # Make sure that the active object has indeed gone.%0A   generate CHECK1:Start(Test%2C                            \%0A                         Create_And_Delete_Active_Object%2C \%0A                         "Create and Delete active"%2C      \%0A                         Expected_Result%2C                 \%0A                         Lose_It%2C                         \%0A                         Restart_Check_Object) to How_Was_It_For_You   %0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2 - This test shall cause the active object to transition from Idle%0A#          to Act and then back to Idle.%0A#--------------------------------------------------------------------------%0A%0A   Base_Value_To_Start_With = 1%0A   Expected_Result          = 101%0A%0A   First_Active_Object = create unique An_Active_Object with Result        = 0 &\ %0A                                                             Current_State = 'Idle'%0A%0A   generate AAO1:Start_Your_Engines(Base_Value_To_Start_With) to First_Active_Object%0A%0A   generate AAO2:Switch_Off() to First_Active_Object%0A%0A   generate CHECK1:Start(Test%2C                       \%0A                         First_Active_Object%2C        \%0A                         "Create and Delete active"%2C \%0A                         Expected_Result%2C            \%0A                         Find_It%2C                    \%0A                         Restart_Check_Object) to How_Was_It_For_You%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A# Test 3 - This test shall cause the previously defined active object to%0A#          transition from Idle to Act and then back to Idle.%0A#--------------------------------------------------------------------------%0A%0A   Base_Value_To_Start_With = 2%0A   Expected_Result          = 203%0A%0A   generate AAO1:Start_Your_Engines(Base_Value_To_Start_With) to First_Active_Object%0A %0A   generate AAO2:Switch_Off() to First_Active_Object%0A%0A   generate CHECK1:Start(Test%2C                             \%0A                         First_Active_Object%2C              \%0A                         "Create and Delete active again"%2C \%0A                         Expected_Result%2C                  \%0A                         Find_It%2C                          \%0A                         Restart_Check_Object) to How_Was_It_For_You%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#--------------------------------------------------------------------------%0A# Test 4 - This test shall cause the previously defined active object to%0A#          transition from Idle to Act and then to Terminate.%0A#--------------------------------------------------------------------------%0A%0A   Base_Value_To_Start_With = 3%0A   Expected_Result          = 216%0A%0A   generate AAO1:Start_Your_Engines(Base_Value_To_Start_With) to First_Active_Object%0A%0A   generate AAO3:Floor_It() to First_Active_Object%0A%0A   generate CHECK1:Start(Test%2C                             \%0A                         First_Active_Object%2C              \%0A                         "Create and Delete to Terminate"%2C \%0A                         Expected_Result%2C                  \%0A                         Find_It%2C                          \%0A                         Restart_Check_Object) to How_Was_It_For_You%0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A#--------------------------------------------------------------------------%0A# Test 5%0A#--------------------------------------------------------------------------%0A%0A   Expected_Result = 0%0A%0A   generate AAO4:Crash_It() to First_Active_Object%0A%0A   generate CHECK1:Start(Test%2C                  \%0A                         First_Active_Object%2C   \%0A                         "Terminate to Expire"%2C \%0A                         Expected_Result%2C       \%0A                         Lose_It%2C               \%0A                         Restart_Check_Object) to How_Was_It_For_You%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A#--------------------------------------------------------------------------%0A%0Amy_test.Number = Test%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,3,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Perform_Active_Object_Tests%0A,,,,,,,
routine,,,,,,,,
routine,TAGS,,private,Perform_Passive_Array_Tests,4,,,
codeblock,# Separate requirement tag test%0A# @@TAGS-01-0012%0Amy_test = find-one Test_Data%0A%0Aif my_test.Environment = 'WACA' then%0A   This_Is_WACA = TRUE%0Aelse%0A   This_Is_WACA = FALSE%0Aendif%0A%0ATest = my_test.Number%0ALast_Test = 0%0A%0A#--------------------------------------------------------------------------%0A# Test 1%0A#--------------------------------------------------------------------------%0A%0A   [Last_Test] = TAGS8::Perform_Passive_Array_of_1_Object_Tests[Test%2CThis_Is_WACA]%0A%0A   Test = Last_Test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2%0A#--------------------------------------------------------------------------%0A%0A   [Last_Test] = TAGS7::Perform_Passive_Array_of_3_Objects_Tests[Test%2CThis_Is_WACA]%0A%0A   Test = Last_Test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A# Test 3 - Create three passive data objects for Just Multiple%0A#--------------------------------------------------------------------------%0A%0A   JM1 = create Just_Multiple with idJM = 1%0A   JM2 = create Just_Multiple with idJM = 1%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "TAGGING"%2C  "Multiple object"%2C "Create two"]%0A%0A   # Return count of A_Passive_Array_Of_Three_Objects%0A   {set_of_objects} = find-all Just_Multiple%0A%0A   total_count = countof {set_of_objects}%0A%0A   if total_count = 2 then%0A      [] = RPT2:Test_Passed["Created two"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Failed to create two"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "TAGGING"%2C "Multiple object"%2C "Delete one"]%0A%0A   # Delete 1 of passive objects%0A%0A   delete JM2%0A%0A   {set_of_objects} = find-all Just_Multiple%0A   %0A   total_count = countof {set_of_objects}%0A%0A   if total_count = 1 then%0A      [] = RPT2:Test_Passed["Delete one"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Failed to delete one"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A# Test 3 - Create extra passive object%2C total of three%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "TAGGING"%2C "Multiple object"%2C "Add one"]%0A%0A   replacement_object = create Just_Multiple with idJM = 3%0A%0A   # Return count of A_Passive_Array_Of_Three_Objects%0A   {set_of_objects} = find-all Just_Multiple%0A%0A   total_count = countof {set_of_objects}%0A%0A   if total_count = 2 then%0A      [] = RPT2:Test_Passed["Add one"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Failed to add one"%2C Test%2C -10]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#--------------------------------------------------------------------------%0A# Test 5 - Attempt to delete all objects%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "TAGGING"%2C "Passive Array 3 UNIQUE object"%2C "Delete all objects"]%0A%0A   # Return count of A_Passive_Array_Of_Three_Objects%0A%0A   {set_of_objects} = find-all Just_Multiple%0A   total_count = countof {set_of_objects}%0A%0A   if total_count = 2 then%0A      # Delete all objects%0A      for each_object in {set_of_objects} do%0A         delete each_object%0A      endfor%0A%0A      {set_of_objects} = find-all Just_Multiple%0A      total_count = countof {set_of_objects}%0A%0A      if total_count = 0 then%0A         new_object = create Just_Multiple with idJM = 1%0A%0A         # Check that it is defined%0A         if new_object != UNDEFINED then%0A            {set_of_objects} = find-all Just_Multiple%0A            total_count = countof {set_of_objects}%0A%0A            # and only one now exists%0A            if total_count = 1 then %0A%0A               delete new_object%0A%0A               [] = RPT2:Test_Passed["Deleted all"%2C Test%2C 0]%0A            else%0A               [] = RPT3:Test_Failed["Failed to delete all"%2C Test%2C -10]%0A            endif%0A%0A         else%0A            [] = RPT3:Test_Failed["Failed to delete all"%2C Test%2C -20]%0A         endif%0A%0A      else%0A         [] = RPT3:Test_Failed["Failed to delete all"%2C Test%2C -30]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["Failed to delete all"%2C Test%2C -40]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A#--------------------------------------------------------------------------%0A%0Amy_test.Number = Test,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,4,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Perform_Passive_Array_Tests%0A,,,,,,,
routine,,,,,,,,
routine,TAGS,,private,Finish_TAGGED_Tests,5,,,
codeblock,my_test = find-one Test_Data%0A%0Agenerate TD1:Tests_Are_Over() to my_test%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,5,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Finish_TAGGED_Tests%0A,,,,,,,
routine,,,,,,,,
routine,TAGS,,private,Perform_Active_Array_Tests,6,,,
codeblock,[] = AAAOTO1:Do_Active_Many_Array_Tests[]%0A%0A[] = AAAOOO1:Do_Active_Single_Array_Tests[]%0A%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,6,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Perform_Active_Array_Tests%0A,,,,,,,
routine,,,,,,,,
routine,TAGS,,private,Perform_Single_To_Many_Navigations,7,,,
codeblock,[] = TAGS9::Perform_One_To_Many_Tests[]%0A%0A[] = TAGS10::Perform_Active_One_To_Many_Tests[]%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,7,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Perform_Single_To_Many_Navigations%0A,,,,,,,
routine,,,,,,,,
routine,TAGS,,private,Perform_Terminator_Tag_Tests,8,,,
codeblock,# Perform calls to tagged terminator and untagged terminator%0A%0AMy_Test = find-one Test_Data%0A%0AThe_Test_Number = My_Test.Number%0A%0AWhere_Are_We = My_Test.Environment%0A%0A#--------------------------------------------------------------------------%0A# Test 1 - Call tagged local terminator%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[The_Test_Number%2C "1241-0000-01-1111"%2C "Tagging"%2C "Terminators"%2C "Tagged locally defined"]%0A   [] = RPT8:Specify_Requid[The_Test_Number%2C "1101-0000-01-0112"]%0A%0A   Local_Input_Parameter = 1%0A   Local_Output_Parameter = 0%0A%0A   [Local_Output_Parameter] = TT1:A_Tagged_Local_Terminator[Local_Input_Parameter]%0A%0A   if Where_Are_We = 'WACA' then%0A%0A      if Local_Output_Parameter = Local_Input_Parameter then%0A         [] = RPT3:Test_Failed["Tagged locally defined"%2CThe_Test_Number%2C  -1]%0A      else%0A         [] = RPT2:Test_Passed["Tagged locally defined"%2CThe_Test_Number%2C  0]%0A      endif%0A%0A   else%0A      [] = RPT4:Test_Unsupported[The_Test_Number]%0A   endif%0A%0A   The_Test_Number = The_Test_Number + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2 - Call tagged project terminator%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[The_Test_Number%2C "1241-0000-01-1111"%2C "Tagging"%2C "Terminators"%2C "Untagged local defined"]%0A %0A   Local_Input_Parameter = 1%0A   Local_Output_Parameter = 0%0A%0A   [Local_Output_Parameter] = UT1:An_Untagged_Local_Terminator[Local_Input_Parameter]%0A%0A   if Where_Are_We = 'WACA' then%0A%0A      if Local_Output_Parameter != Local_Input_Parameter then%0A         [] = RPT3:Test_Failed["Untagged local defined"%2CThe_Test_Number%2C  Local_Output_Parameter]%0A      else%0A         [] = RPT2:Test_Passed["Untagged local defined"%2CThe_Test_Number%2C  0]%0A      endif%0A%0A   else%0A      [] = RPT4:Test_Unsupported[The_Test_Number]%0A   endif%0A%0A   The_Test_Number = The_Test_Number + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A# Test 3 - Call local untagged terminator%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[The_Test_Number%2C "1241-0000-01-1111"%2C "Tagging"%2C "Terminators"%2C "Tagged project defined"]%0A   [] = RPT8:Specify_Requid[The_Test_Number%2C "1101-0000-01-0112"]%0A%0A   Local_Input_Parameter = 1%0A   Local_Output_Parameter = 0%0A%0A   [Local_Output_Parameter] = TT3:A_Tagged_Project_Terminator[Local_Input_Parameter]%0A%0A   if Where_Are_We = 'WACA' then%0A%0A      if Local_Output_Parameter = Local_Input_Parameter then%0A         [] = RPT3:Test_Failed["Tagged project defined"%2CThe_Test_Number%2C  Local_Output_Parameter]%0A      else%0A         [] = RPT2:Test_Passed["Tagged project defined"%2CThe_Test_Number%2C  0]%0A      endif%0A%0A   else%0A      [] = RPT4:Test_Unsupported[The_Test_Number]%0A   endif%0A%0A   The_Test_Number = The_Test_Number + 1%0A%0A# End Test 3%0A%0A#--------------------------------------------------------------------------%0A# Test 4 - Call untagged project terminator%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[The_Test_Number%2C "1241-0000-01-1111"%2C "Tagging"%2C "Terminators"%2C "Untagged project defined"]%0A%0A   Local_Input_Parameter = 1%0A   Local_Output_Parameter = 0%0A%0A   [Local_Output_Parameter] = UT2:An_Untagged_Project_Terminator[Local_Input_Parameter]%0A%0A   if Where_Are_We = 'WACA' then%0A%0A      if Local_Output_Parameter != Local_Input_Parameter then%0A         [] = RPT3:Test_Failed["Untagged project defined"%2CThe_Test_Number%2C  -1]%0A      else%0A         [] = RPT2:Test_Passed["Untagged project defined"%2CThe_Test_Number%2C  0]%0A      endif%0A%0A   else%0A      [] = RPT4:Test_Unsupported[The_Test_Number]%0A   endif%0A%0A   The_Test_Number = The_Test_Number + 1%0A%0A# End Test 4%0A%0A#--------------------------------------------------------------------------%0A# Test 5%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[The_Test_Number%2C "1241-0000-01-1111"%2C "Tagging"%2C "Terminators"%2C "Two tagged called from untagged terminator"]%0A%0A   This_Result = FALSE%0A%0A   [This_Result] = TD1:Call_Tagged_Terminators[]%0A%0A   if Where_Are_We = 'WACA' then%0A%0A      if This_Result = FALSE then%0A         [] = RPT3:Test_Failed["Two tagged called from untagged terminator"%2CThe_Test_Number%2C  -1]%0A      else%0A         [] = RPT2:Test_Passed["Two tagged called from untagged terminator"%2CThe_Test_Number%2C  0]%0A      endif%0A%0A   else%0A      [] = RPT4:Test_Unsupported[The_Test_Number]%0A   endif%0A%0A   The_Test_Number = The_Test_Number + 1%0A%0A# End Test 5%0A%0A#--------------------------------------------------------------------------%0A%0AMy_Test.Number = The_Test_Number,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,8,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Perform_Terminator_Tag_Tests%0A,,,,,,,
routine,,,,,,,,
routine,TAGS,,private,Perform_Glitch_Recovery_Tests,9,,,
codeblock,My_Test = find-one Test_Data%0A%0AThe_Test_Number = My_Test.Number%0A%0AFailure_Code = 0%0A%0ATest_Integer = 55%0ATest_Boolean = TRUE%0ATest_Real    = 1234.56%0ATest_Environment = My_Test.Environment%0A%0A#--------------------------------------------------------------------------%0A# Test 1 - Glitch Recovery Object must be tagged either Singleton or %0A#          Multiplicity.%0A#          If it isn't%2C the new object will not be created at the same%0A#          memory location.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[The_Test_Number%2C "1241-0000-01-0129"%2C "Glitch Recovery"%2C "Singleton"%2C "Recreate at same location"]%0A   [] = RPT8:Specify_Requid[The_Test_Number%2C "1241-0000-01-0130"]%0A%0A   First_Object = create unique Singleton_Glitch_Recovery with An_Integer  = Test_Integer &\%0A                                                               A_Boolean   = Test_Boolean &\%0A                                                               A_Real      = Test_Real    &\%0A                                                               Environment = Test_Environment%0A%0A   if First_Object = UNDEFINED then%0A      # Test has fallen at the first hurdle%0A      Failure_Code = -1%0A   else%0A      delete First_Object%0A%0A      if Test_Environment = 'WACA' then%0A         # For Ada runs on host or Target%2C only create this object without%0A         # specifying the attributes.%0A         Second_Object = create unique Singleton_Glitch_Recovery%0A      else%0A         # This is for a ISIM run%2C obviously it should always pass.%0A         Second_Object = create unique Singleton_Glitch_Recovery with An_Integer  = Test_Integer &\%0A                                                                      A_Boolean   = Test_Boolean &\%0A                                                                      A_Real      = Test_Real    &\%0A                                                                      Environment = Test_Environment%0A      endif%0A%0A      if Second_Object.An_Integer = Test_Integer then%0A%0A         if Second_Object.A_Boolean = Test_Boolean then%0A%0A            if Second_Object.A_Real = Test_Real then%0A%0A               if Second_Object.Environment = Test_Environment then%0A                  Failure_Code = 0%0A               else%0A                  Failure_Code = -2%0A               endif%0A%0A            else%0A               Failure_Code = -3%0A            endif%0A%0A         else%0A            Failure_Code = -4%0A         endif%0A%0A      else%0A         Failure_Code = -5%0A      endif%0A%0A      delete Second_Object%0A%0A   endif%0A%0A   if Failure_Code = 0 then%0A      [] = RPT2:Test_Passed["Singleton glitch"%2CThe_Test_Number%2C Failure_Code]%0A   else%0A      [] = RPT3:Test_Failed["Singleton glitch"%2CThe_Test_Number%2C Failure_Code]%0A   endif%0A%0A   The_Test_Number = The_Test_Number + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2%0A#--------------------------------------------------------------------------%0A%0A   int_one = 10%0A   int_two = 20%0A   int_three = 30%0A%0A   [] = RPT1:Start_Test[The_Test_Number%2C "1241-0000-01-0129"%2C "Glitch Recovery"%2C "Multiplicity"%2C "Recreate different name at same location"]%0A   [] = RPT8:Specify_Requid[The_Test_Number%2C "1241-0000-01-0130"]%0A%0A   # Create three objects tagged MULTIPLICITY.%0A%0A   Multi_First_Object  = create unique Multiplicity_Glitch_Recovery with An_Integer  = int_one%0A   Multi_Second_Object = create unique Multiplicity_Glitch_Recovery with An_Integer  = int_two%0A   Multi_Third_Object  = create unique Multiplicity_Glitch_Recovery with An_Integer  = int_three%0A%0A   if Multi_First_Object = UNDEFINED then%0A      # Test has fallen at the first hurdle%0A      Failure_Code = -1%0A   else%0A      delete Multi_First_Object%0A      delete Multi_Second_Object%0A      delete Multi_Third_Object%0A%0A      # This is an attempt to simulate what will happen when the system restarts and glitch recovery%0A      # is invoked. Since a system restart can not be simulated here without an enourmous%0A      # amount of buggering around%2C the created objects are deleted%2C and three more created in their%0A      # place. Naming is not important at this stage%2C though%2C for completeness the same name could %0A      # be used. For the purposes of this test%2C a different set of names shall be used.%0A%0A      if Test_Environment = 'WACA' then%0A         # For Ada runs on host or Target%2C only create this object without%0A         # specifying the attributes.%0A         Fourth_Object = create unique Multiplicity_Glitch_Recovery%0A         Fifth_Object  = create unique Multiplicity_Glitch_Recovery%0A         Sixth_Object  = create unique Multiplicity_Glitch_Recovery%0A      else%0A         Fourth_Object = create unique Multiplicity_Glitch_Recovery with An_Integer  = int_one%0A         Fifth_Object  = create unique Multiplicity_Glitch_Recovery with An_Integer  = int_two%0A         Sixth_Object  = create unique Multiplicity_Glitch_Recovery with An_Integer  = int_three%0A      endif%0A%0A      if Fourth_Object.An_Integer = int_one then%0A%0A         if Fifth_Object.An_Integer = int_two then%0A%0A            if Sixth_Object.An_Integer = int_three then%0A               Failure_Code = 0%0A            else%0A               Failure_Code = -2%0A            endif%0A%0A         else%0A            Failure_Code = -3%0A         endif%0A%0A      else%0A         Failure_Code = -4%0A      endif%0A%0A      delete Fourth_Object%0A      delete Fifth_Object%0A      delete Sixth_Object%0A%0A   endif%0A%0A   if Failure_Code = 0 then%0A      [] = RPT2:Test_Passed["Multiplicity glitch"%2CThe_Test_Number%2C Failure_Code]%0A   else%0A      [] = RPT3:Test_Failed["Multiplicity glitch"%2CThe_Test_Number%2C Failure_Code]%0A   endif%0A%0A   The_Test_Number = The_Test_Number + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A# Test 3%0A#--------------------------------------------------------------------------%0A%0A   int_one = 10%0A   int_two = 20%0A   int_three = 30%0A%0A   [] = RPT1:Start_Test[The_Test_Number%2C "1241-0000-01-0129"%2C "Glitch Recovery"%2C "Multiplicity"%2C "Recreate same name at same location"]%0A   [] = RPT8:Specify_Requid[The_Test_Number%2C "1241-0000-01-0130"]%0A%0A   # Create three objects tagged MULTIPLICITY.%0A   Reuse_First_Object  = create unique Multiplicity_Glitch_Recovery with An_Integer  = int_one%0A   Reuse_Second_Object = create unique Multiplicity_Glitch_Recovery with An_Integer  = int_two%0A   Reuse_Third_Object  = create unique Multiplicity_Glitch_Recovery with An_Integer  = int_three%0A%0A   if Reuse_First_Object = UNDEFINED then%0A      # Test has fallen at the first hurdle%0A      Failure_Code = -1%0A   else%0A      delete Reuse_First_Object%0A      delete Reuse_Second_Object%0A      delete Reuse_Third_Object%0A%0A      # Naming is not important at this stage%2C though%2C for completeness the same name could %0A      # be used. For the purposes of this test%2C the same set of names shall be used.%0A      if Test_Environment = 'WACA' then%0A         # For Ada runs on host or Target%2C only create this object without%0A         # specifying the attributes.%0A         Reuse_First_Object = create unique Multiplicity_Glitch_Recovery%0A         Reuse_Second_Object  = create unique Multiplicity_Glitch_Recovery%0A         Reuse_Third_Object  = create unique Multiplicity_Glitch_Recovery%0A      else%0A         Reuse_First_Object = create unique Multiplicity_Glitch_Recovery with An_Integer  = int_one%0A         Reuse_Second_Object  = create unique Multiplicity_Glitch_Recovery with An_Integer  = int_two%0A         Reuse_Third_Object  = create unique Multiplicity_Glitch_Recovery with An_Integer  = int_three%0A      endif%0A%0A      if Reuse_First_Object.An_Integer = int_one then%0A%0A         if Reuse_Second_Object.An_Integer = int_two then%0A%0A            if Reuse_Third_Object.An_Integer = int_three then%0A               Failure_Code = 0%0A            else%0A               Failure_Code = -2%0A            endif%0A%0A         else%0A            Failure_Code = -3%0A         endif%0A%0A      else%0A         Failure_Code = -4%0A      endif%0A%0A      delete Reuse_First_Object%0A      delete Reuse_Second_Object%0A      delete Reuse_Third_Object%0A%0A   endif%0A%0A   if Failure_Code = 0 then%0A      [] = RPT2:Test_Passed["Multiplicity glitch"%2CThe_Test_Number%2C Failure_Code]%0A   else%0A      [] = RPT3:Test_Failed["Multiplicity glitch"%2CThe_Test_Number%2C Failure_Code]%0A   endif%0A%0A   The_Test_Number = The_Test_Number + 1%0A%0A# End Test 3%0A%0A#--------------------------------------------------------------------------%0A# Test 4%0A#--------------------------------------------------------------------------%0A%0A   int_one = 10%0A   int_two = 20%0A%0A   [] = RPT1:Start_Test[The_Test_Number%2C "1241-0000-01-0129"%2C "Glitch Recovery"%2C "Multiplicity"%2C "Single multiplicity object"]%0A   [] = RPT8:Specify_Requid[The_Test_Number%2C "1241-0000-01-0130"]%0A%0A   # Create three objects tagged MULTIPLICITY.%0A   Multi_Single_First_Object  = create unique Multiplicity_Single_Glitch_Recovery_Object with Attribute_One  = int_one & Attribute_Two = int_two%0A%0A   if Multi_Single_First_Object = UNDEFINED then%0A      # Test has fallen at the first hurdle%0A      Failure_Code = -1%0A   else%0A      delete Multi_Single_First_Object%0A%0A      # This is an attempt to simulate what will happen when the system restarts and glitch recovery%0A      # is invoked. Since a system restart can not be simulated here without an enormous%0A      # amount of buggering around%2C the created objects are deleted%2C and another created in its%0A      # place. Naming is not important at this stage%2C though%2C for completeness the same name could %0A      # be used. For the purposes of this test%2C a different set of names shall be used.%0A%0A      if Test_Environment = 'WACA' then%0A         # For Ada runs on host or Target%2C only create this object without%0A         # specifying the attributes.%0A         Multi_Single_Second_Object = create unique Multiplicity_Single_Glitch_Recovery_Object%0A      else%0A         Multi_Single_Second_Object = create unique Multiplicity_Single_Glitch_Recovery_Object with Attribute_One  = int_one & Attribute_Two = int_two%0A      endif%0A%0A      if Multi_Single_Second_Object.Attribute_One = int_one then%0A%0A         if Multi_Single_Second_Object.Attribute_Two = int_two then%0A            Failure_Code = 0%0A         else%0A            Failure_Code = -2%0A         endif%0A%0A      else%0A         Failure_Code = -3%0A      endif%0A%0A      delete Multi_Single_Second_Object%0A%0A   endif%0A%0A   if Failure_Code = 0 then%0A      [] = RPT2:Test_Passed["Multiplicity single glitch"%2CThe_Test_Number%2C Failure_Code]%0A   else%0A      [] = RPT3:Test_Failed["Multiplicity single glitch"%2CThe_Test_Number%2C Failure_Code]%0A   endif%0A%0A   The_Test_Number = The_Test_Number + 1%0A%0A# End Test 4%0A%0A#--------------------------------------------------------------------------%0A%0AMy_Test.Number = The_Test_Number,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,9,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Perform_Glitch_Recovery_Tests%0A,,,,,,,
routine,,,,,,,,
routine,TAGS,,private,Perform_Many_To_Many_Navigations,10,,,
codeblock,[] = TAGS11::Perform_Passive_Many_To_Many_Tests[]%0A%0A[] = TAGS13::Perform_Active_Many_To_Many_Tests[],,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,10,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Perform_Many_To_Many_Navigations%0A,,,,,,,
routine,,,,,,,,
routine,TAGS,,private,Perform_Super_Sub_Tests,11,,,
codeblock,[] = TAGS12::Perform_Passive_Super_Sub_Tests[]%0A[] = TAGS14::Perform_Active_Super_Sub_Tests[],,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,11,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Perform_Super_Sub_Tests%0A,,,,,,,
routine,,,,,,,,
routine,TAGS,,private,Perform_Static_Tests,12,,,
codeblock,[] = TAGS15::Perform_Tests_On_Static_Object[],,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,12,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Perform_Static_Tests%0A,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Perform_Unique_Passive_Singleton_Object_Tests,1,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Returned_Test_Number,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,# A_Passive_Static_Object should be tagged as SINGLETON.%0A# ie. it should only be created once.%0A%0A%0ALocal_Test = Test%0A%0AFailure_Code = 0%0A%0AMy_Test_Data = find-one Test_Data%0A%0Aif My_Test_Data.Environment = 'WACA' then%0A   Supported = TRUE%0Aelse%0A   Supported = FALSE%0Aendif%0A%0A#--------------------------------------------------------------------------%0A# Test 1%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1241-0000-01-0128"%2C "TAGGING"%2C "Singleton UNIQUE passive object"%2C "Create one singleton instances"]%0A%0A   The_Passive_Object = create unique A_Passive_Static_Object with Size = 1%0A%0A   # Further attempts to create an object of this sort should be met with%0A   # complete indifference by WACA.%0A%0A   # Another_Passive_Object = create A_Passive_Static_Object with Size = 2 & Unique_Identifier = 2%0A%0A   if The_Passive_Object      = UNDEFINED then%0A      # Test Failed%0A      Failure_Code = -1%0A   endif%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create one singleton instance"%2C Failure_Code%2C Supported]%0A%0A   Local_Test = Local_Test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "Null Requid"%2C "TAGGING"%2C "Singleton UNIQUE passive object"%2C "Create another singleton instances"]%0A%0A   # Creation of another singleton object will cause unpredictable actions by WACA%2C therefor this%0A   # test is unsupported for the moment.%0A%0A   # Another_Passive_Object = create A_Passive_Static_Object with Size = 2 & Unique_Identifier = 2%0A%0A%0A   [] = RPT4:Test_Unsupported[Local_Test]%0A%0A   Local_Test = Local_Test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A# Test 3%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1241-0000-01-0128"%2C "TAGGING"%2C "Singleton UNIQUE passive object"%2C "How many"]%0A%0A   # A SINGLETON object is still around from previous test.%0A   # Check to see if the attempt to create another one has%0A   # messed up the set information.%0A %0A   {Set_of_Singletons} = find-all A_Passive_Static_Object%0A%0A   How_Many = countof {Set_of_Singletons}%0A%0A   if How_Many != 1 then %0A      Failure_Code = How_Many%0A   endif%0A%0A   [] = TAGS5::Report_Now[Local_Test%2C "How many"%2C Failure_Code%2C Supported]%0A%0A   Local_Test = Local_Test + 1%0A%0A# End Test 3%0A%0A#--------------------------------------------------------------------------%0A# Test 4%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1241-0000-01-0128"%2C "TAGGING"%2C "Singleton UNIQUE passive object"%2C "Delete passive object"]%0A%0A   # Now let's try and delete the object%0A%0A   delete The_Passive_Object%0A%0A   {Set_of_Singletons} = find-all A_Passive_Static_Object%0A%0A   How_Many = countof {Set_of_Singletons}%0A%0A   if How_Many != 0 then %0A      Failure_Code = How_Many%0A   endif%0A%0A   [] = TAGS5::Report_Now[Local_Test%2C "Delete passive object"%2C Failure_Code%2C Supported]%0A%0A   Local_Test = Local_Test + 1%0A%0A# End Test 4%0A%0A#--------------------------------------------------------------------------%0A# Test 5%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1241-0000-01-0128"%2C "TAGGING"%2C "Singleton UNIQUE passive object"%2C "Create new passive object"]%0A%0A   # Having sucessfully deleted the passive static object%0A   # let's make the attempt to create a new one%0A%0A   A_New_Passive_Object = create unique A_Passive_Static_Object with Size = 3%0A%0A   if A_New_Passive_Object = UNDEFINED then%0A      # Test Failed%0A      Failure_Code = -4%0A   endif%0A%0A   [] = TAGS5::Report_Now[Local_Test%2C "Create new passive object"%2C Failure_Code%2C Supported]%0A%0A   Local_Test = Local_Test + 1%0A%0A   Failure_Code = 0%0A%0A# End Test 5%0A%0A%0A#--------------------------------------------------------------------------%0A# Test 6%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "Null Requid"%2C "TAGGING"%2C "Singleton UNIQUE passive object"%2C "Delete all passive objects"]%0A%0A   # Tidy up here.%0A   if A_New_Passive_Object != UNDEFINED then%0A      delete A_New_Passive_Object%0A   endif%0A%0A   if The_Passive_Object != UNDEFINED then%0A      delete The_Passive_Object%0A   endif%0A%0A   {Set_of_Singletons} = find-all A_Passive_Static_Object%0A%0A   How_Many = countof {Set_of_Singletons}%0A%0A   if How_Many != 0 then %0A      Failure_Code = How_Many%0A   endif%0A%0A   [] = TAGS5::Report_Now[Local_Test%2C "Delete all passive objects"%2C Failure_Code%2C Supported]%0A%0A# End Test 6%0A%0A#--------------------------------------------------------------------------%0A%0AReturned_Test_Number = Local_Test%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Create_Report_Data,2,,,
codeblock,# Find out if there already is one of these.%0A# It is not inconceivable that a report object still exists from a previous run.%0A# Report objects are not deleted at the end of a run%2C as certain events may%0A# still be en-queued.%0A%0Aold_report = find-one Report_Data%0A%0Aif old_report != UNDEFINED then%0A   delete old_report%0Aendif%0A%0AMy_Report = create unique Report_Data with Reported_Domain_Number = 0%0A%0A[] = RPT6:Domain_Test_Start["TAGGING"]%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Delete_Report_Domain,3,,,
codeblock,This_Report = find-one Report_Data%0A%0Aif This_Report != UNDEFINED then%0A   This_Domain_Identifier = This_Report.Reported_Domain_Number%0Aelse%0A   This_Domain_Identifier = -1%0Aendif%0A%0A[] = RPT7:Domain_Test_Finished["TAGGING"%2C This_Domain_Identifier]%0A%0A# There are no events en-queued in this domain.%0A%0A# Events are not tagged currently%2C or at least there is no call to do%2C yet.%0A%0Aif This_Domain_Identifier != -1 then%0A   delete This_Report%0Aendif,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Perform_Passive_Singleton_Object_Tests,4,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Returned_Test_Number,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,#--------------------------------------------------------------------------%0A# A_Passive_Static_Object should be tagged as SINGLETON.%0A# ie. it should only be created once.%0A#--------------------------------------------------------------------------%0A%0ALocal_Test = Test%0A%0AFailure_Code = 0%0A%0AMy_Test_Data = find-one Test_Data%0A%0Aif My_Test_Data.Environment = 'WACA' then%0A   Supported = TRUE%0Aelse%0A   Supported = FALSE%0Aendif%0A%0A%0A#--------------------------------------------------------------------------%0A# Test 1%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1241-0000-01-0128"%2C "TAGGING"%2C "Singleton passive object"%2C "Create one singleton instance"]%0A%0A   The_Passive_Object = create A_Passive_Static_Object with  Unique_Identifier = 5 & Size = 1%0A%0A   # Further attempts to create an object of this sort should be met with%0A   # complete indifference by WACA.%0A%0A   # Another_Passive_Object = create A_Passive_Static_Object with Unique_Identifier = 6 & Size = 2%0A%0A   if The_Passive_Object = UNDEFINED then%0A      Failure_Code = -5%0A   endif%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create one singleton instance"%2C Failure_Code%2C Supported]%0A%0A   Local_Test = Local_Test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "Null Requid"%2C "TAGGING"%2C "Singleton passive object"%2C "Create another singleton instance"]%0A%0A   #Another_Passive_Object = create A_Passive_Static_Object with Unique_Identifier = 6 & Size = 2%0A%0A   [] = RPT4:Test_Unsupported[Local_Test]%0A%0A   Local_Test = Local_Test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A# Test 3%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1241-0000-01-0128"%2C "TAGGING"%2C "Singleton passive object"%2C "How many"]%0A%0A   # A SINGLETON object is still around from previous test.%0A   # Check to see if the attempt to create another one has%0A   # messed up the set information.%0A%0A   {Set_of_Singletons} = find-all A_Passive_Static_Object%0A%0A   How_Many = countof {Set_of_Singletons}%0A%0A   if How_Many != 1 then %0A      Failure_Code = How_Many%0A   endif%0A%0A   [] = TAGS5::Report_Now[Local_Test%2C "How many"%2C Failure_Code%2C Supported]%0A%0A   Local_Test = Local_Test + 1%0A%0A# End Test 3%0A%0A#--------------------------------------------------------------------------%0A# Test 4%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1241-0000-01-0128"%2C "TAGGING"%2C "Singleton passive object"%2C "Delete passive object"]%0A%0A   # Now let's try and delete the object%0A   delete The_Passive_Object%0A%0A   {Set_of_Singletons} = find-all A_Passive_Static_Object%0A%0A   How_Many = countof {Set_of_Singletons}%0A%0A   if How_Many != 0 then %0A      Failure_Code = How_Many%0A   endif%0A%0A   [] = TAGS5::Report_Now[Local_Test%2C "Delete passive object"%2C Failure_Code%2C Supported]%0A%0A   Local_Test = Local_Test + 1%0A%0A# End Test 4%0A%0A#--------------------------------------------------------------------------%0A# Test 5%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "1241-0000-01-0128"%2C "TAGGING"%2C "Singleton passive object"%2C "Create new passive object"]%0A%0A   # Having sucessfully deleted the passive static object%0A   # let's make the attempt to create a new one%0A   A_New_Passive_Object = create A_Passive_Static_Object with Unique_Identifier = 8 & Size = 3%0A%0A   if A_New_Passive_Object = UNDEFINED then%0A      Failure_Code = -8%0A   endif%0A%0A   [] = TAGS5::Report_Now[Local_Test%2C "Create new passive object"%2C Failure_Code%2C Supported]%0A%0A   Local_Test = Local_Test + 1%0A%0A   Failure_Code = 0%0A%0A# End Test 5%0A%0A#--------------------------------------------------------------------------%0A# Test 6%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Local_Test%2C "Null Requid"%2C "TAGGING"%2C "Singleton passive object"%2C "Delete all passive objects"]%0A%0A   # Tidy up here.%0A   if A_New_Passive_Object != UNDEFINED then%0A      delete A_New_Passive_Object%0A   endif%0A%0A   if The_Passive_Object != UNDEFINED then%0A      delete The_Passive_Object%0A   endif%0A%0A   {Set_of_Singletons} = find-all A_Passive_Static_Object%0A%0A   How_Many = countof {Set_of_Singletons}%0A%0A   if How_Many != 0 then %0A      Failure_Code = How_Many%0A   endif%0A%0A   [] = TAGS5::Report_Now[Local_Test%2C "Delete all passive objects"%2C Failure_Code%2C Supported]%0A%0A# End Test 6%0A%0A#--------------------------------------------------------------------------%0A%0AReturned_Test_Number = Local_Test,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Report_Now,5,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Testing_For,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Failure,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,It_Is_Supported,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,if Failure = 0 then%0A   [] = RPT2:Test_Passed[Testing_For%2C Test_Number%2C Failure]%0Aelse%0A%0A   if It_Is_Supported then%0A      [] = RPT3:Test_Failed[Testing_For%2C Test_Number%2C Failure]%0A   else%0A      [] = RPT4:Test_Unsupported[Test_Number]%0A   endif%0A%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
description, Test requirement Tag%0A @@TAGS-01-0001%0A,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Set_Environment,6,,,
parameter,Input_Test_Data,in,,,,,,
typeref,instance of Test_Data,,,,,,,
typeref,,,,,,,,
parameter,Output_Test_Data,out,,,,,,
typeref,instance of Test_Data,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,Local_Input = Input_Test_Data%0A%0A# Call terminator bridge%0A[Environment_Variable] = ET2:Env_Number[]%0A%0ALocal_Input.Number = Environment_Variable%0A%0AOutput_Test_Data = Local_Input%0A,,,,,,,
codeblock,,,,,,,,
description, C insert to set attribute for I-SIM%0A operation%0A,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Perform_Passive_Array_of_3_Objects_Tests,7,,,
parameter,Start_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Supported,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,Final_Test_Number,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,%0ATest_Has_Passed  = FALSE%0AFailure_Code = -1%0A%0ATest = Start_Test_Number%0A%0A#--------------------------------------------------------------------------%0A# Test 1 - Create three passive data objects%0A#--------------------------------------------------------------------------%0A%0A   count = 1%0A   loop%0A      Obj = create unique A_Passive_Array_Of_Three_Objects %0A      breakif count = 3%0A      count = count + 1%0A   endloop%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "TAGGING"%2C "Passive Array 3 UNIQUE object"%2C "Create three"]%0A%0A   # Return count of A_Passive_Array_Of_Three_Objects%0A   {set_of_objects} = find-all A_Passive_Array_Of_Three_Objects%0A%0A   total_count = countof {set_of_objects}%0A%0A   if total_count = 3 then%0A      Test_Has_Passed  = TRUE%0A      Failure_Code = 0%0A   else%0A      Test_Has_Passed  = FALSE%0A      Failure_Code = -1%0A   endif%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create three"%2C Failure_Code%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "TAGGING"%2C "Passive Array 3 UNIQUE object"%2C "Delete one"]%0A%0A   # Delete 1 of passive objects%0A%0A   Any_Object = find-one A_Passive_Array_Of_Three_Objects%0A%0A   delete Any_Object%0A%0A   {set_of_objects} = find-all A_Passive_Array_Of_Three_Objects%0A   total_count = countof {set_of_objects}%0A%0A   if total_count = 2 then%0A      Test_Has_Passed  = TRUE%0A      Failure_Code = 0%0A   else%0A      Test_Has_Passed  = FALSE%0A      Failure_Code = -1%0A   endif%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create three"%2C Failure_Code%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A# Test 3 - Create extra passive object%2C total of three%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "TAGGING"%2C "Passive Array 3 UNIQUE object"%2C "Create one more"]%0A%0A   replacement_object = create unique A_Passive_Array_Of_Three_Objects%0A%0A   # Return count of A_Passive_Array_Of_Three_Objects%0A   {set_of_objects} = find-all A_Passive_Array_Of_Three_Objects%0A%0A   total_count = countof {set_of_objects}%0A%0A   if total_count = 3 then%0A      Test_Has_Passed  = TRUE%0A      Failure_Code = 0%0A   else%0A      Test_Has_Passed  = FALSE%0A      Failure_Code = -1%0A   endif%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create three"%2C Failure_Code%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#--------------------------------------------------------------------------%0A# Test 4 - Attempt to create fourth object%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "TAGGING"%2C "Passive Array 3 UNIQUE object"%2C "Create illegal object"]%0A%0A   # Unsupported%0A%0A   # illegal_object = create unique A_Passive_Array_Of_Three_Objects%0A   # Return count of A_Passive_Array_Of_Three_Objects%0A   # {set_of_objects} = find-all A_Passive_Array_Of_Three_Objects%0A   # total_count = countof {set_of_objects}%0A   # Check for null%0A   # if illegal_object = UNDEFINED then %0A   #   if total_count = 3 then%0A   #      Test_Has_Passed  = TRUE%0A   #      Failure_Code = 0%0A   #   else%0A   #      Test_Has_Passed  = FALSE%0A   #      Failure_Code = -1%0A   #   endif%0A   # else%0A   #   Test_Has_Passed = FALSE%0A   #   Failure_Code = -2%0A   # endif%0A   # [] = TAGS5::Report_Now[Test%2C "Create illegal object"%2C Failure_Code%2C Supported]%0A %0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A#--------------------------------------------------------------------------%0A# Test 5 - Attempt to delete all objects%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "TAGGING"%2C "Passive Array 3 UNIQUE object"%2C "Delete all objects"]%0A%0A   # Return count of A_Passive_Array_Of_Three_Objects%0A%0A   {set_of_objects} = find-all A_Passive_Array_Of_Three_Objects%0A   total_count = countof {set_of_objects}%0A%0A   if total_count = 3 then%0A      # Delete all objects%0A      for each_object in {set_of_objects} do%0A         delete each_object%0A      endfor%0A%0A      {set_of_objects} = find-all A_Passive_Array_Of_Three_Objects%0A      total_count = countof {set_of_objects}%0A%0A      if total_count = 0 then%0A         new_object = create unique A_Passive_Array_Of_Three_Objects%0A%0A         # Check that it is defined%0A         if new_object != UNDEFINED then%0A            {set_of_objects} = find-all A_Passive_Array_Of_Three_Objects%0A            total_count = countof {set_of_objects}%0A%0A            # and only one now exists%0A            if total_count = 1 then %0A               Test_Has_Passed = TRUE%0A               Failure_Code = 0%0A            else%0A               Test_Has_Passed = FALSE%0A               Failure_Code = -4%0A            endif%0A%0A         else%0A            Test_Has_Passed = FALSE%0A            Failure_Code = -3%0A         endif%0A%0A      else%0A         Test_Has_Passed = FALSE%0A         Failure_Code = -2%0A      endif%0A%0A   else%0A      Test_Has_Passed  = FALSE%0A      Failure_Code = -1%0A   endif%0A%0A   [] = TAGS5::Report_Now[Test%2C "Delete all objects"%2C Failure_Code%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A#--------------------------------------------------------------------------%0A# Test 6%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "TAGGING"%2C "Passive Array 3 UNIQUE object"%2C "Delete final object"]%0A%0A   # This won't exist if the previous test failed due to it being unsupported.%0A   if Supported and Test_Has_Passed then%0A      # Delete new object%2C leaving none.%0A      # But only if the previous test worked and was supposed to.%0A      delete new_object%0A      {set_of_objects} = find-all A_Passive_Array_Of_Three_Objects%0A      total_count = countof {set_of_objects}%0A%0A      # None exist%0A      if total_count = 0 then %0A         Test_Has_Passed = TRUE%0A         Failure_Code = 0%0A      else%0A         Test_Has_Passed = FALSE%0A         Failure_Code = total_count%0A      endif%0A%0A   else%0A      Test_Has_Passed = FALSE%0A      Failure_Code = -1%0A   endif%0A%0A   [] = TAGS5::Report_Now[Test%2C "Delete final object"%2C Failure_Code%2C Supported]%0A%0A# End Test 6%0A%0A#--------------------------------------------------------------------------%0A%0AFinal_Test_Number = Test%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Perform_Passive_Array_of_1_Object_Tests,8,,,
parameter,Start_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Supported,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,Final_Test_Number,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,Test_Has_Passed  = FALSE%0AFailure_Code = -1%0A%0ATest = Start_Test_Number%0A%0A#--------------------------------------------------------------------------%0A# Test 1 - Create one passive data object%0A#--------------------------------------------------------------------------%0A%0A   Obj = create unique A_Passive_Array_Of_One_Object%0A %0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "TAGGING"%2C "Passive Array 1 UNIQUE object"%2C "Create one"]%0A%0A   # Return count of A_Passive_Array_Of_One_Object%0A   {set_of_objects} = find-all A_Passive_Array_Of_One_Object%0A   total_count = countof {set_of_objects}%0A%0A   if total_count = 1 then%0A      Test_Has_Passed  = TRUE%0A      Failure_Code = 0%0A   else%0A      Test_Has_Passed  = FALSE%0A      Failure_Code = -1%0A   endif%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create one"%2C Failure_Code%2C Supported]%0A%0A   Test = Test + 1%0A%0A# Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "TAGGING"%2C "Passive Array 1 UNIQUE object"%2C "Delete one"]%0A%0A   # Delete 1 of passive objects%0A   Any_Object = find-one A_Passive_Array_Of_One_Object%0A   delete Any_Object%0A%0A   {set_of_objects} = find-all A_Passive_Array_Of_One_Object%0A   total_count = countof {set_of_objects}%0A%0A   if total_count = 0 then%0A      Test_Has_Passed  = TRUE%0A      Failure_Code = 0%0A   else%0A      Test_Has_Passed  = FALSE%0A      Failure_Code = -1%0A   endif%0A%0A   [] = TAGS5::Report_Now[Test%2C "Delete one"%2C Failure_Code%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A# Test 3 - Create extra passive object%2C total of one%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "TAGGING"%2C "Passive Array 1 UNIQUE object"%2C "Create one more"]%0A%0A   replacement_object = create unique A_Passive_Array_Of_One_Object%0A%0A   # Return count of A_Passive_Array_Of_One_Object%0A%0A   {set_of_objects} = find-all A_Passive_Array_Of_One_Object%0A   total_count = countof {set_of_objects}%0A%0A   if total_count = 1 then%0A      Test_Has_Passed  = TRUE%0A      Failure_Code = 0%0A   else%0A      Test_Has_Passed  = FALSE%0A      Failure_Code = -1%0A   endif%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create one more"%2C  Failure_Code%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#--------------------------------------------------------------------------%0A# Test 4 - Attempt to create second object%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "TAGGING"%2C "Passive Array 1 UNIQUE object"%2C "Create illegal object"]%0A%0A   # illegal_object = create unique A_Passive_Array_Of_One_Object%0A   # Return count of A_Passive_Array_Of_One_Object%0A   # {set_of_objects} = find-all A_Passive_Array_Of_One_Object%0A   # total_count = countof {set_of_objects}%0A   # Check for null%0A   # if illegal_object = UNDEFINED then %0A   #   if total_count = 1 then%0A   #      Test_Has_Passed  = TRUE%0A   #      Failure_Code = 0%0A   #   else%0A   #      Test_Has_Passed  = FALSE%0A   #      Failure_Code = -1%0A   #   endif%0A   # else%0A   #   Test_Has_Passed = FALSE%0A   #   Failure_Code = -2%0A   # endif%0A   # [] = TAGS5::Report_Now[Test%2C "Create illegal object"%2C Failure_Code%2C Supported]%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A %0A   Test = Test + 1%0A%0A# End Test 4%0A%0A#--------------------------------------------------------------------------%0A# Test 5%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "TAGGING"%2C "Passive Array 1 UNIQUE object"%2C "Delete all objects"]%0A%0A   # Return count of A_Passive_Array_Of_One_Object%0A%0A   {set_of_objects} = find-all A_Passive_Array_Of_One_Object%0A   total_count = countof {set_of_objects}%0A%0A   if total_count = 1 then%0A%0A      for each_object in {set_of_objects} do%0A         delete each_object%0A      endfor%0A%0A      {set_of_objects} = find-all A_Passive_Array_Of_One_Object%0A      total_count = countof {set_of_objects}%0A%0A      if total_count = 0 then%0A         new_object = create unique A_Passive_Array_Of_One_Object%0A%0A         # Check that it is defined%0A         if new_object != UNDEFINED then%0A            {set_of_objects} = find-all A_Passive_Array_Of_One_Object%0A            total_count = countof {set_of_objects}%0A%0A            # and only one now exists%0A            if total_count = 1 then %0A               Test_Has_Passed = TRUE%0A               Failure_Code = 0%0A            else%0A               Test_Has_Passed = FALSE%0A               Failure_Code = -4%0A            endif%0A%0A         else%0A            Test_Has_Passed = FALSE%0A            Failure_Code = -3%0A         endif%0A%0A      else%0A         Test_Has_Passed = FALSE%0A         Failure_Code = -2%0A      endif%0A%0A   else%0A      Test_Has_Passed  = FALSE%0A      Failure_Code = -1%0A   endif%0A%0A   [] = TAGS5::Report_Now[Test%2C "Delete all objects"%2C Failure_Code%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A#--------------------------------------------------------------------------%0A# Test 6%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "TAGGING"%2C "Passive Array 1 UNIQUE object"%2C "Delete final object"]%0A%0A   # This won't exist if the previous test failed due to it being unsupported.%0A   if Supported and Test_Has_Passed then%0A      delete new_object%0A%0A      {set_of_objects} = find-all A_Passive_Array_Of_One_Object%0A      total_count = countof {set_of_objects}%0A%0A      if total_count = 0 then %0A         Test_Has_Passed = TRUE%0A         Failure_Code = 0%0A      else%0A         Test_Has_Passed = FALSE%0A         Failure_Code = -2%0A      endif%0A%0A   else%0A      Test_Has_Passed = FALSE%0A      Failure_Code = -1%0A   endif%0A%0A   [] = TAGS5::Report_Now[Test%2C "Delete final object"%2C Failure_Code%2C Supported]%0A%0A# End Test 6%0A%0A#--------------------------------------------------------------------------%0A%0AFinal_Test_Number = Test%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Perform_One_To_Many_Tests,9,,,
codeblock,# @@TAGS-01-0002%0A%0Amy_test = find-one Test_Data%0A%0ATest = my_test.Number%0A%0ASupported = FALSE%0A%0Aif my_test.Environment = 'WACA' then%0A   Supported = TRUE%0Aendif%0A%0ASingle_Tag     = create unique Single_Tagged_Object with Attribute_One = Test%0AFirst_Of_Many  = create unique Many_Tagged_Objects  with Attribute_Two = Test%0ASecond_Of_Many = create unique Many_Tagged_Objects  with Attribute_Two = Test%0AThird_Of_Many  = create unique Many_Tagged_Objects  with Attribute_Two = Test%0A%0A%0Alink Single_Tag R1 First_Of_Many%0Alink Single_Tag R1 Second_Of_Many%0Alink Single_Tag R1 Third_Of_Many%0A%0A#--------------------------------------------------------------------------%0A# Test 1%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "1 to M Relationships"%2C "Create three"]%0A%0A   {Set_Of_Many} = Single_Tag -> R1.Many_Tagged_Objects%0A%0A   How_Many = countof {Set_Of_Many}%0A%0A   Failure_Value = How_Many - 3%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "1 to M Relationships"%2C "Create one more"]%0A%0A   # Create one more ih of Many_Tagged_Objects. %0A%0A   #Fourth_Of_Many  = create unique Many_Tagged_Objects  with Attribute_Two = Test%0A%0A   #if Fourth_Of_Many = UNDEFINED then%0A   #   Failure_Value = 0%0A   #else%0A   #   Failure_Value = 1%0A   #   delete Fourth_Of_Many%0A   #endif%0A%0A   #[] = TAGS5::Report_Now[Test%2C "Create one more"%2C Failure_Value%2C Supported]%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A# Test 3 - Unlink one of three%2C and check that the navigation now returns %0A#          two instances.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "1 to M Relationships"%2C "Unlink one & navigate"]%0A%0A   # NB. Unlinked only%2C not deleted.%0A   unlink First_Of_Many R1 Single_Tag%0A%0A   {Set_Of_Many} = Single_Tag -> R1.Many_Tagged_Objects%0A%0A   How_Many_Navigation = countof {Set_Of_Many}%0A%0A   Failure_Value = How_Many_Navigation - 2%0A%0A   [] = TAGS5::Report_Now[Test%2C "Unlink one & navigate"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#--------------------------------------------------------------------------%0A# Test 4 - Unlink one of three%2C and check that the FIND-ALL still returns %0A#          three instances.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "1 to M Relationships"%2C "Unlink & find-all "]%0A%0A   # NB. Unlinked only%2C not deleted.%0A   {Find_Many} = find-all Many_Tagged_Objects%0A%0A   How_Many_Find = countof {Find_Many}%0A   Failure_Value = How_Many_Find - 3%0A%0A   [] = TAGS5::Report_Now[Test%2C "Unlink & find-all"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A#--------------------------------------------------------------------------%0A# Test 5 - Just because First_Of_Many has been unlinked%2C there still should %0A#          be a restriction on the number created. So let's try it.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "1 to M Relationships"%2C "Create one more"]%0A%0A   #Fourth_Of_Many = create unique Many_Tagged_Objects  with Attribute_Two = Test%0A%0A   #if Fourth_Of_Many = UNDEFINED then%0A   #   Failure_Value = 0%0A   #else%0A   #   Failure_Value = 1%0A   #   delete Fourth_Of_Many%0A   #endif%0A%0A   #[] = TAGS5::Report_Now[Test%2C "Create one more"%2C Failure_Value%2C Supported]%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A#--------------------------------------------------------------------------%0A# Test 6 - Now delete First_Of_Many and FIND-ALL on set.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "1 to M Relationships"%2C "Delete First instance & find"]%0A%0A   delete First_Of_Many%0A   {Find_Many} = find-all Many_Tagged_Objects%0A   How_Many_Find = countof {Find_Many}%0A%0A   Failure_Value = How_Many_Find - 2%0A%0A   [] = TAGS5::Report_Now[Test%2C "Delete First instance & find"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 6%0A%0A#--------------------------------------------------------------------------%0A# Test 7 - Perform Navigation to set %0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "1 to M Relationships"%2C "Delete First instance & Navigate"]%0A%0A   {Set_Of_Many} = Single_Tag -> R1.Many_Tagged_Objects%0A%0A   How_Many_Navigation = countof {Set_Of_Many}%0A%0A   Failure_Value = How_Many_Navigation - 2%0A%0A   [] = TAGS5::Report_Now[Test%2C "Delete First instance & navigate"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 7%0A%0A#--------------------------------------------------------------------------%0A# Test 8 - ...and then create a replacement.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "1 to M Relationships"%2C "Replace deleted instance"]%0A%0A   Replacement_First_Of_Many = create unique Many_Tagged_Objects  with Attribute_Two = Test%0A%0A   if Replacement_First_Of_Many = UNDEFINED then%0A      Failure_Value = 1%0A   else%0A      link Single_Tag R1 Replacement_First_Of_Many%0A%0A      {Find_Many} = find-all Many_Tagged_Objects%0A %0A      How_Many_Find = countof {Find_Many}%0A%0A      {Set_Of_Many} = Single_Tag -> R1.Many_Tagged_Objects%0A%0A      How_Many_Navigation = countof {Set_Of_Many}%0A%0A      # Magic number six arrived at :%0A      # Two sets of three instances expected%2C hence six.%0A      Failure_Value = (How_Many_Find + How_Many_Navigation) - 6%0A   endif%0A%0A   [] = TAGS5::Report_Now[Test%2C "Replace deleted instance"%2C Failure_Value%2C Supported]%0A  %0A   Test = Test + 1%0A%0A# End Test 8%0A%0A#--------------------------------------------------------------------------%0A# Test 9 - Tidy up and finish.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "1 to M Relationships"%2C "Unlink and delete all"]%0A%0A   for each_instance in {Set_Of_Many} do%0A      # Make sure that each instance is currently linked to the single instance%0A      # and then unlink it.%0A%0A      # This is a navigate from an instance to the single instance end of the one to many%0A      # relationship.%0A%0A      # There is a formalised relationship between this instance and the single end.%0A      # Get rid of it.%0A      unlink Single_Tag R1 each_instance%0A%0A      delete each_instance%0A   endfor%0A%0A   {Remaining} = Single_Tag -> R1.Many_Tagged_Objects%0A%0A   How_Many_Remaining = countof {Remaining}%0A%0A   if How_Many_Remaining = 0 then%0A      delete Single_Tag%0A   else%0A      [] = RPT5:Test_Text[How_Many_Remaining%2C "Still left linked"]%0A   endif%0A%0A   {Find_Many} = find-all Many_Tagged_Objects%0A   {Find_Single} = find-all Single_Tagged_Object%0A%0A   How_Many_Find   = countof {Find_Many}%0A   How_Single_Find = countof {Find_Single}%0A%0A   # Should be zero.%0A   Failure_Value = How_Many_Find + How_Single_Find%0A%0A   [] = TAGS5::Report_Now[Test%2C "Unlink and delete all"%2C Failure_Value%2C Supported]%0A%0ATest = Test + 1%0A%0A# End Test 9%0A%0A#--------------------------------------------------------------------------%0A%0Amy_test.Number = Test%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Perform_Active_One_To_Many_Tests,10,,,
codeblock,my_test = find-one Test_Data%0A%0ATest = my_test.Number%0A%0ASupported = FALSE%0A%0Aif my_test.Environment = 'WACA' then%0A   Supported = TRUE%0Aendif%0A%0ASingle_Tag     = create unique Active_Tagged_Single_Object with Attribute_One = Test & Current_State = 'Idle'%0AFirst_Of_Many  = create unique Active_Tagged_Many_Objects  with Attribute_Two = Test & Current_State = 'Idle'%0ASecond_Of_Many = create unique Active_Tagged_Many_Objects  with Attribute_Two = Test & Current_State = 'Idle'%0AThird_Of_Many  = create unique Active_Tagged_Many_Objects  with Attribute_Two = Test & Current_State = 'Idle'%0A%0Alink First_Of_Many  R2 Single_Tag%0Alink Second_Of_Many R2 Single_Tag%0Alink Third_Of_Many  R2 Single_Tag%0A%0A#--------------------------------------------------------------------------%0A# Test 1%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "1 to M Active Relationships"%2C "Create three"]%0A%0A   {Set_Of_Many} = Single_Tag -> R2.Active_Tagged_Many_Objects%0A%0A   How_Many = countof {Set_Of_Many}%0A%0A   Failure_Value = How_Many - 3%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "1 to M Active Relationships"%2C "Create one more"]%0A%0A   # Create one more ih of Many_Tagged_Objects. %0A%0A   #Fourth_Of_Many  = create unique Active_Tagged_Many_Objects  with Attribute_Two = Test & Current_State = 'Idle'%0A%0A   #if Fourth_Of_Many = UNDEFINED then%0A   #   Failure_Value = 0%0A   #else%0A   #   Failure_Value = 1%0A   #   delete Fourth_Of_Many%0A   #endif%0A%0A   #[] = TAGS5::Report_Now[Test%2C "Create one more"%2C Failure_Value%2C Supported]%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A# Test 3 - Unlink one of three%2C and check that the navigation now returns %0A#          two instances.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "1 to M Active Relationships"%2C "Unlink one & navigate"]%0A%0A   unlink First_Of_Many R2 Single_Tag%0A%0A   {Set_Of_Many} = Single_Tag -> R2.Active_Tagged_Many_Objects%0A%0A   How_Many_Navigation = countof {Set_Of_Many}%0A%0A   Failure_Value = How_Many_Navigation - 2%0A%0A   [] = TAGS5::Report_Now[Test%2C "Unlink one & navigate"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#--------------------------------------------------------------------------%0A# Test 4 - Unlink one of three%2C and check that the FIND-ALL still returns %0A#          three instances.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "1 to M Active Relationships"%2C "Unlink & find-all "]%0A%0A   {Find_Many} = find-all Active_Tagged_Many_Objects%0A%0A   How_Many_Find = countof {Find_Many}%0A%0A   Failure_Value = How_Many_Find - 3%0A%0A   [] = TAGS5::Report_Now[Test%2C "Unlink & find-all"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A#--------------------------------------------------------------------------%0A# Test 5 - Just because First_Of_Many has been unlinked%2C there still should %0A#          be a restriction on the number created. So let's try it.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "1 to M Active Relationships"%2C "Create one more"]%0A%0A   #Fourth_Of_Many = create unique Active_Tagged_Many_Objects  with Attribute_Two = Test  & Current_State = 'Idle'%0A%0A   #if Fourth_Of_Many = UNDEFINED then%0A   #   Failure_Value = 0%0A   #else%0A   #   Failure_Value = 1%0A   #   delete Fourth_Of_Many%0A   #endif%0A%0A   #[] = TAGS5::Report_Now[Test%2C "Create one more"%2C Failure_Value%2C Supported]%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A#--------------------------------------------------------------------------%0A# Test 6 - Now delete First_Of_Many and FIND-ALL on set.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "1 to M Active Relationships"%2C "Delete First instance & find"]%0A%0A   delete First_Of_Many%0A%0A   {Find_Many} = find-all Active_Tagged_Many_Objects%0A%0A   How_Many_Find = countof {Find_Many}%0A%0A   Failure_Value = How_Many_Find - 2%0A%0A   [] = TAGS5::Report_Now[Test%2C "Delete First instance & find"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 6%0A%0A#--------------------------------------------------------------------------%0A# Test 7 - Perform Navigation to set %0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "1 to M Active Relationships"%2C "Delete First instance & Navigate"]%0A%0A   {Set_Of_Many} = Single_Tag -> R2.Active_Tagged_Many_Objects%0A%0A   How_Many_Navigation = countof {Set_Of_Many}%0A%0A   Failure_Value = How_Many_Navigation - 2%0A%0A   [] = TAGS5::Report_Now[Test%2C "Delete First instance & navigate"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 7%0A%0A#--------------------------------------------------------------------------%0A# Test 8 - ...and then create a replacement.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "1 to M Active Relationships"%2C "Replace deleted instance"]%0A%0A   Replacement_First_Of_Many = create unique Active_Tagged_Many_Objects  with Attribute_Two = Test & Current_State = 'Idle'%0A%0A   if Replacement_First_Of_Many = UNDEFINED then%0A      Failure_Value = 1%0A   else%0A      link Single_Tag R2 Replacement_First_Of_Many%0A%0A      {Find_Many} = find-all Active_Tagged_Many_Objects%0A%0A      How_Many_Find = countof {Find_Many}%0A%0A      {Set_Of_Many} = Single_Tag -> R2.Active_Tagged_Many_Objects%0A%0A      How_Many_Navigation = countof {Set_Of_Many}%0A %0A      # Magic number six arrived at :%0A      # Two sets of three instances expected%2C hence six.%0A      Failure_Value = (How_Many_Find + How_Many_Navigation) - 6%0A   endif%0A%0A   [] = TAGS5::Report_Now[Test%2C "Replace deleted instance"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 8%0A%0A#--------------------------------------------------------------------------%0A# Test 9 - Tidy up and finish.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "1 to M Active Relationships"%2C "Unlink and delete all"]%0A%0A   for each_instance in {Set_Of_Many} do%0A%0A      # Make sure that each instance is currently linked to the single instance%0A      # and then unlink it.%0A%0A      # This is a navigate from an instance to the single instance end of the one to many%0A      # relationship.%0A%0A      # There is a formalised relationship between this instance and the single end.%0A      # Get rid of it.%0A      unlink Single_Tag R2 each_instance%0A%0A      delete each_instance%0A%0A   endfor%0A%0A   {Remaining} = Single_Tag -> R2.Active_Tagged_Many_Objects%0A%0A   How_Many_Remaining = countof {Remaining}%0A%0A   if How_Many_Remaining = 0 then%0A      delete Single_Tag%0A   else%0A      [] = RPT5:Test_Text[How_Many_Remaining%2C "Still left linked"]%0A   endif%0A%0A   {Find_Many} = find-all Active_Tagged_Many_Objects%0A   {Find_Single} = find-all Active_Tagged_Single_Object%0A%0A   How_Many_Find   = countof {Find_Many}%0A   How_Single_Find = countof {Find_Single}%0A%0A   # Should be zero.%0A   Failure_Value = How_Many_Find + How_Single_Find%0A%0A   [] = TAGS5::Report_Now[Test%2C "Unlink and delete all"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 9%0A%0A#--------------------------------------------------------------------------%0A# Test 10 - Prove that the active object can be generated to%0A#--------------------------------------------------------------------------%0A%0A   Active_Single_End = create unique Active_Tagged_Single_Object with Attribute_One = Test & Current_State = 'Idle'%0A   Active_Many_End_1 = create unique Active_Tagged_Many_Objects  with Attribute_Two = Test & Current_State = 'Idle'%0A%0A   link Active_Single_End R2 Active_Many_End_1%0A%0A   generate ATSO1:Run(Test) to Active_Single_End%0A%0A   Test = Test + 1%0A%0A# End Test 10 %0A%0A#--------------------------------------------------------------------------%0A# Test 11 - Prove that the other end can still be generated to%2C too!%0A#--------------------------------------------------------------------------%0A%0A   generate ATMO1:Go(Test) to Active_Many_End_1%0A%0A   Test = Test + 1%0A%0A# End Test 11%0A%0A#--------------------------------------------------------------------------%0A%0Amy_test.Number = Test,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Perform_Passive_Many_To_Many_Tests,11,,,
codeblock,my_test = find-one Test_Data%0A%0ATest = my_test.Number%0AFailure_Value = 0%0A%0ASupported = TRUE%0A%0A#--------------------------------------------------------------------------%0A# Test 1%0A#--------------------------------------------------------------------------%0A%0A   Left_One      = create unique Tagged_Many_Left  with Attribute_One   = Test%0A   Right_One     = create unique Tagged_Many_Right with Attribute_Two   = Test%0A   Assoc_One_One = create Tagged_Single_Assoc with Attribute_Three = Test%0A%0A   link Left_One R3 Right_One using Assoc_One_One%0A%0A   # navigate to prove link%0A%0A   {Set_Of_Right} = Left_One -> R3.Tagged_Many_Right%0A%0A   Number_In_Set = countof {Set_Of_Right}%0A%0A   Expected_Number = 1%0A%0A   Failure_Value = Number_In_Set - Expected_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "M to M Passive Relationships"%2C "Create first three"]%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create all three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2%0A#--------------------------------------------------------------------------%0A%0A   Left_Two      = create unique Tagged_Many_Left  with Attribute_One   = Test%0A   Right_Two     = create unique Tagged_Many_Right with Attribute_Two   = Test%0A   Assoc_Two_Two = create Tagged_Single_Assoc with Attribute_Three = Test%0A%0A   link Left_Two R3 Right_Two using Assoc_Two_Two%0A%0A   # navigate to prove link%0A%0A   {Set_Of_Right} = Left_Two -> R3.Tagged_Many_Right%0A%0A   Number_In_Set = countof {Set_Of_Right}%0A%0A   Expected_Number = 1%0A%0A   Failure_Value = Number_In_Set - Expected_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "M to M Passive Relationships"%2C "Create second three"]%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create all three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A# Test 3%0A#--------------------------------------------------------------------------%0A%0A   Left_Three      = create unique Tagged_Many_Left  with Attribute_One   = Test%0A   Right_Three     = create unique Tagged_Many_Right with Attribute_Two   = Test%0A   Assoc_Three_Three = create Tagged_Single_Assoc with Attribute_Three = Test%0A%0A   link Left_Three R3 Right_Three using Assoc_Three_Three%0A%0A   # navigate to prove link%0A   {Set_Of_Right} = Left_Three -> R3.Tagged_Many_Right%0A%0A   Number_In_Set = countof {Set_Of_Right}%0A%0A   Expected_Number = 1%0A%0A   Failure_Value = Number_In_Set - Expected_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "M to M Passive Relationships"%2C "Create third three"]%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create all three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#--------------------------------------------------------------------------%0A# Test 4%0A#--------------------------------------------------------------------------%0A%0A   Assoc_One_Two = create Tagged_Single_Assoc with Attribute_Three = Test%0A%0A   link Left_One R3 Right_Two using Assoc_One_Two%0A%0A   # navigate to prove link%0A   {Set_Of_Right} = Left_One -> R3.Tagged_Many_Right%0A%0A   Number_In_Set = countof {Set_Of_Right}%0A%0A   Expected_Number = 2%0A%0A   Failure_Value = Number_In_Set - Expected_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "M to M Passive Relationships"%2C "Link one to two via three"]%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create all three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A#--------------------------------------------------------------------------%0A# Test 5%0A#--------------------------------------------------------------------------%0A%0A   Assoc_One_Three = create Tagged_Single_Assoc with Attribute_Three = Test%0A%0A   link Left_One R3 Right_Three using Assoc_One_Three%0A%0A   # navigate to prove link%0A   {Set_Of_Right} = Left_One -> R3.Tagged_Many_Right%0A%0A   Number_In_Set = countof {Set_Of_Right}%0A%0A   Expected_Number = 3%0A%0A   Failure_Value = Number_In_Set - Expected_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "M to M Passive Relationships"%2C "Link one to three "]%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create all three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A#--------------------------------------------------------------------------%0A# Test 6 %0A#--------------------------------------------------------------------------%0A%0A   Assoc_Two_One = create Tagged_Single_Assoc with Attribute_Three = Test%0A%0A   link Left_Two R3 Right_One using Assoc_Two_One%0A%0A   # navigate to prove link%0A   {Set_Of_Right} = Left_Two -> R3.Tagged_Many_Right%0A%0A   Number_In_Set = countof {Set_Of_Right}%0A%0A   Expected_Number = 2%0A%0A   Failure_Value = Number_In_Set - Expected_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "M to M Passive Relationships"%2C "Link two to one"]%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create all three"%2C Failure_Value%2C Supported]%0A  %0A   Test = Test + 1%0A%0A# End Test 6 %0A%0A#--------------------------------------------------------------------------%0A# Test 7%0A#--------------------------------------------------------------------------%0A%0A   Assoc_Two_Three = create Tagged_Single_Assoc with Attribute_Three = Test%0A%0A   link Left_Two R3 Right_Three using Assoc_Two_Three%0A%0A   # navigate to prove link%0A   {Set_Of_Right} = Left_Two -> R3.Tagged_Many_Right%0A%0A   Number_In_Set = countof {Set_Of_Right}%0A%0A   Expected_Number = 3%0A%0A   Failure_Value = Number_In_Set - Expected_Number%0A   %0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "M to M Passive Relationships"%2C "Link two to three"]%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create all three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 7%0A%0A#--------------------------------------------------------------------------%0A# Test 8 %0A#--------------------------------------------------------------------------%0A%0A   Assoc_Three_One = create Tagged_Single_Assoc with Attribute_Three = Test%0A%0A   link Left_Three R3 Right_One using Assoc_Three_One%0A%0A   # navigate to prove link%0A   {Set_Of_Right} = Left_Three -> R3.Tagged_Many_Right%0A%0A   Number_In_Set = countof {Set_Of_Right}%0A%0A   Expected_Number = 2%0A%0A   Failure_Value = Number_In_Set - Expected_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "M to M Passive Relationships"%2C "Link three to one"]%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create all three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A#--------------------------------------------------------------------------%0A# Test 9 %0A#--------------------------------------------------------------------------%0A%0A   Assoc_Three_Two = create Tagged_Single_Assoc with Attribute_Three = Test%0A%0A   link Left_Three R3 Right_Two using Assoc_Three_Two%0A%0A   # navigate to prove link%0A   {Set_Of_Right} = Left_Three -> R3.Tagged_Many_Right%0A%0A   Number_In_Set = countof {Set_Of_Right}%0A%0A   Expected_Number = 3%0A%0A   Failure_Value = Number_In_Set - Expected_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "M to M Passive Relationships"%2C "Link three to two"]%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create all three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A#--------------------------------------------------------------------------%0A%0Amy_test.Number = Test,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Perform_Passive_Super_Sub_Tests,12,,,
codeblock,my_test = find-one Test_Data%0A%0Athis_test = my_test.Number%0A%0Asupported = TRUE%0A%0A#--------------------------------------------------------------------------%0A# Test 1%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[this_test%2C "1241-0000-01-0128"%2C "Tagged"%2C "Passive Super Sub types"%2C "One Super Sub relationship"]%0A%0A   # Create one of one super type objects%0A   Super1 = create unique Tagged_Many_Supertype with Supertype_Data = this_test%0A%0A   #create one of two sub type 1 objects%0A   Sub1_1 = create Subtype_1 with Subtype_1_Data = this_test %0A%0A   link Super1 R4 Sub1_1%0A%0A   # Navigate from the super to the sub%2C and compare the data attribute%0A   view_of_sub1 = Super1 -> R4.Subtype_1%0A%0A   failure_value = view_of_sub1.Subtype_1_Data - Super1.Supertype_Data%0A%0A   [] = TAGS5::Report_Now[this_test%2C "One Super Sub relationship"%2C failure_value%2C supported]%0A%0A   this_test = this_test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[this_test%2C "1241-0000-01-0128"%2C "Tagged"%2C "Passive Super Sub types"%2C "Other Super Sub relationship"]%0A%0A   # Create second of two sub type 1 objects%0A   Sub1_2 = create Subtype_1 with Subtype_1_Data = this_test%0A%0A   # unlink first sub type from super type%0A   unlink Super1 R4 Sub1_1%0A%0A   # Update super 1 data%0A   Super1.Supertype_Data = this_test%0A%0A   #link second subtype to supertype%0A   link Super1 R4 Sub1_2%0A%0A   # Navigate from the super to the sub%2C and compare the data attribute%0A   view_of_sub1 = Super1 -> R4.Subtype_1%0A%0A   failure_value = view_of_sub1.Subtype_1_Data - Super1.Supertype_Data%0A%0A   [] = TAGS5::Report_Now[this_test%2C "Other Super Sub relationship"%2C failure_value%2C supported]%0A%0A   this_test = this_test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A# Test 3%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[this_test%2C "1241-0000-01-0128"%2C "Tagged"%2C "Passive Super Sub types"%2C "Migrate Super Sub relationship"]%0A%0A   # Create sub type 2 object%0A   Sub2 = create Subtype_2 with Subtype_2_Data = this_test%0A%0A   # unlink first sub type from super type%0A   unlink Super1 R4 Sub1_2%0A%0A   # Update super 1 data%0A   Super1.Supertype_Data = this_test%0A%0A   #link second subtype to supertype%0A   link Super1 R4 Sub2%0A%0A   # Navigate from the super to the sub%2C and compare the data attribute%0A   view_of_sub2 = Super1 -> R4.Subtype_2%0A%0A   failure_value = view_of_sub2.Subtype_2_Data - Super1.Supertype_Data%0A%0A   [] = TAGS5::Report_Now[this_test%2C "Migrate Super Sub relationship"%2C failure_value%2C supported]%0A%0A   this_test = this_test + 1%0A%0A# End Test 3%0A%0A#--------------------------------------------------------------------------%0A%0Amy_test.Number = this_test,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Perform_Active_Many_To_Many_Tests,13,,,
codeblock,my_test = find-one Test_Data%0A%0ATest = my_test.Number%0AFailure_Value = 0%0A%0ASupported = TRUE%0A%0A#--------------------------------------------------------------------------%0A# Test 1%0A#--------------------------------------------------------------------------%0A%0A   Left_One      = create unique Active_Tagged_Many_Left  with Attribute_One   = Test & Current_State = 'Idle'%0A   Right_One     = create unique Active_Tagged_Many_Right with Attribute_Two   = Test & Current_State = 'Idle'%0A   Assoc_One_One = create Active_Tagged_Single_Assoc with Attribute_Three = Test & Current_State = 'Idle'%0A%0A   link Left_One R5 Right_One using Assoc_One_One%0A%0A   # navigate to prove link%0A   {Set_Of_Right} = Left_One -> R5.Active_Tagged_Many_Right%0A%0A   Number_In_Set = countof {Set_Of_Right}%0A%0A   Expected_Number = 1%0A%0A   Failure_Value = Number_In_Set - Expected_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "M to M Active Relationships"%2C "Create first three"]%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create all three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2%0A#--------------------------------------------------------------------------%0A%0A   generate ATML1:Go(Test) to Left_One%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A# Test 3%0A#--------------------------------------------------------------------------%0A%0A   generate ATMR1:Go(Test) to Right_One%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#--------------------------------------------------------------------------%0A# Test 4%0A#--------------------------------------------------------------------------%0A%0A   generate ATSASSOC1:Go(Test) to Assoc_One_One%0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A#--------------------------------------------------------------------------%0A# Test 5%0A#--------------------------------------------------------------------------%0A%0A   Left_Two      = create unique Active_Tagged_Many_Left  with Attribute_One   = Test & Current_State = 'Idle'%0A   Right_Two     = create unique Active_Tagged_Many_Right with Attribute_Two   = Test & Current_State = 'Idle'%0A   Assoc_Two_Two = create  Active_Tagged_Single_Assoc with Attribute_Three = Test & Current_State = 'Idle'%0A %0A   link Left_Two R5 Right_Two using Assoc_Two_Two%0A%0A   # navigate to prove link%0A   {Set_Of_Right} = Left_Two -> R5.Active_Tagged_Many_Right%0A%0A   Number_In_Set = countof {Set_Of_Right}%0A%0A   Expected_Number = 1%0A%0A   Failure_Value = Number_In_Set - Expected_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "M to M Active Relationships"%2C "Create second three"]%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create all three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 5%0A%0A#--------------------------------------------------------------------------%0A# Test 6 %0A#--------------------------------------------------------------------------%0A%0A   generate ATML1:Go(Test) to Left_Two%0A %0A   Test = Test + 1%0A%0A# End Test 6%0A%0A#--------------------------------------------------------------------------%0A# Test 7%0A#--------------------------------------------------------------------------%0A%0A   generate ATMR1:Go(Test) to Right_Two%0A%0A   Test = Test + 1%0A%0A# End Test 7%0A%0A#--------------------------------------------------------------------------%0A# Test 8 %0A#--------------------------------------------------------------------------%0A%0A   generate ATSASSOC1:Go(Test) to Assoc_Two_Two%0A%0A   Test = Test + 1%0A%0A# End Test 8%0A%0A#--------------------------------------------------------------------------%0A# Test 9 %0A#--------------------------------------------------------------------------%0A%0A   Left_Three      = create unique Active_Tagged_Many_Left  with Attribute_One = Test & Current_State = 'Idle'%0A   Right_Three     = create unique Active_Tagged_Many_Right with Attribute_Two = Test & Current_State = 'Idle'%0A   Assoc_Three_Three = create Active_Tagged_Single_Assoc with Attribute_Three = Test & Current_State = 'Idle'%0A%0A   link Left_Three R5 Right_Three using Assoc_Three_Three%0A%0A   # navigate to prove link%0A   {Set_Of_Right} = Left_Three -> R5.Active_Tagged_Many_Right%0A%0A   Number_In_Set = countof {Set_Of_Right}%0A   %0A   Expected_Number = 1%0A%0A   Failure_Value = Number_In_Set - Expected_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "M to M Active Relationships"%2C "Create third three"]%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create all three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 9%0A%0A#--------------------------------------------------------------------------%0A# Test 10%0A#--------------------------------------------------------------------------%0A%0A   generate ATML1:Go(Test) to Left_Three%0A%0A   Test = Test + 1%0A%0A# Test 10%0A%0A#--------------------------------------------------------------------------%0A# Test 11%0A#--------------------------------------------------------------------------%0A%0A   generate ATMR1:Go(Test) to Right_Three%0A%0A   Test = Test + 1%0A%0A# End Test 11%0A%0A#--------------------------------------------------------------------------%0A# Test 12%0A#--------------------------------------------------------------------------%0A%0A   generate ATSASSOC1:Go(Test) to Assoc_Three_Three%0A  %0A   Test = Test + 1%0A%0A# End Test 12%0A%0A#--------------------------------------------------------------------------%0A# Test 13%0A#--------------------------------------------------------------------------%0A%0A   Assoc_One_Two = create Active_Tagged_Single_Assoc with Attribute_Three = Test  & Current_State = 'Idle'%0A%0A   link Left_One R5 Right_Two using Assoc_One_Two%0A%0A   # navigate to prove link%0A   {Set_Of_Right} = Left_One -> R5.Active_Tagged_Many_Right%0A%0A   Number_In_Set = countof {Set_Of_Right}%0A%0A   Expected_Number = 2%0A%0A   Failure_Value = Number_In_Set - Expected_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "M to M Active Relationships"%2C "Link one to two via three"]%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create all three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 13%0A%0A#--------------------------------------------------------------------------%0A# Test 14%0A#--------------------------------------------------------------------------%0A%0A   generate ATSASSOC1:Go(Test) to Assoc_One_Two%0A  %0A   Test = Test + 1%0A%0A#--------------------------------------------------------------------------%0A# Test 15%0A#--------------------------------------------------------------------------%0A%0A   Assoc_One_Three = create Active_Tagged_Single_Assoc with Attribute_Three = Test & Current_State = 'Idle'%0A%0A   link Left_One R5 Right_Three using Assoc_One_Three%0A%0A   # navigate to prove link%0A%0A   {Set_Of_Right} = Left_One -> R5.Active_Tagged_Many_Right%0A%0A   Number_In_Set = countof {Set_Of_Right}%0A%0A   Expected_Number = 3%0A%0A   Failure_Value = Number_In_Set - Expected_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "M to M Active Relationships"%2C "Link one to three "]%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create all three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 15%0A%0A#--------------------------------------------------------------------------%0A# Test 16%0A#--------------------------------------------------------------------------%0A%0A   generate ATSASSOC1:Go(Test) to Assoc_One_Three%0A%0A   Test = Test + 1%0A%0A# End Test 16%0A%0A#--------------------------------------------------------------------------%0A# Test 17%0A#--------------------------------------------------------------------------%0A%0A   Assoc_Two_One = create Active_Tagged_Single_Assoc with Attribute_Three = Test & Current_State = 'Idle'%0A%0A   link Left_Two R5 Right_One using Assoc_Two_One%0A%0A   # navigate to prove link%0A   {Set_Of_Right} = Left_Two -> R5.Active_Tagged_Many_Right%0A%0A   Number_In_Set = countof {Set_Of_Right}%0A%0A   Expected_Number = 2%0A%0A   Failure_Value = Number_In_Set - Expected_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "M to M Active Relationships"%2C "Link two to one"]%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create all three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A%0A# End Test 17%0A%0A#--------------------------------------------------------------------------%0A# Test 18%0A#--------------------------------------------------------------------------%0A%0A   generate ATSASSOC1:Go(Test) to Assoc_Two_One%0A  %0A   Test = Test + 1%0A%0A# End Test 18%0A%0A#--------------------------------------------------------------------------%0A# Test 19%0A#--------------------------------------------------------------------------%0A%0A   Assoc_Two_Three = create Active_Tagged_Single_Assoc with Attribute_Three = Test & Current_State = 'Idle'%0A%0A   link Left_Two R5 Right_Three using Assoc_Two_Three%0A%0A   # navigate to prove link%0A   {Set_Of_Right} = Left_Two -> R5.Active_Tagged_Many_Right%0A%0A   Number_In_Set = countof {Set_Of_Right}%0A%0A   Expected_Number = 3%0A%0A   Failure_Value = Number_In_Set - Expected_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "M to M Active Relationships"%2C "Link two to three"]%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create all three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 19%0A%0A#--------------------------------------------------------------------------%0A# Test 20%0A#--------------------------------------------------------------------------%0A%0A   generate ATSASSOC1:Go(Test) to Assoc_Two_Three%0A%0A   Test = Test + 1%0A%0A# End Test 20%0A%0A#--------------------------------------------------------------------------%0A# Test 21%0A#--------------------------------------------------------------------------%0A%0A   Assoc_Three_One = create Active_Tagged_Single_Assoc with Attribute_Three = Test & Current_State = 'Idle'%0A%0A   link Left_Three R5 Right_One using Assoc_Three_One%0A%0A   # navigate to prove link%0A   {Set_Of_Right} = Left_Three -> R5.Active_Tagged_Many_Right%0A%0A   Number_In_Set = countof {Set_Of_Right}%0A%0A   Expected_Number = 2%0A%0A   Failure_Value = Number_In_Set - Expected_Number%0A%0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "M to M Active Relationships"%2C "Link three to one"]%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create all three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 21%0A%0A#--------------------------------------------------------------------------%0A# Test 22%0A#--------------------------------------------------------------------------%0A%0A   generate ATSASSOC1:Go(Test) to Assoc_Three_One%0A%0A   Test = Test + 1%0A%0A# End Test 22%0A%0A#--------------------------------------------------------------------------%0A# Test 23%0A#--------------------------------------------------------------------------%0A%0A   Assoc_Three_Two = create Active_Tagged_Single_Assoc with Attribute_Three = Test & Current_State = 'Idle'%0A%0A   link Left_Three R5 Right_Two using Assoc_Three_Two%0A%0A   # navigate to prove link%0A   {Set_Of_Right} = Left_Three -> R5.Active_Tagged_Many_Right%0A%0A   Number_In_Set = countof {Set_Of_Right}%0A%0A   Expected_Number = 3%0A%0A   Failure_Value = Number_In_Set - Expected_Number%0A   %0A   [] = RPT1:Start_Test[Test%2C "1241-0000-01-0128"%2C "Tagging"%2C "M to M Active Relationships"%2C "Link three to two"]%0A%0A   [] = TAGS5::Report_Now[Test%2C "Create all three"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 23%0A%0A#--------------------------------------------------------------------------%0A# Test 24%0A#--------------------------------------------------------------------------%0A%0A   generate ATSASSOC1:Go(Test) to Assoc_Three_Two%0A%0A   Test = Test + 1%0A%0A# End Test 24%0A%0A#--------------------------------------------------------------------------%0A%0Amy_test.Number = Test%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Perform_Active_Super_Sub_Tests,14,,,
codeblock,my_test = find-one Test_Data%0A%0Athis_test = my_test.Number%0A%0Asupported = TRUE%0A%0A#--------------------------------------------------------------------------%0A# Test 1%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[this_test%2C "1241-0000-01-0128"%2C "Tagged"%2C "Active Super Sub types"%2C "Active One Super Sub relationship"]%0A%0A   # Create one of one super type objects%0A   Super1 = create unique Active_Tagged_Supertype with Supertype_Data = this_test%0A%0A   # create one of two sub type 1 objects%0A   Index_For_Subtype = this_test + 1%0A%0A   # Increase index for test by one more than the test number so that the sub type%2C when it processes%0A   # the polymorphically delivered event%2C will report a different test number. This is so that the report%0A   # will be distinguished by the reporter domain as a separate test.%0A%0A   Sub1_1 = create Active_Tagged_Subtype_One with Subtype_One_Data = this_test & Test_No = Index_For_Subtype %0A%0A   link Super1 R6 Sub1_1%0A%0A   # Navigate from the super to the sub%2C and compare the data attribute%0A   view_of_sub1 = Super1 -> R6.Active_Tagged_Subtype_One%0A%0A   failure_value = view_of_sub1.Subtype_One_Data - Super1.Supertype_Data%0A%0A   [] = TAGS5::Report_Now[this_test%2C "Active One Super Sub relationship"%2C failure_value%2C supported]%0A%0A   this_test = this_test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[this_test%2C "1241-0000-01-0128"%2C "Tagged"%2C "Active Super Sub types"%2C "Other Super Sub relationship"]%0A%0A   Index_For_Subtype = this_test + 1%0A  %0A   # Create second of two sub type 1 objects%0A   Sub1_2 = create Active_Tagged_Subtype_One with Subtype_One_Data = this_test & Test_No = Index_For_Subtype & Current_State = 'Idle'%0A%0A   # unlink first sub type from super type%0A   unlink Super1 R6 Sub1_1%0A%0A   # Update super type data so that it matches new sub type.%0A   Super1.Supertype_Data = this_test%0A%0A   # link second subtype to supertype%0A   link Super1 R6 Sub1_2%0A%0A   # Navigate from the super to the sub%2C and compare the data attribute%0A   view_of_sub1 = Super1 -> R6.Active_Tagged_Subtype_One%0A%0A   failure_value = view_of_sub1.Subtype_One_Data - Super1.Supertype_Data %0A%0A   [] = TAGS5::Report_Now[this_test%2C "Other Super Sub relationship"%2C failure_value%2C supported]%0A%0A   this_test = this_test + 1%0A%0A#--------------------------------------------------------------------------%0A# Test 3%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[this_test%2C "1241-0000-01-0128"%2C "Tagged"%2C "Active Super Sub types"%2C "Migrate Super Sub relationship"]%0A%0A   Index_For_Subtype = this_test + 1%0A%0A   # Create sub type 2 object%0A   Sub2 = create Active_Tagged_Subtype_Two with Subtype_Two_Data = this_test & Test_No = Index_For_Subtype & Current_State = 'Idle'%0A%0A   # unlink first sub type from super type%0A   unlink Super1 R6 Sub1_2%0A  %0A   # Update super type data so that it matches new sub type.%0A   Super1.Supertype_Data = this_test%0A%0A   # link second subtype to supertype%0A   link Super1 R6 Sub2%0A%0A   # Navigate from the super to the sub%2C and compare the data attribute%0A   view_of_sub2 = Super1 -> R6.Active_Tagged_Subtype_Two%0A%0A   failure_value = view_of_sub2.Subtype_Two_Data - Super1.Supertype_Data%0A%0A   [] = TAGS5::Report_Now[this_test%2C "Migrate Super Sub relationship"%2C failure_value%2C supported]%0A%0A   this_test = this_test + 1%0A%0A# End Test 3%0A%0A%0A#--------------------------------------------------------------------------%0A# Test 4%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[this_test%2C "1241-0000-01-0128"%2C "Tagged"%2C "Active Super Sub types"%2C "Migrate Super Sub relationship again"]%0A%0A   Index_For_Subtype = this_test + 1%0A%0A   # Create sub type 2 object%0A   Sub3 = create Active_Tagged_Subtype_Three with Subtype_Three_Data = this_test & Test_No = Index_For_Subtype & Current_State = 'Idle'%0A%0A   # unlink first sub type from super type%0A   unlink Super1 R6 Sub2%0A%0A   # Update super type data so that it matches new sub type.%0A   Super1.Supertype_Data = this_test%0A%0A   # link second subtype to supertype%0A   link Super1 R6 Sub3%0A%0A   # Navigate from the super to the sub%2C and compare the data attribute%0A   view_of_sub3 = Super1 -> R6.Active_Tagged_Subtype_Three%0A%0A   failure_value = view_of_sub3.Subtype_Three_Data - Super1.Supertype_Data%0A%0A   [] = TAGS5::Report_Now[this_test%2C "Migrate Super Sub relationship"%2C failure_value%2C supported]%0A%0A   this_test = this_test + 1%0A%0A# End Test 4%0A%0A#--------------------------------------------------------------------------%0A%0Amy_test.Number = this_test%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Perform_Tests_On_Static_Object,15,,,
codeblock,my_test = find-one Test_Data%0A%0Athis_test = my_test.Number%0A%0Asupported = TRUE%0A%0A#--------------------------------------------------------------------------%0A# Test 1 - Create a static object. By inspection check that there is no%0A#          delete option generated for this object%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[this_test%2C "1241-0000-01-0132"%2C "Tagged"%2C "TAGGING"%2C "Create a STATIC object"]%0A   [] = RPT8:Specify_Requid[this_test%2C "1241-0000-01-0127"]%0A   [] = RPT5:Test_Text [this_test%2C "Must be tested by inspection"]%0A%0A   firstStatic = create A_Static_Object with Unique_ID = 1%0A%0A   if firstStatic != UNDEFINED and firstStatic.Unique_ID = 1 then%0A      [] = RPT2:Test_Passed["Create STATIC oject"%2C this_test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Create STATIC oject"%2C this_test%2C -1]%0A   endif%0A%0A   this_test = this_test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2 - Create a single static object. By inspection check that there is%0A#          no delete option generated for this object%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[this_test%2C "1241-0000-01-0132"%2C "Tagged"%2C "TAGGING"%2C "Create a SINGLE STATIC object"] %0A   [] = RPT8:Specify_Requid[this_test%2C "1241-0000-01-0127"]%0A   [] = RPT5:Test_Text [this_test%2C "Can only be tested by inspection"]%0A%0A   firstSingleStatic = create A_Single_Static_Object with Unique_ID = 1%0A%0A   if firstSingleStatic != UNDEFINED and firstSingleStatic.Unique_ID = 1 then%0A      [] = RPT2:Test_Passed["Create SINGLE STATIC oject"%2C this_test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Create SINGLE STATIC oject"%2C this_test%2C -1]%0A   endif%0A%0A   this_test = this_test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A# Test 3%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[this_test%2C "1241-0000-01-0132"%2C "Tagged"%2C "TAGGING"%2C "Create a MULTIPLE STATIC objects"]%0A   [] = RPT8:Specify_Requid[this_test%2C "1241-0000-01-0127"]%0A   [] = RPT5:Test_Text [this_test%2C "Can only be tested by inspection"]%0A%0A   firstMultiStatic = create A_Multiple_Static_Object with Unique_ID = 1%0A%0A   if firstMultiStatic != UNDEFINED and firstMultiStatic.Unique_ID = 1 then%0A      [] = RPT2:Test_Passed["Create MULTIPLE STATIC oject"%2C this_test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["Create MULTIPLE STATIC oject"%2C this_test%2C -1]%0A   endif%0A%0A   this_test = this_test + 1%0A%0A# End Test 3%0A%0A#--------------------------------------------------------------------------%0A%0Amy_test.Number = this_test,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,Tagged_Terminator,TT,,,,,,
routine,TAGS,,public,A_Tagged_Local_Terminator,1,,,
parameter,Incoming_Parameter_1,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Outgoing_Parameter_1,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,# This is a tagged local terminator%2C and should not be translated into Ada.%0A%0ALocal_Variable = Incoming_Parameter_1%0A%0AOutgoing_Parameter_1 = Local_Variable,,,,,,,
codeblock,,,,,,,,
description, This is a tagged terminitor in an untagged terminator group.%0A,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,A_Tagged_Project_Terminator,3,,,
parameter,Incoming_Parameter_3,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Outgoing_Parameter_3,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,A_Tagged_Dummy_Terminator_One,2,,,
parameter,Mickey_Mouse_Input_One,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Minnie_Mouse_Output_One,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
description, Dummy tagged terminator with odd param names to get around possible I-SIM error%0A,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,A_Tagged_Dummy_Terminator_Two,4,,,
parameter,Input_Two,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Output_Two,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
pragma,hand_coded,,,,,,,
pragmaitem,"",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
terminator,,,,,,,,
terminator,Report,RPT,,,,,,
routine,TAGS,,public,Start_Test,1,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Requid,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Purpose,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,Local_Test_Number = Test_Number%0A%0A#$INLINE%0A%0A# fprintf(stderr%2C " \n");%0A# fprintf(stderr%2C "Test Number                 %25d\n"%2C Local_Test_Number);%0A%0A#$ENDINLINE%0A%0A%0A#$ADA_INLINE%0A# with Ada.Text_IO;%0A#%0A# Ada.Text_IO.New_Line(1);%0A# Ada.Text_IO.Put_Line("Test Number " & integer'image(integer(Local_Test_Number)));%0A# Ada.Text_IO.New_Line(1);%0A#%0A#$END_ADAINLINE%0A%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Test_Passed,2,,,
parameter,Test_Object_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,%0Athe_test = Test_Number%0A%0A#$INLINE%0A#fprintf(stderr%2C "Test Number %25d has PASSED \n"%2C the_test);%0A#$ENDINLINE%0A%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Test_Failed,3,,,
parameter,Failed_Domain_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Failed_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Failed_Test_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,%0Athe_test = Failed_Test_Number%0Adomain   = Failed_Domain_Object%0Afail_value = Failed_Test_Value%0A%0A#$INLINE%0A#fprintf(stderr%2C "Test Number %25d has FAILED with %25d\n"%2C the_test%2C fail_value);%0A#fprintf(stderr%2C "Testing for %25s\n"%2C domain);%0A#$ENDINLINE%0A%0A%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Test_Unsupported,4,,,
parameter,Unsupported_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,%0Athe_test = Unsupported_Test_Number%0A%0A#$INLINE%0A#fprintf(stderr%2C "Test Number %25d is UNSUPPORTED \n"%2C the_test);%0A#$ENDINLINE%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Test_Text,5,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Free_Text,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Domain_Test_Start,6,,,
parameter,This_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Domain_Test_Finished,7,,,
parameter,This_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,This_Domain_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Specify_Requid,8,,,
parameter,Requid_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,The_Requid_Itself,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
terminator,Env_Terminator,ET,,,,,,
routine,TAGS,,public,Env_String,1,,,
parameter,Env_Text,out,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,Env_Text = "ISIM"%0A,,,,,,,
codeblock,,,,,,,,
description, @@TAGS-01-0007%0A,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Env_Number,2,,,
parameter,Env_Integer,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,# @@TAGS-01-0008%0AEnv_Integer = 1%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
terminator,Untagged_Terminator,UT,,,,,,
routine,TAGS,,public,An_Untagged_Local_Terminator,1,,,
parameter,Incoming_Parameter_2,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Outgoing_Parameter_2,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,Local = Incoming_Parameter_2%0A%0AOutgoing_Parameter_2 = Local%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,An_Untagged_Project_Terminator,2,,,
parameter,Incoming_Parameter_4,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Outgoing_Parameter_4,out,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,TAGS,,public,Untagged_Operational_Terminator,3,,,
routine,,,,,,,,
terminator,,,,,,,,
regularrel,R1,,,,,,,
participation,TAGS,Single_Tagged_Object,has,unconditionally,many,TAGS,Many_Tagged_Objects,
participation,TAGS,Many_Tagged_Objects,has,unconditionally,one,TAGS,Single_Tagged_Object,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Many_Tagged_Objects",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Single_Tagged_Object",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, @@TAGS-01-0010%0A,,,,,,,
regularrel,,,,,,,,
regularrel,R2,,,,,,,
participation,TAGS,Active_Tagged_Single_Object,has,unconditionally,many,TAGS,Active_Tagged_Many_Objects,
participation,TAGS,Active_Tagged_Many_Objects,has,unconditionally,one,TAGS,Active_Tagged_Single_Object,
participation,,,,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Active_Tagged_Many_Objects",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Active_Tagged_Single_Object",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
regularrel,,,,,,,,
associative,R3,TAGS,Tagged_Single_Assoc,,,,,
participation,TAGS,Tagged_Many_Left,has,unconditionally,many,TAGS,Tagged_Many_Right,
participation,TAGS,Tagged_Many_Right,has,unconditionally,many,TAGS,Tagged_Many_Left,
participation,,,,,,,,
associative,R3,TAGS,Tagged_Single_Assoc,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Tagged_Many_Right",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Tagged_Many_Left",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, @@TAGS-01-0011%0A,,,,,,,
associative,,,,,,,,
associative,R5,TAGS,Active_Tagged_Single_Assoc,,,,,
participation,TAGS,Active_Tagged_Many_Left,has,unconditionally,many,TAGS,Active_Tagged_Many_Right,
participation,TAGS,Active_Tagged_Many_Right,has,unconditionally,many,TAGS,Active_Tagged_Many_Left,
participation,,,,,,,,
associative,R5,TAGS,Active_Tagged_Single_Assoc,,,,,
pragma,Class_B,,,,,,,
pragmaitem,"Active_Tagged_Many_Right",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,Class_A,,,,,,,
pragmaitem,"Active_Tagged_Many_Left",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
associative,,,,,,,,
subsuper,R4,,,,,,,
participation,,Tagged_Many_Supertype,,,,,,
participation,,Subtype_1,,,,,Tagged_Many_Supertype,
participation,,Subtype_2,,,,,Tagged_Many_Supertype,
participation,,,,,,,,
subsuper,,,,,,,,
subsuper,R6,,,,,,,
participation,,Active_Tagged_Supertype,,,,,,
participation,,Active_Tagged_Subtype_One,,,,,Active_Tagged_Supertype,
participation,,Active_Tagged_Subtype_Two,,,,,Active_Tagged_Supertype,
participation,,Active_Tagged_Subtype_Three,,,,,Active_Tagged_Supertype,
participation,,,,,,,,
subsuper,,,,,,,,
object,Active_Tagged_Many_Left,ATML,23,,,,,
attribute,Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Attribute_One,,,Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
state,,Active_Tagged_Many_Left,Idle,,1,,,
state,,,,,,,,
state,,Active_Tagged_Many_Left,Active,,2,,,
parameter,ATML_Test_No,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,[] = RPT1:Start_Test[ATML_Test_No%2C "1241-0000-01-0128"%2C "Tagging"%2C "Active Tagged Many"%2C "generate to ATML"]%0A%0A# Navigate to the set of instances and the single associated instance.%0A{Set_Of_Right} = this -> R5.Active_Tagged_Many_Right%0A{Set_Of_Assoc} = this -> R5.Active_Tagged_Single_Assoc%0A%0AFound_Assoc = FALSE%0A%0Afor individual_assoc in {Set_Of_Assoc} do%0A%0A   if individual_assoc.Attribute_Three = this.Attribute_One then%0A      Found_Assoc = TRUE%0A      break%0A   endif%0A%0Aendfor%0A%0AFound_Right = FALSE%0A%0Afor individual_right in {Set_Of_Right} do%0A%0A   if individual_right.Attribute_Two = this.Attribute_One then%0A      Found_Right = TRUE%0A      break%0A   endif%0A%0Aendfor%0A%0Ahow_many_in_right = countof {Set_Of_Right}%0Ahow_many_in_assoc = countof {Set_Of_Assoc}%0A%0Aif how_many_in_assoc > 0 then%0A%0A   # There should always be one or more linked instances on the right side%0A   if how_many_in_right > 0 then%0A%0A      if Found_Right then%0A%0A         if Found_Assoc then%0A            [] = RPT2:Test_Passed["generate to ATML"%2C ATML_Test_No%2C 0]%0A         else%0A            [] = RPT3:Test_Failed["generate to ATML"%2C ATML_Test_No%2C -1]%0A         endif%0A%0A      else%0A         [] = RPT3:Test_Failed["generate to ATML"%2C ATML_Test_No%2C -2]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["generate to ATML"%2C ATML_Test_No%2C -3]%0A   endif%0A%0Aelse%0A   [] = RPT3:Test_Failed["generate to ATML"%2C ATML_Test_No%2C -4]%0Aendif,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
event,Go,,1,,,,,
parameter,ATML_Test_No,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,Go,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Go,Active,,,
transition,,,,,,,,
transition,Active,,,Go,Cannot_Happen,,,
transition,,,,,,,,
transitiontable,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"3",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Active_Tagged_Many_Objects,ATMO,14,,,,,
attribute,Unique_Identifier,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R2,,has,Active_Tagged_Single_Object,Unique_Identifier,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Other_Unique_Identifier,preferred,,Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Attribute_Two,,,Other_Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
state,,Active_Tagged_Many_Objects,Idle,,1,,,
state,,,,,,,,
state,,Active_Tagged_Many_Objects,State_One,,2,,,
parameter,ATMO_Test_No,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,[] = RPT1:Start_Test[ATMO_Test_No%2C "Null Requid"%2C "Tagging"%2C "Active Many Tagged Object"%2C "generate to Active Many"]%0A%0ASingle_End = this -> R2.Active_Tagged_Single_Object%0A%0Aif Single_End != UNDEFINED then%0A%0A   if Single_End.Attribute_One = this.Attribute_Two then%0A      [] = RPT2:Test_Passed["generate ATMO"%2C ATMO_Test_No%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["generate ATMO"%2C ATMO_Test_No%2C -2]%0A   endif%0A%0Aelse%0A   [] = RPT3:Test_Failed["generate ATMO"%2C ATMO_Test_No%2C -1]%0Aendif%0A   ,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
event,Go,,1,,,,,
parameter,ATMO_Test_No,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,Go,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Go,State_One,,,
transition,,,,,,,,
transition,State_One,,,Go,Ignore,,,
transition,,,,,,,,
transitiontable,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"3",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Active_Tagged_Many_Right,ATMR,24,,,,,
attribute,Other_Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Attribute_Two,,,Other_Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
state,,Active_Tagged_Many_Right,Idle,,1,,,
state,,,,,,,,
state,,Active_Tagged_Many_Right,Under_Power,,2,,,
parameter,ATMR_Test_No,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,[] = RPT1:Start_Test[ATMR_Test_No%2C "1241-0000-01-0128"%2C "Tagging"%2C "Active Tagged Many"%2C "generate to ATMR"]%0A%0A# Navigate to the set of instances and the single associated instance.%0A{Set_Of_Left} = this -> R5.Active_Tagged_Many_Left%0A{Set_Of_Assoc} = this -> R5.Active_Tagged_Single_Assoc%0A%0AFound_Assoc = FALSE%0A%0Afor individual_assoc in {Set_Of_Assoc} do%0A%0A   if individual_assoc.Attribute_Three = this.Attribute_Two then%0A      Found_Assoc = TRUE%0A      break%0A   endif%0A%0Aendfor%0A%0AFound_Left = FALSE%0A%0Afor individual_left in {Set_Of_Left} do%0A%0A   if individual_left.Attribute_One = this.Attribute_Two then%0A      Found_Left = TRUE%0A      break%0A   endif%0A%0Aendfor%0A%0Ahow_many_in_left = countof {Set_Of_Left}%0Ahow_many_in_assoc = countof {Set_Of_Assoc}%0A%0Aif how_many_in_assoc > 0 then%0A%0A   # There should always be one or more linked instances on the left side%0A   if how_many_in_left > 0 then%0A%0A      if Found_Left then%0A%0A         if Found_Assoc then%0A            [] = RPT2:Test_Passed["generate to ATMR"%2C ATMR_Test_No%2C 0]%0A         else%0A            [] = RPT3:Test_Failed["generate to ATMR"%2C ATMR_Test_No%2C -1]%0A         endif%0A%0A      else%0A         [] = RPT3:Test_Failed["generate to ATMR"%2C ATMR_Test_No%2C -2]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["generate to ATMR"%2C ATMR_Test_No%2C -3]%0A   endif%0A%0Aelse%0A   [] = RPT3:Test_Failed["generate to ATMR"%2C ATMR_Test_No%2C -4]%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
event,Go,,1,,,,,
parameter,ATMR_Test_No,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,Go,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Go,Under_Power,,,
transition,,,,,,,,
transition,Under_Power,,,Go,Cannot_Happen,,,
transition,,,,,,,,
transitiontable,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"3",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Active_Tagged_Single_Assoc,ATSASSOC,25,,,,,
attribute,Assoc_Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R5,,has,Active_Tagged_Many_Left,Unique_Identifier,,,
referential,,,,,,,,
referential,R5,,has,Active_Tagged_Many_Right,Other_Unique_Identifier,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Attribute_Three,,,Assoc_Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
state,,Active_Tagged_Single_Assoc,Idle,,1,,,
state,,,,,,,,
state,,Active_Tagged_Single_Assoc,Blast_Off,,2,,,
parameter,ATS_ASSOC_Test_No,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,[] = RPT1:Start_Test[ATS_ASSOC_Test_No%2C "1241-0000-01-0128"%2C "Tagging"%2C "Active Tagged Many"%2C "generate to ATS_ASSOC"]%0A%0AThe_Left = this -> R5.Active_Tagged_Many_Left%0AThe_Right = this -> R5.Active_Tagged_Many_Right%0A%0Aif The_Left != UNDEFINED then%0A%0A   if The_Right != UNDEFINED then%0A%0A      # If the left and right objects were ment to be linked with this%0A      if The_Right.Attribute_Two = The_Left.Attribute_One then%0A%0A         if The_Right.Attribute_Two = this.Attribute_Three then%0A            [] = RPT2:Test_Passed["generate to ATS_ASSOC"%2C ATS_ASSOC_Test_No%2C 0]%0A         else%0A            [] = RPT3:Test_Failed["generate to ATS_ASSOC"%2C ATS_ASSOC_Test_No%2C -1]%0A         endif%0A%0A         # Else the left and right objects are not the same%2C therefore%0A         # we can't expect the assoc object to share the attribute value.%0A         # At least it is linked to a left and a right instance.%0A      else%0A         [] = RPT2:Test_Passed["generate to ATS_ASSOC"%2C ATS_ASSOC_Test_No%2C 1]%0A      endif%0A%0A   else%0A      [] = RPT3:Test_Failed["generate to ATS_ASSOC"%2C ATS_ASSOC_Test_No%2C -2]%0A   endif%0A%0Aelse%0A   [] = RPT3:Test_Failed["generate to ATS_ASSOC"%2C ATS_ASSOC_Test_No%2C -3]%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
event,Go,,1,,,,,
parameter,ATS_ASSOC_Test_No,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,Go,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Go,Blast_Off,,,
transition,,,,,,,,
transition,Blast_Off,,,Go,Cannot_Happen,,,
transition,,,,,,,,
transitiontable,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"9",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Active_Tagged_Single_Object,ATSO,13,,,,,
attribute,Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Attribute_One,,,Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
state,,Active_Tagged_Single_Object,Idle,,1,,,
state,,,,,,,,
state,,Active_Tagged_Single_Object,State_1,,2,,,
parameter,The_Test_No,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,[] = RPT1:Start_Test[The_Test_No%2C "Null Requid"%2C "Tagging"%2C "Active Tagged Single object"%2C "Generate ATSO"]%0A%0A{Lots_Of_Many_Objects} = this -> R2.Active_Tagged_Many_Objects%0A%0Ahow_many = countof {Lots_Of_Many_Objects}%0A%0Aif how_many = 1 then%0A   [] = RPT2:Test_Passed["Active Tagged Single Object"%2C The_Test_No%2C 0]%0Aelse%0A   [] = RPT3:Test_Failed["Active Tagged Single Object"%2C The_Test_No%2C how_many]%0Aendif,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
event,Run,,1,,,,,
parameter,The_Test_No,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,Run,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Run,State_1,,,
transition,,,,,,,,
transition,State_1,,,Run,Ignore,,,
transition,,,,,,,,
transitiontable,,,,,,,,
pragma,singleton,,,,,,,
pragmaitem,"",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Active_Tagged_Subtype_One,ATSUBONE,27,,,,,
attribute,Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R6,,,,Unique_Identifier,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Subtype_One_Data,,,Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Test_No,,,Subtype_One_Data,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
state,,Active_Tagged_Subtype_One,Idle,,1,,,
state,,,,,,,,
state,,Active_Tagged_Subtype_One,Sub_One_State,,2,,,
state,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,Active_Tagged_Supertype,Get_Off_Your_Arse,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,Active_Tagged_Supertype,Get_Off_Your_Arse,Sub_One_State,,,
transition,,,,,,,,
transition,Sub_One_State,,Active_Tagged_Supertype,Get_Off_Your_Arse,Ignore,,,
transition,,,,,,,,
transitiontable,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"2",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Active_Tagged_Subtype_Three,ATSUBTHREE,29,,,,,
attribute,Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R6,,,,Unique_Identifier,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Subtype_Three_Data,,,Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Test_No,,,Subtype_Three_Data,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
state,,Active_Tagged_Subtype_Three,Idle,,1,,,
state,,,,,,,,
state,,Active_Tagged_Subtype_Three,Sub_Three_State,,2,,,
state,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,Active_Tagged_Supertype,Get_Off_Your_Arse,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,Active_Tagged_Supertype,Get_Off_Your_Arse,Sub_Three_State,,,
transition,,,,,,,,
transition,Sub_Three_State,,Active_Tagged_Supertype,Get_Off_Your_Arse,Ignore,,,
transition,,,,,,,,
transitiontable,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"1",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Active_Tagged_Subtype_Two,ATSUBTWO,28,,,,,
attribute,Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R6,,,,Unique_Identifier,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Subtype_Two_Data,,,Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Test_No,,,Subtype_Two_Data,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
state,,Active_Tagged_Subtype_Two,Idle,,1,,,
state,,,,,,,,
state,,Active_Tagged_Subtype_Two,Sub_Two_State,,2,,,
state,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,Active_Tagged_Supertype,Get_Off_Your_Arse,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,Active_Tagged_Supertype,Get_Off_Your_Arse,Sub_Two_State,,,
transition,,,,,,,,
transition,Sub_Two_State,,Active_Tagged_Supertype,Get_Off_Your_Arse,Ignore,,,
transition,,,,,,,,
transitiontable,,,,,,,,
pragma,singleton,,,,,,,
pragmaitem,"",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Active_Tagged_Supertype,ATSUPER,26,,,,,
attribute,Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Supertype_Data,,,Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
state,,Active_Tagged_Supertype,Idle,,1,,,
state,,,,,,,,
state,,Active_Tagged_Supertype,Not_Idle,,2,,,
state,,,,,,,,
event,Get_Off_Your_Arse,,1,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,Get_Off_Your_Arse,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Get_Off_Your_Arse,Not_Idle,,,
transition,,,,,,,,
transition,Not_Idle,,,Get_Off_Your_Arse,Ignore,,,
transition,,,,,,,,
transitiontable,,,,,,,,
pragma,singleton,,,,,,,
pragmaitem,"",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,An_Active_Array_Of_One_Object,AAAOOO,8,,,,,
attribute,Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Result,,,Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,TAGS,An_Active_Array_Of_One_Object,public,Do_Active_Single_Array_Tests,,,1,
codeblock,#--------------------------------------------------------------------------%0A# The array of 1 should be treated exactly the same way as an object tagged%0A# SINGLETON.%0A#--------------------------------------------------------------------------%0A%0A# Create first of the single active array objects.%0A%0Amy_test = find-one Test_Data%0A%0ATest = my_test.Number%0AThis_Environment = my_test.Environment%0A%0Aif This_Environment = 'WACA' then %0A   Supported = TRUE%0Aelse%0A   Supported = FALSE%0Aendif%0A%0A#--------------------------------------------------------------------------%0A# Test 1 - Create first and only allowable instance of the object%0A#          This will be an asynchronous test.%0A#--------------------------------------------------------------------------%0A%0A   First_Single = create unique An_Active_Array_Of_One_Object with Result = 0 & Current_State = 'Idle'%0A%0A   Value_To_Add = 10%0A   Expected_Result_Value = 10%0A%0A   generate AAAOOO1:Start(Test%2C Value_To_Add%2C "Create first object"%2C Expected_Result_Value) to First_Single%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2 - This will be a synchronous test.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "Single Array Active Object"%2C "Inhibit second instance"]%0A%0A   # Second_Single = create unique An_Active_Array_Of_One_Object with Result = 0 & Current_State = 'Idle'%0A   # {Set_Of_Single_Array} = find-all An_Active_Array_Of_One_Object%0A   # Number_Of_Single_Array = countof {Set_Of_Single_Array}%0A   # Should only be 1%2C but reporter widget expects a zero in the Failure field for a pass.%0A   # So if there are more than one instances found%2C this should be reported as an%0A   # error.%0A   # Failure_Value = Number_Of_Single_Array - 1%0A   # [] = TAGS5::Report_Now[Test%2C "Inhibit second instance"%2C Failure_Value%2C Supported]%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A# Test 3 - Prove that the instance handle for the second instance is %0A#          UNDEFINED%2C or in ada's case%2C NULL.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "Single Array Active Object"%2C "Second instance is null"]%0A%0A   # if Second_Single = UNDEFINED then%0A   #   Failure_Value = 0%0A   # else%0A   #   Failure_Value = 1%0A   #   # It isn't supposed to be here%2C so get rid of it.%0A   #   delete Second_Single%0A   # endif%0A   # [] = TAGS5::Report_Now[Test%2C "Second instance is null"%2C Failure_Value%2C Supported]%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   # Perform some synchronous tests as a result of this asynchronous service.%0A%0A   generate AAAOOO3:Lets_Test() to First_Single%0A   %0A%0A   # Prove that the first legal instance can be deleted and a new one created in it's place.%0A   # This processing will be done when the event is unqueued. It shall effectively delete%0A   # First_Single instance%2C and create a new one and generate an event to the new instance%0A   # to prove that it can execute its' state machine correctly.%0A%0A   # In the wrong hands%2C this could turn into a recursive call. If the Phoenix event was sent to%0A   # the new instance in the state machine by the deleted state machine%2C there would be no return. %0A   # Ever.%0A%0A   generate AAAOOO4:Phoenix() to First_Single%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#--------------------------------------------------------------------------%0A%0Amy_test.Number = Test%0A,,,,,,,
codeblock,,,,,,,,
description, @@TAGS-01-0004%0A,,,,,,,
operation,,,,,,,,
state,,An_Active_Array_Of_One_Object,Idle,,1,,,
parameter,Final_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Purpose,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Tell_Tales,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,my_test = find-one Test_Data%0A%0ATest = my_test.Number%0AThis_Environment = my_test.Environment%0A%0Aif This_Environment = 'WACA' then %0A   Supported = TRUE%0Aelse%0A   Supported = FALSE%0Aendif%0A%0A%0Aif this.Result = Final_Value then%0A   Failure_Value = 0%0Aelse%0A   Failure_Value = 1%0Aendif%0A%0Aif Tell_Tales then%0A   [] = TAGS5::Report_Now[Test_Number%2C Purpose%2C Failure_Value%2C Supported]%0Aendif%0A%0A,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,An_Active_Array_Of_One_Object,Do_Something,,2,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Add,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Purpose,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Expected_Result,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,[] = RPT1:Start_Test [Test_Number%2C "Null Requid"%2C "Tagging"%2C "Single Array Active Object"%2C Purpose]%0A%0Athis.Result = Add%0A%0ATest_Purpose = Purpose%0ATest_Expected_Result = Expected_Result%0ANumber_Of_Test = Test_Number%0A%0Agenerate AAAOOO2:Finish(Test_Expected_Result%2CNumber_Of_Test%2CTest_Purpose%2C TRUE) to this%0A%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,An_Active_Array_Of_One_Object,Delete_Self,,3,,,
codeblock,my_test = find-one Test_Data%0A%0ATest = my_test.Number%0A%0AThis_Environment = my_test.Environment%0A%0Aif This_Environment = 'WACA' then %0A   Supported = TRUE%0Aelse%0A   Supported = FALSE%0Aendif%0A%0A#--------------------------------------------------------------------------%0A# Test 1 - This test shall prove that this instance can delete itself%2C and %0A#          another created in it's place.%0A%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test [Test%2C "Null Requid"%2C "Tagging"%2C "Single Array Active Object"%2C "Delete self"]%0A%0A   # There should be no more events queued to this instance%2C so delete it.%0A   delete this%0A%0A   if this = UNDEFINED then%0A      Failure_Value = 0%0A   else%0A      Failure_Value = 1%0A   endif%0A%0A   [] = TAGS5::Report_Now[Test%2C "Delete self"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2 - Create new instance This is an asynchronous test.%0A#--------------------------------------------------------------------------%0A%0A   New_Single = create unique An_Active_Array_Of_One_Object with Result = 0 & Current_State = 'Idle'%0A%0A   Value_To_Add = 20%0A   Expected_Result_Value = 20%0A%0A   generate AAAOOO1:Start(Test%2C Value_To_Add%2C "Create new instance"%2C Expected_Result_Value) to New_Single%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A# Perhaps this will generate an event onto the queue%2C which will be processed after%0A# the finish event is generated from Replacement_Instance%0A#--------------------------------------------------------------------------%0Agenerate TD1:Tests_Are_Over() to my_test%0A%0ATest = Test + 1%0A%0A#--------------------------------------------------------------------------%0A%0Amy_test.Number = Test,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,An_Active_Array_Of_One_Object,Do_Some_More_Tests,,4,,,
codeblock,# The array of 1 should be treated exactly the same way as an object tagged%0A# SINGLETON.%0A%0A# Create first of the single active array objects.%0A%0Amy_test = find-one Test_Data%0A%0ATest = my_test.Number%0AThis_Environment = my_test.Environment%0A%0Aif This_Environment = 'WACA' then %0A   Supported = TRUE%0Aelse%0A   Supported = FALSE%0Aendif%0A%0A#--------------------------------------------------------------------------%0A# Test 1- This will be a synchronous test.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "Single Array Active Object"%2C "Inhibit second instance"]%0A%0A   # This test shall prove that a second instance is not allowed. NB the first instance is actually%0A   # the instance we are currently in%2C ie. this state in 'this'%0A%0A   # Second_Single = create unique An_Active_Array_Of_One_Object with Result = 0 & Current_State = 'Idle'%0A%0A   # {Set_Of_Single_Array} = find-all An_Active_Array_Of_One_Object%0A%0A   # Number_Of_Single_Array = countof {Set_Of_Single_Array}%0A%0A   # Should only be 1%2C but reporter widget expects a zero in the Failure field for a pass.%0A   # So if there are more than one instances found%2C this should be reported as an%0A   # error.%0A%0A   # Failure_Value = Number_Of_Single_Array - 1%0A%0A   # [] = TAGS5::Report_Now[Test%2C "Inhibit second instance"%2C Failure_Value%2C Supported]%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2 - Prove that the instance handle for the second instance is %0A#          UNDEFINED%2C or in ada's case%2C NULL.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "Single Array Active Object"%2C "Second instance is null"]%0A%0A   # if Second_Single = UNDEFINED then%0A   #   Failure_Value = 0%0A   # else%0A   #   Failure_Value = 1%0A   # It isn't supposed to be here%2C so get rid of it.%0A   #   delete Second_Single%0A   # endif%0A%0A   # [] = TAGS5::Report_Now[Test%2C "Second instance is null"%2C Failure_Value%2C Supported]%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0Amy_test.Number = Test%0A%0A# Transistion back into 'Idle' state%2C but don't report anything.%0Agenerate AAAOOO2:Finish(0%2C0%2C"null"%2C FALSE) to this%0A,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
event,Start,,1,,,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Add,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Purpose,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Expected_Result,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,Finish,,2,,,,,
parameter,Final_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Purpose,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Tell_Tales,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,Lets_Test,,3,,,,,
event,,,,,,,,
event,Phoenix,,4,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,Start,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Finish,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Lets_Test,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Phoenix,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Start,Do_Something,,,
transition,,,,,,,,
transition,Idle,,,Finish,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Lets_Test,Do_Some_More_Tests,,,
transition,,,,,,,,
transition,Idle,,,Phoenix,Delete_Self,,,
transition,,,,,,,,
transition,Do_Something,,,Start,Cannot_Happen,,,
transition,,,,,,,,
transition,Do_Something,,,Finish,Idle,,,
transition,,,,,,,,
transition,Do_Something,,,Lets_Test,Cannot_Happen,,,
transition,,,,,,,,
transition,Do_Something,,,Phoenix,Cannot_Happen,,,
transition,,,,,,,,
transition,Delete_Self,,,Start,Cannot_Happen,,,
transition,,,,,,,,
transition,Delete_Self,,,Finish,Cannot_Happen,,,
transition,,,,,,,,
transition,Delete_Self,,,Lets_Test,Cannot_Happen,,,
transition,,,,,,,,
transition,Delete_Self,,,Phoenix,Cannot_Happen,,,
transition,,,,,,,,
transition,Do_Some_More_Tests,,,Start,Cannot_Happen,,,
transition,,,,,,,,
transition,Do_Some_More_Tests,,,Finish,Idle,,,
transition,,,,,,,,
transition,Do_Some_More_Tests,,,Lets_Test,Cannot_Happen,,,
transition,,,,,,,,
transition,Do_Some_More_Tests,,,Phoenix,Cannot_Happen,,,
transition,,,,,,,,
transitiontable,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"1",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,An_Active_Array_Of_Three_Objects,AAAOTO,9,,,,,
attribute,Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Result,,,Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
operation,TAGS,An_Active_Array_Of_Three_Objects,public,Do_Active_Many_Array_Tests,,,1,
codeblock,#-----------------------------------------------------------------------------%0A# The array of 1 should be treated exactly the same way as an object tagged%0A# SINGLETON.%0A#-----------------------------------------------------------------------------%0A# @@TAGS-01-0005%0A# Create first of the single active array objects.%0A%0Amy_test = find-one Test_Data%0A%0ATest = my_test.Number%0AThis_Environment = my_test.Environment%0A%0Aif This_Environment = 'WACA' then %0A   Supported = TRUE%0Aelse%0A   Supported = FALSE%0Aendif%0A%0A#-----------------------------------------------------------------------------%0A# Test 1 - Create first%2C second & third instances of the object%0A#          This will be an asynchronous test.%0A#-----------------------------------------------------------------------------%0A%0A   First_Of_Three  = create unique An_Active_Array_Of_Three_Objects with Result = 0 & Current_State = 'Idle'%0A   Second_Of_Three = create unique An_Active_Array_Of_Three_Objects with Result = 0 & Current_State = 'Idle'%0A   Third_Of_Three  = create unique An_Active_Array_Of_Three_Objects with Result = 0 & Current_State = 'Idle'%0A%0A   Value_To_Add = 10%0A   Expected_Result_Value = 10%0A  %0A   generate AAAOTO1:Start(Test%2C Value_To_Add%2C "Create first object"%2C Expected_Result_Value) to First_Of_Three%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A#-----------------------------------------------------------------------------%0A# Test 2%0A#-----------------------------------------------------------------------------%0A%0A   generate AAAOTO1:Start(Test%2C Value_To_Add%2C "Create second object"%2C Expected_Result_Value) to Second_Of_Three%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#-----------------------------------------------------------------------------%0A# Test 3%0A#-----------------------------------------------------------------------------%0A%0A   generate AAAOTO1:Start(Test%2C Value_To_Add%2C "Create third object"%2C Expected_Result_Value) to Third_Of_Three%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#-----------------------------------------------------------------------------%0A# Test 4 - This will be a synchronous test.%0A#-----------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "Multiple Array Active Object"%2C "Inhibit fourth instance"]%0A%0A   # Fourth_Of_Three = create unique An_Active_Array_Of_Three_Objects with Result = 0 & Current_State = 'Idle'%0A   # {Set_Of_Multiple_Array} = find-all An_Active_Array_Of_Three_Objects%0A   # Number_Of_Multiple_Array = countof {Set_Of_Multiple_Array}%0A   # Should only be 3%2C but reporter widget expects a zero in the Failure field for a pass.%0A   # So if there are more than one instances found%2C this should be reported as an%0A   # error.%0A   # Failure_Value = Number_Of_Multiple_Array - 3%0A   # [] = TAGS5::Report_Now[Test%2C "Inhibit fourth instance"%2C Failure_Value%2C Supported]%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   Test = Test + 1%0A%0A# End Test 4%0A%0A#-----------------------------------------------------------------------------%0A# Test 5 - Prove that the instance handle for the second instance is UNDEFINED%0A#          %2C or in ada's case%2C NULL.%0A#-----------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "Multiple Array Active Object"%2C "Fourth instance is null"]%0A%0A%0A   # if Fourth_Of_Three = UNDEFINED then%0A   #   Failure_Value = 0%0A   # else%0A   #   Failure_Value = 1%0A   #   # It isn't supposed to be here%2C so get rid of it.%0A   #   delete Fourth_Of_Three%0A   # endif%0A   # [] = TAGS5::Report_Now[Test%2C "Fourth instance is null"%2C Failure_Value%2C Supported]%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A# End Test 5%0A%0A#-----------------------------------------------------------------------------%0A# Test 6 - Perform some synchronous tests as a result of this asynchronous %0A#          service.%0A#-----------------------------------------------------------------------------%0A%0A   generate AAAOTO4:Do_More() to First_Of_Three%0A   generate AAAOTO4:Do_More() to Second_Of_Three%0A   generate AAAOTO4:Do_More() to Third_Of_Three%0A%0A   # Prove that the first legal instance can be deleted and a new one created in it's place.%0A   # This processing will be done when the event is unqueued. It shall effectively delete%0A   # First_Of_Three instance%2C and create a new one and generate an event to the new instance%0A   # to prove that it can execute its' state machine correctly.%0A%0A   # In the wrong hands%2C this could turn into a recursive call. If the Phoenix event was sent to%0A   # the new instance in the state machine by the deleted state machine%2C there would be no return. %0A   # Ever.%0A%0A   generate AAAOTO3:Phoenix() to First_Of_Three%0A   generate AAAOTO3:Phoenix() to Second_Of_Three%0A   generate AAAOTO3:Phoenix() to Third_Of_Three%0A %0A   Test = Test + 1%0A%0A# End Test 6%0A%0A#-----------------------------------------------------------------------------%0A# Finally increment the test number to show the next available number.%0A#-----------------------------------------------------------------------------%0A%0Amy_test.Number = Test,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
state,,An_Active_Array_Of_Three_Objects,Idle,,1,,,
parameter,Final_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Purpose,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Tell_Tales,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,my_test = find-one Test_Data%0A%0ATest = my_test.Number%0AThis_Environment = my_test.Environment%0A%0Aif This_Environment = 'WACA' then %0A   Supported = TRUE%0Aelse%0A   Supported = FALSE%0Aendif%0A%0Aif this.Result = Final_Value then%0A   Failure_Value = 0%0Aelse%0A   Failure_Value = 1%0Aendif%0A%0Aif Tell_Tales then%0A   [] = TAGS5::Report_Now[Test_Number%2C Purpose%2C Failure_Value%2C Supported]%0Aendif%0A%0A,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,An_Active_Array_Of_Three_Objects,Do_Something,,2,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Add,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Purpose,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Expected_Result,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,[] = RPT1:Start_Test [Test_Number%2C "Null Requid"%2C "Tagging"%2C "Multiple Array Active Object"%2C Purpose]%0A%0Athis.Result = Add%0A%0ATest_Purpose = Purpose%0ATest_Expected_Result = Expected_Result%0ANumber_Of_Test = Test_Number%0A%0Agenerate AAAOTO2:Finish(Test_Expected_Result%2CNumber_Of_Test%2CTest_Purpose%2C TRUE) to this%0A%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,An_Active_Array_Of_Three_Objects,Delete_One_Self,,3,,,
codeblock,my_test = find-one Test_Data%0A%0ATest = my_test.Number%0A%0AThis_Environment = my_test.Environment%0A%0Aif This_Environment = 'WACA' then %0A   Supported = TRUE%0Aelse%0A   Supported = FALSE%0Aendif%0A%0A#--------------------------------------------------------------------------%0A# Test 1 - This test shall prove that this instance can delete itself%2C and another%0A#          created in it's place.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test [Test%2C "Null Requid"%2C "Tagging"%2C "Multiple Array Active Object"%2C "Delete self"]%0A%0A   # There should be no more events queued to this instance%2C so delete it.%0A   delete this%0A%0A   # You would think that since 'this' no longer exists%2C any further processing here is%0A   # at best irrelevant%2C or at worst illegal. However%2C further processing still takes place%2C%0A   # but any access to this.attributes or identifiers is prevented%2C and the generation of an event%0A   # to this is also prevented. This has been tested fully in the Events domain.%0A%0A   if this = UNDEFINED then%0A      Failure_Value = 0%0A   else%0A      Failure_Value = 1%0A   endif%0A%0A   [] = TAGS5::Report_Now[Test%2C "Delete self"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2 - Create new instance This is an asynchronous test.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test [Test%2C "Null Requid"%2C "Tagging"%2C "Multiple Array Active Object"%2C "Recreate self"]%0A%0A   Replacement_Instance = create unique An_Active_Array_Of_Three_Objects with Result = 0 & Current_State = 'Idle'%0A%0A   if Replacement_Instance != UNDEFINED then%0A      Failure_Value = 0%0A   else%0A      Failure_Value = 1%0A   endif%0A%0A   # Creation instances are not supported yet by WACA.%0A   if This_Environment = 'WACA' then %0A      Supported = FALSE%0A   else%0A      Supported = TRUE%0A   endif%0A%0A   [] = TAGS5::Report_Now[Test%2C "Recreate self"%2C Failure_Value%2C Supported]%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A%0AValue_To_Add = 20%0AExpected_Result_Value = 20%0A%0Agenerate AAAOTO1:Start(Test%2C Value_To_Add%2C "Create new instance"%2C Expected_Result_Value) to Replacement_Instance%0A%0A#--------------------------------------------------------------------------%0A%0ATest = Test + 1%0A%0Amy_test.Number = Test,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,An_Active_Array_Of_Three_Objects,More_Tests,,4,,,
codeblock,%0Amy_test = find-one Test_Data%0A%0ATest = my_test.Number%0AThis_Environment = my_test.Environment%0A%0Aif This_Environment = 'WACA' then %0A   Supported = TRUE%0Aelse%0A   Supported = FALSE%0Aendif%0A%0A#--------------------------------------------------------------------------%0A# Test 1 - This will be a synchronous test.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "Multiple Array Active Object"%2C "Inhibit fourth instance"]%0A%0A   # This test shall prove that a fourth instance is not allowed. %0A   # Fourth = create unique An_Active_Array_Of_Three_Objects with Result = 0 & Current_State = 'Idle'%0A   # {Set_Of_Multiple_Array} = find-all An_Active_Array_Of_Three_Objects%0A   # Number_Of_Multiple_Array = countof {Set_Of_Multiple_Array}%0A   # Should only be 3%2C but reporter widget expects a zero in the Failure field for a pass.%0A   # So if there are more than one instances found%2C this should be reported as an%0A   # error.%0A   # All three allowable instances have been created in the synch service BEFORE the event which%0A   # caused this operation was generated. %0A   # So there should be three instances in existance when this bit is processed.%0A   # That's the theory anyway. If this is not so%2C then a failure will be logged.%0A   # Failure_Value = Number_Of_Multiple_Array - 3%0A   # [] = TAGS5::Report_Now[Test%2C "Inhibit fourth instance"%2C Failure_Value%2C Supported]%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2 - Prove that the instance handle for the fourth instance is %0A#          UNDEFINED%2C or in ada's case%2C NULL.%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C "Null Requid"%2C "Tagging"%2C "Multiple Array Active Object"%2C "Fourth instance is null"]%0A%0A   # if Fourth = UNDEFINED then%0A   #   Failure_Value = 0%0A   # else%0A   #   Failure_Value = 1%0A   #   # It isn't supposed to be here%2C so get rid of it.%0A   #   delete Fourth%0A   #endif%0A%0A   #[] = TAGS5::Report_Now[Test%2C "Fourth instance is null"%2C Failure_Value%2C Supported]%0A%0A   [] = RPT4:Test_Unsupported[Test]%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A%0Amy_test.Number = Test%0A%0A# Transition back into 'Idle' state%2C but don't report anything.%0Agenerate AAAOTO2:Finish(0%2C0%2C"null"%2C FALSE) to this%0A,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
event,Start,,1,,,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Add,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Purpose,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Expected_Result,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,Finish,,2,,,,,
parameter,Final_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Purpose,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Tell_Tales,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
description, @@TAGS-01-0006%0A,,,,,,,
event,,,,,,,,
event,Phoenix,,3,,,,,
event,,,,,,,,
event,Do_More,,4,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,Start,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Finish,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Phoenix,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Do_More,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Start,Do_Something,,,
transition,,,,,,,,
transition,Idle,,,Finish,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Phoenix,Delete_One_Self,,,
transition,,,,,,,,
transition,Idle,,,Do_More,More_Tests,,,
transition,,,,,,,,
transition,Do_Something,,,Start,Cannot_Happen,,,
transition,,,,,,,,
transition,Do_Something,,,Finish,Idle,,,
transition,,,,,,,,
transition,Do_Something,,,Phoenix,Cannot_Happen,,,
transition,,,,,,,,
transition,Do_Something,,,Do_More,Cannot_Happen,,,
transition,,,,,,,,
transition,Delete_One_Self,,,Start,Cannot_Happen,,,
transition,,,,,,,,
transition,Delete_One_Self,,,Finish,Cannot_Happen,,,
transition,,,,,,,,
transition,Delete_One_Self,,,Phoenix,Cannot_Happen,,,
transition,,,,,,,,
transition,Delete_One_Self,,,Do_More,Cannot_Happen,,,
transition,,,,,,,,
transition,More_Tests,,,Start,Cannot_Happen,,,
transition,,,,,,,,
transition,More_Tests,,,Finish,Idle,,,
transition,,,,,,,,
transition,More_Tests,,,Phoenix,Cannot_Happen,,,
transition,,,,,,,,
transition,More_Tests,,,Do_More,Cannot_Happen,,,
transition,,,,,,,,
transitiontable,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"3",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,An_Active_Object,AAO,2,,,,,
attribute,Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Result,,,Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
state,,An_Active_Object,Idle,,1,,,
codeblock,# Update 'Result' attribute to show that we have transitioned back here %0A# from the 'act' state%0A%0Alocal_data = this.Result %0A%0Alocal_data = local_data + 100%0A%0Athis.Result = local_data,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,An_Active_Object,Act,,2,,,
parameter,Value_To_Add,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,# Update the results attribute to show that we got here at least.%0A%0Alocal_data = this.Result%0A%0Alocal_data = local_data + Value_To_Add%0A%0Athis.Result = local_data%0A%0A,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,An_Active_Object,Exterminate,,3,,,
codeblock,# Show that we got here from the 'Act' state%0A%0Alocal_data = this.Result%0A%0Alocal_data = local_data + 10%0A%0Athis.Result = local_data,,,,,,,
codeblock,,,,,,,,
description, This state shall show that a tagged active instance can %0A arrive at this state%2C and this should therefore prevent %0A another instance of this object being created until it %0A is deleted%2C or by being forced into the Expire state.%0A,,,,,,,
state,,,,,,,,
state,,An_Active_Object,Expire,terminal,4,,,
codeblock,delete this,,,,,,,
codeblock,,,,,,,,
description, This state shall delete this instance on the active object.%0A The purpose of this is to prove that a tagged active object%0A can be deleted by itself%2C and so can then be recreated%0A later.%0A,,,,,,,
state,,,,,,,,
event,Start_Your_Engines,,1,,,,,
parameter,Value_To_Add,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,Switch_Off,,2,,,,,
event,,,,,,,,
event,Floor_It,,3,,,,,
event,,,,,,,,
event,Crash_It,,4,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,Start_Your_Engines,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Switch_Off,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Floor_It,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Crash_It,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Start_Your_Engines,Act,,,
transition,,,,,,,,
transition,Idle,,,Switch_Off,Ignore,,,
transition,,,,,,,,
transition,Idle,,,Floor_It,Ignore,,,
transition,,,,,,,,
transition,Idle,,,Crash_It,Ignore,,,
transition,,,,,,,,
transition,Act,,,Start_Your_Engines,Ignore,,,
transition,,,,,,,,
transition,Act,,,Switch_Off,Idle,,,
transition,,,,,,,,
transition,Act,,,Floor_It,Exterminate,,,
transition,,,,,,,,
transition,Act,,,Crash_It,Expire,,,
transition,,,,,,,,
transition,Exterminate,,,Start_Your_Engines,Ignore,,,
transition,,,,,,,,
transition,Exterminate,,,Switch_Off,Ignore,,,
transition,,,,,,,,
transition,Exterminate,,,Floor_It,Ignore,,,
transition,,,,,,,,
transition,Exterminate,,,Crash_It,Expire,,,
transition,,,,,,,,
transition,Expire,,,Start_Your_Engines,Cannot_Happen,,,
transition,,,,,,,,
transition,Expire,,,Switch_Off,Cannot_Happen,,,
transition,,,,,,,,
transition,Expire,,,Floor_It,Cannot_Happen,,,
transition,,,,,,,,
transition,Expire,,,Crash_It,Cannot_Happen,,,
transition,,,,,,,,
transitiontable,,,,,,,,
pragma,singleton,,,,,,,
pragmaitem,"2",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,A_Multiple_Static_Object,AMSO,33,,,,,
attribute,Unique_ID,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"2",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,static,,,,,,,
pragmaitem,"",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,A_Passive_Array_Of_One_Object,APAOOO,4,,,,,
attribute,Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"1",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,A_Passive_Array_Of_Three_Objects,APAOTO,10,,,,,
attribute,Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"3",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,A_Passive_Static_Object,APSO,3,,,,,
attribute,Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Size,,,Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
pragma,singleton,,,,,,,
pragmaitem,"1",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,A_Single_Static_Object,ASSO,32,,,,,
attribute,Unique_ID,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
pragma,singleton,,,,,,,
pragmaitem,"",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,static,,,,,,,
pragmaitem,"",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,A_Static_Object,ASO,31,,,,,
attribute,Unique_ID,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
description, @@TAGS-V01-0003%0A,,,,,,,
attribute,,,,,,,,
pragma,static,,,,,,,
pragmaitem,"",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Check_On_Active_Object,CHECK,6,,,,,
attribute,check_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
state,,Check_On_Active_Object,Idle,,1,,,
state,,,,,,,,
state,,Check_On_Active_Object,Check_State,,2,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Active_IH,in,,,,,,
typeref,instance of An_Active_Object,,,,,,,
typeref,,,,,,,,
parameter,Testing_For,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Expected,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Your_Presence_Is_Required,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,Call_To_Reset,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,[] = RPT1:Start_Test[Test_Number%2C "Null Requid"%2C "Tagged"%2C "Active Object"%2C Testing_For]%0A%0A# Known bug in I-SIM%0A%0Alocal_IH = Active_IH%0A%0Aif local_IH = UNDEFINED then%0A%0A   if Your_Presence_Is_Required = FALSE then%0A      [] = RPT2:Test_Passed[Testing_For%2C Test_Number%2C 0]%0A   else%0A      [] = RPT3:Test_Failed[Testing_For%2C Test_Number%2C -1]%0A   endif%0A%0Aelse%0A%0A   # Can't rely on the passed IH still being current (deep shallow copy etc)%0A   # The problem arises when the scenario generates the Crash_It event to %0A   # the active object. This deletes the active object%2C but the instance handle%0A   # local to the scenario isn't updated%2C as it is only a shallow copy of the %0A   # instance.%0A%0A   # So try to find the instance indicated by the passed IH%0A%0A   My_Active_Object = find-one An_Active_Object where Unique_Identifier = local_IH.Unique_Identifier%0A   My_Test_Data     = find-one Test_Data%0A%0A   # If it still exists%0A   if My_Active_Object != UNDEFINED then%0A%0A      # and we want it to still exist%0A      if Your_Presence_Is_Required then%0A%0A         The_Result = My_Active_Object.Result%0A%0A         # and it has the correct result%0A         if Expected = The_Result then%0A            [] = RPT2:Test_Passed[Testing_For%2C Test_Number%2C Expected]%0A         else%0A            [] = RPT3:Test_Failed[Testing_For%2C Test_Number%2C The_Result]%0A         endif%0A%0A      # else it still exists%2C but we weren't expecting it to be%0A      else%0A%0A         # Is this an I-SIM run%0A         if My_Test_Data.Environment = 'ISIM' then%0A            [] = RPT4:Test_Unsupported[Test_Number]%0A            # Must be a WACA run%2C therefore this is a problem%0A         else%0A            [] = RPT3:Test_Failed[Testing_For%2C Test_Number%2C -2]%0A         endif%0A%0A      endif%0A%0A   # else it doesn't exist%0A   else%0A%0A      # but we expected it to%0A      if Your_Presence_Is_Required then%0A         # Active Object should have been found but wasn't%0A         [] = RPT3:Test_Failed[Testing_For%2C Test_Number%2C -3]%0A      else%0A         # Active Object should not have been found%2C and wasn't!%0A         [] = RPT2:Test_Passed[Testing_For%2C Test_Number%2C Expected]%0A      endif%0A%0A   endif%0A%0Aendif%0A%0A%0Aif Call_To_Reset then%0A   # Transition back into the idle state to check more Active object operations.%0A   generate CHECK3:Reset() to this%0Aelse%0A   # Final test in active test set. bTidy up and report%0A   generate CHECK2:Finish() to this%0Aendif,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
state,,Check_On_Active_Object,Self_Terminate,,3,,,
codeblock,#[] = TAGS3::Delete_Report_Domain[]%0A%0Adelete this%0A,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
event,Start,,1,,,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Active_IH,in,,,,,,
typeref,instance of An_Active_Object,,,,,,,
typeref,,,,,,,,
parameter,Testing_For,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Expected,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Your_Presence_Is_Required,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,Call_To_Reset,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
event,,,,,,,,
event,Finish,,2,,,,,
event,,,,,,,,
event,Reset,,3,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,Start,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Finish,Cannot_Happen,,,
transition,,,,,,,,
transition,Non_Existent,,,Reset,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Start,Check_State,,,
transition,,,,,,,,
transition,Idle,,,Finish,Ignore,,,
transition,,,,,,,,
transition,Idle,,,Reset,Ignore,,,
transition,,,,,,,,
transition,Check_State,,,Start,Ignore,,,
transition,,,,,,,,
transition,Check_State,,,Finish,Self_Terminate,,,
transition,,,,,,,,
transition,Check_State,,,Reset,Idle,,,
transition,,,,,,,,
transition,Self_Terminate,,,Start,Ignore,,,
transition,,,,,,,,
transition,Self_Terminate,,,Finish,Ignore,,,
transition,,,,,,,,
transition,Self_Terminate,,,Reset,Ignore,,,
transition,,,,,,,,
transitiontable,,,,,,,,
object,,,,,,,,
object,Just_Multiple,JM,34,,,,,
attribute,idJM,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"2",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Many_Tagged_Objects,MTO,12,,,,,
attribute,Other_Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Unique_Identifier,,,Other_Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R1,,has,Single_Tagged_Object,Unique_Identifier,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Attribute_Two,,,Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"3",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Multiplicity_Glitch_Recovery,MGR,22,,,,,
attribute,mgr_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,An_Integer,,,mgr_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
pragma,non_initialised,,,,,,,
pragmaitem,"",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"3",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Multiplicity_Single_Glitch_Recovery_Object,MSGR,30,,,,,
attribute,msgr_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Attribute_One,,,msgr_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Attribute_Two,,,Attribute_One,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
pragma,non_initialised,,,,,,,
pragmaitem,"",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"1",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Report_Data,RD,5,,,,,
attribute,Report_Data_Unique_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Reported_Domain_Number,,,Report_Data_Unique_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Singleton_Glitch_Recovery,SGR,21,,,,,
attribute,sgr_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,An_Integer,,,sgr_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,A_Boolean,,,An_Integer,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,A_Real,,,A_Boolean,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Environment,,,A_Real,,,,
typeref,Environment_Type,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
pragma,singleton,,,,,,,
pragmaitem,"",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
pragma,non_initialised,,,,,,,
pragmaitem,"",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, This object shall define several attributes%2C each to be stored in non-initialised memory for so called "glitch recovery". This is a singleton object.%0A,,,,,,,
object,,,,,,,,
object,Single_Tagged_Object,STO,11,,,,,
attribute,Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Attribute_One,,,Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
pragma,singleton,,,,,,,
pragmaitem,"1",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Subtype_1,SUB_ONE,19,,,,,
attribute,Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R4,,,,Unique_Identifier,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Subtype_1_Data,,,Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"2",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Subtype_2,SUB_TWO,20,,,,,
attribute,Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R4,,,,Unique_Identifier,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Subtype_2_Data,,,Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Tagged_Many_Left,TM_LEFT,15,,,,,
attribute,Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Attribute_One,,,Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"3",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Tagged_Many_Right,TM_RIGHT,16,,,,,
attribute,Other_Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Attribute_Two,,,Other_Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"3",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Tagged_Many_Supertype,TAG_SUPER,18,,,,,
attribute,Unique_Identifier,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Supertype_Data,,,Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"1",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Tagged_Single_Assoc,TS_ASSOC,17,,,,,
attribute,Assoc_Unique_Identifier,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Unique_Identifier,preferred,,Assoc_Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R3,,has,Tagged_Many_Left,Unique_Identifier,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Other_Unique_Identifier,preferred,,Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
referential,R3,,has,Tagged_Many_Right,Other_Unique_Identifier,,,
referential,,,,,,,,
attribute,,,,,,,,
attribute,Attribute_Three,,,Other_Unique_Identifier,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
pragma,multiple,,,,,,,
pragmaitem,"9",,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
object,,,,,,,,
object,Test_Data,TD,7,,,,,
attribute,td_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Number,,,td_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Environment,,,Number,,,,
typeref,Environment_Type,,,,,,,
typeref,,,,,,,,
description, Defines the operational environment.%0A,,,,,,,
attribute,,,,,,,,
operation,TAGS,Test_Data,public,Call_Tagged_Terminators,,,1,
parameter,Two_Tags_Result,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
codeblock,Output_From_One = 0%0AInput_To_One    = 99%0A%0AOutput_From_Two = 0%0AInput_To_Two    = 99%0A%0A# Call Two tagged handcoded terminators in this bridge%0A%0A[Output_From_One] = TT2:A_Tagged_Dummy_Terminator_One[Input_To_One]%0A%0A[Output_From_Two] = TT4:A_Tagged_Dummy_Terminator_Two[Input_To_Two]%0A%0Aif Output_From_One = Input_To_One or \%0A   Output_From_Two = Input_To_Two then%0A%0A   Two_Tags_Result = FALSE%0Aelse%0A   Two_Tags_Result = TRUE%0Aendif%0A,,,,,,,
codeblock,,,,,,,,
operation,,,,,,,,
state,,Test_Data,Idle,,1,,,
state,,,,,,,,
state,,Test_Data,Tests_Complete,terminal,2,,,
codeblock,[] = TAGS3::Delete_Report_Domain[]%0A%0Adelete this%0A,,,,,,,
codeblock,,,,,,,,
state,,,,,,,,
event,Tests_Are_Over,,1,,,,,
event,,,,,,,,
transitiontable,,,,,,,,
transition,Non_Existent,,,Tests_Are_Over,Cannot_Happen,,,
transition,,,,,,,,
transition,Idle,,,Tests_Are_Over,Tests_Complete,,,
transition,,,,,,,,
transition,Tests_Complete,,,Tests_Are_Over,Cannot_Happen,,,
transition,,,,,,,,
transitiontable,,,,,,,,
object,,,,,,,,
pragma,version,,,,,,,
pragmaitem,7,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Bodges? We don need no stinkin bodges!%0A,,,,,,,
domain,,,,,,,,
