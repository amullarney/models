domain,OAIBONE,Open Architecture Internal Bridge Domain One,,,,,,
object,Report_Data,,,,,,,
object,,,,,,,,
object,Source_Bridge_Data,,,,,,,
object,,,,,,,,
object,Test_Data,,,,,,,
object,,,,,,,,
object,Very_Simple_Data_Object,,,,,,,
object,,,,,,,,
type,Pos,private,integer,,,,,
range,1,10,,,,,,
range,,,,,,,,
type,,,,,,,,
type,VSD_Struct,public,,,,,,
structure,VSD_Struct,,,,,,,
member,Ref_Type,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
member,Int_Type,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
member,Real_Type,,,,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
structure,,,,,,,,
type,,,,,,,,
type,Structure_Of_UDTs,public,,,,,,
structure,Structure_Of_UDTs,,,,,,,
member,The_Range,,,,,,,
typeref,Pos,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
structure,,,,,,,,
type,,,,,,,,
type,Colour_Type,public,,,,,,
enumeration,Colour_Type,,,,,,,
enumerator,Red,,,,,,,
enumerator,,,,,,,,
enumerator,Green,,,,,,,
enumerator,,,,,,,,
enumerator,Blue,,,,,,,
enumerator,,,,,,,,
enumeration,,,,,,,,
type,,,,,,,,
type,Source_Structure_Type,public,,,,,,
structure,Source_Structure_Type,,,,,,,
member,Source_Integer,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
member,Source_Real,,,,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
member,Source_Text,,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
member,Source_Boolean,,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
member,Source_Colour,,,,,,,
typeref,Colour_Type,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
structure,,,,,,,,
type,,,,,,,,
type,IH_Struct,public,,,,,,
structure,IH_Struct,,,,,,,
member,The_VSD_IH,,,,,,,
typeref,instance of Very_Simple_Data_Object,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
structure,,,,,,,,
type,,,,,,,,
type,Very_Simple_Structure_Type,public,,,,,,
structure,Very_Simple_Structure_Type,,,,,,,
member,Simple_Integer,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
member,Simple_Real,,,,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
member,,,,,,,,
structure,,,,,,,,
type,,,,,,,,
routine,OAIBONE,,private,First_Set_of_Tests,2,,,
codeblock,my_test = find-one Test_Data%0A%0A# Define a local data structure to be passed via a bridge%0A# into a destination domain.%0A%0A{Source_Structure_One}   is Source_Structure_Type%0A{Source_Structure_Two}   is Source_Structure_Type%0A{Source_Structure_Three} is Source_Structure_Type%0A%0A{Returned_Structure_1}   is Source_Structure_Type%0A{Returned_Structure_2}   is Source_Structure_Type%0A{Returned_Structure_3}   is Source_Structure_Type%0A%0ATest = my_test.This_Test_Number%0A%0A#--------------------------------------------------------------------------%0A# Test 1%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C"Null Requid"%2C "OAIBONE"%2C "Scenario"%2C "Send 1 structure to bridge"]%0A%0A   Object_One = create Source_Bridge_Data with Reference   = Test    &\%0A                                               The_Integer = 1       &\%0A                                               The_Real    = 2.0     &\%0A                                               The_String  = "three" &\ %0A                                               The_Colour  = 'Red'   &\%0A                                               The_Boolean = FALSE%0A%0A   append [Object_One.The_Integer%2C \%0A           Object_One.The_Real%2C    \%0A           Object_One.The_String%2C  \%0A           Object_One.The_Boolean%2C \%0A           Object_One.The_Colour]   to {Source_Structure_One}%0A%0A   Elements_In_Structure = 1%0A%0A   # Pass this lot into the bridge.%0A   Result = FALSE%0A%0A   [Result%2C {Returned_Structure_1} ] = IITGWO1:Across_The_Great_Divide[Test%2C                   \%0A                                                                      {Source_Structure_One}%2C \%0A                                                                      Object_One.The_Integer%2C \%0A                                                                      Object_One.The_Real%2C    \%0A                                                                      Object_One.The_String%2C  \%0A                                                                      Object_One.The_Colour%2C  \%0A                                                                      Object_One.The_Boolean%2C \%0A                                                                      Elements_In_Structure]%0A%0A   if Result = TRUE then%0A      [] = RPT2:Test_Passed["OAIBONE Source 1 Structure sent"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["OAIBONE Source 1 Structure sent"%2C Test%2C -1]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A# Test 2%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C"Null Requid"%2C "OAIBONE"%2C "Scenario"%2C "Send 2 structures to bridge"]%0A%0A   Object_Two = create Source_Bridge_Data with Reference   = Test   &\%0A                                               The_Integer = 4      &\%0A                                               The_Real    = 5.0    &\%0A                                               The_String  = "six"  &\%0A                                               The_Colour  = 'Blue' &\%0A                                               The_Boolean = TRUE%0A%0A   append [Object_One.The_Integer%2C \%0A           Object_One.The_Real%2C    \%0A           Object_One.The_String%2C  \%0A           Object_One.The_Boolean%2C \%0A           Object_One.The_Colour    ]   to {Source_Structure_Two}%0A%0A%0A   append [Object_Two.The_Integer%2C \%0A           Object_Two.The_Real%2C    \%0A           Object_Two.The_String%2C  \%0A           Object_Two.The_Boolean%2C \%0A           Object_Two.The_Colour   ]   to {Source_Structure_Two}%0A%0A%0A   Elements_In_Structure = 2%0A%0A   # Pass this lot into the bridge.%0A   Result = FALSE%0A%0A   [Result%2C {Returned_Structure_2} ] = IITGWO1:Across_The_Great_Divide[Test%2C                   \%0A                                                                      {Source_Structure_Two}%2C \%0A                                                                      Object_Two.The_Integer%2C \%0A                                                                      Object_Two.The_Real%2C    \%0A                                                                      Object_Two.The_String%2C  \%0A                                                                      Object_Two.The_Colour%2C  \%0A                                                                      Object_Two.The_Boolean%2C \%0A                                                                      Elements_In_Structure]%0A%0A   if Result = TRUE then%0A      [] = RPT2:Test_Passed["OAIBONE Source 2 Structures sent"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["OAIBONE Source 2 Structures sent"%2C Test%2C -1]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 2%0A%0A#--------------------------------------------------------------------------%0A# Test 3%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C"Null Requid"%2C "OAIBONE"%2C "Scenario"%2C "Send 3 structures to bridge"]%0A%0A   Object_Three = create Source_Bridge_Data with Reference   = Test   &\%0A                                                 The_Integer = 7      &\%0A                                                 The_Real    = 8.0    &\%0A                                                 The_String  = "nine" &\%0A                                                 The_Colour  = 'Blue' &\%0A                                                 The_Boolean = TRUE%0A%0A   append [Object_One.The_Integer%2C \%0A           Object_One.The_Real%2C    \%0A           Object_One.The_String%2C  \%0A           Object_One.The_Boolean%2C \%0A           Object_One.The_Colour  ]   to {Source_Structure_Three}%0A%0A   append [Object_Two.The_Integer%2C \%0A           Object_Two.The_Real%2C    \%0A           Object_Two.The_String%2C  \%0A           Object_Two.The_Boolean%2C \%0A           Object_Two.The_Colour   ]   to {Source_Structure_Three}%0A%0A   append [Object_Three.The_Integer%2C \%0A           Object_Three.The_Real%2C    \%0A           Object_Three.The_String%2C  \%0A           Object_Three.The_Boolean%2C \%0A           Object_Three.The_Colour  ]   to {Source_Structure_Three}%0A%0A   Elements_In_Structure = 3%0A%0A   # Pass this lot into the bridge.%0A   Result = FALSE%0A%0A   [Result%2C {Returned_Structure_3} ] = IITGWO1:Across_The_Great_Divide[Test%2C                     \%0A                                                                      {Source_Structure_Three}%2C \%0A                                                                      Object_Three.The_Integer%2C \%0A                                                                      Object_Three.The_Real%2C    \%0A                                                                      Object_Three.The_String%2C  \ %0A                                                                      Object_Three.The_Colour%2C  \%0A                                                                      Object_Three.The_Boolean%2C \%0A                                                                      Elements_In_Structure]%0A%0A   if Result = TRUE then%0A      [] = RPT2:Test_Passed["OAIBONE Source 3 Structures sent"%2C Test%2C 0]%0A   else%0A      [] = RPT3:Test_Failed["OAIBONE Source 3 Structures sent"%2C Test%2C -1]%0A   endif%0A%0A   Test = Test + 1%0A%0A# End Test 3%0A%0A#--------------------------------------------------------------------------%0A# Test 4%0A#--------------------------------------------------------------------------%0A%0A   # [] = RPT1:Start_Test[Test%2C"Null Requid"%2C "OAIBONE"%2C "Scenario"%2C "Struct IH to bridge"]%0A%0A   # {Decomposed_Struct} is VSD_Struct%0A%0A   # ValA = 0%0A   # ValB = 0%0A   # ValC = 0%0A   # ValD = 0%0A%0A   # Simple_ObjA = create Very_Simple_Data_Object with Object_Reference_VSD  = 1 &\%0A                                                     # Object_Simple_Integer = 1 &\%0A                                                     # Object_Simple_Real    = 1.0%0A%0A   # Simple_ObjB = create Very_Simple_Data_Object with Object_Reference_VSD  = 2 &\%0A                                                     # Object_Simple_Integer = 2 &\%0A                                                     # Object_Simple_Real    = 2.0%0A%0A   # Simple_ObjC = create Very_Simple_Data_Object with Object_Reference_VSD  = 3 &\%0A                                                     # Object_Simple_Integer = 3 &\%0A                                                     # Object_Simple_Real    = 3.0%0A%0A   # [{Decomposed_Struct}] = IITGWO4:The_IH_Struct_Across_Bridge[Simple_ObjA%2C Simple_ObjB%2C Simple_ObjC]%0A%0A   # for [A_Ref%2C A_Int%2C A_Real] in {Decomposed_Struct} do%0A%0A      # if A_Ref = 1 then%0A  %0A         # if A_Int = 1 then%0A%0A            # if A_Real = 1.0 then%0A               # ValA = 10%0A            # else%0A               # ValA = -10%0A            # endif%0A%0A         # else%0A            # ValA = -11%0A         # endif%0A%0A      # else%0A%0A         # if A_Ref = 2 then%0A     %0A            # if A_Int = 2 then%0A%0A               # if A_Real = 2.0 then%0A                  # ValB = 20%0A               # else%0A                  # ValB = -20%0A               # endif%0A%0A            # else%0A               # ValB = -21%0A            # endif%0A%0A         # else%0A%0A            # if A_Ref = 3 then%0A%0A               # if A_Int = 3 then%0A%0A                  # if A_Real = 3.0 then%0A                     # ValC = 30%0A                  # else%0A                     # ValC = -3%0A                  # endif%0A%0A               # else%0A                  # ValC = -31%0A               # endif%0A%0A            # else%0A               # ValD = -40%0A            # endif%0A%0A         # endif%0A%0A      # endif%0A%0A   # endfor%0A%0A%0A   # if ValA = 10 and ValB = 20 and ValC = 30 and ValD = 0 then%0A      # [] = RPT2:Test_Passed["OAIBONE Struct IH to bridge"%2C Test%2C 0]%0A   # else%0A      # [] = RPT3:Test_Failed["OAIBONE Struct IH to bridge"%2C Test%2C -10]%0A   # endif%0A%0A   # Test = Test + 1%0A%0A# End Test 4%0A%0A#--------------------------------------------------------------------------%0A%0Amy_test.This_Test_Number = Test,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,2,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, First Set of Tests%0A,,,,,,,
routine,,,,,,,,
routine,OAIBONE,,private,Initial_Call_to_Domain_Two,3,,,
codeblock,my_test = find-one Test_Data%0A%0ATest = my_test.This_Test_Number%0A%0A#--------------------------------------------------------------------------%0A# Test 1 - Define a local data structure to be passed via a bridge into a %0A#          destination domain%0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C"Null Requid"%2C "OAIBONE"%2C "Scenario3"%2C "Send 1 v simple structure to SBTWO"]%0A%0A   {Source_Structure_One}   is Very_Simple_Structure_Type%0A%0A   My_Simple_Integer = 10%0A   My_Simple_Real    = 20.0%0A%0A   count = 1%0A%0A   loop%0A%0A      My_Simple_Integer = My_Simple_Integer * count%0A%0A      append [My_Simple_Integer%2C My_Simple_Real] to {Source_Structure_One}%0A%0A      breakif count = 5%0A%0A      count = count + 1%0A%0A   endloop%0A%0A   # Pass this lot into the bridge.%0A   [] = RPT2:Test_Passed["OAIBONE Send a simple structure"%2C Test%2C My_Simple_Integer]%0A%0A   [] = IITGWO2:Wide_Blue_Yonder [Test%2C {Source_Structure_One}]%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0A#--------------------------------------------------------------------------%0A%0Amy_test.This_Test_Number = Test,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,3,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Initial Call to Domain Two%0A,,,,,,,
routine,,,,,,,,
routine,OAIBONE,,private,Start_OAIBONE_Tests,4,,,
codeblock,my_test = create Test_Data with This_Test_Number = 1%0A%0A[] = OAIBONE2::Create_Report_Data[]%0A,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,4,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Start_OAIBONE_Tests%0A,,,,,,,
routine,,,,,,,,
routine,OAIBONE,,private,Finish_OAIBONE_Tests,5,,,
codeblock,[] = OAIBONE3::Delete_Report_Data[]%0A%0Amy_test = find-one Test_Data%0A%0Adelete my_test,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,5,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Finish_OAIBONE_Tests%0A,,,,,,,
routine,,,,,,,,
routine,OAIBONE,,private,Send_To_Bridge,1,,,
codeblock,my_test = find-one Test_Data%0A%0ATest = my_test.This_Test_Number%0A%0A#--------------------------------------------------------------------------%0A# Test 1 - %0A#--------------------------------------------------------------------------%0A%0A   [] = RPT1:Start_Test[Test%2C"Null Requid"%2C "OAIBONE"%2C "Scenario"%2C "Send structure to SBTWO"]%0A%0A   {The_Source_Structure}   is Structure_Of_UDTs%0A%0A   Source_Value = 2%0A%0A   append [Source_Value] to {The_Source_Structure}%0A%0A   [] = IITGWO3:Test_Structure_In_Bridge [Test%2C {The_Source_Structure}]%0A%0A   Test = Test + 1%0A%0A# End Test 1%0A%0Amy_test.This_Test_Number = Test,,,,,,,
codeblock,,,,,,,,
pragma,scenario,,,,,,,
pragmaitem,1,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
description, Send_To_Bridge%0A,,,,,,,
routine,,,,,,,,
routine,OAIBONE,,public,Receive_A_Very_Simple_Structure,1,,,
parameter,Received_Very_Simple_Structure,in,,,,,,
typeref,Very_Simple_Structure_Type,,,,,,,
typeref,,,,,,,,
parameter,Received_Control_Integer,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Received_Control_Real,in,,,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
parameter,Received_Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,%0A[] = RPT1:Start_Test[Received_Test%2C "Null Requid"%2C "OAIBONE"%2C "DBSS rx a structure"%2C "rx structure and create simple object"]%0A%0AVSD_One = create Very_Simple_Data_Object with Object_Reference_VSD = Received_Test%0A%0A# For the purposes of this simple test%2C we are assuming that there is%0A# only one structure in the set.%0A%0Afor [Local_Integer%2C Local_Real] in {Received_Very_Simple_Structure} do%0A%0A   VSD_One.Object_Simple_Integer = Local_Integer%0A   VSD_One.Object_Simple_Real    = Local_Real%0A%0Aendfor%0A%0Aif VSD_One.Object_Simple_Integer = Received_Control_Integer & \%0A   VSD_One.Object_Simple_Real    = Received_Control_Real then%0A%0A   [] = RPT2:Test_Passed["OAIBONE rx structure"%2C Received_Test%2C 0]%0Aelse%0A   [] = RPT3:Test_Failed["OAIBONE rx structure"%2C Received_Test%2C -1]%0Aendif%0A%0A%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,OAIBONE,,public,Create_Report_Data,2,,,
codeblock,# Find out of there already is one of these.%0A# It is not inconceivable that a report object still exists from a previous run.%0A# Report objects are not deleted at the end of a run%2C as certain events may%0A# still be en-queued.%0A%0Aold_report = find-one Report_Data%0A%0Aif old_report != UNDEFINED then%0A   delete old_report%0Aendif%0A%0AMy_Report = create unique Report_Data with Reported_Domain_Number = 0%0A%0A[] = RPT6:Domain_Test_Start["OA Internal Bridge Domain One"]%0A,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,OAIBONE,,public,Delete_Report_Data,3,,,
codeblock,[] = RPT7:Domain_Test_Finished["OA Internal Bridge Domain One"]%0A%0A# Do not delete the Report_Data object%2C as there may be still events in%0A# the queue.,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,OAIBONE,,public,Append_IH_To_Struct,4,,,
parameter,The_IH,in,,,,,,
typeref,instance of Very_Simple_Data_Object,,,,,,,
typeref,,,,,,,,
parameter,Returning_Struct,out,,,,,,
typeref,IH_Struct,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,append [The_IH] to {Returning_Struct},,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
terminator,I_Into_The_Great_Wide_Open,IITGWO,,,,,,
routine,OAIBONE,,public,Across_The_Great_Divide,1,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,A_Structure_To_Send,in,,,,,,
typeref,Source_Structure_Type,,,,,,,
typeref,,,,,,,,
parameter,Control_Integer,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Control_Real,in,,,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
parameter,Control_String,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Control_Enum,in,,,,,,
typeref,Colour_Type,,,,,,,
typeref,,,,,,,,
parameter,Control_Boolean,in,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,Elements_In_Structure,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Result,out,,,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
parameter,A_Structure_To_Return,out,,,,,,
typeref,Source_Structure_Type,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
codeblock,# Receive a structure and the control data from the other domain.%0A%0A%0A{Copied_Structure} is Source_Structure_Type%0A%0A%0A[] = RPT1:Start_Test[Test%2C "null requid"%2C "Local Source Structure Bridge"%2C "Use local defn of bridge"%2C "Decode received structure"]%0A%0AHas_Passed = FALSE%0AFailure_Code = 0%0A%0AHow_Many_Sets = countof{A_Structure_To_Send}%0A%0A%0Aif How_Many_Sets = Elements_In_Structure then%0A%0A   Count = 1%0A%0A   for [local_integer%2C local_real%2C local_string%2C local_boolean%2C local_colour] in {A_Structure_To_Send} do%0A%0A      # Copy the contents into a locally defined structure.%0A      append [local_integer%2C local_real%2C local_string%2C local_boolean%2C local_colour] to {Copied_Structure}%0A%0A      # Look at the last entry only.%0A      if Count = How_Many_Sets then %0A%0A         if local_integer = Control_Integer then%0A%0A            if local_real = Control_Real then%0A%0A               if local_string = Control_String then%0A%0A                  if local_colour = Control_Enum then%0A%0A                     if local_boolean = Control_Boolean then%0A%0A                        Has_Passed = TRUE%0A                        [] = RPT2:Test_Passed ["Local Structure correctly received"%2C Test%2C 0]%0A%0A                     else%0A                        # Boolean incorrectly decoded%0A                        Has_Passed = TRUE%0A                        Failure_Code = -6%0A                     endif%0A%0A                  else%0A                     # Enumeration incorrectly decoded%0A                     Has_Passed = FALSE%0A                     Failure_Code = -5%0A                  endif%0A%0A               else%0A                  # String incorrectly decoded%0A                  Has_Passed = FALSE%0A                  Failure_Code = -4%0A               endif%0A%0A            else%0A               # Real incorrectly decoded%0A               Has_Passed = FALSE%0A               Failure_Code = -3%0A            endif%0A%0A         else%0A            # Integer incorrectly decoded%0A            Has_Passed = FALSE%0A            Failure_Code = -2%0A         endif%0A%0A      else%0A         # Not interested in this entry. Control data will only match up with the %0A         # last entry in the set.%0A         Count        = Count + 1%0A         Has_Passed   = FALSE%0A         Failure_Code = 0%0A      endif%0A%0A   # Loop around the entries in the set of structures.%0A   endfor%0A%0Aelse%0A   # Conflict in the number of sets found and the number%0A   # specified by the source domain.%0A   Has_Passed = FALSE%0A   Failure_Code = -1%0Aendif%0A%0Aif Has_Passed = FALSE then%0A   [] = RPT3:Test_Failed["Local Structure corrupted"%2C Test%2C Failure_Code]%0Aendif%0A%0AResult = Has_Passed,,,,,,,
codeblock,,,,,,,,
routine,,,,,,,,
routine,OAIBONE,,public,Wide_Blue_Yonder,2,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Simple_Source_Structure,in,,,,,,
typeref,Very_Simple_Structure_Type,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,OAIBONE,,public,Test_Structure_In_Bridge,3,,,
parameter,Test,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Input_Structure,in,,,,,,
typeref,Structure_Of_UDTs,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,OAIBONE,,public,The_IH_Struct_Across_Bridge,4,,,
parameter,The_IHA,in,,,,,,
typeref,instance of Very_Simple_Data_Object,,,,,,,
typeref,,,,,,,,
parameter,The_IHB,in,,,,,,
typeref,instance of Very_Simple_Data_Object,,,,,,,
typeref,,,,,,,,
parameter,The_IHC,in,,,,,,
typeref,instance of Very_Simple_Data_Object,,,,,,,
typeref,,,,,,,,
parameter,Decomposed_Struct,out,,,,,,
typeref,VSD_Struct,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
terminator,Report,RPT,,,,,,
routine,OAIBONE,,public,Start_Test,1,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Requid,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Invoking_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Purpose,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,OAIBONE,,public,Test_Passed,2,,,
parameter,Test_Object_Domain,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Test_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,OAIBONE,,public,Test_Failed,3,,,
parameter,Failed_Domain_Object,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,Failed_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Failed_Test_Value,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,OAIBONE,,public,Test_Unsupported,4,,,
parameter,Unsupported_Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,OAIBONE,,public,Test_Text,5,,,
parameter,Test_Number,in,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
parameter,Free_Text,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,OAIBONE,,public,Domain_Test_Start,6,,,
parameter,This_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
routine,OAIBONE,,public,Domain_Test_Finished,7,,,
parameter,This_Domain_Name,in,,,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
parameter,,,,,,,,
routine,,,,,,,,
terminator,,,,,,,,
object,Report_Data,RD,4,,,,,
attribute,Report_Data_Unique_id,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Reported_Domain_Number,,,Report_Data_Unique_id,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Source_Bridge_Data,SBD,2,,,,,
attribute,Reference,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,The_Integer,,,Reference,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,The_Real,,,The_Integer,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,The_String,,,The_Real,,,,
typeref,string,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,The_Colour,,,The_String,,,,
typeref,Colour_Type,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,The_Boolean,,,The_Colour,,,,
typeref,boolean,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Test_Data,TD,5,,,,,
attribute,This_Test_Number,,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
object,Very_Simple_Data_Object,VSD,3,,,,,
attribute,Object_Reference_VSD,preferred,,,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Object_Simple_Integer,,,Object_Reference_VSD,,,,
typeref,integer,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
attribute,Object_Simple_Real,,,Object_Simple_Integer,,,,
typeref,real,,,,,,,
typeref,,,,,,,,
attribute,,,,,,,,
object,,,,,,,,
pragma,version,,,,,,,
pragmaitem,2,,,,,,,
pragmaitem,,,,,,,,
pragma,,,,,,,,
domain,,,,,,,,
